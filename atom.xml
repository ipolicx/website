<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-07-12T09:30:58.040Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Front-matter</title>
    <link href="https://www.policx.com/2019/07/11/Front-matter/"/>
    <id>https://www.policx.com/2019/07/11/Front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-12T09:30:58.040Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/2019/07/11/20190711194445/"/>
    <id>https://www.policx.com/2019/07/11/20190711194445/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-11T04:28:06.224Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="http://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/%E8%8C%83%E5%BC%8F%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/%E8%8C%83%E5%BC%8F%E8%BD%AC%E6%8D%A2</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/2019/07/05/BitTorrent/"/>
    <id>https://www.policx.com/2019/07/05/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-08T15:20:42.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/2019/07/04/partner/"/>
    <id>https://www.policx.com/2019/07/04/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-12T09:50:03.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/2019/06/18/harddisk/"/>
    <id>https://www.policx.com/2019/06/18/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-08T15:20:35.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/2019/06/05/2019/"/>
    <id>https://www.policx.com/2019/06/05/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-12T09:40:14.384Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/2019/05/01/netlify/"/>
    <id>https://www.policx.com/2019/05/01/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-09T14:42:24.647Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。</p><div id="bushu"></div># 部署进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。接下来我分步骤的跟大家来介绍我的部署方案。<h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/2019/05/01/hexo-theme-icarus/"/>
    <id>https://www.policx.com/2019/05/01/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-09T14:25:12.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><ul><li>原文链接—&gt; <a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">easyhexo.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="https://www.policx.com/2018/09/17/git-del/"/>
    <id>https://www.policx.com/2018/09/17/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-07T04:27:26.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://www.policx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="https://www.policx.com/2018/06/19/python-excel/"/>
    <id>https://www.policx.com/2018/06/19/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-07T04:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="https://www.policx.com/2018/06/17/python-writer/"/>
    <id>https://www.policx.com/2018/06/17/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-07T04:36:07.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="https://www.policx.com/2018/06/05/2018/"/>
    <id>https://www.policx.com/2018/06/05/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-12T10:08:35.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="/post-images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymongo/"/>
    <id>https://www.policx.com/2018/05/02/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-07T04:35:29.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://www.policx.com/2018/05/02/mongodb/"/>
    <id>https://www.policx.com/2018/05/02/mongodb/</id>
    <published>2018-05-02T06:11:11.000Z</published>
    <updated>2019-07-12T09:59:16.906Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。</p><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库。</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。通常情况下，在一个集合中的所有文件都是类似或相关目的。</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。<br>下面给出的示例显示了一个博客网站，仅仅是一个逗号分隔的键值对的文档结构。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorial&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,20,2,15),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My second comments&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,25,7,45),</span><br><span class="line">         like: 5</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>MongoDB use DATABASE_NAME 用于创建数据库。该命令如果数据库不存在，将创建一个新的数据库， 否则将返回现有的数据库。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>use DATABASE语句的基本语法如下：<br><code>use DATABASE_NAME</code></p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">如果想创建一个数据库名称为 &lt;mydb&gt;, 那么 use DATABASE 语句应该如下：</span><br><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line"></span><br><span class="line">要检查当前选择的数据库使用命令 db</span><br><span class="line">&gt;db</span><br><span class="line">mydb</span><br><span class="line"></span><br><span class="line">如果想查询数据库列表，那么使用命令 show dbs.</span><br><span class="line">&gt;show dbs</span><br><span class="line">local     0.78125GB</span><br><span class="line">test      0.23012GB</span><br><span class="line"></span><br><span class="line">所创建的数据库（mydb）不存在于列表中。要显示的数据库，需要至少插入一个文档进去。</span><br><span class="line">&gt;db.movie.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;)</span><br><span class="line">&gt;show dbs</span><br><span class="line">local      0.78125GB</span><br><span class="line">mydb       0.23012GB</span><br><span class="line">test       0.23012GB</span><br></pre></td></tr></table></figure><p>MongoDB的默认数据库是test。 如果没有创建任何数据库，那么集合将被保存在测试数据库。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>MongoDB db.dropDatabase() 命令用于删除现有的数据库。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>dropDatabase()指令的基本语法如下：<br><code>db.dropDatabase()</code></p><p>这将删除选定的数据库。如果没有选择任何数据库，那么它会删除默认的“test”数据库</p><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>如果想删除新的数据库 <mydb>, 那么 dropDatabase() 命令将如下所示：</mydb></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;&#123; &quot;dropped&quot; : &quot;mydb&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>MongoDB 的 db.createCollection(name, options) 用于创建集合。 在命令中, name 是要创建集合的名称。 Options 是一个文档，用于指定集合的配置</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>String</td><td>要创建的集合的名称</td></tr><tr><td>Options</td><td>Document</td><td>（可选）指定有关内存大小和索引选项</td></tr></tbody></table><p>选项参数是可选的，所以需要指定集合的唯一名字。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>createCollection()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt;db.createCollection(&quot;mycollection&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以通过使用 show collections 命令来检查创建的集合</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;show collections</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><h3 id="选项列表"><a href="#选项列表" class="headerlink" title="选项列表"></a>选项列表</h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。</td></tr><tr><td>autoIndexID</td><td>Boolean</td><td>（可选）如果为true，自动创建索引_id字段。默认的值是 false.</td></tr><tr><td>size</td><td>number</td><td>（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。</td></tr><tr><td>max</td><td>number</td><td>（可选）指定上限集合允许的最大文件数。</td></tr></tbody></table><p>尽管插入文档，MongoDB首先检查字段集合的上限大小，那么它会检查最大字段。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法 :"></a>语法 :</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexID : true, size : 6142800, max : 10000 &#125; )</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.yiibai.insert(&#123;&quot;name&quot; : &quot;yiibai&quot;&#125;)</span><br><span class="line">&gt;show collections</span><br><span class="line">mycol</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br><span class="line">yiibai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>MongoDB 的 db.collection.drop() 用于从数据库中删除集合。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>drop() 命令的基本语法如下<br><code>db.COLLECTION_NAME.drop()</code></p><h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>下面给出的例子将删除给定名称的集合：mycollection</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.mycollection.drop()</span><br><span class="line">true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p>将数据插入到MongoDB集合，需要使用MongoDB 的 insert() 方法。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>insert()命令的基本语法如下：<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.insert(&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c),</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里 mycol 是我们的集合名称，它是在之前的教程中创建。如果集合不存在于数据库中，那么MongoDB创建此集合，然后插入文档进去。</p><p>在如果我们不指定_id参数插入的文档，那么 MongoDB 将为文档分配一个唯一的ObjectId。</p><p>_id 是12个字节十六进制数在一个集合的每个文档是唯一的。 12个字节被划分如下：<br>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</p><p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.post.insert([</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;NoSQL Database&apos;, </span><br><span class="line">   description: &apos;NoSQL database doesn&apos;t have tables&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 20, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p>要从集合查询MongoDB数据，需要使用MongoDB的 find()方法。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find()</code><br>find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p><code>&gt;db.mycol.find().pretty()</code></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>除了find()方法还有findOne()方法，仅返回一个文档。</p><h3 id="RDBMS-Where子句等效于MongoDB"><a href="#RDBMS-Where子句等效于MongoDB" class="headerlink" title="RDBMS Where子句等效于MongoDB"></a>RDBMS Where子句等效于MongoDB</h3><p>查询文档在一些条件的基础上，可以使用下面的操作</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>Equality</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td>db.mycol.find({“by”:”yiibai tutorials”}).pretty()</td><td>where by = ‘yiibai tutorials’</td></tr><tr><td>Less Than</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>Less Than Equals</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>Greater Than</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>Greater Than Equals</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>Not Equals</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="AND-在-MongoDB"><a href="#AND-在-MongoDB" class="headerlink" title="AND 在 MongoDB"></a>AND 在 MongoDB</h4><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>在 find()方法，如果您传递多个键通过”,”将它们分开，那么MongoDB对待它就如AND条件一样。基本语法如下所示：<br><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有教程含“yiibai tutorials”和其标题是“MongoDB Overview”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;yiibai tutorials&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>对于上面给出的例子相当于where子句：’ where by=’yiibai tutorials’ AND title=’MongoDB Overview’ ‘。可以传递任何数目的键-值对在find子句。</p><h4 id="OR-在-MongoDB"><a href="#OR-在-MongoDB" class="headerlink" title="OR 在 MongoDB"></a>OR 在 MongoDB</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><p>要查询基于OR条件的文件，需要使用$or关键字。OR的基本语法如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有撰写含有 ‘yiibai tutorials’ 或是标题为 ‘MongoDB Overview’ 的教程</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-AND-和-OR-在一起"><a href="#使用-AND-和-OR-在一起" class="headerlink" title="使用 AND 和 OR 在一起"></a>使用 AND 和 OR 在一起</h4><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子显示有喜欢数大于100 的文档，其标题要么是 ‘MongoDB Overview’ 或 ‘yiibai tutorials’. 等效于SQL的where子句：’where likes&gt;10 AND (by = ‘yiibai tutorials’ OR title = ‘MongoDB Overview’)’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai tutorials&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>MongoDB的update()和save()方法用于更新文档到一个集合。 update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。</p><h4 id="MongoDB-Update-方法"><a href="#MongoDB-Update-方法" class="headerlink" title="MongoDB Update() 方法"></a>MongoDB Update() 方法</h4><h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><p>update()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br></pre></td></tr></table></figure><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将设置其标题“MongoDB Overview”的文件为新标题为“New MongoDB Tutorial”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Tutorial Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 ‘multi’ 设置为 true。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="MongoDB-Save-方法"><a href="#MongoDB-Save-方法" class="headerlink" title="MongoDB Save() 方法"></a>MongoDB Save() 方法</h4><p>save() 方法取代，通过新文档到 save()方法</p><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><p>mongodb 的 save()方法如下所示的基本语法：<br><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><p>下面的例子将替换该文件_id ‘5983548781331adf45ec7’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.save(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>MongoDB 的 remove()方法用于从集合中删除文档。remove()方法接受两个参数。一个是标准缺失，第二是justOne标志<br>deletion criteria : 根据文件（可选）删除条件将被删除。<br>justOne : （可选）如果设置为true或1，然后取出只有一个文档。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>remove()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p><h6 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h6><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将删除所有的文件，其标题为 ‘MongoDB Overview’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Toturials Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="只删除一个"><a href="#只删除一个" class="headerlink" title="只删除一个"></a>只删除一个</h5><p>如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。<br><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p><h5 id="删除所有文件"><a href="#删除所有文件" class="headerlink" title="删除所有文件"></a>删除所有文件</h5><p>如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove()</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="MongoDB投影"><a href="#MongoDB投影" class="headerlink" title="MongoDB投影"></a>MongoDB投影</h4><p>mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。</p><p>MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。</p><p>语法</p><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find({},{KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示文档的标题，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意在执行find()方法时_id字段始终显示，如果不想要显示这个字段，那么需要将其设置为0</p><h5 id="限制文档"><a href="#限制文档" class="headerlink" title="限制文档"></a>限制文档</h5><p>MongoDB Limit() 方法</p><p>要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p>limit()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER)</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将只显示2个文档，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>如果不指定 limit()方法的参数数量，然后它会显示集合中的所有文档。</p><p>MongoDB Skip() 方法</p><p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。</p><p>语法</p><p>skip() 方法的基础语法如下所示：<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p><p>例子：</p><p>下面的例子将仅显示第二个文档。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，skip() 方法的默认值是 0</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p>要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。</p><p>语法</p><p>sort()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().sort({KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有如下数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示的文件排序按标题降序排序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;title&quot;:-1&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果不指定排序类型，那么 sort() 方法将以升序排列文档。</p><h4 id="MongoDB索引"><a href="#MongoDB索引" class="headerlink" title="MongoDB索引"></a>MongoDB索引</h4><p>索引支持查询高效率执行。如果没有索引，MongoDB必须扫描集合中的每一个文档，然后选择那些符合查询语句的文档。若需要 mongod 来处理大量数据，扫描是非常低效的。</p><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。</p><p>要创建索引，需要使用MongoDB的ensureIndex()方法。</p><p>语法</p><p>ensureIndex()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code></p><p>这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.</p><p>例子</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">在 ensureIndex()方法，可以通过多个字段，来创建多个字段索引。</span><br><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法还接受选项列表（这是可选），其列表如下：<br><img src="/post-images/1561132706992.png" alt></p><h4 id="MongoDB-聚合"><a href="#MongoDB-聚合" class="headerlink" title="MongoDB 聚合"></a>MongoDB 聚合</h4><p>聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。 在SQL中的count(*)，使用group by 与mongodb的聚合是等效的。 对于MongoDB的聚合，使用的是aggregate()方法。</p><p>语法</p><p>aggregate()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p><p>例子：</p><p>在集合中有以下数据：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai &apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;, </span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;, </span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;http://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在从上面的集合，如果想知道每一个用户编写的教程是多少，那么使用aggregate()方法，如下图所示的列表：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Yiibai Yiibai&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>用于上述用途将等效于sql查询： select by_user, count(*) from mycol group by by_user</code></pre><p>另外，在上述例子中，我们已经使用字段by_user进行分组并计算总和，也就是by_user 出现各个次数。一个列表中可用的聚集表达式。<br>    <img src="/post-images/1561132965786.png" alt></p><h4 id="MongoDB-复制"><a href="#MongoDB-复制" class="headerlink" title="MongoDB 复制"></a>MongoDB 复制</h4><p>复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。</p><h6 id="为什么要复制？"><a href="#为什么要复制？" class="headerlink" title="为什么要复制？"></a>为什么要复制？</h6><blockquote><pre><code>为了让数据安全数据的高（24*7）可用性灾难恢复无停机维护（如备份，索引重建，压缩）读取缩放（额外的副本来读取）副本集是透明的应用</code></pre></blockquote><h5 id="MongoDB复制的工作原理"><a href="#MongoDB复制的工作原理" class="headerlink" title="MongoDB复制的工作原理"></a>MongoDB复制的工作原理</h5><p>MongoDB通过使用副本集的复制来实现。副本集是一组承载同一个数据集的mongod实例。在副本的一个节点是接收所有的写操作主节点。所有的实例，次级，应用操作从主以便它们具有相同的数据集。副本集只能有一个主节点。</p><blockquote><pre><code>副本集是一组两个或更多个节点（通常至少3节点是必需的）。在副本集一个节点是主节点和其余的节点都是次要的。所有的数据复制是从主到次节点。在自动故障转移或维护时，选建立了主要和一个新的主节点被选择。故障节点的恢复后，再次加入副本集，并可以作为一个辅助节点。</code></pre></blockquote><p>mongodb复制的典型图如下图，其中客户端应用程序总是与主节点和主节点交互，然后将数据复制到辅助节点。<br><img src="/post-images/1561133216694.png" alt><br>副本集特征</p><ul><li>N个节点的集群</li><li>任何节点可为原发/主节点</li><li>所有的写操作进入到主节点</li><li>自动故障转移</li><li>自动恢复</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.policx.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MySQL 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymysql/"/>
    <id>https://www.policx.com/2018/05/02/pymysql/</id>
    <published>2018-05-02T03:14:27.000Z</published>
    <updated>2019-07-07T04:35:38.926Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是-PyMySQL？"><a href="#什么是-PyMySQL？" class="headerlink" title="什么是 PyMySQL？"></a>什么是 PyMySQL？</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><a id="more"></a> <h2 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h2><p>在文件中引入模块</p><p><code>import pymysql</code></p><h3 id="1-Connection对象"><a href="#1-Connection对象" class="headerlink" title="1.Connection对象"></a>1.Connection对象</h3><p>•  用于建立与数据库的连接<br>•  创建对象：调用connect()方法<br>conn=connect(参数列表)<br>•  参数host：连接的mysql主机，如果本机是’localhost’<br>•  参数port：连接的mysql主机的端口，默认是3306<br>•  参数db：数据库的名称<br>•  参数user：连接的用户名<br>•  参数password：连接的密码<br>•  参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</p><h3 id="2-对象的方法"><a href="#2-对象的方法" class="headerlink" title="2.对象的方法"></a>2.对象的方法</h3><p>•  close()关闭连接<br>•  commit()事务，所以需要提交才会生效<br>•  rollback()事务，放弃之前的操作<br>•  cursor()返回Cursor对象，用于执行sql语句并获得结果</p><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><p>•  执行sql语句<br>•  创建对象：调用Connection对象的cursor()方法<br>cursor1=conn.cursor()</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>•  close()关闭<br>•  execute(operation [, parameters ])执行语句，返回受影响的行数<br>•  fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组<br>•  next()执行查询语句时，获取当前行的下一行<br>•  fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回<br>•  scroll(value[,mode])将行指针移动到某个位置<br>•  mode表示移动的方式<br>•  mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动。相对的<br>•  mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0，绝对的。</p><h4 id="举个例子便于理解"><a href="#举个例子便于理解" class="headerlink" title="举个例子便于理解"></a>举个例子便于理解</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 导入python操作mysql的模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> pymysql</span><br><span class="line"><span class="hljs-comment"># 获取连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="hljs-string">'127.0.0.1'</span>, user=<span class="hljs-string">'root'</span>, password=<span class="hljs-string">'123456'</span>, database=<span class="hljs-string">'python01'</span>, port=<span class="hljs-number">3306</span>, charset=<span class="hljs-string">'utf8'</span>)</span><br><span class="line"><span class="hljs-comment"># 获取执行工具</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="hljs-comment"># sql语句,增删改</span></span><br><span class="line"><span class="hljs-comment">#sql = 'select birthday from t_user'</span></span><br><span class="line">sql = <span class="hljs-string">'select id,name,pwd,birthday from t_user'</span></span><br><span class="line"><span class="hljs-comment"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span></span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(<span class="hljs-string">'查询的结果有%s条数据'</span>%count)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取第一行</span></span><br><span class="line">dateOne = cur.fetchone()</span><br><span class="line">print(dateOne)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向上移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向下移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'absolute'</span>)   绝对的，这里指的是第一行</span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'relative'</span>)   相对的</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取所有行的数据</span></span><br><span class="line">dataAll = cur.fetchall()</span><br><span class="line">print(dataAll)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">     print(temp)</span><br><span class="line">     print(dataAll[<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])      <span class="hljs-comment">#dataAll[-1]得到的是一个用户所有的信息，dataAll[-1][2]获取最后一个人的密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> cur:</span><br><span class="line">     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-string">'id:%s,name:%s,pwd:%s,birthday:%s'</span></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">    print(s%(temp[<span class="hljs-number">0</span>],temp[<span class="hljs-number">1</span>],temp[<span class="hljs-number">2</span>],temp[<span class="hljs-number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-对象的属性"><a href="#3-对象的属性" class="headerlink" title="3.对象的属性"></a>3.对象的属性</h3><p>•  rowcount只读属性，表示最近一次execute()执行后受影响的行数<br>•  connection获得当前连接对象</p><h3 id="2-增删改查-CRUD"><a href="#2-增删改查-CRUD" class="headerlink" title="2.增删改查(CRUD)"></a>2.增删改查(CRUD)</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>•  创建testInsert.py文件，向学生表中插入一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;insert into students(sname) values(&apos;张良&apos;)&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p>•  创建testUpdate.py文件，修改学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;update students set sname=&apos;刘邦&apos; where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>•  创建testDelete.py文件，删除学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8 import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;delete from students where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>•  创建testSelectOne.py文件，查询一条学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Pymysql try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>•  创建testSelectMany.py文件，查询全部学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf8 import Pymysql</span><br><span class="line">try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="实例一：参数"><a href="#实例一：参数" class="headerlink" title="实例一：参数"></a>实例一：参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改，sql注入</span><br><span class="line">sql = &apos;insert into t_user(name,pwd,birthday) values(%s,%s,%s)&apos;</span><br><span class="line"># 参数列表</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = input(&apos;输入生日:&apos;)     # 2017年10月01日--&gt;日期struct_time(---&gt;2017-10-01)</span><br><span class="line">birthday = time.strptime(birthday,&apos;%Y年%m月%d日&apos;)      #这里我们就用到了时间与字符串的相互转换(详情见MySQL高级)</span><br><span class="line"></span><br><span class="line">params = [name,pwd,birthday]</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql,params)</span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">print(&apos;受影响的行数:%s&apos;%count)</span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例二：抛出异常"><a href="#实例二：抛出异常" class="headerlink" title="实例二：抛出异常"></a>实例二：抛出异常</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    conn = None</span><br><span class="line">    cur = None</span><br><span class="line">    # 获取连接对象</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">                           user=&apos;root&apos;,</span><br><span class="line">                           password=&apos;123456&apos;,</span><br><span class="line">                           database=&apos;python01&apos;,</span><br><span class="line">                           port=3306,</span><br><span class="line">                           charset=&apos;utf8&apos;)</span><br><span class="line">    # 模拟异常</span><br><span class="line">    # a = 1 / 0</span><br><span class="line">    # 获取执行工具</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    # sql语句,增删改</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd,birthday) values(&quot;小伊&quot;,&quot;123456&quot;,str_to_date(&quot;2017年10月20日&quot;,&quot;%Y年%m月%d日&quot;))&apos;</span><br><span class="line">    # 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">    count = cur.execute(sql)</span><br><span class="line">    # 提交</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(&apos;受影响的行数:%s&apos; % count)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    # 打印异常信息，测试时候使用，项目上线，去掉</span><br><span class="line">    print(str(ex))</span><br><span class="line">    # 将异常继续抛出</span><br><span class="line">    # raise</span><br><span class="line">finally:</span><br><span class="line">    if cur != None:</span><br><span class="line">        cur.close()</span><br><span class="line">    if conn != None:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例三："><a href="#实例三：" class="headerlink" title="实例三："></a>实例三：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改</span><br><span class="line">#sql = &apos;select birthday from t_user&apos;</span><br><span class="line">sql = &apos;select id,name,pwd,birthday from t_user&apos;</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(&apos;查询的结果有%s条数据&apos;%count)</span><br><span class="line"></span><br><span class="line">#获取第一行</span><br><span class="line"># dateOne = cur.fetchone()</span><br><span class="line"># print(dateOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for temp in cur:</span><br><span class="line">#     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;id:%s,name:%s,pwd:%s,birthday:%s&apos;</span><br><span class="line">for temp in dataAll:</span><br><span class="line">    print(s%(temp[0],temp[1],temp[2],temp[3]))</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h3><p>这个库的名字：mySqlHelper</p><p> python操作mysql进行增删改查的封装</p><pre><code>1、增删改，代码类似2、查询代码分析1、获取连接对象2、sql语句不同，参数不同3、获取执行对象    增删改    查询        1、fetchone        2、fetchall4、处理结果5、关闭</code></pre><h4 id="面向对象-建立类，封装属性和函数"><a href="#面向对象-建立类，封装属性和函数" class="headerlink" title="面向对象  建立类，封装属性和函数"></a>面向对象  建立类，封装属性和函数</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">class MysqlHelper:</span><br><span class="line">    &apos;&apos;&apos;python操作mysql的增删改查的封装&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, host, user, password, database, port=3306, charset=&apos;utf8&apos;):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化参数</span><br><span class="line">        :param host:        主机</span><br><span class="line">        :param user:        用户名</span><br><span class="line">        :param password:    密码</span><br><span class="line">        :param database:    数据库</span><br><span class="line">        :param port:        端口号，默认是3306</span><br><span class="line">        :param charset:     编码，默认是utf8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        获取连接对象和执行对象</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.conn = pymysql.connect(host=self.host,</span><br><span class="line">                                    user=self.user,</span><br><span class="line">                                    password=self.password,</span><br><span class="line">                                    database=self.database,</span><br><span class="line">                                    port=self.port,</span><br><span class="line">                                    charset=self.charset)</span><br><span class="line"></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    def fetchone(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数元组，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataOne = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataOne = self.cur.fetchone()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataOne</span><br><span class="line"></span><br><span class="line">    def fetchall(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数列表，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataall = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataall = self.cur.fetchall()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataall</span><br><span class="line"></span><br><span class="line">    def __item(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行增删改</span><br><span class="line">        :param sql:           sql语句</span><br><span class="line">        :param params:        sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:              受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        count = 0</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行修改</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def insert(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行新增</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def delete(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行删除</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        关闭执行工具和连接对象</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if self.cur != None:</span><br><span class="line">            self.cur.close()</span><br><span class="line">        if self.conn != None:</span><br><span class="line">            self.conn.close()</span><br></pre></td></tr></table></figure><h4 id="1-测试查询多条数据"><a href="#1-测试查询多条数据" class="headerlink" title="1.测试查询多条数据"></a>1.测试查询多条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where name = %s and id &gt; %s&apos;</span><br><span class="line"># params</span><br><span class="line">params = [&apos;小茗&apos;,1]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchall(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    for temp in data:</span><br><span class="line">        print(temp)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br><span class="line"></span><br><span class="line">helper.close()</span><br></pre></td></tr></table></figure><h4 id="2-测试查询一条数据"><a href="#2-测试查询一条数据" class="headerlink" title="2.测试查询一条数据"></a>2.测试查询一条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where id = %s&apos;</span><br><span class="line">#sql = &apos;select * from t_user where id = 1&apos;</span><br><span class="line"># params</span><br><span class="line">params = [2]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchone(sql, params)</span><br><span class="line">#data = helper.fetchone(sql)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    print(data)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br></pre></td></tr></table></figure><h4 id="3-测试增删改"><a href="#3-测试增删改" class="headerlink" title="3.测试增删改"></a>3.测试增删改</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;update t_user set name =%s,pwd=%s,birthday=%s where id=%s&apos;</span><br><span class="line"># params</span><br><span class="line">id = input(&apos;输入编号:&apos;)</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = time.strptime(input(&apos;输入生日:&apos;), &apos;%Y年%m月%d日&apos;)</span><br><span class="line">params = [name, pwd, birthday,id]</span><br><span class="line"># 执行</span><br><span class="line">count = helper.update(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if count:</span><br><span class="line">    print(&apos;操作成功.&apos;)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;操作失败.&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-登录和注册"><a href="#4-登录和注册" class="headerlink" title="4.登录和注册"></a>4.登录和注册</h4><p>登录和注册的时候需要对密码进行加密</p><p>注意：</p><p>•  需要对密码进行加密<br>•  如果使用md5加密，则密码包含32个字符<br>•  如果使用sha1加密，则密码包含40个字符，这里使用这种方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table userinfos(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    uname varchar(20),</span><br><span class="line">    upwd char(40),</span><br><span class="line">    isdelete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">ret = doPwd(&apos;123&apos;)</span><br><span class="line">print(ret)</span><br><span class="line">结果：40bd001563085fc35165329ea1ff5c5ecbdbbeef</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">-- 插入如下数据，用户名为123,密码为123,这是sha1加密后的值</span><br><span class="line"></span><br><span class="line">insert into userinfos </span><br><span class="line">values(1,&apos;123&apos;,&apos;40bd001563085fc35165329ea1ff5c5ecbdbbeef&apos;,0);</span><br></pre></td></tr></table></figure><h4 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from mysqlHelper import MysqlHelper</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    &apos;&apos;&apos;登录&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    #加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;select * from t_user where name=%s and pwd=%s&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    data = helper.fetchone(sql, params)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;登录成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;登录失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doPwd(pwd):</span><br><span class="line">    &apos;&apos;&apos;sha1编码&apos;&apos;&apos;</span><br><span class="line">    mysha1 = hashlib.sha1()</span><br><span class="line">    mysha1.update(pwd.encode(&apos;utf-8&apos;))</span><br><span class="line">    pwd = mysha1.hexdigest()</span><br><span class="line">    return pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    &apos;&apos;&apos;注册&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    # 加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd) values(%s,%s)&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    count = helper.insert(sql, params)</span><br><span class="line">    if count:</span><br><span class="line">        print(&apos;操作成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;操作失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #register()</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PyMySQL？&quot;&gt;&lt;a href=&quot;#什么是-PyMySQL？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PyMySQL？&quot;&gt;&lt;/a&gt;什么是 PyMySQL？&lt;/h2&gt;&lt;p&gt;PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。&lt;/p&gt;
&lt;p&gt;PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django笔记</title>
    <link href="https://www.policx.com/2018/04/18/django-bi-ji/"/>
    <id>https://www.policx.com/2018/04/18/django-bi-ji/</id>
    <published>2018-04-17T17:00:16.000Z</published>
    <updated>2019-07-12T10:07:09.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p><a id="more"></a><h2 id="一-版本选择"><a href="#一-版本选择" class="headerlink" title="一. 版本选择"></a>一. 版本选择</h2><p>Django 2.0.x 支持 Python 3.4, 3.5 和 3.6 （注意，不再支持 Python 2）   </p><h2 id="二-安装-Django"><a href="#二-安装-Django" class="headerlink" title="二. 安装 Django"></a><strong>二. 安装 Django</strong></h2><p><strong>2.1. 用 pip 来安装</strong></p><p><strong>2.1.1 需要先安装pip</strong></p><p>(1). Linux, Mac OSX, Windows 下都可用 get-pip.py 来安装<br>pip：<a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/installing.html</a>  </p><p>或者直接下载：<a href="https://bootstrap.pypa.io/get-pip.py" title="get-pip.py" target="_blank" rel="noopener">get-pip.py</a> 然后运行在终端运行 <strong>python get-pip.py 就可以安装 pip。</strong></p><p>Note: 也可以下载 pip 源码包，运行 <strong>python setup.py install</strong> 进行安装 </p><p><strong>2.1.2 利用 pip 安装 Django</strong></p><p><code>（sudo) pip install Django    或者(sudo) pip install Django==1.8.16 或者 pip install Django==1.11.8</code>    </p><p>如果想升级 pip 可以用： </p><pre><code>(sudo) pip install --upgrade pip</code></pre><p><strong>2.2. 下载源码安装</strong>  </p><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">https://www.djangoproject.com/download/</a></p><p>如果是源码包, 比如 django-1.11.8.tar.gz </p><p><strong>2.2.1 Linux 或 Mac 下</strong></p><pre><code>tar -xvf django-1.11.8.tar.gzcd django-1.11.8(sudo) python setup.py install</code></pre><h2 id="三-检查是否安装成功"><a href="#三-检查是否安装成功" class="headerlink" title="三. 检查是否安装成功"></a><strong>三. 检查是否安装成功</strong></h2><p>终端上输入 python ,点击 Enter，进行 python 环境</p><pre><code>&gt;&gt;&gt; import django&gt;&gt;&gt; django.VERSION(1, 11, 8, &apos;final&apos;, 0)&gt;&gt;&gt; &gt;&gt;&gt; django.get_version()&apos;1.11.8&apos;</code></pre><p>如果运行后看到版本号，就证明安装成功了！ </p><h2 id="四-搭建多个互不干扰的开发环境（可选）"><a href="#四-搭建多个互不干扰的开发环境（可选）" class="headerlink" title="四. 搭建多个互不干扰的开发环境（可选）"></a><strong>四. 搭建多个互不干扰的开发环境（可选）</strong></h2><p>我们有的时候会发现，一个电脑上有多个项目，一个依赖 Django 1.8，另一个比较旧的项目又要用 Django 1.5，这时候怎么办呢？ </p><p>我们需要一个依赖包管理的工具来处理不同的环境。 </p><h3 id="4-1-虚拟环境依赖安装"><a href="#4-1-虚拟环境依赖安装" class="headerlink" title="4.1 虚拟环境依赖安装"></a>4.1 虚拟环境依赖安装</h3><p>开发会用 virtualenv 来管理多个开发环境 </p><p><strong>Linux/MacOS 下</strong></p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了 </p><pre><code># 安装:(sudo) pip install virtualenv virtualenvwrapper</code></pre><p>修改~/.bash_profile或其它环境变量相关文件(如 .bashrc 或用 ZSH 之后的 .zshrc)，添加以下语句  </p><pre><code>export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/workspacesource /usr/local/bin/virtualenvwrapper.sh</code></pre><p>修改后使之立即生效(也可以重启终端使之生效)： </p><pre><code>source ~/.bash_profile</code></pre><h3 id="4-2-虚拟环境使用方法："><a href="#4-2-虚拟环境使用方法：" class="headerlink" title="4.2 虚拟环境使用方法："></a><strong>4.2 虚拟环境使用方法：</strong></h3><p><strong>mkvirtualenv zqxt：创建运行环境zqxt</strong></p><p><strong>workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境</strong></p><p><strong>deactivate</strong>: 退出终端环境</p><p><strong>其它的：</strong></p><p><strong>rmvirtualenv</strong> ENV：删除运行环境ENV </p><p><strong>mkproject</strong> mic：创建mic项目和运行环境mic </p><p><strong>mktmpenv</strong>：创建临时运行环境 </p><p><strong>lsvirtualenv</strong>: 列出可用的运行环境 </p><p><strong>lssitepackages</strong>: 列出当前环境安装了的包 </p><p>创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django部署——uwsgi+Nginx</title>
    <link href="https://www.policx.com/2018/04/17/django/"/>
    <id>https://www.policx.com/2018/04/17/django/</id>
    <published>2018-04-17T09:42:04.000Z</published>
    <updated>2019-07-12T10:06:56.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!</p><a id="more"></a><p><img src="/post-images/1560768371650.png" alt><br>环境：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3.6</span><br><span class="line">centos 7</span><br><span class="line">Django1.11</span><br></pre></td></tr></table></figure><h2 id="1、本地跑起来Django"><a href="#1、本地跑起来Django" class="headerlink" title="1、本地跑起来Django"></a>1、本地跑起来Django</h2><p>这里不讲Django项目实施过程，假设你已经写了一个Django项目，并且在本地127.0.0.1:8000能够跑起来。喏，给你个参考，项目大概长这样：<br><img src="/post-images/1560764670814.png" alt></p><ul><li>kindle目录为我创建的Django App</li></ul><h2 id="2、修改项目配置"><a href="#2、修改项目配置" class="headerlink" title="2、修改项目配置"></a>2、修改项目配置</h2><p>也就是项目目录下的settings.py文件，主要强调几个地方：</p><p>①关闭DEBUG模式：<br><img src="/post-images/1560764736238.png" alt><br>②修改ALLOWED_HOSTS：<br><img src="/post-images/1560764863424.png" alt><br>③配置静态文件存放路径：<br><img src="/post-images/1560764833026.png" alt></p><p>修改好配置之后执行:<br><code>python manage.py collectstatic</code><br>将项目用到的静态文件复制到项目根目录下的static文件中<br><img src="/post-images/1560764930146.png" alt></p><h2 id="3、安装uwsgi和Nginx"><a href="#3、安装uwsgi和Nginx" class="headerlink" title="3、安装uwsgi和Nginx"></a>3、安装uwsgi和Nginx</h2><p>这个没什么说的。。。在自己的云服务器上装好这两个工具<br>安装好uwsgi后最好验证一下，验证方法：<br>创建一个test.py文件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)])</span><br><span class="line">    return [b&apos;Hello world!&apos;]    #python3</span><br><span class="line">    # return [&apos;Hello world!&apos;]    #python2</span><br></pre></td></tr></table></figure><p>启动uwsgi服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --wsgi-file test.py</span><br></pre></td></tr></table></figure><p>如果可以正常启动而不报错那就应该没问题，不放心的话再在终端验证一下：<br><code>wget http://127.0.0.1:8000</code><br>看一下能否正确获取内容</p><h2 id="4、配置项目的uwsgi"><a href="#4、配置项目的uwsgi" class="headerlink" title="4、配置项目的uwsgi"></a>4、配置项目的uwsgi</h2><p>在项目所在文件夹下创建uwsgi.ini配置文件，也就是这里:<br><img src="/post-images/1560765049955.png" alt><br>在uwsgi.ini里进行如下配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># Django-related settings</span><br><span class="line"> </span><br><span class="line"># 这里的端口可以根据自己需要设定</span><br><span class="line">socket = 127.0.0.1:8001        </span><br><span class="line"> </span><br><span class="line"># the base directory (full path)</span><br><span class="line"># 这个是Django项目的根目录，也就是包含App的那个目录，仔细对照上图</span><br><span class="line">chdir           = /home/python/book2kindle</span><br><span class="line"> </span><br><span class="line"># Django s wsgi file</span><br><span class="line"># 这里是项目名(不是App名).wsgi</span><br><span class="line">module          = book2kindle.wsgi</span><br><span class="line"> </span><br><span class="line"># process-related settings</span><br><span class="line"># master</span><br><span class="line">master          = true</span><br><span class="line"> </span><br><span class="line"># maximum number of worker processes</span><br><span class="line">processes       = 32</span><br><span class="line"> </span><br><span class="line"># ... with appropriate permissions - may be needed</span><br><span class="line"># chmod-socket    = 664</span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum          = true</span><br><span class="line"> </span><br><span class="line">plugin python = true</span><br><span class="line"> </span><br><span class="line"># 这个是项目的虚拟python环境，如果没用虚拟环境，可以不设定</span><br><span class="line">home = /home/python/book2kindle_env</span><br></pre></td></tr></table></figure><h2 id="5、配置项目的nginx"><a href="#5、配置项目的nginx" class="headerlink" title="5、配置项目的nginx"></a>5、配置项目的nginx</h2><p>找到nginx的配置文件夹，centos7的nginx配置文件在/etc/nginx下，该路径下有一个nginx.conf总配置文件，还有两个文件夹./conf.d、./default.d，我们将nginx.conf复制一份到conf.d文件夹下，命名为nginx.conf（或者项目名.conf）进行如下修改（根据中文注释进行相应配置即可）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream django &#123;</span><br><span class="line">        # 注意这里的server要和uwsgi.ini配置文件中的socket保持一致</span><br><span class="line">        server 127.0.0.1:8002; # for a web port socket</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  xxx.com;  # 这里填自己的域名或者服务器的ip（决定你今后访问网站的方式）</span><br><span class="line">        charset      utf-8;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        location / &#123;</span><br><span class="line">        root        /home/python/book2kindle/kindle;  # 这是Django App的路径</span><br><span class="line">            uwsgi_pass  django;</span><br><span class="line">            include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">        &#125;</span><br><span class="line">        location /static &#123;</span><br><span class="line">            # Django项目静态文件的路径</span><br><span class="line">            alias /home/python/book2kindle/static; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、启动uwsgi和nginx"><a href="#6、启动uwsgi和nginx" class="headerlink" title="6、启动uwsgi和nginx"></a>6、启动uwsgi和nginx</h2><p>进入uwsgi.ini文件夹下执行：<br><code>uwsgi --ini uwsgi.ini</code><br>在终端执行：<br><code>service nginx restart</code><br>然后就可以根据域名（前提是要将域名解析到服务器ip地址）或者服务器ip来访问网站了！</p><p>OK，完事！就是这么简单！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>2018创业记：如何选择合伙人？</title>
    <link href="https://www.policx.com/2018/03/25/chuangye/"/>
    <id>https://www.policx.com/2018/03/25/chuangye/</id>
    <published>2018-03-25T13:02:42.000Z</published>
    <updated>2019-07-07T04:22:05.224Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><a id="more"></a><h2 id="创业路上危机四伏，如何破局？"><a href="#创业路上危机四伏，如何破局？" class="headerlink" title="创业路上危机四伏，如何破局？"></a>创业路上危机四伏，如何破局？</h2></li></ul><p>很多朋友在2018年做出了改变，迈出了新的一步。比如身边几位朋友正摩拳擦掌准备创业。然而，看别人创业和自己创业完全是两回事儿，见得再多，自己趟水时也难免有所顾虑。</p><p>在跟他们聊过之后，我们发现了他们普遍面临的一个课题：如何选择合伙人?这是身经百战的连续创业者也很难驾轻就熟的一个课题，今天我们就来一起聊聊。本文将从能不能和朋友一起创业、合伙人应该与我互补还是相似、如何判断双方是否志同道合、如何应对常见的分歧几个部分展开来说。</p><p>风物长宜放眼量，抱持开阔的胸襟、敏锐的判断、坚韧的意志，相信大家能够与志同道合的伙伴一起，越过山丘，携手站上梦想之巅。</p><h2 id="能不能和朋友一起创业？"><a href="#能不能和朋友一起创业？" class="headerlink" title="能不能和朋友一起创业？"></a>能不能和朋友一起创业？</h2><p>在创业初期，创业者选择合伙人往往会从身边的朋友“下手”。</p><p>一起创业可以说是认清一个朋友的最好方式。一篇名为《友谊的代价》的论文，考察了3510个风险投资者，以及他们在1975-2003年间11895个投资项目。</p><p>论文写道，有的人选择与自己能力相当的人合作，比如同是名校毕业；但更多的人选择与自己的熟人合作，比如曾经的同学或同事。结果表明，按能力搭档可以增加投资的成功概率，而找熟人搭档，则会明显降低成功的可能性。</p><p>所有人都喜欢强联系，但关系是关系，工作归工作。现在社会学已经有了足够多的证据说明：对工作来说，同乡会和校友录并不是扩展人脉的好地方。《中国合伙人》这部电影上映后，“千万别跟好朋友合伙开公司”也成了热议话题。电影的最后，三位合伙人分道扬镳，而剧本的原型——新东方的三位创始人也以“分家”收场。</p><p>当然，朋友合伙创业成功的案例也不在少数，况且，长期的伙伴关系更有助于共同面对创业过程中的艰难险阻，团队也更容易在创业初期获得投资人的青睐。如果在寻找合伙人的过程中，你觉得还是某个朋友更适合，那么一定要在合作之前约法三章，考虑到最坏的情况，提前用书面合同的方式确定双方的责权利，用规章制度来约束指导双方的行为，而不是靠人情关系。</p><p>中间一旦觉得发生了问题，你就必须考虑一下能否继续合作下去。其实，很多合作者走不到最后就是因为中间的小问题没有解决，一点一点积累最后爆发出来。</p><p>因此，能否和朋友一起创业这个问题，需要辩证思考。如果朋友间相互了解对方的个性和能力，工作中能做到分工明确，用规章制度来规范双方的行为，及时解决小矛盾，相互照顾，一起分担，共同奋斗，那么创业成功就会成为大概率事件。</p><h2 id="合伙人应该与我互补还是相似？"><a href="#合伙人应该与我互补还是相似？" class="headerlink" title="合伙人应该与我互补还是相似？"></a>合伙人应该与我互补还是相似？</h2><p>一个较为合理的答案是：理念和价值观上要相似，能力和经验上要互补。</p><p>理念和价值观上的相近，可以保证你们在重大原则问题上的判断是比较一致的，不至于出现根本性的冲突。这些重大的原则问题包括企业的战略方向、利益分配机制、做事的基本底线等等。</p><p>在这些问题上出现不同意见，通常很难取得共识。因为个性和价值观的形成，通常都不是一朝一夕的事情，也就是我们常说的“江山易改，本性难移”。如果在创业的艰难环境下，双方还要来磨合这个层面的东西，就会非常痛苦。</p><p>能力和经验上的互补相对更好理解。你擅长产品，他专于研发；你有丰富的运营经验，他则对于商业模式的建立更有心得；你对数字不敏感，他则是投资和财务领域的资深人士。这些都是很好的互补。</p><p>互补可以让你们在具体事情的推进中事半功倍，并建立起对于对方在专业领域的依靠和信任。人不可能是全能的，如果一切未知的领域都需要你自己来摸索，费时费力不说，风险还很大。</p><p>对于相似还是互补这个问题的解读，还可以反向进行。比如你们是能力经验上的相近，而在理念上互补，你可以想象一下是个什么局面，一定是你不会的他也不会，你觉得对的他觉得不对，那就真的很难合作下去了。</p><h2 id="如何判断双方是否志同道合？"><a href="#如何判断双方是否志同道合？" class="headerlink" title="如何判断双方是否志同道合？"></a>如何判断双方是否志同道合？</h2><p>对于这个问题，不同的人可能会给出非常不同的答案。雷军就曾说过，他找人有两个要素：“一要最专业，小米的合伙人都是各管一块，这样能保证整个决策非常快，把业务交给他，要能实打实做出成绩来；二要最合适，主要是指要有创业心态，对所做的事要极度喜欢，有共同的愿景，这样就会有很强的驱动力。”</p><p>雷军说，他在三个月的时间里见了超过100位做硬件的人选，终于找到了负责硬件的联合创始人周光平博士，两人第一次见面就谈了12个小时。</p><p>而周鸿祎表示，他会选择具备这四种素质的合伙人：首先应该有创业精神；其次要有很强的学习能力；第三，要有很好的开放合作心态；此外，还要能自我激励，自我驱动，同样一件事，用打工的心态和用创业的心态做，效果完全不一样。</p><p>虽然答案因人而异，但仍然可以总结出一些判断标准，以下几条可为你选择合伙人时提供参考。</p><h3 id="1、关系有一定的深度和广度，彼此信任"><a href="#1、关系有一定的深度和广度，彼此信任" class="headerlink" title="1、关系有一定的深度和广度，彼此信任"></a>1、关系有一定的深度和广度，彼此信任</h3><p>共事且维持朋友关系多年的创业团队关系更深，有可能经受住紧张和冲突的考验。合伙人未必需要成为最要好的朋友，但如果他们相互喜欢的话事情可能会更好办些。更重要的是，创始人之间应该尊重彼此以及他们给团队带来的不同能力。不信任合伙人的能力会导致手伸过头，还可能会导致控制权之争。在这种窝里斗的情况下大部分的合作关系都无法维系。</p><h3 id="2、了解彼此的优势和劣势，分工明确"><a href="#2、了解彼此的优势和劣势，分工明确" class="headerlink" title="2、了解彼此的优势和劣势，分工明确"></a>2、了解彼此的优势和劣势，分工明确</h3><p>尊重彼此的技能和优势并不意味着创始人就不需要审视合伙人的弱点了。友谊更久自然也会更了解某人的特长和技能。这些不同的技能有助于创始人团队自然地分清责任、角色，在某些情况下还可以分清头衔。根据每一位合伙人的技能明确划分职责，对创业的帮助很大。做事的时候每个人要有独立的角色，但同时永远要对其他合伙人的反馈持开放态度。</p><h3 id="3、确保所有合伙人对成功和失败的定义一致"><a href="#3、确保所有合伙人对成功和失败的定义一致" class="headerlink" title="3、确保所有合伙人对成功和失败的定义一致"></a>3、确保所有合伙人对成功和失败的定义一致</h3><p>韧性最强的创始人不会从财务的角度去衡量自己的初创企业是否成功，相反，他们会从使命的角度去衡量。他们的初创企业只是追求实现使命的手段。但是，并不是所有的创始人都这么看，甚至一开始关注使命的创始人有时候到后面也会转向考虑财务方面的事情。</p><p>有的创始人可能志存高远，为了尽快做大愿意烧很多钱，而有的人希望逐步打磨产品，限制人数规模和保留现金尺度。不仅对成功的认知会影响运营决策，对失败的认知同样会起作用。</p><p>在创业过程中，其中一位合伙人急着退出的故事屡见不鲜，因此这个教训值得一提再提。对于拥有成功企业的创始人来说，避免在这个问题上发生冲突的关键是定期讨论这件事。应该在公司早期就设定好目标，并且对这个话题进行定期复议。</p><h3 id="4、所有合伙人均应对股权分配满意"><a href="#4、所有合伙人均应对股权分配满意" class="headerlink" title="4、所有合伙人均应对股权分配满意"></a>4、所有合伙人均应对股权分配满意</h3><p>哈佛教授Wasserman发现，73%的联合创业团队一般在公司成立30天内就确定了如何进行股权分配。股权分配当然是任何共同创业的人都要首先考虑的事情之一，但事实上在那个时候，没人知道谁干活最卖力，谁对初创企业的贡献最有价值。过早确定股权分配会导致后面发生问题。如果可以的话，最好等到你有机会了解大家一起工作会是什么个情况后再正式分蛋糕。话虽如此，这件事情还是不要拖太久，围绕股权的分歧最好在公司早期就解决掉。</p><h3 id="5、永远要相互支持"><a href="#5、永远要相互支持" class="headerlink" title="5、永远要相互支持"></a>5、永远要相互支持</h3><p>这话听上去似乎太空泛，但是合伙人的关系也可能会反复无常，尤其是在受到不同观点、董事会成员等的影响下。合伙人之间的相互支持可带来信心，确保合伙人和员工都有共同的使命感。</p><p>团队应该早点理解一件事，任何情况下合伙人之间都应该背靠背相互支持，所以合伙人要尽量避免当着员工、董事会等人的面互相拆台，这样能够让公司其他人感觉到他们友情之牢固，让每一位合伙人都能保持镇定，因为他们知道对方一定会支持自己的。</p><h2 id="如何应对常见的分歧？"><a href="#如何应对常见的分歧？" class="headerlink" title="如何应对常见的分歧？"></a>如何应对常见的分歧？</h2><h3 id="1、公司走向的歧见"><a href="#1、公司走向的歧见" class="headerlink" title="1、公司走向的歧见"></a>1、公司走向的歧见</h3><p>在0到1的探索期，公司的走向往往是由合伙人一起决定的。但进入1到100的扩张期，一个年轻企业通常会开始有董事会以及重要的供应、通路伙伴。久而久之，合伙人对于公司未来走向的看法，常常会越来越变得分歧。</p><p>防范这个陷阱要从根源开始：每当CEO有了新的资讯、成长、学习、领悟，应该积极地与合伙人分享，协助他们获得与你类似的成长。同时，你应该把小范围的决策授权出去，让他们也能继续主导公司某一部分的走向。最后，你应该积极管理大家对决策的期望值，新创公司必须在“快”与“好”之间做出平衡，因此决策求的是多数对，而不是样样对。</p><h3 id="2、无法适应制度"><a href="#2、无法适应制度" class="headerlink" title="2、无法适应制度"></a>2、无法适应制度</h3><p>0到1的新创团队求快，因此不会有太多制度。进入1到100阶段，公司势必要开始建立一些管理系统，以在风险与发展中间取得平衡。</p><p>有些习惯了说干就干的合伙人，在此时会产生严重的不适应，时间一长甚至会觉得公司背离了创办的初衷。要解决这个问题，除了及早发现及早辅导外，请他们参与、主导制度的设计，也是协助合伙人适应新制度的方法。</p><h3 id="3、越权管理"><a href="#3、越权管理" class="headerlink" title="3、越权管理"></a>3、越权管理</h3><p>当公司开始有部门、部门主管，合伙人还是习惯看不顺眼就管，容易造成经理人的困扰。更有甚者，造成合伙人对经理人不信任，反而让经理人没有足够的时间、空间去适应、学习。这个问题通常是惯性使然，重点就是要打破它。所以，看到这样的行为要赶快提醒伙伴们注意。</p><h3 id="4、无法跟上公司成长的需要"><a href="#4、无法跟上公司成长的需要" class="headerlink" title="4、无法跟上公司成长的需要"></a>4、无法跟上公司成长的需要</h3><p>在公司快速扩张期，一个3人产品团队可能在一年内成长为30人，而两者之间管理上的不同，常常会让本来擅长技术、产品，但从来没有管理中大型团队经验的合伙人一时间跟不上公司发展的步伐。</p><p>回到扩张前，你应该早早找到好的CTO Mentor，在扩张中，经常鼓励他在管理知识与能力上精进。扩张后，如果他真的无法适应，也比较能够接受去寻找更有经验的CTO，而自己退居部门二把手、三把手。</p><h3 id="5、利益分配"><a href="#5、利益分配" class="headerlink" title="5、利益分配"></a>5、利益分配</h3><p>当公司越来越成功、越赚钱、离IPO越近，股权与利益的问题就会越容易产生。尤其当初的股权分配如果没有彰显每个合伙人的相对价值，那团队中可能酝酿出不良情绪。</p><p>比较好的方法当然是早期就把这个问题解决掉，因为到了后期，你的工具会越来越有限。但也不是没有机会修正，如果有合伙人离开，你可以收回他的股权来重新分配。如果有B、C、D轮增资，你可以跟投资人要求“期权池”(ESOP)，通过发放新的选择权来平衡。最后，如果真的过于集中，负责任的CEO，甚至会拿出自己的股权分配给伙伴们。</p><p>选择合伙人未必有一定之规，创业路上可能遇到的危机也远远不止上述这些，希望这篇文章能对你有所裨益，助你在创业路上少走弯路，也祝愿创业者们在2018年博得好彩头，大鹏一日同风起，扶摇直上九万里。</p><p>本文来源：<a href="http://www.sohu.com/a/225670991_100064845" target="_blank" rel="noopener">联想之星</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="life" scheme="https://www.policx.com/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown 的设计哲学</title>
    <link href="https://www.policx.com/2018/03/22/markdown/"/>
    <id>https://www.policx.com/2018/03/22/markdown/</id>
    <published>2018-03-22T11:32:01.000Z</published>
    <updated>2019-07-07T04:34:16.836Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 </p><a id="more"></a><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote><h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown<em>是什么</em>？</h4><h4 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h4><h4 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h4><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><em>怎么</em>使用？</h4><h4 id="谁在用？"><a href="#谁在用？" class="headerlink" title="谁在用？"></a><em>谁</em>在用？</h4><h4 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h4></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p><h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/" target="_blank" rel="noopener"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p><p>他有着足以让你跪拜的人生经历：    </p><ul><li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li><li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li><li><strong>2005</strong>年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。   </li><li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li><li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li><li><strong>2013</strong>年1月自杀身亡。    </li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz"></p><p>天才都有早逝的归途。</p><h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h3><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p><p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\</code></strong>，<strong>符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p><p>代码区块：</p><pre><code>void main(){    printf(&quot;Hello, Markdown.&quot;);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格<em>或</em>制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code>    </p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul><li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错   </li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。    </li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><hr><p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><hr><p>以上基本是所有traditonal markdown的语法。</p><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><hr><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p><video src="http://structr.learn-anything.cn/video/道理/陈铭：像我这种老好人，根本没什么真朋友！不jue亲戚的人，根本没什么真亲戚！.mp4" width="320" height="180" controls="controls"></video> </p><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="https://www.policx.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>数据类型和变量</title>
    <link href="https://www.policx.com/2018/03/01/python-type/"/>
    <id>https://www.policx.com/2018/03/01/python-type/</id>
    <published>2018-02-28T20:28:19.000Z</published>
    <updated>2019-07-07T04:35:56.433Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python 数据类型和变量</p><a id="more"></a> <h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：</p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</p><p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。如果’本身也是一个字符，那就可以用””括起来，比如”I’m OK”包含的字符是I，’，m，空格，O，K这6个字符。</p><p>如果字符串内部既包含’又包含”怎么办？可以用转义字符\来标识，比如：</p><p><code>&#39;I\&#39;m \&quot;OK\&quot;!&#39;</code><br>表示的字符串内容是：</p><p><code>I&#39;m &quot;OK&quot;!</code><br>转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\表示的字符就是\，可以在Python的交互式命令行用print()打印字符串看看：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;I\&apos;m ok.&apos;)</span><br><span class="line">I&apos;m ok.</span><br><span class="line">&gt;&gt;&gt; print(&apos;I\&apos;m learning\nPython.&apos;)</span><br><span class="line">I&apos;m learning</span><br><span class="line">Python.</span><br><span class="line">&gt;&gt;&gt; print(&apos;\\\n\\&apos;)</span><br><span class="line"></span><br><span class="line">\</span><br><span class="line">\</span><br></pre></td></tr></table></figure><p>如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义，可以自己试试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&apos;\\\t\\&apos;)</span><br><span class="line">\       \</span><br><span class="line">&gt;&gt;&gt; print(r&apos;\\\t\\&apos;)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure><p>如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，可以自己试试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;&apos;&apos;line1</span><br><span class="line">... line2</span><br><span class="line">... line3&apos;&apos;&apos;)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure><p>上面是在交互式命令行内输入，注意在输入多行内容时，提示符由&gt;&gt;&gt;变为…，提示你可以接着上一行输入，注意…是提示符，不是代码的一部分：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt - python                           _ □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│&gt;&gt;&gt; print(&apos;&apos;&apos;line1                                      │</span><br><span class="line">│... line2                                               │</span><br><span class="line">│... line3&apos;&apos;&apos;)                                           │</span><br><span class="line">│line1                                                   │</span><br><span class="line">│line2                                                   │</span><br><span class="line">│line3                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│&gt;&gt;&gt; _                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>当输入完结束符<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果写成程序并存为.py文件，就是：</span><br></pre></td></tr></table></figure></p><p>print(‘’’line1<br>line2<br>line3’’’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多行字符串&apos;&apos;&apos;...&apos;&apos;&apos;还可以在前面加上r使用，请自行测试：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>print(r’’’hello,\n<br>world’’’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">### 布尔值</span><br><span class="line">布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True<br>True<br>False<br>False<br>3 &gt; 2<br>True<br>3 &gt; 5<br>False</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">布尔值可以用and、or和not运算。</span><br><span class="line"></span><br><span class="line">#### and运算是与运算，只有所有都为True，and运算结果才是True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True and True<br>True<br>True and False<br>False<br>False and False<br>False<br>5 &gt; 3 and 3 &gt; 1<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### or运算是或运算，只要其中有一个为True，or运算结果就是True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True or True<br>True<br>True or False<br>True<br>False or False<br>False<br>5 &gt; 3 or 1 &gt; 3<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### not运算是非运算，它是一个单目运算符，把True变成False，False变成True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>not True<br>False<br>not False<br>True<br>not 1 &gt; 2<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">布尔值经常用在条件判断中，比如：</span><br></pre></td></tr></table></figure><p>if age &gt;= 18:<br>    print(‘adult’)<br>else:<br>    print(‘teenager’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">### 空值</span><br><span class="line">空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</span><br><span class="line"></span><br><span class="line">此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。</span><br><span class="line"></span><br><span class="line">### 变量</span><br><span class="line">变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</span><br><span class="line"></span><br><span class="line">变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头，比如：</span><br><span class="line"></span><br><span class="line">`a = 1`</span><br><span class="line">变量a是一个整数。</span><br><span class="line"></span><br><span class="line">`t_007 = &apos;T007&apos;`</span><br><span class="line">变量t_007是一个字符串。</span><br><span class="line"></span><br><span class="line">`Answer = True`</span><br><span class="line">变量Answer是一个布尔值True。</span><br><span class="line"></span><br><span class="line">在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>a = 123 # a是整数<br>print(a)<br>a = ‘ABC’ # a变为字符串<br>print(a)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</span><br></pre></td></tr></table></figure><p>int a = 123; // a是整数类型变量<br>a = “ABC”; // 错误：不能把字符串赋给整型变量</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">和静态语言相比，动态语言更灵活，就是这个原因。</span><br><span class="line"></span><br><span class="line">请不要把赋值语句的等号等同于数学的等号。比如下面的代码：</span><br></pre></td></tr></table></figure><p>x = 10<br>x = x + 2</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果从数学上理解x = x + 2那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。</span><br><span class="line"></span><br><span class="line">最后，理解变量在计算机内存中的表示也非常重要。当我们写：</span><br><span class="line"></span><br><span class="line">`a = &apos;ABC&apos;`</span><br><span class="line">时，Python解释器干了两件事情：</span><br><span class="line"></span><br><span class="line">在内存中创建了一个&apos;ABC&apos;的字符串；</span><br><span class="line"></span><br><span class="line">在内存中创建了一个名为a的变量，并把它指向&apos;ABC&apos;。</span><br><span class="line"></span><br><span class="line">也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据，例如下面的代码：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>a = ‘ABC’<br>b = a<br>a = ‘XYZ’<br>print(b)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">最后一行打印出变量b的内容到底是&apos;ABC&apos;呢还是&apos;XYZ&apos;？如果从数学意义上理解，就会错误地得出b和a相同，也应该是&apos;XYZ&apos;，但实际上b的值是&apos;ABC&apos;，让我们一行一行地执行代码，就可以看到到底发生了什么事：</span><br><span class="line"></span><br><span class="line">执行a = &apos;ABC&apos;，解释器创建了字符串&apos;ABC&apos;和变量a，并把a指向&apos;ABC&apos;：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923791878255456/0)</span><br><span class="line"></span><br><span class="line">执行b = a，解释器创建了变量b，并把b指向a指向的字符串&apos;ABC&apos;：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923792058613440/0)</span><br><span class="line"></span><br><span class="line">执行a = &apos;XYZ&apos;，解释器创建了字符串&apos;XYZ&apos;，并把a的指向改为&apos;XYZ&apos;，但b并没有更改：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923792191637760/0)</span><br><span class="line"></span><br><span class="line">所以，最后打印变量b的结果自然是&apos;ABC&apos;了。</span><br><span class="line"></span><br><span class="line">### 常量</span><br><span class="line">所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：</span><br><span class="line"></span><br><span class="line">`PI = 3.14159265359`</span><br><span class="line">但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。</span><br><span class="line"></span><br><span class="line">最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是/：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 / 3<br>3.3333333333333335</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>9 / 3<br>3.0</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还有一种除法是//，称为地板除，两个整数的除法仍然是整数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 // 3<br>3</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你没有看错，整数的地板除//永远是整数，即使除不尽。要做精确的除法，使用/就可以。</span><br><span class="line"></span><br><span class="line">因为//除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 % 3<br>1</p><pre><code>无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</code></pre></blockquote></blockquote></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。</p><p>对变量赋值x = y是把变量x指向真正的对象，该对象是变量y所指向的。随后对变量y的赋值不影响变量x的指向。</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在-2147483648-2147483647。<br>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 数据类型和变量&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
</feed>
