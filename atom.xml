<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南一道街</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-08-15T02:12:23.566Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《中华人民共和国网络安全法》</title>
    <link href="https://www.policx.com/label/law/"/>
    <id>https://www.policx.com/label/law/</id>
    <published>2019-08-12T10:21:23.000Z</published>
    <updated>2019-08-15T02:12:23.566Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>《 <strong>中华人民共和国网络安全法</strong>》是为保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展制定。由全国人民代表大会常务委员会于2016年11月7日发布，自2017年6月1日起施行。</p></blockquote><a id="more"></a><p>中文名： <strong>中华人民共和国网络安全法</strong></p><p>外文名：People’s Republic of China Network Security Law</p><p>发布机构：全国人民代表大会常务委员会</p><p>发布日期：2016年11月7日</p><p>实施日期：2017年6月1日</p><p>​ <a href="#1">第一章 总 则</a></p><p>​ <a href="#2">第二章 网络安全支持与促进</a></p><p>​ <a href="#3">第三章 网络运行安全</a></p><p>​ <a href="#4">第一节 一般规定</a></p><p>​ <a href="#5">第二节 关键信息基础设施的运行安全</a></p><p>​ <a href="#6">第四章 网络信息安全</a></p><p>​ <a href="#7">第五章 监测预警与应急处置</a></p><p>​ <a href="#8">第六章 法律责任</a></p><p>​ <a href="#9">第七章 附 则</a></p><p><strong>第一条</strong> 为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。</p><p><strong>第二条</strong> 在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。</p><p><strong>第三条</strong> 国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。</p><p><strong>第四条</strong> 国家制定并不断完善网络安全战略，明确保障网络安全的基本要求和主要目标，提出重点领域的网络安全政策、工作任务和措施。</p><p><strong>第五条</strong> 国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。</p><p><strong>第六条</strong> 国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。</p><p><strong>第七条</strong> 国家积极开展网络空间治理、网络技术研发和标准制定、打击网络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。</p><p><strong>第八条</strong> 国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。</p><p>县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。</p><p><strong>第九条</strong> 网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。</p><p><strong>第十条</strong> 建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。</p><p><strong>第十一条</strong> 网络相关行业组织按照章程，加强行业自律，制定网络安全行为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。</p><p><strong>第十二条</strong> 国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。</p><p>任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。</p><p><strong>第十三条</strong> 国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。</p><p><strong>第十四条</strong> 任何个人和组织有权对危害网络安全的行为向网信、电信、公安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。</p><p>有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。</p><p><strong>第十五条</strong> 国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。</p><p>国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家标准、行业标准的制定。</p><p><strong>第十六条</strong> 国务院和省、自治区、直辖市人民政府应当统筹规划，加大投入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构和高等学校等参与国家网络安全技术创新项目。</p><p><strong>第十七条</strong> 国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。</p><p><strong>第十八条</strong> 国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。</p><p>国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。</p><p><strong>第十九条</strong> 各级人民政府及其有关部门应当组织开展经常性的网络安全宣传教育，并指导、督促有关单位做好网络安全宣传教育工作。</p><p>大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。</p><p><strong>第二十条</strong> 国家支持企业和高等学校、职业学校等教育培训机构开展网络安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。</p><p><strong>第二十一条</strong> 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p><p>（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任；</p><p>（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；</p><p>（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月；</p><p>（四）采取数据分类、重要数据备份和加密等措施；</p><p>（五）法律、行政法规规定的其他义务。</p><p><strong>第二十二条</strong> 网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p>网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。</p><p>网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。</p><p><strong>第二十三条</strong> 网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。</p><p><strong>第二十四条</strong> 网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。</p><p>国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。</p><p><strong>第二十五条</strong> 网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。</p><p><strong>第二十六条</strong> 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。</p><p><strong>第二十七条</strong> 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。</p><p><strong>第二十八条</strong> 网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助。</p><p><strong>第二十九条</strong> 国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。</p><p>有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。</p><p><strong>第三十条</strong> 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。</p><p><strong>第三十一条</strong> 国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。</p><p>国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系。</p><p><strong>第三十二条</strong> 按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。</p><p><strong>第三十三条</strong> 建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。</p><p><strong>第三十四条</strong> 除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务：</p><p>（一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查；</p><p>（二）定期对从业人员进行网络安全教育、技术培训和技能考核；</p><p>（三）对重要系统和数据库进行容灾备份；</p><p>（四）制定网络安全事件应急预案，并定期进行演练；</p><p>（五）法律、行政法规规定的其他义务。</p><p><strong>第三十五条</strong> 关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。</p><p><strong>第三十六条</strong> 关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。</p><p><strong>第三十七条</strong> 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。</p><p><strong>第三十八条</strong> 关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。</p><p><strong>第三十九条</strong> 国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施：</p><p>（一）对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估；</p><p>（二）定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力；</p><p>（三）促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享；</p><p>（四）对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。</p><p><strong>第四十条</strong> 网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。</p><p><strong>第四十一条</strong> 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。</p><p>网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。</p><p><strong>第四十二条</strong> 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。</p><p>网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p><strong>第四十三条</strong> 个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。</p><p><strong>第四十四条</strong> 任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。</p><p><strong>第四十五条</strong> 依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p><p><strong>第四十六条</strong> 任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。</p><p><strong>第四十七条</strong> 网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。</p><p><strong>第四十八条</strong> 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。</p><p>电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。</p><p><strong>第四十九条</strong> 网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。</p><p>网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。</p><p><strong>第五十条</strong> 国家网信部门和有关部门依法履行网络信息安全监督管理职责，发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息，应当通知有关机构采取技术措施和其他必要措施阻断传播。</p><p><strong>第五十二条</strong> 负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。</p><p><strong>第五十三条</strong> 国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。</p><p>负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。</p><p>网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。</p><p><strong>第五十四条</strong> 网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害，采取下列措施：</p><p>（一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测；</p><p>（二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度；</p><p>（三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。</p><p><strong>第五十五条</strong> 发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息。</p><p><strong>第五十六条</strong> 省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。</p><p><strong>第五十七条</strong> 因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有关法律、行政法规的规定处置。</p><p><strong>第五十八条</strong> 因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。</p><p><strong>第五十九条</strong> 网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。</p><p>关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。</p><p><strong>第六十条</strong> 违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款：</p><p>（一）设置恶意程序的；</p><p>（二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的；</p><p>（三）擅自终止为其产品、服务提供安全维护的。</p><p><strong>第六十一条</strong> 网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十二条</strong> 违反本法第二十六条规定，开展网络安全认证、检测、风险评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五千元以上五万元以下罚款。</p><p><strong>第六十三条</strong> 违反本法第二十七条规定，从事危害网络安全的活动，或者提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。</p><p>单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p>违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。</p><p><strong>第六十四条</strong> 网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。</p><p>违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。</p><p><strong>第六十五条</strong> 关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十六条</strong> 关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十七条</strong> 违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。</p><p>单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p><strong>第六十八条</strong> 网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的，处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。</p><p><strong>第六十九条</strong> 网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款：</p><p>（一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的；</p><p>（二）拒绝、阻碍有关部门依法实施的监督检查的；</p><p>（三）拒不向公安机关、国家安全机关提供技术支持和协助的。</p><p><strong>第七十条</strong> 发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。</p><p><strong>第七十一条</strong> 有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。</p><p><strong>第七十二条</strong> 国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p><strong>第七十三条</strong> 网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p>网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。</p><p><strong>第七十四条</strong> 违反本法规定，给他人造成损害的，依法承担民事责任。</p><p>违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p><p><strong>第七十五条</strong> 境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财产或者其他必要的制裁措施。</p><p><strong>第七十六条</strong> 本法下列用语的含义：</p><p>（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。</p><p>（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。</p><p>（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。</p><p>（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。</p><p>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。</p><p><strong>第七十七条</strong> 存储、处理涉及国家秘密信息的网络的运行安全保护，除应当遵守本法外，还应当遵守保密法律、行政法规的规定。</p><p><strong>第七十八条</strong> 军事网络的安全保护，由中央军事委员会另行规定。</p><p><strong>第七十九条</strong> 本法自2017年6月1日起施行。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《 &lt;strong&gt;中华人民共和国网络安全法&lt;/strong&gt;》是为保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展制定。由全国人民代表大会常务委员会于2016年11月7日发布，自2017年6月1日起施行。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="label" scheme="https://www.policx.com/categories/label/"/>
    
    
  </entry>
  
  <entry>
    <title>HarmonyOS 鸿蒙</title>
    <link href="https://www.policx.com/news/HarmonyOS/"/>
    <id>https://www.policx.com/news/HarmonyOS/</id>
    <published>2019-08-10T15:28:21.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p> <strong>鸿蒙</strong>，中国神话传说的远古时代，传说在盘古昆仑山开天辟地之前，世界是一团混沌的元气，这种自然的元气叫做鸿蒙，因此把那个时代称作鸿蒙时代，后来此一词也常被用来泛指称远古时代。</p><a id="more"></a><h4 id="华为开发者大会于8月9日-8月11日举行，华为消费者业务-CEO、华为技术有限公司常务董事余承东以《全场景时代新体验与新生态》为题发表演讲，正式宣布自有操作系统：鸿蒙。据余承东介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。"><a href="#华为开发者大会于8月9日-8月11日举行，华为消费者业务-CEO、华为技术有限公司常务董事余承东以《全场景时代新体验与新生态》为题发表演讲，正式宣布自有操作系统：鸿蒙。据余承东介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。" class="headerlink" title="华为开发者大会于8月9日-8月11日举行，华为消费者业务 CEO、华为技术有限公司常务董事余承东以《全场景时代新体验与新生态》为题发表演讲，正式宣布自有操作系统：鸿蒙。据余承东介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。"></a>华为开发者大会于8月9日-8月11日举行，华为消费者业务 CEO、华为技术有限公司常务董事余承东以《全场景时代新体验与新生态》为题发表演讲，正式宣布自有操作系统：鸿蒙。据余承东介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。</h4><p><a href="https://static.cnbetacdn.com/article/2019/0809/cb92bd466924d81.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/cb92bd466924d81.jpg" alt></a></p><h5 id="根据余承东的说法，安卓有超过1亿行代码，内核就超过2000万行，但一般用户用到的代码不到8-，整体比较冗余，在IoT时代这既没必要也不需要。"><a href="#根据余承东的说法，安卓有超过1亿行代码，内核就超过2000万行，但一般用户用到的代码不到8-，整体比较冗余，在IoT时代这既没必要也不需要。" class="headerlink" title="根据余承东的说法，安卓有超过1亿行代码，内核就超过2000万行，但一般用户用到的代码不到8%，整体比较冗余，在IoT时代这既没必要也不需要。"></a>根据余承东的说法，安卓有超过1亿行代码，内核就超过2000万行，但一般用户用到的代码不到8%，整体比较冗余，在IoT时代这既没必要也不需要。</h5><h5 id="由此他提出了”微内核”的概念，也是鸿蒙OS的特点之一。区别于”宏内核”，微内核采用同一套操作平台，针对不同硬件能力的产品进行部署，并采用分布式架构，提升效率。"><a href="#由此他提出了”微内核”的概念，也是鸿蒙OS的特点之一。区别于”宏内核”，微内核采用同一套操作平台，针对不同硬件能力的产品进行部署，并采用分布式架构，提升效率。" class="headerlink" title="由此他提出了”微内核”的概念，也是鸿蒙OS的特点之一。区别于”宏内核”，微内核采用同一套操作平台，针对不同硬件能力的产品进行部署，并采用分布式架构，提升效率。"></a>由此他提出了”微内核”的概念，也是鸿蒙OS的特点之一。区别于”宏内核”，微内核采用同一套操作平台，针对不同硬件能力的产品进行部署，并采用分布式架构，提升效率。</h5><p><img src="https://static.cnbetacdn.com/article/2019/0809/3195a18e81ef714.png" alt></p><h5 id="也就是说，手机和车载设备的用途不同，灌入同样系统无必要，但它们可以采用同样的内核，部署不同的界面或功能。"><a href="#也就是说，手机和车载设备的用途不同，灌入同样系统无必要，但它们可以采用同样的内核，部署不同的界面或功能。" class="headerlink" title="也就是说，手机和车载设备的用途不同，灌入同样系统无必要，但它们可以采用同样的内核，部署不同的界面或功能。"></a>也就是说，<a href="https://c.duomai.com/track.php?site_id=242986&euid=&t=https://shouji.jd.com/" target="_blank" rel="noopener">手机</a>和车载设备的用途不同，灌入同样系统无必要，但它们可以采用同样的内核，部署不同的界面或功能。</h5><h5 id="余承东表示，希望未来的操作系统，都使用微内核。据介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。"><a href="#余承东表示，希望未来的操作系统，都使用微内核。据介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。" class="headerlink" title="余承东表示，希望未来的操作系统，都使用微内核。据介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。"></a>余承东表示，希望未来的操作系统，都使用微内核。据介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/cc82956876a1115.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/cc82956876a1115.jpg" alt></a></p><p><strong>余承东介绍了鸿蒙OS的四大技术特性。</strong></p><p><strong>首先，分布式架构首次用于终端OS，实现跨终端无缝协同体验。</strong></p><h5 id="鸿蒙OS的”分布式OS架构”和”分布式软总线技术”通过公共通信平台，分布式数据管理，分布式能力调度和虚拟外设四大能力，将相应分布式应用的底层技术实现难度对应用开发者屏蔽，使开发者能够聚焦自身业务逻辑，像开发同一终端一样开发跨终端分布式应用，也使最终消费者享受到强大的跨终端业务协同能力为各使用场景带来的无缝体验。"><a href="#鸿蒙OS的”分布式OS架构”和”分布式软总线技术”通过公共通信平台，分布式数据管理，分布式能力调度和虚拟外设四大能力，将相应分布式应用的底层技术实现难度对应用开发者屏蔽，使开发者能够聚焦自身业务逻辑，像开发同一终端一样开发跨终端分布式应用，也使最终消费者享受到强大的跨终端业务协同能力为各使用场景带来的无缝体验。" class="headerlink" title="鸿蒙OS的”分布式OS架构”和”分布式软总线技术”通过公共通信平台，分布式数据管理，分布式能力调度和虚拟外设四大能力，将相应分布式应用的底层技术实现难度对应用开发者屏蔽，使开发者能够聚焦自身业务逻辑，像开发同一终端一样开发跨终端分布式应用，也使最终消费者享受到强大的跨终端业务协同能力为各使用场景带来的无缝体验。"></a>鸿蒙OS的”分布式OS架构”和”分布式软总线技术”通过公共通信平台，分布式数据管理，分布式能力调度和虚拟外设四大能力，将相应分布式应用的底层技术实现难度对应用开发者屏蔽，使开发者能够聚焦自身业务逻辑，像开发同一终端一样开发跨终端分布式应用，也使最终消费者享受到强大的跨终端业务协同能力为各使用场景带来的无缝体验。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/0da3b9acacd6566.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/0da3b9acacd6566.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/2ca308ed3de5059.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/2ca308ed3de5059.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/4987e4d24c572f6.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/4987e4d24c572f6.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/bb2b308fb2c4863.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/bb2b308fb2c4863.jpg" alt></a></p><p><strong>第二， 确定时延引擎和高性能IPC技术实现系统流畅。</strong></p><h5 id="鸿蒙OS通过使用确定时延引擎和高性能IPC两大技术解决现有系统性能不足的问题。确定时延引擎可在任务执行前分配系统中任务执行优先级及时限进行调度处理，优先级高的任务资源将优先保障调度，应用响应时延降低25-7-。鸿蒙微内核结构小巧的特性使IPC（进程间通信）性能大大提高，进程通信效率较现有系统提升5倍。"><a href="#鸿蒙OS通过使用确定时延引擎和高性能IPC两大技术解决现有系统性能不足的问题。确定时延引擎可在任务执行前分配系统中任务执行优先级及时限进行调度处理，优先级高的任务资源将优先保障调度，应用响应时延降低25-7-。鸿蒙微内核结构小巧的特性使IPC（进程间通信）性能大大提高，进程通信效率较现有系统提升5倍。" class="headerlink" title="鸿蒙OS通过使用确定时延引擎和高性能IPC两大技术解决现有系统性能不足的问题。确定时延引擎可在任务执行前分配系统中任务执行优先级及时限进行调度处理，优先级高的任务资源将优先保障调度，应用响应时延降低25.7%。鸿蒙微内核结构小巧的特性使IPC（进程间通信）性能大大提高，进程通信效率较现有系统提升5倍。"></a>鸿蒙OS通过使用确定时延引擎和高性能IPC两大技术解决现有系统性能不足的问题。确定时延引擎可在任务执行前分配系统中任务执行优先级及时限进行调度处理，优先级高的任务资源将优先保障调度，应用响应时延降低25.7%。鸿蒙微内核结构小巧的特性使IPC（进程间通信）性能大大提高，进程通信效率较现有系统提升5倍。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/e0b747fb52cb77d.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/e0b747fb52cb77d.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/8207bd44e2eb60b.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/8207bd44e2eb60b.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/9a8f4828c279726.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/9a8f4828c279726.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/cdad2d91becd4e3.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/cdad2d91becd4e3.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/8c0a561069fb0c4.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/8c0a561069fb0c4.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/7d7e3e9c5c6ca43.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/7d7e3e9c5c6ca43.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/fa8032646a56bd3.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/fa8032646a56bd3.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/5f7aa22198a6ce2.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/5f7aa22198a6ce2.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/72f9cea20b6e7b8.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/72f9cea20b6e7b8.jpg" alt></a></p><p><strong>第三，基于微内核架构重塑终端设备可信安全。</strong></p><h5 id="鸿蒙OS采用全新的微内核设计，拥有更强的安全特性和低时延等特点。微内核设计的基本思想是简化内核功能，在内核之外的用户态尽可能多地实现系统服务，同时加入相互之间的安全保护。微内核只提供最基础的服务，比如多进程调度和多进程通信等。"><a href="#鸿蒙OS采用全新的微内核设计，拥有更强的安全特性和低时延等特点。微内核设计的基本思想是简化内核功能，在内核之外的用户态尽可能多地实现系统服务，同时加入相互之间的安全保护。微内核只提供最基础的服务，比如多进程调度和多进程通信等。" class="headerlink" title="鸿蒙OS采用全新的微内核设计，拥有更强的安全特性和低时延等特点。微内核设计的基本思想是简化内核功能，在内核之外的用户态尽可能多地实现系统服务，同时加入相互之间的安全保护。微内核只提供最基础的服务，比如多进程调度和多进程通信等。"></a>鸿蒙OS采用全新的微内核设计，拥有更强的安全特性和低时延等特点。微内核设计的基本思想是简化内核功能，在内核之外的用户态尽可能多地实现系统服务，同时加入相互之间的安全保护。微内核只提供最基础的服务，比如多进程调度和多进程通信等。</h5><h5 id="另外，鸿蒙OS将微内核技术应用于可信执行环境（TEE），通过形式化方法，重塑可信安全。"><a href="#另外，鸿蒙OS将微内核技术应用于可信执行环境（TEE），通过形式化方法，重塑可信安全。" class="headerlink" title="另外，鸿蒙OS将微内核技术应用于可信执行环境（TEE），通过形式化方法，重塑可信安全。"></a>另外，鸿蒙OS将微内核技术应用于可信执行环境（TEE），通过形式化方法，重塑可信安全。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/5f367f2b16631d9.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/5f367f2b16631d9.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/02e885fbf4b0f3c.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/02e885fbf4b0f3c.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/037bb5fc6cf3389.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/037bb5fc6cf3389.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/aa0a3edfb8b5a47.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/aa0a3edfb8b5a47.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/2c7ce2b7bea4e02.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/2c7ce2b7bea4e02.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/0c452598463f956.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/0c452598463f956.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/10e961b6228d627.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/10e961b6228d627.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/39602f71577fc48.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/39602f71577fc48.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/042bce1a1b0ca03.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/042bce1a1b0ca03.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/f97e2fbbe1787c5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/f97e2fbbe1787c5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/7887c4d8d1fe8c5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/7887c4d8d1fe8c5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/02e885fbf4b0f3c.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/02e885fbf4b0f3c.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/037bb5fc6cf3389.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/037bb5fc6cf3389.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/aa0a3edfb8b5a47.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/aa0a3edfb8b5a47.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/2c7ce2b7bea4e02.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/2c7ce2b7bea4e02.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/0c452598463f956.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/0c452598463f956.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/10e961b6228d627.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/10e961b6228d627.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/39602f71577fc48.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/39602f71577fc48.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/042bce1a1b0ca03.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/042bce1a1b0ca03.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/f97e2fbbe1787c5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/f97e2fbbe1787c5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/7887c4d8d1fe8c5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/7887c4d8d1fe8c5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/9cc5cc84c9d6090.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/9cc5cc84c9d6090.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/ff6d7bcc4ef22b4.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/ff6d7bcc4ef22b4.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/a481130adebdfed.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/a481130adebdfed.jpg" alt></a></p><p><strong>第四，通过统一IDE支撑一次开发，多端部署，实现跨终端生态共享。</strong></p><h5 id="鸿蒙OS凭借多终端开发IDE，多语言统一编译，分布式架构Kit提供屏幕布局控件以及交互的自动适配，支持控件拖拽，面向预览的可视化编程，从而使开发者可以基于同一工程高效构建多端自动运行App，实现真正的一次开发，多端部署，在跨设备之间实现共享生态。"><a href="#鸿蒙OS凭借多终端开发IDE，多语言统一编译，分布式架构Kit提供屏幕布局控件以及交互的自动适配，支持控件拖拽，面向预览的可视化编程，从而使开发者可以基于同一工程高效构建多端自动运行App，实现真正的一次开发，多端部署，在跨设备之间实现共享生态。" class="headerlink" title="鸿蒙OS凭借多终端开发IDE，多语言统一编译，分布式架构Kit提供屏幕布局控件以及交互的自动适配，支持控件拖拽，面向预览的可视化编程，从而使开发者可以基于同一工程高效构建多端自动运行App，实现真正的一次开发，多端部署，在跨设备之间实现共享生态。"></a>鸿蒙OS凭借多终端开发IDE，多语言统一编译，分布式架构Kit提供屏幕布局控件以及交互的自动适配，支持控件拖拽，面向预览的可视化编程，从而使开发者可以基于同一工程高效构建多端自动运行App，实现真正的一次开发，多端部署，在跨设备之间实现共享生态。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/e6c0d84b5fd05d5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/e6c0d84b5fd05d5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/8f86d51780a690f.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/8f86d51780a690f.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/314f0188c7b1f16.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/314f0188c7b1f16.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/592701bf2e13602.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/592701bf2e13602.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/99afde8e0be800f.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/99afde8e0be800f.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/bbca58d91073c75.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/bbca58d91073c75.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/f364929dc284706.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/f364929dc284706.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/12dc73398ee3945.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/12dc73398ee3945.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/32a9393836a2e79.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/32a9393836a2e79.jpg" alt></a></p><h5 id="据介绍，华为将在今年首发的智慧屏产品中率先使用鸿蒙-OS-1-0。未来三年，除完善相关技术外，鸿蒙OS会逐步应用在可穿戴、智慧屏、车机等更多智能设备中。"><a href="#据介绍，华为将在今年首发的智慧屏产品中率先使用鸿蒙-OS-1-0。未来三年，除完善相关技术外，鸿蒙OS会逐步应用在可穿戴、智慧屏、车机等更多智能设备中。" class="headerlink" title="据介绍，华为将在今年首发的智慧屏产品中率先使用鸿蒙 OS 1.0。未来三年，除完善相关技术外，鸿蒙OS会逐步应用在可穿戴、智慧屏、车机等更多智能设备中。"></a>据介绍，<a href="https://c.duomai.com/track.php?k=WP0ZSPklWdlZyN4MTPklWYmYDO5IDNy0DZp9VZ0l2cmYiRyUSbvNmLsxWYtZnL3d3dGJTJGJTJBNTJzBHd0h" target="_blank" rel="noopener">华为</a>将在今年首发的智慧屏产品中率先使用鸿蒙 OS 1.0。未来三年，除完善相关技术外，鸿蒙OS会逐步应用在可穿戴、智慧屏、车机等更多智能设备中。</h5><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.cnbeta.com/articles/tech/876919.htm" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/policx/talk/gh-pages/images/LmADop.jpg" alt="policx"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;鸿蒙&lt;/strong&gt;，中国神话传说的远古时代，传说在盘古昆仑山开天辟地之前，世界是一团混沌的元气，这种自然的元气叫做鸿蒙，因此把那个时代称作鸿蒙时代，后来此一词也常被用来泛指称远古时代。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>appleCard</title>
    <link href="https://www.policx.com/news/appleCard/"/>
    <id>https://www.policx.com/news/appleCard/</id>
    <published>2019-08-05T09:42:00.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>免年费的钛金卡，办一张来收藏也不错。</p><a id="more"></a><p><img src="https://i.loli.net/2019/08/05/bf9BtCq2kErvRGY.jpg" alt="appleCard"><br><img src="https://gitee.com/policx/im/raw/master/images/btDbRs.jpg" alt="appleCard"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;免年费的钛金卡，办一张来收藏也不错。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>善用佳软 uPic</title>
    <link href="https://www.policx.com/Software/uPic/"/>
    <id>https://www.policx.com/Software/uPic/</id>
    <published>2019-07-27T04:11:04.000Z</published>
    <updated>2019-08-15T01:17:12.453Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>对于markdown重度用户而言，一款好用的图床工具能够有效提升效率。从Windows到Mac，笔者也算是辗转用过多款图床客户端，包括iPic、PicGo等等。而自从更换新的工作环境之后，笔者对于图床客户端又有了新的需求——自定义图床。</p><a id="more"></a><p>幸好，一次机缘巧合让笔者遇到了uPic，除了支持微博、SM.MS、七牛云、腾讯云等图床之外，还可以自定义配置图床。 </p><blockquote><p>uPic下载地址：<a href="https://github.com/gee1k/uPic/releases" target="_blank" rel="noopener">https://github.com/gee1k/uPic/releases</a> </p></blockquote><p>笔者目前工作所用的编辑器，既不支持外链，也不支持图片粘贴后自动上传，一旦涉及多图文章，光上传图片就浪费不少时间。因此，笔者萌生了构建自定义图床的想法，更幸运的是，笔者公司对于图片上传服务并没有做太多的限制，也让这种想法成为可能。 </p><p>uPic是一款开源简洁的图床客户端，方便用户直接上传图片到指定的存储空间，并获取有效的markdown图片地址，其默认图床为SM.MS，当然也支持配置腾讯云、七牛云、又拍云等常见的对象存储。最关键的是支持图床自定义配置，也让我毅然抛弃了一直以来付费使用的iPic。<br><img src="https://i.loli.net/2019/07/27/5d3bd2c197d8592897.jpg" alt></p><p>其实起初并不顺利，刚上手的uPic（大概是v0.7.0版本），自定义图床配置并不适用于笔者常用的编辑器环境。好在软件开发者@svend足够热心，在了解了笔者的需求及编辑环境之后，重构了自定义图床，使得笔者的想法得以实现，包括大家在反馈群里提出的一些建议，也都及时采纳并更新。 </p><p>直到最新发布的v0.8.0版本，uPic已经成为一款非常成熟且强大的图床客户端，且安装包大小也不过才10.5M。 </p><p>好了，啰嗦了这么多，也该进入正题了。 </p><p>uPic目前仅支持Mac端，默认上传到SM.MS匿名图床，除此之外还支持微博、码云、Github以及腾讯云、阿里云、又拍云、七牛云总共八个图床。其中，由于微博近期已经陆续开启防盗链，笔者不建议在个人博客中使用。<br><img src="https://i.loli.net/2019/07/27/5d3bd288ac38618894.jpg" alt><br>在上传方式上，uPic支持本地选择/复制文件上传、截图上传，甚至可直接拖动文件到菜单栏uPic图标上完成上传动作。<br><img src="https://i.loli.net/2019/07/27/5d3bd3727bf6963617.gif" alt="640"></p><p>在最新更新v0.8.0版本之后，uPic新增支持直接从浏览器中复制或者拖动在线图片上传到指定图床，这样就不用下载到本地再进行上传。<br><img src="https://gitee.com/policx/im/raw/master/images/GoRrBa.gif" alt></p><p>不过需要注意的是，GIF动图不大一样，直接从浏览器中复制或者拖动GIF上传至uPic图床，可能最终上传的只是GIF图中一帧的画面，所以对于GIF最好还是先下载到本地，然后使用uPic上传到图床。 </p><p>在“设置——拓展——访达拓展”中勾选uPic一项，即可开启本地文件右键菜单中“使用uPic上传”的功能，也算是比较方便的一种本地文件上传方式。<br><img src="https://i.loli.net/2019/07/27/5d3bdbd03d58f62506.jpg" alt><br><img src="https://gitee.com/policx/im/raw/master/images/mOO863.jpg" alt></p><p>一旦完成上传动作，所输出的文件链接会自动复制到剪切板，直接在文档中粘贴即可，在输出链接格式上可根据需求选择URL、HTML、Markdown三种。<br><img src="https://gitee.com/policx/im/raw/master/images/Y0lYcO.jpg" alt></p><p>点击菜单栏uPic图标，还可以查看最近十条上传记录，同时可以预览上传内容缩略图，以便选择重新复制。<br><img src="https://gitee.com/policx/im/raw/master/images/Ze9ScG.jpg" alt><br>熟练使用快捷键操作，可以进一步提升使用效率。uPic支持三种上传方式的自定义快捷键。基本不用点击菜单了去选择，即可完成上传动作。<br><img src="https://gitee.com/policx/im/raw/master/images/MqUOQy.jpg" alt><br>例如，通过设定好的快捷键完成截图上传操作，按住鼠标框选所需区域，松开鼠标之后即完成截图并直接上传到图床（注意没有确认截图的过程哦～）。<br><img src="https://gitee.com/policx/im/raw/master/images/k0GikB.gif" alt><br>使用这段时间，笔者感觉uPic已经足够成为一款高效、简洁的图床客户端，支持强大的自定义图床配置，支持复制/拖动上传以及快捷键操作。不过在部分体验上iPic依然值得uPic借鉴，例如复制图片后点击菜单栏的iPic，能够比较直观地看到已复制图片及近期上传图片的预览，体验更加直观。<br><img src="https://gitee.com/policx/im/raw/master/images/dLyZLX.jpg" alt="a"><br>不得不提的是，开发者@svend虽然只利用业余时间更新维护，同样保持了较高的更新频率，发现bug或者其他不稳定的因素更是会连夜修复，并且会及时反馈用户的意见。作为一款免费的Mac图床客户端，uPic已经赢得了越来越多的用户亲睐。 </p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/WcchsHp007SswWr2qHGxTQ" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/27/5d3bcf474c70088570.jpg" alt="wechat"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于markdown重度用户而言，一款好用的图床工具能够有效提升效率。从Windows到Mac，笔者也算是辗转用过多款图床客户端，包括iPic、PicGo等等。而自从更换新的工作环境之后，笔者对于图床客户端又有了新的需求——自定义图床。&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>「拖放」Mac 的底层能力，也是效率神技</title>
    <link href="https://www.policx.com/Software/DragAndDrop/"/>
    <id>https://www.policx.com/Software/DragAndDrop/</id>
    <published>2019-07-26T14:19:21.000Z</published>
    <updated>2019-08-15T01:18:15.665Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>个人惯用 Mac 拖放，但每每身边同事看我的操作习惯，都大惊失色，感叹 Mac 还有这种操作，所以决定单独讲一篇 Mac 拖放。</p><a id="more"></a><p>Mac的拖放几乎是全局的，比如你可以将图片文件从应用拖到 Finder，同样可以将文件从 Finder 拖至应用内，甚至从应用A拖拽至应用B。</p><p>总之，基于 Finder 的文件拖拽，让系统和应用、应用和应用协同起来，大大提速。以下是一些示例。</p><blockquote><p>应用-&gt;Finder</p></blockquote><p>1.微信-&gt;Finder<br><img src="https://i.loli.net/2019/07/27/5d3c5f3ea1d9e89990.gif" alt></p><p>2.浏览器-&gt;Finder<br><img src="https://gitee.com/policx/im/raw/master/images/Xfj58J.gif" alt></p><p>出于版权安全的考虑，以及前端技术的极速革新，部分网站已不再支持将图片拖拽至 Finder，但多数网站仍然支持。</p><p>3.PDF-&gt;Finder<br><img src="https://gitee.com/policx/im/raw/master/images/wEnYQa.gif" alt="pic"></p><p>如果你只需要 PDF 20P中的1P，可以单独拖拽至Finder。</p><blockquote><p>Finder-&gt;应用</p></blockquote><p>1.Finder-&gt;微信<br><img src="https://gitee.com/policx/im/raw/master/images/H2aKxW.gif" alt="pic"></p><p>2.Finder-&gt;办公套件<br><img src="https://gitee.com/policx/im/raw/master/images/Pc9jOK.gif" alt="pic"></p><p>3.Finder-&gt;PDF<br><img src="https://gitee.com/policx/im/raw/master/images/Hi56sE.gif" alt="pic"></p><blockquote><p>应用-&gt;应用</p></blockquote><p>1.浏览器-&gt;微信<br><img src="https://gitee.com/policx/im/raw/master/images/6whkO3.gif" alt="pic"></p><p>2.微信-&gt;办公套件<br><img src="https://gitee.com/policx/im/raw/master/images/37ryoD.gif" alt="pic"></p><p>除了以上”应用-&gt;Finder，Finder-&gt;应用，应用-&gt;应用”几种拖放，Mac 还有其他很多地方支持此操作，比如文件拖拽至垃圾桶、应用拖拽至Docker、文件拖拽至 Docker 上应用图标即可打开……  </p><p>使用拖拽，还是复制粘贴，或是通过各个应用的菜单完成操作，都没什么问题，如果你知道了 MacOS 的一项新能力，不妨试试。</p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/DPhrXF5qfPEMrEGimslh1w" target="_blank" rel="noopener"><img src="https://gitee.com/policx/im/raw/master/images/Z2gkII.png" alt="pic"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人惯用 Mac 拖放，但每每身边同事看我的操作习惯，都大惊失色，感叹 Mac 还有这种操作，所以决定单独讲一篇 Mac 拖放。&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>Python导图</title>
    <link href="https://www.policx.com/program/Python/mind/"/>
    <id>https://www.policx.com/program/Python/mind/</id>
    <published>2019-07-21T06:03:24.000Z</published>
    <updated>2019-08-15T01:53:53.033Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>推荐：<strong>XMind</strong> 一个全功能的思维导图和头脑风暴软件。</p></blockquote><a id="more"></a><h2 id="Python-系列-一-核心知识"><a href="#Python-系列-一-核心知识" class="headerlink" title="Python 系列 (一)  核心知识"></a>Python 系列 (一)  核心知识</h2><p><img src="/mindImage/0%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80.png" alt><br><img src="/mindImage/2Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80.png" alt><br><img src="/mindImage/3%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%B8%80)%E6%95%B0%E5%80%BC%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88.png" alt><br><img src="/mindImage/4%E6%A0%87%E5%87%86%E7%B1%BB%E5%9E%8B%E8%A1%A5%E5%85%85.png" alt><br><img src="/mindImage/5%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%BA%8C)%E5%BA%8F%E5%88%97%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/6%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%B8%89)%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt><br><img src="/mindImage/7%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/8%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/9%E5%87%BD%E6%95%B0%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/10%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E5%87%BD%E6%95%B0.png" alt><br><img src="/mindImage/11%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/12%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/13%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/14%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/15%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/16%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt><br><img src="/mindImage/17%E6%B5%8B%E8%AF%95%E8%B0%83%E8%AF%95.png" alt></p><h2 id="Python系列-一-基础编程"><a href="#Python系列-一-基础编程" class="headerlink" title="Python系列 (一) 基础编程"></a>Python系列 (一) 基础编程</h2><p><img src="/mindImage/1Python%E7%B3%BB%E5%88%97(%E4%B8%80)%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861.png" alt><br><img src="/mindImage/3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862.png" alt><br><img src="/mindImage/4%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt><br><img src="/mindImage/5%E5%BA%8F%E5%88%97.png" alt><br><img src="/mindImage/6%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt><br><img src="/mindImage/7%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84.png" alt><br><img src="/mindImage/8%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88.png" alt><br><img src="/mindImage/9%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/10%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/11%E9%94%99%E8%AF%AF%EF%BC%86%E5%BC%82%E5%B8%B8.png" alt><br><img src="/mindImage/12%E5%87%BD%E6%95%B0%E4%B8%80.png" alt><br><img src="/mindImage/13%E5%87%BD%E6%95%B0%E4%BA%8C.png" alt><br><img src="/mindImage/14%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/15%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt></p><h2 id="Python系列-二-常用标准库及拓展知识"><a href="#Python系列-二-常用标准库及拓展知识" class="headerlink" title="Python系列(二)常用标准库及拓展知识"></a>Python系列(二)常用标准库及拓展知识</h2><p><img src="/mindImage/0%E3%80%90%E7%9B%AE%E5%BD%95%E3%80%91Python%E7%B3%BB%E5%88%97(%E4%BA%8C)%E5%B8%B8%E7%94%A8%E6%A0%87%E5%87%86%E5%BA%93%E5%8F%8A%E6%8B%93%E5%B1%95%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/1%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%BF%B0.png" alt><br><img src="/mindImage/2%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt><br><img src="/mindImage/3%E6%97%A5%E6%9C%9F&%E6%97%B6%E9%97%B4.png" alt><br><img src="/mindImage/4%E7%B3%BB%E7%BB%9F&%E6%96%87%E4%BB%B6.png" alt><br><img src="/mindImage/5%E8%BF%9B%E7%A8%8B&%E7%BA%BF%E7%A8%8B.png" alt><br><img src="/mindImage/6%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt><br><img src="/mindImage/7%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97&%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt></p><h2 id="Python应用领域和数据结构"><a href="#Python应用领域和数据结构" class="headerlink" title="Python应用领域和数据结构"></a>Python应用领域和数据结构</h2><p><a href="https://www.jianshu.com/p/66f6d9a434f9" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/21/5d3400422503e26621.jpg" alt="Python数据结构"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;推荐：&lt;strong&gt;XMind&lt;/strong&gt; 一个全功能的思维导图和头脑风暴软件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《Python札记》1_列表list</title>
    <link href="https://www.policx.com/program/Python/python3-notes01/"/>
    <id>https://www.policx.com/program/Python/python3-notes01/</id>
    <published>2019-07-18T14:55:41.000Z</published>
    <updated>2019-08-15T01:53:53.034Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="写于开始之前"><a href="#写于开始之前" class="headerlink" title="写于开始之前"></a>写于开始之前</h3><p>笔者即将开始写一个系列的《<code>Python</code>札记》。本系列的札记主要是自学<code>齐伟</code>老师《跟老齐学<code>Python</code>轻松入门》一书整理而来。书第一遍断断续续花了5个月，第二遍边看边整理，保守3个月。</p><a id="more"></a><p><strong>在此深深感谢齐伟老师带我入门<code>Python</code></strong>。<strong>工欲善其事，必先利其器</strong>，本札记的学习环境为：<code>Python3.7.2 + pycharm + jupyter notebook</code>： </p><ul><li><code>Python3</code>取代了<code>Python2</code>，成为主流</li><li>针对<code>Python</code>语言，<code>Pycharm</code>是最好的<code>IDE</code></li><li><code>Jupyter notebook</code>是利用<code>Python</code>进行机器学习的强大利器</li></ul><p><strong>本札记一定会在2个月之内完成</strong>，主要内容包含： </p><ul><li>学习笔记整理</li><li>代码实战练习</li><li>各种练习题</li><li>利用<code>Python</code>实现常用算法 <a href="https://www.jianshu.com/c/7287d92c5db4" target="_blank" rel="noopener">机器学习_Python算法</a></li></ul><p><strong>希望对<code>Python</code>感兴趣的朋友有所帮助，自己也在努力学习中，将来主要方向是：<code>机器学习+数据挖掘+量化投资</code></strong></p><h4 id="良好的开始是成功的一半！Let-s-go-go-go"><a href="#良好的开始是成功的一半！Let-s-go-go-go" class="headerlink" title="良好的开始是成功的一半！Let`s go go go!!!"></a>良好的开始是成功的一半！Let`s go go go!!!</h4><hr><blockquote><p>列表是<code>Python</code>中使用非常广泛的一种对象，用方括号<code>[ ]</code>来表示。括号里面可以是数字，字符串或者<code>True</code>，<code>False</code>的布尔值，或者是多种不同类型的对象，里面也可以嵌套列表。如果列表是空的，用<code>bool()</code>来进行判断，会返回 <code>False</code>。 </p></blockquote><hr><h3 id="一、索引、切片、反转"><a href="#一、索引、切片、反转" class="headerlink" title="一、索引、切片、反转"></a>一、索引、切片、反转</h3><p>列表和字符串一样，都是序列，里面的元素是有序的，也有索引和切片。索引<code>index</code>左边从<code>0</code>开始，右边从<code>-1</code>开始，<code>index()</code>函数可以查看某个元素的索引编号。 </p><p><strong>索引</strong></p><ul><li>左边0开始，右边-1开始</li><li>通过<code>index()</code>函数查看索引编号</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># lang = ['python', 'java', 'html']</span></span><br><span class="line"><span class="hljs-comment"># lang.index('python')</span></span><br><span class="line"><span class="hljs-number">0</span>  <span class="hljs-comment"># 索引从0开始</span></span><br><span class="line"><span class="hljs-comment"># lang.index('html')</span></span><br><span class="line"><span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><p><strong>切片</strong></p><ul><li>索引左边从0开始，右边-1开始</li><li>含头不含尾</li><li>步长可正可负</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">print(lst[:])     <span class="hljs-comment">#  相当于是复制 lst</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">print(lst[::<span class="hljs-number">2</span>])  <span class="hljs-comment">#  步长是2    [开始:结束:步长]</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(lst[<span class="hljs-number">-3</span>:<span class="hljs-number">-1</span>])</span><br><span class="line"></span><br><span class="line">lst = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]</span><br><span class="line">print(lst[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])     <span class="hljs-comment"># 常规用法</span></span><br><span class="line">print(lst[<span class="hljs-number">-5</span>:<span class="hljs-number">-2</span>:<span class="hljs-number">2</span>])   <span class="hljs-comment"># 标号-5代表的是元素2，标号-2代表的是5，步长为2</span></span><br><span class="line">print(lst[<span class="hljs-number">-5</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>])</span><br><span class="line">print(lst[<span class="hljs-number">1</span>:<span class="hljs-number">-2</span>:<span class="hljs-number">2</span>])</span><br><span class="line">[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]</span><br></pre></td></tr></table></figure><p><strong>反转</strong></p><ul><li>通过步长-1进行反转，[::-1]</li><li>通过<code>reversed()</code>进行反转，得到的是<strong>可迭代对象</strong>，并且将迭代对象转为为<code>列表显示</code></li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 反转1</span></span><br><span class="line">print(lst[::<span class="hljs-number">-1</span>])  <span class="hljs-comment"># 通过步长为-1进行反转</span></span><br><span class="line">print(lst)   <span class="hljs-comment"># 不影响原来对象</span></span><br><span class="line">[<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 反转2</span></span><br><span class="line">print(list(reversed(lst)))  <span class="hljs-comment"># 通过reversed函数进行反转</span></span><br><span class="line">[<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">print(list(reversed(<span class="hljs-string">'abcde'</span>)))    <span class="hljs-comment"># 对字符串进行反转，列表显示</span></span><br><span class="line">[<span class="hljs-string">'e'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'a'</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="二、操作列表"><a href="#二、操作列表" class="headerlink" title="二、操作列表"></a>二、操作列表</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>len()：求长度</li><li>+：连接两个序列</li><li>*：复制序列</li><li>in：判断元素是否在列表中</li><li>max()、min()：按照元素的字典顺序进行排序</li></ul><p><strong>1、修改元素</strong></p><blockquote><p><strong>列表</strong>中的元素可以进行<strong>修改</strong>，但是字符串中的不能进行修改。列表中修改的时候，直接通过索引号进行指定： </p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst[<span class="hljs-number">2</span>] = <span class="hljs-number">7</span>   <span class="hljs-comment"># 指定第三个元素为7</span></span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br></pre></td></tr></table></figure><p><strong>2、增加元素</strong><br>追加元素的方法有两种，都是追加在<strong>末尾</strong></p><ul><li>append()函数进行追加</li><li>切片的方式进行追加：a[len(a):] = [ x ]</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst.append(<span class="hljs-number">8</span>)  </span><br><span class="line">lst[len(lst):] = [<span class="hljs-number">8</span>]</span><br><span class="line">print(lst)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]   <span class="hljs-comment"># 例子承接上面，第三个元素为7，不是3</span></span><br></pre></td></tr></table></figure><p><strong>3、列表函数</strong></p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>append</td><td>将单个元素追加到列表的<strong>最右边</strong>，即末尾部分；<strong>list[len(list):] = [x]</strong>，x是待追加的元素；  <strong>没有返回值None</strong></td></tr><tr><td>extend</td><td>将<strong>两个列表进行合并</strong>，扩充列表的作用；  参数必须是<strong>可迭代对象</strong>；  <strong>list[len(list):] = L</strong>，L是待并入的列表；  完成追加过程，列表L不变，list发生变化；  <strong>没有返回值None</strong></td></tr><tr><td>insert</td><td>指定位置添加元素  格式：list.insert(i,x)，i是插入的位置，x是待追加元素 ；  i如果是0，相当于是插在首位；i如果是len(list)，相当于是插在最后面，则等价于append()函数</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># extend()函数</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</span><br><span class="line">print(id(lst))   <span class="hljs-comment"># 查看lst的内存地址</span></span><br><span class="line">lst1 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line">lst.extend(lst1)</span><br><span class="line">print(id(lst))   <span class="hljs-comment"># 查看追加列表之后的内存地址，与原来系相同的</span></span><br><span class="line">print(<span class="hljs-string">"lst:"</span>, lst)</span><br><span class="line">print(<span class="hljs-string">"lst1:"</span>, lst1)</span><br><span class="line"></span><br><span class="line"><span class="hljs-number">2435334264968</span></span><br><span class="line"><span class="hljs-number">2435334264968</span></span><br><span class="line">lst: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line">lst1: [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># append与extend区别</span></span><br><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst2 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]</span><br><span class="line">lst1.append(lst2)</span><br><span class="line">print(lst1)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]]   <span class="hljs-comment"># 整建制，将lst2当做一个整体</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst2 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]</span><br><span class="line">lst1.extend(lst2)</span><br><span class="line">print(lst1)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]   <span class="hljs-comment"># 个体化，将lst2的每个元素进行追加</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li>列表是可以进行<strong>修改</strong>的，原地修改</li><li>append是将一个元素加到列表的末尾，<strong>整建制追加</strong></li><li>extend将两个列表进行合并，<strong>个体化扩编</strong></li><li>extend方法执行之后，<strong>内存中id不变</strong>，只是在该id上的内容发生了变化</li><li>insert()函数中的i如果超过最大索引值，则自动追加到末尾，相当于是append()函数的作用</li><li>三种方法均是原地修改，无返回值</li></ul><hr><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>count</td><td>查看元素重复出现的次数  <strong>如果不存在，返回0</strong>，而不是报错</td></tr><tr><td>index</td><td>查看索引编号，不存在则报错  检索的是元素<strong>第一次</strong>出现的位置</td></tr><tr><td>remove</td><td>删除元素，原地修改，无返回值；  list.remove(x)：如果x不存在，则会报错；  如果x出现多次，<strong>删除第一个x，剩下不变</strong></td></tr><tr><td>pop</td><td>pop([i]):参数是可选的；  为空，<strong>默认删除最后一个</strong>，并且将该元素作为返回值；  如果不为空，<strong>可删除索引为i的元素</strong>，并且将该元素作为返回值</td></tr><tr><td>reverse</td><td>原地反转，没有生成新的列表，没有返回值</td></tr><tr><td>reversed</td><td>类似reverse，区别：生成的列表能够<strong>用于迭代</strong></td></tr></tbody></table><p><strong>remove和pop的区别</strong></p><ul><li>remove 没有返回值，pop有返回值</li><li>remove的参数是元素，pop的参数是索引</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">lst1.remove(<span class="hljs-number">2</span>)</span><br><span class="line">print(lst1)</span><br><span class="line"><span class="hljs-comment"># lst1.remove(7)</span></span><br><span class="line"><span class="hljs-comment"># print(lst1)   ValueError: list.remove(x): x not in list</span></span><br><span class="line">lst1.pop(<span class="hljs-number">2</span>)</span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]   <span class="hljs-comment"># 将元素2删除掉</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]      <span class="hljs-comment">#  将索引为2的元素3删除掉，本步骤是接在上面的执行，即在列表[1, 3, 4, 5, 6] 中删除4</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关于反转</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(lst[::<span class="hljs-number">-1</span>])   <span class="hljs-comment"># 反转实现1</span></span><br><span class="line">print(lst)          <span class="hljs-comment"># 原来的列表对象不改变</span></span><br><span class="line">lst.reverse()    <span class="hljs-comment"># 反转实现2</span></span><br><span class="line">print(lst)          <span class="hljs-comment"># 原来的列表变成反转之后的新列表</span></span><br><span class="line">lst1= reversed(lst)</span><br><span class="line">print(lst1)       <span class="hljs-comment"># lst1是一个列表反转迭代器对象：&lt;list_reverseiterator object at 0x00000233C677F320&gt;</span></span><br><span class="line">print(list(lst1))    <span class="hljs-comment"># 用list函数显示lst1的内容</span></span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>sort</td><td>排序函数，用于<code>列表list</code>中，<strong>原地修改没有返回值</strong>；  <strong>默认从小到大</strong>；将<strong>reverse=True</strong>则变成从大到小排序sort(self, /, *, key=None, reverse=False)</td></tr><tr><td>sorted</td><td>对<code>所有可迭代对象</code>进行操作，返回一个新的 <code>list</code>，不是在原来的list上进行操作  sorted(iterable[, cmp[, key[, reverse]]])</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># sort()</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst.sort()</span><br><span class="line">print(lst)</span><br><span class="line">lst1 = [<span class="hljs-string">'python'</span>, ‘Java’, <span class="hljs-string">'html'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'php'</span>]</span><br><span class="line">lst1.sort(key=len)  <span class="hljs-comment"># 列表中的字符串进行排序；如果长度相同，则按照出现的先后顺序</span></span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</span><br><span class="line">[<span class="hljs-string">'c'</span>, <span class="hljs-string">'php'</span>, <span class="hljs-string">'Java'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'python'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># sorted()</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst1 = sorted(lst)</span><br><span class="line">print(lst)  <span class="hljs-comment"># 原对象不变</span></span><br><span class="line">print(lst1) <span class="hljs-comment"># 新列表为排序后的对象</span></span><br><span class="line"></span><br><span class="line">lst2 =[(<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>),(<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>),(<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>),(<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>)]</span><br><span class="line">lst3 = sorted(lst2, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])   <span class="hljs-comment"># 由元组构成的复合列表，按照元组的第二个元素进行排序，通过匿名函数lamba()</span></span><br><span class="line">print(lst3)</span><br><span class="line">[(<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>)]</span><br><span class="line"></span><br><span class="line">lst4 = sorted(lst2, key=<span class="hljs-keyword">lambda</span> x: len(x[<span class="hljs-number">0</span>]))   <span class="hljs-comment"># 通过元组中第一个元素的长度进行排序</span></span><br><span class="line">print(lst4)</span><br><span class="line">[(<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>), (<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>)]</span><br></pre></td></tr></table></figure><h4 id="自定义类中的元素进行排序"><a href="#自定义类中的元素进行排序" class="headerlink" title="自定义类中的元素进行排序"></a>自定义类中的元素进行排序</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, age, grade)</span>:</span></span><br><span class="line">        self.name =  name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.grade = grade</span><br><span class="line">        </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span>  repr((self.name, self.grade, self.age))</span><br><span class="line">    </span><br><span class="line">students_objects = [</span><br><span class="line">    Student(<span class="hljs-string">'Tom'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-number">12</span>),</span><br><span class="line">    Student(<span class="hljs-string">'xiaoming'</span>,<span class="hljs-string">'A'</span>,<span class="hljs-number">17</span>),</span><br><span class="line">    Student(<span class="hljs-string">'xiaohong'</span>, <span class="hljs-string">'C'</span>, <span class="hljs-number">12</span>),</span><br><span class="line">    Student(<span class="hljs-string">'Peter'</span>, <span class="hljs-string">'D'</span>, <span class="hljs-number">8</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">lst5 = sorted(students_objects, key=<span class="hljs-keyword">lambda</span> t:t.age)   <span class="hljs-comment"># 自定义类中，按照年龄进行排序</span></span><br><span class="line">print(lst5)</span><br><span class="line">lst6 = sorted(students_objects, key=<span class="hljs-keyword">lambda</span> t:(t.age, t.grade))   <span class="hljs-comment"># 使用元组，先根据年龄排序，若年龄相同按照grade排序</span></span><br><span class="line">print(lst6)</span><br><span class="line"></span><br><span class="line">[(<span class="hljs-string">'xiaoming'</span>, <span class="hljs-number">17</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'Tom'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'xiaohong'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'Peter'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'D'</span>)]</span><br><span class="line">[(<span class="hljs-string">'xiaoming'</span>, <span class="hljs-number">17</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'Tom'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'xiaohong'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'Peter'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'D'</span>)]</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.jianshu.com/c/ab55c73e0037?utm_source=desktop&utm_medium=notes-included-collection" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/20/5d32f16d5b0bf92604.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写于开始之前&quot;&gt;&lt;a href=&quot;#写于开始之前&quot; class=&quot;headerlink&quot; title=&quot;写于开始之前&quot;&gt;&lt;/a&gt;写于开始之前&lt;/h3&gt;&lt;p&gt;笔者即将开始写一个系列的《&lt;code&gt;Python&lt;/code&gt;札记》。本系列的札记主要是自学&lt;code&gt;齐伟&lt;/code&gt;老师《跟老齐学&lt;code&gt;Python&lt;/code&gt;轻松入门》一书整理而来。书第一遍断断续续花了5个月，第二遍边看边整理，保守3个月。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>超时空从犯</title>
    <link href="https://www.policx.com/label/Accomplice/"/>
    <id>https://www.policx.com/label/Accomplice/</id>
    <published>2019-07-18T02:18:06.000Z</published>
    <updated>2019-08-15T01:26:29.762Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><input checked disabled type="checkbox"> 你回头看了我一眼</li></ul><a id="more"></a><ul><li><input disabled type="checkbox"> 我觉得那很久很久</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;input checked disabled type=&quot;checkbox&quot;&gt; 你回头看了我一眼&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="label" scheme="https://www.policx.com/categories/label/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter的环境配置 for Mac</title>
    <link href="https://www.policx.com/program/flutter/"/>
    <id>https://www.policx.com/program/flutter/</id>
    <published>2019-07-16T10:14:18.000Z</published>
    <updated>2019-08-15T01:53:53.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 </p><a id="more"></a><h2 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装Flutter</h2><p>首先我们可以在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fdocs%2Fget-started%2Finstall" target="_blank" rel="noopener">Flutter官网</a>上面看到一些配置环境的步骤。这里就直接开干了，走起。 </p><h3 id="1、配置HomeBrew"><a href="#1、配置HomeBrew" class="headerlink" title="1、配置HomeBrew"></a>1、配置HomeBrew</h3><p>我们在去配置Flutter的环境之前，需要先检查一下HomeBrew是不是最新的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br></pre></td></tr></table></figure><p>如果没有brew的话，可以去<a href="https://link.juejin.im?target=https%3A%2F%2Fbrew.sh%2F" target="_blank" rel="noopener">HomeBrew官网</a>自行下载。这里就不赘述了，这里如果重新下载的话，看到下面的打印信息就说明下载完毕了。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3aad595f24923.jpg" alt></p><h3 id="2、下载SDK"><a href="#2、下载SDK" class="headerlink" title="2、下载SDK"></a>2、下载SDK</h3><p>接下来就是去官网下载SDK了。注意，这里下载SDK有两种方法：</p><ul><li>一是直接<code>git clone -b beta https://github.com/flutter/flutter.git</code>下载</li><li>二是自己在官网下载下来，如下图<br><img src="https://i.loli.net/2019/07/16/5d2db40e0aecc50465.jpg" alt></li></ul><p>这里我两种方法都试过了一遍，第一种方法实在是太慢了，在经历了耗费一个半小时下载到94%，最后提示失败了的过程之后，我决定还是用第二种方法，整个过程只用了3分钟的样子，相当满意。下载完之后，是一个名字叫<code>flutter_macos_v1.5.4-hotfix.2-stable.zip</code>的压缩包。 然后我们解压这个zip包，把解压出来的<strong>flutter</strong>文件放到根目录下即可。 </p><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p>因为Flutter的SDK中包含了很多的命令行工具。我们就需要配置环境变量，所以我直接就安装到了根目录下了。</p><p><strong>配置镜像</strong></p><p>因为Flutter在运行的时候，就需要去官网下载一些需要的资源，但是因为天国特色的wall的原因，我们就需要镜像服务器，这个在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fcommunity%2Fchina" target="_blank" rel="noopener">官网</a>上面有写的很明白，而且这是一个临时的镜像，后面还要以官网的镜像地址为准。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3f2c1f4f64480.jpg" alt></p><p>我们跳转到根目录 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>就能找到这个<code>.bash_profile</code>隐藏文件，我们用vim打开这个文件 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后需要输入就把A键按一下进入编辑模式，把下面三个环境变量配置进去 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line">export PATH=/Users/xueliheng/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>注意下，第三个环境变量这里<code>/Users/xueliheng/</code>是我的根目录，然后<code>/flutter/</code>是我们刚刚解压的的zip包里面的<code>flutter</code>文件夹。上面两个环境变量是两个镜像地址，上文中也有说过。 接着<code>shift+：</code>然后输入<code>wq</code>保存并退出vim。输入如下命令： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>最后我们就可以验证一下flutter环境有没有配置成功了。输入： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure><p>看到如下如的打印信息就是配置成功了<br><img src="https://i.loli.net/2019/07/16/5d2db44407fa682753.jpg" alt></p><h3 id="4、配置Android-Studio"><a href="#4、配置Android-Studio" class="headerlink" title="4、配置Android Studio"></a>4、配置Android Studio</h3><p>如果没有下载<strong>Android Studio</strong>的话，就去<a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.android.google.cn%2Fstudio" target="_blank" rel="noopener">官网</a>去下载一下。 我们用<code>flutter doctor</code>命令去检查一下flutter的环境配置，我们可以看到如下打印 </p><p><img src="https://i.loli.net/2019/07/16/5d2db4676ec3a36838.jpg" alt></p><p>这里的每个<code>✗</code>都是我们要去解决的问题。不过他有告诉你应该怎么做。比如第一个提示： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices</span><br><span class="line">    ✗ Unable to locate Android SDK.</span><br></pre></td></tr></table></figure><p>这就是让你去下载Android Studio。我们在下载完成之后，打开AS让他去下载一些应该下载的东西。 如果这里有提示你 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices (Android SDK version 24.0.2)</span><br><span class="line">    ✗ Flutter requires Android SDK 28 and the Android BuildTools 28.0.3</span><br></pre></td></tr></table></figure><p>这就是在提示让你去升级一下SDK，然后命令如下 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;/Users/xueliheng/Library/Android/sdk/tools/bin/sdkmanager&quot; &quot;platforms;android-28&quot; &quot;build-tools;28.0.3&quot;</span><br></pre></td></tr></table></figure><p>注意一下，这个地方的升级是需要”科学上网“的，如果有的小伙伴没有这个条件的话，我这边百度云上面给大家准备了一个<a href="https://link.juejin.im?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F10yp8PuRXxk7YvcNR_dTy8Q" target="_blank" rel="noopener">链接</a>，提取码: e48c，大家可以下载下来。下载下来之后解压到<code>/Users/Library/Android/</code>这个文件夹。把原先的SDK直接覆盖就行了，就已经是最新的SDK了。 </p><p>接下来我们配置一下安卓的环境变量，还是在根目录下找到<code>.bash_profile</code>文件，并在其中添加四个环境变量 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=~/Library/Android/sdk</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/emulator</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br></pre></td></tr></table></figure><p>分别是： </p><ul><li>安卓sdk的路径</li><li>安卓的模拟器路径</li><li>安卓tools路径</li><li>安卓平台工具</li></ul><p>接下来我们再用<code>flutter doctor</code>检查的时候，显示的信息如下图<br><img src="https://i.loli.net/2019/07/16/5d2db4964a70b73490.jpg" alt></p><p>意思就是让我们去下载iOS的相关环境，我们先暂时放放，下面还有一个关于<strong>Android Studio</strong>的没有解决完</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">✗ Dart plugin not installed; this adds Dart specific functionality.</span><br></pre></td></tr></table></figure><p>这个就是缺少Flutter插件的意思，那么我们就去AS里面去配置一下好了。打开AS的<code>Preferences</code>，点击<code>Plugins</code>，在搜索栏中输入<code>flutter</code>，找到相应的插件，然后<code>Install</code>。当跳出安装Dart插件的提示界面时，记得点击Yes进行安装。安装完毕之后<code>restart IDE</code>重启AS。 重启之后就能看到多了一个这个东西<br><img src="https://i.loli.net/2019/07/16/5d2db4b731cbd14001.jpg" alt></p><p>我们再用<code>flutter doctor</code>检测一下<br><img src="https://i.loli.net/2019/07/16/5d2db4cdc6dd137908.jpg" alt></p><p>现在终于ok了。我们看到<code>[✓]Android Studio</code>说明，安卓的环境基本上配置成功，接下来我们就配置一下安卓的模拟器就好了。 </p><h3 id="5、安卓模拟器配置"><a href="#5、安卓模拟器配置" class="headerlink" title="5、安卓模拟器配置"></a>5、安卓模拟器配置</h3><p>在AS中找到模拟器配置如下图并选择<br><img src="https://i.loli.net/2019/07/16/5d2db4dacfde455330.jpg" alt></p><p>接着就创建设备，选择设备<br><img src="https://i.loli.net/2019/07/16/5d2db4e68a2ed68879.jpg" alt></p><p>选择系统<br><img src="https://i.loli.net/2019/07/16/5d2db4f6cdc5889902.jpg" alt></p><p>最后点击下载就完成了。 </p><h3 id="6、配置iOS环境"><a href="#6、配置iOS环境" class="headerlink" title="6、配置iOS环境"></a>6、配置iOS环境</h3><p>我们配置完了安卓的环境，再来<code>flutter doctor</code>检测一下。<br><img src="https://i.loli.net/2019/07/16/5d2db50ad75eb82331.jpg" alt></p><p>情况是这样的。目前1.5.4版本的Flutter需要匹配新版本的Xcode10.2.1。按照他提示的来试试，提示我Xcode版本太低了，需要升级Xcode<br><img src="https://i.loli.net/2019/07/16/5d2db5275c8f825074.jpg" alt></p><p>更新到最新的之后，继续走下面的步骤依旧会报错。那么我们可以试试下面的这个办法： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew link pkg-config</span><br><span class="line">$ brew install --HEAD usbmuxd</span><br><span class="line">$ brew unlink usbmuxd</span><br><span class="line">$ brew link usbmuxd</span><br><span class="line">$ brew install --HEAD libimobiledevice</span><br><span class="line">$ brew install ideviceinstaller</span><br></pre></td></tr></table></figure><p>这些执行完之后执行一下<code>flutter doctor</code><br><img src="https://i.loli.net/2019/07/16/5d2db5515858b19228.jpg" alt></p><p>最后还真是没错，全部配置完成了！那么我们就把iOS的也配置完毕了。</p><h3 id="7、VSCode的使用"><a href="#7、VSCode的使用" class="headerlink" title="7、VSCode的使用"></a>7、VSCode的使用</h3><p>VSCode上面使用的话，就简单多了，这里我就简答的赘述一下。 只需要将<code>Dart</code>和<code>Flutter</code>插件都下载下来<br><img src="https://i.loli.net/2019/07/16/5d2db5643b08597602.jpg" alt></p><p>然后<code>command+shift+p</code>输入<code>flutter</code>，选择<code>Flutter：New Project</code><br><img src="https://i.loli.net/2019/07/16/5d2db576e145096766.jpg" alt></p><p>输入要创建的项目的名称和存放项目的地址。如果提示需要指明flutter的SDK的路径，那就选择根目录那个经过解压得来的flutter的文件夹就好了。 接下来是这样一个界面<br><img src="https://i.loli.net/2019/07/16/5d2db588f1b5152482.jpg" alt></p><p>接下来我们选择<code>View-&gt;Start Debugging</code>来运行项目。<br><img src="https://i.loli.net/2019/07/16/5d2db59bb3b3338193.jpg" alt></p><p>当然这个过程需要你把Xcode的模拟器打开。运行完之后就能看到这个界面，也就是你的第一个Flutter工程啦！<br><img src="https://i.loli.net/2019/07/16/5d2db5ad5eaf434960.jpg" alt></p><h3 id="8、Hot-reload的使用"><a href="#8、Hot-reload的使用" class="headerlink" title="8、Hot reload的使用"></a>8、Hot reload的使用</h3><p>我们打开<code>lib/main.dart</code>文件，然后在其中找到 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have pushed the button this many times:</span><br></pre></td></tr></table></figure><p>并把这个改为 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have clicked the button this many times:</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2db5cc5b4f279074.jpg" alt><br>那么我们就能看到界面上多了一个小闪电<br><img src="https://i.loli.net/2019/07/16/5d2db5f044c0553935.jpg" alt></p><p>我们现在如果<code>command+s</code>保存一下更改的话，就能很快的在模拟器上面看到相应的更改，不需要再重新去编译一边。这一点简直是太棒了！解决了iOS开发者一个大痛点啊！！！ </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，flutter的环境搭建工作基本上就进行完毕了，整个过程大概耗时接近2个小时，这期间包括采坑、查资料、下载、科学上网…等等很蛋疼的事情。当然网速基本上是最大的障碍，浪费了很多的时间。所以也是需要一定的耐心来完成的。 后面的文章也会持续的更新，最近有点懈怠，OpenGL系列的文章有点拖更的节奏，这个后面会补起来。Flutter我也才刚刚接手，也是慢慢的来采坑，也会以此来记录自己的学习经历，也希望能多多跟大家交流。 再次我附上自己的邮箱<code>coderspr1nghall@gmail.com</code>欢迎讨论交流。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://juejin.im/post/5d0508d56fb9a07ec373eb9e" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2dbb03b8ef977558.jpg" alt></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 &lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://www.policx.com/program/Python/spider/"/>
    <id>https://www.policx.com/program/Python/spider/</id>
    <published>2019-07-15T02:06:04.000Z</published>
    <updated>2019-08-15T01:53:53.034Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。</p><a id="more"></a><p>其实爬虫这个概念很简单，基本可以分成以下几个步骤：</p><ul><li><p>发起网络请求</p></li><li><p>获取网页</p></li><li><p>解析网页获取数据</p></li></ul><p>发起网络请求这个步骤常用的类库有标准库urllib以及Python上常用的requests库。解析网页常用的类库有的BeautifulSoup。另外requests的作者还开发了另一个很好用的库requests-html，提供了发起请求和解析网页的二合一功能，开发小型爬虫非常方便。另外还有一些专业的爬虫类库，其中比较出名的就是scrapy。本文将会简单介绍一下这些类库，之后还会专门写一篇文章介绍scrapy的用法。</p><h2 id="标准库urllib"><a href="#标准库urllib" class="headerlink" title="标准库urllib"></a><strong>标准库urllib</strong></h2><p>首先先来看标准库urllib。标准库的优点是Python自带的，不需要安装任何第三方库，缺点就是urllib属于偏底层的库，使用起来比较麻烦。下面是urllib发起请求的一个简单例子，大家看看就好。可以看到为了发起一个简单的请求，我们需要创建opener、request、ProxyHandler等好几个对象，比较麻烦。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> urllib.request <span class="hljs-keyword">as</span> request</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="hljs-string">'https'</span>: <span class="hljs-string">'https://127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="hljs-string">'http'</span>: <span class="hljs-string">'http://127.0.0.1:1080'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'--------------使用urllib--------------'</span>)</span><br><span class="line">url = <span class="hljs-string">'http://www.google.com'</span></span><br><span class="line">opener = request.build_opener(request.ProxyHandler(proxies))</span><br><span class="line">request.install_opener(opener)</span><br><span class="line">req = request.Request(url, headers=headers)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a><strong>requests</strong></h2><p>requests是Kenneth Reitz大神的著名作品之一，优点就是极度简单和好用。首先来安装requests。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>下面是一个简单的例子，和上面urllib示例代码实现的功能相同，但是代码量少多了，也更易读。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="hljs-string">'--------------使用requests--------------'</span>)</span><br><span class="line">response = requests.get(<span class="hljs-string">'https://www.google.com'</span>, headers=headers, proxies=proxies)</span><br><span class="line">response.encoding = <span class="hljs-string">'utf8'</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>requests还可以方便的发送表单数据，模拟用户登录。返回的Response对象还包含了状态码、header、raw、cookies等很多有用的信息。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="hljs-string">'name'</span>: <span class="hljs-string">'yitian'</span>,</span><br><span class="line">    <span class="hljs-string">'age'</span>: <span class="hljs-number">22</span>,</span><br><span class="line">    <span class="hljs-string">'friends'</span>: [<span class="hljs-string">'zhang3'</span>, <span class="hljs-string">'li4'</span>]</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="hljs-string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">pprint(response.__dict__)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>关于requests我就不多做介绍了，因为它有中文文档，虽然比官方落后几个小版本号，不过无伤大雅，大家可以放心参阅。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://cn.python-requests.org/zh_CN/latest/</span><br></pre></td></tr></table></figure><h2 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a><strong>beautifulsoup</strong></h2><p>利用前面介绍的requests类库，我们可以轻易地获取HTML代码，但是为了从HTML中找到所需的数据，我们还需要HTML/XML解析库，BeautifulSoup就是这么一个常用的库。首先先来安装它：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>这次就用我简书主页作为例子，爬取一下我简书的文章列表。首先先用requests获取到网页内容。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"><span class="hljs-keyword">import</span> bs4</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><p>然后就是BeautifulSoup的代码了。在使用BeautifulSoup的时候首先需要创建一个HTML树，然后从树中查找节点。BeautifulSoup主要有两种查找节点的办法，第一种是使用find和find_all方法，第二种方法是使用select方法用css选择器。拿到节点之后，用contents去获取它的子节点，如果子节点是文本，就会拿到文本值，注意这个属性返回的是列表，所以要加[0]。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html = bs4.BeautifulSoup(response.text, features=<span class="hljs-string">'lxml'</span>)</span><br><span class="line">note_list = html.find_all(<span class="hljs-string">'ul'</span>, class_=<span class="hljs-string">'note-list'</span>, limit=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.select(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.contents[<span class="hljs-number">0</span>]</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>BeautifulSoup也有中文文档，同样也是稍微落后两个小版本，影响不大。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</span><br></pre></td></tr></table></figure><h2 id="requests-html"><a href="#requests-html" class="headerlink" title="requests-html"></a><strong>requests-html</strong></h2><p>这个类库是requests的兄弟，同样也是Kenneth Reitz大神的作品。它将请求网页和解析网页结合到了一起。本来如果你用requests的话只能请求网页，为了解析网页还得使用BeautifulSoup这样的解析库。现在只需要requests-html一个库就可以办到。<br>首先先来安装。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests-html</span><br></pre></td></tr></table></figure><p>然后我们来看看用requests-html如何重写上面这个例子。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line">note_list = r.html.find(<span class="hljs-string">'ul.note-list'</span>, first=<span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.find(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html除了可以使用css选择器来搜索以外，还可以使用xpath来查找。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html还有一个很有用的特性就是浏览器渲染。有些网页是异步加载的，直接用爬虫去爬只能得到一个空页面，因为数据是靠浏览器运行JS脚本异步加载的，这时候就需要浏览器渲染了。而浏览器渲染用requests-html做非常简单，只要多调用一个render函数即可。render函数有两个参数，分别指定页面下滑次数和暂停时间。render函数第一次运行的时候，requests-html会下载一个chromium浏览器，然后用它渲染页面。<br>简书的个人文章页面也是一个异步加载的例子，默认只会显示最近几篇文章，通过浏览器渲染模拟页面下滑，我们可以得到所有文章列表。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line"><span class="hljs-comment"># render函数指示requests-html用chromium浏览器渲染页面</span></span><br><span class="line">r.html.render(scrolldown=<span class="hljs-number">50</span>, sleep=<span class="hljs-number">0.2</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>类似的，今日头条的个人页面也是异步加载的，所以也得调用render函数。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">        <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(<span class="hljs-string">'https://www.toutiao.com/c/user/6662330738/#mid=1620400303194116'</span>, headers=headers)</span><br><span class="line">r.html.render()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r.html.find(<span class="hljs-string">'div.rbox-inner a'</span>):</span><br><span class="line">    title = i.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.toutiao.com<span class="hljs-subst">&#123;i.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》 <span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>最后是requests-html的官网地址以及中文文档。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://html.python-requests.org/</span><br><span class="line">https://cncert.github.io/requests-html-doc-cn/</span><br></pre></td></tr></table></figure><h2 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a><strong>scrapy</strong></h2><p>以上介绍的几个框架都是各自有各自的作用，把它们结合起来可以达到编写爬虫的目的，但是要说专业的爬虫框架，还是得谈谈scrapy。作为一个著名的爬虫框架，scrapy将爬虫模型框架化和模块化，利用scrapy，我们可以迅速生成功能强大的爬虫。<br>不过scrapy概念众多，要仔细说还得专门开篇文章，这里就只简单演示一下。首先安装scrapy，如果是Windows系统，还需要安装pypiwin32。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy  </span><br><span class="line">pip install pypiwin32</span><br></pre></td></tr></table></figure><p>然后创建scrapy项目并添加一个新爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject myproject</span><br><span class="line">cd myproject</span><br><span class="line">scrapy genspider my jianshu.com</span><br></pre></td></tr></table></figure><p>打开配置文件settings.py，设置用户代理，否则会遇到403错误。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br></pre></td></tr></table></figure><p>然后修改一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JianshuSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="hljs-string">'jianshu'</span></span><br><span class="line">    allowed_domains = [<span class="hljs-string">'jianshu.com'</span>]</span><br><span class="line">    start_urls = [<span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">'div.content'</span>):</span><br><span class="line">            <span class="hljs-keyword">yield</span> &#123;</span><br><span class="line">                <span class="hljs-string">'title'</span>: article.css(<span class="hljs-string">'a.title::text'</span>).get(),</span><br><span class="line">                <span class="hljs-string">'link'</span>: <span class="hljs-string">'https://www.jianshu.com'</span> + article.xpath(<span class="hljs-string">'a[@class="title"]/@href'</span>).get()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>最后运行一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl my</span><br></pre></td></tr></table></figure><br><table><thead><tr><th>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1563247765&ver=1731&signature=gm2iTUKE3itOZzvlz9SUtKCYNv*PqEYt2C7ReV7kd47e2ZAWPvG5GRXZUJsiRIde34Uh5FznBslw4hHhXmHQXyV3yz0tTdgds1RMCdai6Oyy98w2-iTBRWeJlpm3cWa8&new=1" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2d4c5ba835e96705.jpg" alt="Python"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>DDoS（分布式拒绝服务）攻击是无解的吗？</title>
    <link href="https://www.policx.com/news/ddos/"/>
    <id>https://www.policx.com/news/ddos/</id>
    <published>2019-07-14T07:26:43.000Z</published>
    <updated>2019-08-15T01:24:56.404Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>“</strong></p><p>DDOS？ </p><p>一言难尽啊！ </p><p>”</p><a id="more"></a><p>先说结论，DDoS是近年来网络攻击中的一棵“常青树”，的确很难缠，但说它是无解的，那也有点太看得起它了。虽然DDoS在对很多大平台的攻击中出尽了风头，但在现在互联网的解决方案中，并不缺乏应对DDoS的解决方案。 </p><p>说起DDoS攻击，我脑海里能够想到的全都是中国民间俗语，什么“双拳难敌四手，好汉架不住人多”，什么“千斤拨四两”，什么“乱拳打死老师傅”等等等等。 </p><p>之前有朋友跑来问我DDoS是个什么东西，为什么这么多互联网巨头都被搞得没有脾气，我记得我当时我是这么举的例子： </p><p>我们这一代人小的时候，自助餐开始在中国内地风行，那会儿这个行业里为了打击竞争对手，对手最惯常使用的阴招是雇佣很多五大三粗的人，给他们钱去对方的店里一通猛吃，杯盘狼藉之下，用不了几天这家自助餐就能给吃黄了。 </p><p>而DDoS攻击比这种还阴损，如果你开了一家餐馆，你的对手如果想搞你，最好的办法就是找一堆地痞流氓到你的店里坐的满满一屋子，你如果上前问，他们就一直跟你扯淡找麻烦，导致真正想吃饭的顾客一看这个情形，掉头就走了。 </p><p>用不了多久，你的餐馆就会开不下去，而你的竞争对手就会趁机蚕食掉你的市场份额，而放在网络语境里，这就是DDoS攻击的最基本原理。 </p><p>而这件事之所以难缠在于，一两个无赖根本成不了气候，想要耍流氓必须要有很多个无赖集结在一起。<strong>所以和现实世界中的无赖一样，DDoS真正的杀手锏在于利用能够发动的汹涌的流量，可以瞬间冲垮被攻击网站的服务器。</strong></p><p>如果我们回溯一下历史的话，会发现黑客组织之所以会有组织有预谋的发起DDoS攻击，基本上都是基于以下几个原因： </p><ul><li><p>有些行业如果网站被恶意攻击，会造成很难估量的损失，这个时候黑客发动DDoS攻击的初衷一般是出于敲诈勒索，为了保证企业的正常运转，他们通常愿意向黑客付高额的赎金； </p></li><li><p>行业内血海一片，DDoS是恶意竞争的屠刀。这个现象从逻辑上，其实雇佣无赖去占领对手餐馆的原理是一毛一样的，而且DDOS攻击早已产业化，现在中国的DDOS黑市，出钱请黑客打1G的流量到一个网吧或网站，市场价只要不到50块钱，但对于一个创业公司或者干脆就是一个小网吧来说，这已经算是可以灭顶的无妄之灾了。 </p></li><li><p>DDoS攻击往往成为掩盖真实网络攻击的烟雾弹，在遭受DDoS攻击的企业中，部分企业还伴随数据丢失的现象，黑客利用DDoS攻击掩盖其窃取用户隐私的真实目的，这种攻击行为在社交网站、金融领域等用户隐私高价值的行业尤为高发。 </p></li></ul><p>比如说，去年年初的时候，荷兰第一大银行荷兰商业银行于2018年1月28日晚间遭到DDoS攻击；第二大银行荷兰合作银行的网银服务29日早晨遭到攻击；第三大银行荷兰银行在那一周内共遭到7次网络攻击，仅周末就有3次。 </p><p>不过这一次发生在荷兰的针对银行系统的攻击并没有造成用户隐私的泄露，原因在于这仅仅是一次来自俄罗斯一个网络间谍组织Cozy Bear对荷兰情报组织AIVD侵犯其计算机的“单纯”的报复行为。<strong>但并不是所有黑客组织发起的DDoS攻击都如此单纯。</strong></p><p>2018年年底时万豪酒店发布了一则公告，称其旗下喜达屋酒店的5亿人次的信息被泄露，共计3.27亿人，泄露信息包括姓名、邮寄地址、电话号码、电子邮件昂面地址、护照号码、出生日期、性别等等入住信息，更糟糕的是万豪无法确定，侵入酒店系统的第三方黑客，在窃取的信息中是否包含客人的银行卡号和密码。（此案例和DDOS攻击无关，建议采用其他案例，比如2011年4月20日至26日，索尼遭受DDoS攻击，目的是为了掩盖盗取索尼PS的用户数据。） </p><p>而游戏领域，则是DDoS攻击的另一个重灾区，不光是刚才前文中提到的暴雪，包括索尼、金山、网易在内的众多知名游戏公司都曾数次遭受攻击，可以说DDoS攻击是游戏企业的噩梦。 </p><p>许多刚创业的游戏公司，可能刚上线就被打死，而一些处在融资阶段的游戏公司，由于遭遇攻击而被迫停服，则很大程度上会调低投资人的预期，甚至导致融资失败。 </p><p>而这些因素，都是竞对打压或者敲诈勒索的绝对软肋。 </p><p>从以上的几个案例我们不难看出，和现实中的耍流氓和敲诈勒索相比，通过网络手段进行攻击的风险和成本更低，坏蛋的嘴脸也更穷凶极恶一点，无论是政府机构还是企业平台，无论你是巨头还是小蚂蚁，只要你身上有羊毛可以薅，你都时刻面临着被洗劫的风险 </p><p>不过刚在开头我也讲了，虽然DDoS很难缠很让人头痛，但本质上图并不是无解的。 </p><p>回到我最开始讲的那个例子。 </p><p>你是一个餐馆老板，过去三十年一直是个老老实实的厨子，突然面对五十个臭流氓到你店里耍无赖的时候，你最好的应对方法，应该是什么？ </p><p>自己组建一支人马，和这些臭流氓正面刚？这恐怕不行，因为你不是臭流氓，你没有相应的作战经验。 </p><p>报警请人民警察来帮忙处理？这恐怕也不行，人家在你店里没有打砸抢，只是“温和的”非暴力不合作，警察来了也只能当民事调解，并且人家马仔众多，明天再换一拨新面孔来，玩的你一点脾气都没有。 </p><p>这就是面对DDoS时，无论是巨头还是小蚂蚁，他们的实实在在的困境。 </p><p>但正所谓“道高一尺魔高一丈”，你在云上和我耍流氓，那我就在云上回击。 </p><p><strong>“云”的事儿，不如还交还给云来处理。</strong>我认为就目前DDoS的在攻击量级上的疯狂进击的前提下，云计算服务厂商或许是狙击它们的最有效手段。 </p><p>2018年年初，峰值1.35TB/秒的流量冲击了开发者平台 GitHub。这是第一次TB量级的DDoS攻击。GitHub 受到攻击后，服务器断断续续，无法访问。攻击发生 10 分钟后，GitHub 向CDN 服务商 Akamai 请求协助，访问 GitHub 的流量已经由后者接管并在15分钟之内完成了防御。 </p><p>Akamai的相关负责人在接受采访时说，我们是基于迄今为止最大规模 DDoS 攻击五倍的峰值而做的相应准备，所以 1.3T 对我们来说是小意思。 </p><p>在关于流量峰值这一点上，我认为饱受双11、双12、618等全民购物狂欢的电商巨头们更有发言权，就拿京东举例子好了。 </p><p>京东云在之前发布的高防版的DDoS服务中，展示出了非常明确的信心是，在多年的电商狂欢流量对抗中，京东云已经在实战中建立了一套完备的防御机制，无论是在流量峰值的建模上，还是在DDoS的防御算法上，它的部署都远远不是纸上谈兵，而是拳拳到肉的经受住了实战的洗礼。要知道，全世界每年有超过5成的DDoS攻击都来自中国，而我们的国家也是全世界超过美国的第一大“肉鸡”市场，由电商大数据加持演化而来的京东云，它在云安全的理解上可以说是非常深刻了。 </p><p>所以说，如果说一定要有一个结论，我想说“上帝的归上帝，而云上的归云上”，像京东云这样的基于电商大数据考验的云计算平台，或许才是对抗DDoS的最终答案。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f3adcbb2ed60428.png" alt="jd"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;“&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DDOS？ &lt;/p&gt;
&lt;p&gt;一言难尽啊！ &lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.policx.com/program/JavaScript/node/"/>
    <id>https://www.policx.com/program/JavaScript/node/</id>
    <published>2019-07-13T16:06:04.000Z</published>
    <updated>2019-08-15T01:53:53.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/15/5d2c47df96f5d45317.jpg" alt="Node.js"></p><p>能方便地搭建响应速度快、易于扩展的网络应用，Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>中文：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org</a>、<a href="https://nodejs.cn/" target="_blank" rel="noopener">https://nodejs.cn</a></p><p>简单说Node.js就是运行在服务器端的JavaScript，是现在流行的语言中能同时运行在前端与后台的程序语言，你可以把JavaScript想像成Java与C#。相关技术：</p><p>数据库：MongoDB，非关系型数据库，NoSQL（Not only SQL）</p><p>MVC框架：AngularJS</p><p>Web服务器：Express</p><p>模板引擎：jade、ejs、htmljs、swig、hogan.js</p><h1 id="二、搭建Node-js开发环境"><a href="#二、搭建Node-js开发环境" class="headerlink" title="二、搭建Node.js开发环境"></a>二、搭建Node.js开发环境</h1><h2 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h2><p>去官网下下载最新版本的Node.js一步一步按提示安装即可，如果安装失败就手动安装，将Node.js的安装位置配置到环境变量的path中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装完成后启动命令行，测试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="三、第一个Node-js程序"><a href="#三、第一个Node-js程序" class="headerlink" title="三、第一个Node.js程序"></a>三、第一个Node.js程序</h1><p>在上面的示例中，我们是通过IDE完成编译与运行的，其实手动运行也可以，比如编写一段代码如下：</p><blockquote><p>server.js</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//依赖一个http模块，相当于java中的import，与C#中的using</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">//创建一个服务器对象</span><br><span class="line">server = http.createServer(function (req, res) &#123;</span><br><span class="line">//设置请求成功时响应头部的MIME为纯文本</span><br><span class="line">res.writeHeader(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">//向客户端输出字符</span><br><span class="line">res.end(&quot;Hello World\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//让服务器监听本地8000端口开始运行</span><br><span class="line">server.listen(8000,&apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server is runing at 127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>在node环境下解释运行：<br><img src="https://i.loli.net/2019/07/14/5d2af984d2fae77488.jpg" alt></p><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2af89c2b5b226144.jpg" alt></p><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。<br>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。<br>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</p><h1 id="四、NPM（Node-js包管理器）"><a href="#四、NPM（Node-js包管理器）" class="headerlink" title="四、NPM（Node.js包管理器）"></a>四、NPM（Node.js包管理器）</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：  </p><ul><li>a)、允许用户从NPM服务器下载别人编写的第三方包到本地使用。  </li><li>b)、允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。  </li><li>c)、允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><h2 id="4-1、查看npm版本"><a href="#4-1、查看npm版本" class="headerlink" title="4.1、查看npm版本"></a>4.1、查看npm版本</h2><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p><h2 id="4-2、升级npm"><a href="#4-2、升级npm" class="headerlink" title="4.2、升级npm"></a>4.2、升级npm</h2><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="4-3、安装模块"><a href="#4-3、安装模块" class="headerlink" title="4.3、安装模块"></a>4.3、安装模块</h2><blockquote><p>npm install <module name> -参数</module></p></blockquote><p>如果带参数-g表示全局安装，否则只是安装到某个目录下。</p><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install express -g</span><br></pre></td></tr></table></figure><h2 id="4-4、卸载模块"><a href="#4-4、卸载模块" class="headerlink" title="4.4、卸载模块"></a>4.4、卸载模块</h2><p>我们可以使用以下命令来卸载 Node.js 模块。  </p><blockquote><p>sudo npm uninstall <module name></module></p></blockquote><p>如先使用安装指令安装bootstrap:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>再使用卸载指令删除模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall bootstrap</span><br></pre></td></tr></table></figure><p>可以到 /node_modules/ 目录下查看包是否还存在</p><h2 id="4-5、模块列表"><a href="#4-5、模块列表" class="headerlink" title="4.5、模块列表"></a>4.5、模块列表</h2><p>使用模块列表命令可以方便的看到当前项目中依赖的包：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h2 id="4-6、更新模块"><a href="#4-6、更新模块" class="headerlink" title="4.6、更新模块"></a>4.6、更新模块</h2><p>我们可以使用以下命令更新模块：<br><code>npm update</code>模块名称<br><code>npm up -g</code> 模块名称</p><h2 id="4-7、搜索模块"><a href="#4-7、搜索模块" class="headerlink" title="4.7、搜索模块"></a>4.7、搜索模块</h2><p><code>npm search</code>模块名称</p><h2 id="4-8、NPM-常用命令"><a href="#4-8、NPM-常用命令" class="headerlink" title="4.8、NPM 常用命令"></a>4.8、NPM 常用命令</h2><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。<br>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。<br>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。<br>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。<br>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。<br>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></package></package></p><h2 id="4-9、更换NPM-镜像"><a href="#4-9、更换NPM-镜像" class="headerlink" title="4.9、更换NPM 镜像"></a>4.9、更换NPM 镜像</h2><p>因为npm的服务器在国外，在网络状态不好的情况下引入一个模块会因为网络延迟而失败，可以更换成国内速度更快的镜像服务器，这里以使用淘宝 NPM 镜像（<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>）为例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/15/5d2c481d14f7270384.jpg" alt></p><p>这样就可以使用 cnpm 命令来安装模块了：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＄ cnpm install [name]</span><br></pre></td></tr></table></figure><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><p>如是安装失败，可以试试：</p><figure class="highlight zsh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">alias</span> cnpm=<span class="hljs-string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">--cache=<span class="hljs-variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">--userconfig=<span class="hljs-variable">$HOME</span>/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">  --userconfig=$HOME/.cnpmrc"'</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。使用Node.js作为AngularJS开发Web服务器的最佳方式是使用Express模块。</p><p>Express官网： <a href="https://expressjs.com/" target="_blank" rel="noopener">https://expressjs.com/</a></p><p>Express4.x API：<a href="https://expressjs.com/zh-cn/4x/api.html" target="_blank" rel="noopener">https://expressjs.com/zh-cn/4x/api.html</a></p><p><img src="https://i.loli.net/2019/07/15/5d2c484698cd427801.jpg" alt></p><h2 id="5-2、Express框架核心特性"><a href="#5-2、Express框架核心特性" class="headerlink" title="5.2、Express框架核心特性"></a><strong>5.2、Express框架核心特性</strong></h2><p>可以设置中间件来响应 HTTP 请求。</p><p>定义了路由表用于执行不同的 HTTP 请求动作。</p><p>可以通过向模板传递参数来动态渲染 HTML 页面。</p><p>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。</p><p>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p><h2 id="5-3、安装-Express"><a href="#5-3、安装-Express" class="headerlink" title="5.3、安装 Express"></a><strong>5.3、安装 Express</strong></h2><p>安装 Express 并将其保存到依赖列表中：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>以上命令全局安装express。也可安装时指定安装中间件。</p><p><em>body-parser</em> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</p><p><em>cookie-parser</em> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p><p><em>multer</em> - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">＄ npm install body-parser --save  </span><br><span class="line">＄ npm install cookie-parser --save  </span><br><span class="line">＄ npm install multer --save</span><br></pre></td></tr></table></figure><p>默认这些模块都已经添加。</p><h2 id="5-4、第一个Express框架实例"><a href="#5-4、第一个Express框架实例" class="headerlink" title="5.4、第一个Express框架实例"></a>5.4、第一个Express框架实例</h2><p>接下来我们使用 Express 框架来输出 “Hello World”。<br>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。</p><p>创建一个目录，如Project，进入命令行：</p><p>使用npm install express 导入express模块。</p><p>在目录下创建hello.js文件，如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//引入express模块</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">//创建一个app对象，类似一个web 应用（网站）</span><br><span class="line">var app = express();</span><br><span class="line">//接受指定路径的请求，指定回调函数</span><br><span class="line">app.get(&apos;/&apos;, function (req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//创建一个web服务器，可以认为就是web服务器对象</span><br><span class="line">//监听8081端口，当监听成功时回调</span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">   var host = server.address().address;  //地址</span><br><span class="line">   var port = server.address().port;  //端口</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-5、开发Express项目"><a href="#5-5、开发Express项目" class="headerlink" title="5.5、开发Express项目"></a>5.5、开发Express项目</h2><p><img src="https://i.loli.net/2019/07/14/5d2b00e97910997783.jpg" alt></p><p>创建好的项目如下：<br><img src="https://i.loli.net/2019/07/14/5d2b02dad205355700.jpg" alt></p><p>app.js是网站：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><p>bin\www是web服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">/**</span><br><span class="line"> * 依赖模块，导入</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;nodejsexpress:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从上下文环境中获得监听端口，如果空则3000</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Web服务器</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开始监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);  //指定发生错误时的事件</span><br><span class="line">server.on(&apos;listening&apos;, onListening);  //当监听成功时的回调</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 规范化端口</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *错误事件监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  //错误处理</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);  //结束程序</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当用户访问服务器成功时的回调</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/index.js路由，有点类似控制器或Servlet：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 获得首页 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>views/index.ejs首页视图：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在www上右键选择“运行方式”-&gt;Run ‘/bin/www’ 运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b034bcca6187136.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b044c2b12347829.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b041724d6091090.jpg" alt></p><h3 id="5-5-1、request对象"><a href="#5-5-1、request对象" class="headerlink" title="5.5.1、request对象"></a>5.5.1、request对象</h3><p>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ul><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ul><h3 id="5-5-2、response对象"><a href="#5-5-2、response对象" class="headerlink" title="5.5.2、response对象"></a>5.5.2、response对象</h3><p>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.app：同req.app一样</span><br><span class="line">res.append()：追加指定HTTP头</span><br><span class="line">res.set()在res.append()后将重置之前设置的头</span><br><span class="line">res.cookie(name，value [，option])：设置Cookie</span><br><span class="line">opition: domain / expires / httpOnly / maxAge / path / secure / signed</span><br><span class="line">res.clearCookie()：清除Cookie</span><br><span class="line">res.download()：传送指定路径的文件</span><br><span class="line">res.get()：返回指定的HTTP头</span><br><span class="line">res.json()：传送JSON响应</span><br><span class="line">res.jsonp()：传送JSONP响应</span><br><span class="line">res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</span><br><span class="line">res.redirect()：设置响应的Location HTTP头，并且设置状态码302</span><br><span class="line">res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</span><br><span class="line">res.send()：传送HTTP响应</span><br><span class="line">res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</span><br><span class="line">res.set()：设置HTTP头，传入object可以一次设置多个头</span><br><span class="line">res.status()：设置HTTP状态码</span><br><span class="line">res.type()：设置Content-Type的MIME类型</span><br></pre></td></tr></table></figure><h3 id="5-5-3、express获取参数有三种方法"><a href="#5-5-3、express获取参数有三种方法" class="headerlink" title="5.5.3、express获取参数有三种方法"></a>5.5.3、express获取参数有三种方法</h3><p>req.query 适合 <a href="https://localhost:3000/form?num=8888" target="_blank" rel="noopener">https://localhost:3000/form?num=8888</a><br>req.body 适合<a href="https://localhost:3000/form，Post请求中的参数" target="_blank" rel="noopener">https://localhost:3000/form，Post请求中的参数</a><br>req.params 适合获取form后的num：<a href="https://localhost:3000/form/num" target="_blank" rel="noopener">https://localhost:3000/form/num</a>  </p><p>（一）、GET</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = req.query.num;</span><br><span class="line">res.send(&quot;你获取的get数据为:&quot; + num);</span><br></pre></td></tr></table></figure><p>（二）、POST</p><p>解析post数据需要用到body-parser</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">//引入body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">//需要use的</span><br><span class="line">app.use(bodyParser.json()); // for parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">extended: true</span><br><span class="line">&#125;)); // for parsing application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.post(&apos;/form&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.body.num;</span><br><span class="line">res.send(&quot;你获取的post数据为:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>public/test.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"tinyphp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（三）、获取路径参数</p><p>app.js  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.get(&apos;/form/:num&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.params.num;</span><br><span class="line">res.send(&quot;你获取到form/后的参数:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="5-6-ejs基础"><a href="#5-6-ejs基础" class="headerlink" title="5.6 ejs基础"></a>5.6 ejs基础</h2><p>ejs是一个Express Web应用的模板引擎，在NodeJS开发中可以选择的模板引擎可能是所有Web应用开发中范围最广的，如jade、ejs、htmljs、swig、hogan.js，但ejs是最容易上手的，与jsp,asp,php的原始模板引擎风格很像。</p><p>官网：<a href="https://www.embeddedjs.com/" target="_blank" rel="noopener">https://www.embeddedjs.com/</a></p><p>添加一个<code>product.js</code>路由：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  var products=[];</span><br><span class="line">  products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">  //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">  res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>在views目录下添加<code>product.ejs</code>视图，这里是一个简单的MVC：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span> - 产品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"80%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%pdts.forEach(function(pdt,index)&#123;%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=index+1%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.name%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.price%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%&#125;);%</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">%=pdts[i].name%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改app，注册定义好的模块product：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> index = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/index'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/users'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> pdts = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/product'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//指定视图引擎为ejs</span></span><br><span class="line">app.set(<span class="hljs-string">'views'</span>, path.join(__dirname, <span class="hljs-string">'views'</span>));</span><br><span class="line">app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="hljs-comment">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class="line">app.use(logger(<span class="hljs-string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="hljs-string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/'</span>, index);</span><br><span class="line">app.use(<span class="hljs-string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="hljs-string">'/pdt'</span>, pdts);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b092ca2eb115835.jpg" alt></p><blockquote><p>原因：没有安装ejs模块<br>解决办法：进入到项目目录，安装ejs</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save ejs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b09efe80ba53992.jpg" alt></p></blockquote><p>重新运行：<br><img src="https://i.loli.net/2019/07/14/5d2b0a951a09231745.jpg" alt></p><h2 id="5-7、lodash"><a href="#5-7、lodash" class="headerlink" title="5.7、lodash"></a>5.7、lodash</h2><p>这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。可以非常方便的操作json。</p><p>官网：<a href="https://lodashjs.com/" target="_blank" rel="noopener">https://lodashjs.com/</a></p><p>安装：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash</span><br></pre></td></tr></table></figure><p>安装时先用cd切换到当前项目下。</p><p>如果浏览器使用可以直接引入：</p><script src="lodash.js"></script><p>添加lodash依赖：<br><img src="https://i.loli.net/2019/07/14/5d2b0c4c7c14a17367.jpg" alt></p><p>依赖成功后会在package.json中添加引用：<br><img src="https://i.loli.net/2019/07/14/5d2b0c9e03f1844597.jpg" alt></p><p>后台Node.js使用，可以引入模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//导入lodash模块</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var products=[];</span><br><span class="line">products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">//1、取出第一个元素</span><br><span class="line">var obj1=_.first(products);</span><br><span class="line">console.log(obj1.name);  //ZTE U880</span><br><span class="line"></span><br><span class="line">//2、取出最后一个元素</span><br><span class="line">var obj2=_.last(products);</span><br><span class="line">console.log(obj2.name);  //iPhone 7 Plus 128G</span><br><span class="line"></span><br><span class="line">//3、指定查找条件返回符合条件的索引</span><br><span class="line">var obj3=_.findIndex(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj3);  //2</span><br><span class="line"></span><br><span class="line">//4、指定查找条件返回查找到的对象</span><br><span class="line">var obj4=_.find(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj4);  //&#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;</span><br><span class="line"></span><br><span class="line">//5、排序</span><br><span class="line">var obj5=_.orderBy(products,[&quot;price&quot;,&quot;name&quot;],[&quot;desc&quot;,&quot;asc&quot;]);</span><br><span class="line">console.log(obj5);</span><br><span class="line"></span><br><span class="line">//[ &#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;HuWei 荣耀8&apos;, price: 1899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;ZTE U880&apos;, price: 899.8 &#125; ]</span><br><span class="line"></span><br><span class="line">//6、查找价格为1899.8的产品的key</span><br><span class="line">var obj6=_.findKey(products,&#123;price:1899.8&#125;);</span><br><span class="line">console.log(obj6);   //1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/14/5d2b0f023a83710965.jpg" alt></p><p>API的使用非常简单，但需要注意版本，可以现查现用，API地址：<a href="https://lodash.com/docs/4.17.2%20" target="_blank" rel="noopener">https://lodash.com/docs/4.17.2 </a></p><h2 id="5-8、参数"><a href="#5-8、参数" class="headerlink" title="5.8、参数"></a>5.8、参数</h2><h3 id="5-8-1、URL中的参数占位"><a href="#5-8-1、URL中的参数占位" class="headerlink" title="5.8.1、URL中的参数占位"></a>5.8.1、URL中的参数占位</h3><p>Checks route params (req.params), ex: /user/:id</p><p>127.0.0.1:3000/index，这种情况下，我们为了得到index，我们可以通过使用req.params得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式；</p><p><code>http://127.0.0.1:3000/pdt/9527/phone</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得产品根据Id</span><br><span class="line">router.get(&apos;/:id/:category&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(request.params.id+&quot;,&quot;+request.params.category);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b10e8e678f43145.jpg" alt></p><h3 id="5-8-2、URL中的QueryString"><a href="#5-8-2、URL中的QueryString" class="headerlink" title="5.8.2、URL中的QueryString"></a>5.8.2、URL中的QueryString</h3><p>Checks query string params (req.query), ex: ?id=12</p><p>127.0.0.1:3000/index?id=12，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用req.query.id就可以获得，类似于PHP的get方法；</p><p><code>http://127.0.0.1:3000/pdt/9527?name=jobs</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(&quot;name:&quot;+request.query.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b12be0371490358.jpg" alt></p><h3 id="5-8-3、HTTP正文中的参数"><a href="#5-8-3、HTTP正文中的参数" class="headerlink" title="5.8.3、HTTP正文中的参数"></a>5.8.3、HTTP正文中的参数</h3><p>在post请求中获得表单中的数据。</p><p>Checks urlencoded body params (req.body), ex: id=</p><p>127.0.0.1：300/index，然后post了一个id=2的值，这种方式是获取客户端post过来的数据，可以通过req.body.id获取，类似于PHP的post方法；</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222150412682-243382356.png" alt></p><p>页面：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &lt;%= title %&gt;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%pdts.forEach(function(pdt,index)&#123;%&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=index+1%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.name%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.price%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%&#125;);%&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=pdts[i].name%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            &lt;%if(typeof msg!=&quot;undefined&quot;)&#123;%&gt;</span><br><span class="line">                &lt;%=msg%&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">        &lt;form action=&quot;pdt/add&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                名称：&lt;input name=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                价格：&lt;input name=&quot;price&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/add&apos;,function(request,res,next)&#123;</span><br><span class="line">    var entity=&#123;name:request.body.name,price:request.body.price&#125;;</span><br><span class="line">    products.push(entity);</span><br><span class="line">      //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">      res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products,msg:&quot;添加成功&quot;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151340745-1374859267.png" alt></p><h2 id="5-9、JSON"><a href="#5-9、JSON" class="headerlink" title="5.9、JSON"></a>5.9、JSON</h2><p>如果需要Node.js向外提供返回JSON的接口，Express也是非常方便的，可以使用原来在浏览器中使用到的JSON对象，这是一个浏览器内置对象在服务可以直接使用：</p><p>将对象序列化成字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象</span><br><span class="line">var rose=&#123;&quot;name&quot;:&quot;Rose&quot;,&quot;weight&quot;:&quot;65&quot;&#125;;</span><br><span class="line">            //序列化成字符串</span><br><span class="line">            var str=JSON.stringify(rose);</span><br><span class="line">            alert(str);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151858839-27300214.png" alt></p><p>反序列化，将字符转换成对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成JavaScript对象</span><br><span class="line">var markStr=&apos;&#123;&quot;name&quot;:&quot;mark&quot;,&quot;weight&quot;:&quot;188&quot;&#125;&apos;;</span><br><span class="line">            var mark=JSON.parse(markStr);</span><br><span class="line">            alert(mark.name+&quot;，&quot;+mark.weight);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222152634417-1260078212.png" alt></p><p>Express已经封装了一个json方法，直接调用该方法就可以序列化对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/rest&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(products);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、RESTful（表述性状态转移）"><a href="#六、RESTful（表述性状态转移）" class="headerlink" title="六、RESTful（表述性状态转移）"></a>六、RESTful（表述性状态转移）</h1><p>REST是英文Representational State Transfer的缩写，中文称之为“表述性状态转移” 基于HTTP协议，是另一种服务架构，传递是JSON、POX（Plain Old XML）而不是SOAP格式的数据，充分利用HTTP谓词（Verb），侧重数据的传输，业务逻辑交给客户端自行处理</p><p>REST是一种分布式服务架构的风格约束，像Java、.Net（WCF、WebAPI）都有对该约束的实现，使URL变得更加有意义，更加简洁明了，如：</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>get请求 表示获得所有产品的第1个</p><p><a href="https://www.zhangguo.com/products/product" target="_blank" rel="noopener">https://www.zhangguo.com/products/product</a><br>post请求 表示添加一个产品</p><p><a href="https://www.zhangguo.com/products/1/price" target="_blank" rel="noopener">https://www.zhangguo.com/products/1/price</a><br>get请求 表示获得第1个产品的价格</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>delete请求 删除编号为1的产品</p><p>REST设计需要遵循的原则<br>网络上的所有事物都被抽象为资源（resource）；<br>每个资源对应一个唯一的资源标识符（resource identifier）；<br>通过通用的连接器接口（generic connector interface）对资源进行操作；<br>对资源的各种操作不会改变资源标识符；<br>所有的操作都是无状态的（stateless）</p><p>谓词<br><strong>GET</strong><br>表示查询操作，相当于Retrieve、Select操作<br><strong>POST</strong><br>表示插入操作，相当于Create，Insert操作<br><strong>PUT</strong><br>表示修改操作，相当于Update操作<br><strong>DELETE</strong><br>表示删除操作，相当于Delete操作</p><p>其它还有：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161223101344557-1727952968.png" alt></p><p>NodeJS+Express可以很容易的实现REST</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>application/json</li><li>res.setHeader(‘Content-Type’, ‘application/json;charset=utf-8’);</li></ul><p>示例代码cars.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var cars=[];</span><br><span class="line">cars.push(&#123;id:201701,name:&quot;BMW&quot;,price:190,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201702,name:&quot;BYD&quot;,price:25,speed:&quot;160km/h&quot;,color:&quot;红色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201703,name:&quot;Benz&quot;,price:300,speed:&quot;215km/h&quot;,color:&quot;蓝色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201704,name:&quot;Honda&quot;,price:190,speed:&quot;170km/h&quot;,color:&quot;黑色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201705,name:&quot;QQ&quot;,price:130,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line"></span><br><span class="line">/* Get */</span><br><span class="line">/*获得所有汽车*/</span><br><span class="line">/*url /cars/*/</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.json(cars);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Get*/</span><br><span class="line">/*获得汽车通过id*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">     //从路径中映射参数，转换成数字</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var car=_.find(cars,&#123;id:id&#125;);</span><br><span class="line">      res.json(car);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Post*/</span><br><span class="line">/*添加汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.post(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      car.id=_.last(cars).id+1;  //将编号修改为最后一辆车的编号+1</span><br><span class="line">      cars.push(car);  //将汽车对象添加到集合中</span><br><span class="line">      res.json(car);  //将添加成功的车以json的形式返回</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Put*/</span><br><span class="line">/*修改汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.put(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      console.log(req.body);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:parseInt(car.id)&#125;);  //根据id获得车在集合中的下标</span><br><span class="line"></span><br><span class="line">      cars[index]=car;  //替换原对象</span><br><span class="line">      //res.json(car);  //将修改后的车以json的形式返回</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;更新成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Delete*/</span><br><span class="line">/*删除汽车*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.delete(&apos;/id/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">      //获得url中的编号参数</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:id&#125;);  //根据id获得车在集合中的下标</span><br><span class="line">      cars.splice(index,1);   //在cars数组中删除下标从index开始的1条数据</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;删除成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>示例代码app.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line">var pdts = require(&apos;./routes/product&apos;);</span><br><span class="line">var task = require(&apos;./routes/task&apos;);</span><br><span class="line">var cars = require(&apos;./routes/cars&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line">app.use(&apos;/pdt&apos;, pdts);</span><br><span class="line">app.use(&quot;/task&quot;,task);</span><br><span class="line">app.use(&quot;/cars&quot;,cars);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得所有汽车  </li><li>url /cars/</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b27eb42dea22132.jpg" alt></p><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得汽车通过id</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b28e456cdf58111.jpg" alt></p><blockquote><p><strong>Post</strong></p></blockquote><ul><li>添加汽车  </li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b30e46f28836556.jpg" alt></p><p>参数中的json格式一定要使用标准格式，注意引号，注意Content-Type，默认的Content-Type类型是：application/x-www-form-urlencoded</p><blockquote><p><strong>Put</strong></p></blockquote><ul><li>修改汽车</li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3434410e778260.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b344cd080581595.jpg" alt></p><blockquote><p><strong>Delete</strong>  </p></blockquote><ul><li>删除汽车</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3526d5bff57574.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b35474e9c447189.jpg" alt></p><p><strong>node.js跨域</strong></p><p>修改app.js文件拦截所有的请求，修改头部</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">app.all(&apos;*&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">    res.header(&quot;X-Powered-By&quot;, &apos; 3.2.1&apos;);</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);</span><br><span class="line">    if(req.method == &quot;OPTIONS&quot;) &#123;</span><br><span class="line">        res.send(&quot;200&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2017.cnblogs.com/blog/63651/201801/63651-20180108142729785-1121920664.png" alt></p><h1 id="九、视频"><a href="#九、视频" class="headerlink" title="九、视频"></a>九、<a href="https://www.bilibili.com/video/av17977069" target="_blank" rel="noopener">视频</a></h1><p>From: <a href="https://www.cnblogs.com/best/p/6204116.html" target="_blank" rel="noopener">https://www.cnblogs.com/best/p/6204116.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Node.js" scheme="https://www.policx.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hexo front-matter 怎么写？</title>
    <link href="https://www.policx.com/blog/front-matter/"/>
    <id>https://www.policx.com/blog/front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-08-15T01:24:10.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr><tr><td>link</td><td>点击文章跳转地址</td><td></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/news/iOSYear/"/>
    <id>https://www.policx.com/news/iOSYear/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-08-15T01:48:07.226Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">hackernoon</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/news/BitTorrent/"/>
    <id>https://www.policx.com/news/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/notes/partner/"/>
    <id>https://www.policx.com/notes/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-08-15T01:05:38.683Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+tkAfQX9Cv80WFDFjSWT/uPD+0A/bWlSmC0xjduabVebRt/DiNok2eZzsd0TGWksw9sIIHTGIk6S9RZxSZfEnkWSJOYH7ooSLCmjfZ5n4cOTQzEScEN5ZlLKDpqXAQJfT0cBJbuMGVKbuIz83bjIEJyPjYVjbrRuIvm2FqWQab2aoYmeeQwtvgUaFpB75Le4OTKC3BC39r+igdfwMb6Z3XmGNsHrPUJip3/x9nzF3HUXQRprNRijQgx1Sd15OYZwdge5flHEuNK9OefF1GSDEOr1zHSaF2DRJ/K8Eu/eHvdJisqlZkkQJcCs1B6XVJYOnciSwgUsQvbYUcocNp/wTPCFxuqohjv2qxWpJjIQ2ZCvl8JvpXIIFl4hknmIU2IGnYe6QljjOWhzyqDeKFYYJnNg1AlvLOEEG98UN4YZkTA/6XDmrUshMVgN27RiqtX55u1/mmRvPTkIXS2ve4AQUIljmASzKwl5IJdcezO7XHYlnqzWVk0HLkASOqIzcrTz6x5YekfzQc7+dVPkYBf4cL6PbzuIGcmCjel3itYwQ7Ra7VGAWgaru+bsdasrteYEoNFS/MjKGjmN+EKQKT5f4JfTmCzsj9dfJrhxaARHITCAIygPERykkL6NTVCJrG6TmWXi9lYXs7xuv/JnTJgWT4KX8lIFbApLoimaIYw/tfe5Hx9xTShZZ5Fn/60HhtwWb66EiCfJLewlPwMJxW9TTVt1Q87wnZ1KAnSWcgh5TrLsUmsBXDpj0X8nG4i1IhrKGL7QA2sbj8NOgcn6nU86DqK0AK1sNPN9giPjXyTN9RIpukQhftTsOJ3C9YUUk7HVKuFw0hX3skCzv6reCkGrXocf1fdDhxz0usJrCePo1xTCgi7FHlprOR7UbXioOBhZ/vWVQwJmCG8+qyl9QMsi5zID6ekz30XZP4W6cgIlSy8YeHi67P4nl9jHoiYSzx/3VCDEaOcOv0Qd9IwegbFo7Xxxu30FJkwjDa1XXpMmerNzOkx5Rq59Hb9XnUGlQs5EaB0l+o9AdMErDQoeG4egkHaBcdBG+PaMhF+rj38V9E7AiNKLFhmd4JxOQsPSO3fYM80zrfmGZl/3avifSKNX05Yka/Zyi3jxW6htzuvbpw+fGbBAhCfIsAP2PHIHldA3MtdonQzInrGs6t17OKRBjgoDpBASeXGRAB+RCT5sJ680282ISFyMVV+o7dX2sJFQ8CQAMwuyzR69vIq7Kgim19u57ec7GIdKcG0ZJ6kMMKbssTnERVE4bpftYtWbsBg4GXz3ib2adfITmVo0ADGU/P5c8KkDb/K8vq/qpJt55H549d0ihvI/N87IkKNXgI6Bk6od+QM8WtOTNhNub6yl1eRxd7K+gsZKcJddaSJqtl5ooSWiO9Fvq6VRqyUzVpw4LKiCG7DraVL0FbZPBpt+JmhEKL/rnBof9p2uYdJyD/m2QGqV0DXdUjtTBt7zAxYDZYTlPuTGVVfxuxvJ+jwNvCiBh0YiGifMSySvBlVWtB7dZ0LFJ7HOly5Vl4YN5cqngAQf3yNwXbcQ4OiypwMunaYsZcc88nDLPuuKPSu9Kh2OyfQw+qC3bShGKJHUywqouY1T86Jw9FIhGIES9beVNHATfGIL80igmvTMr52XEirMDIJKAOlYxTVkiLe6h4pE4bzx1Jkom8P5aV21yq9VhOgcVZ62p61YDwJV2BOBgLDkKbdaPEu+6dcYTAoLYbc3q29jJieb85Aw0d9qHI/tzrXkyPedI8yv1nkw+EBZtuI7vdPWoaHOQosIS3rV55gSBfemPfnTNiTvLc7cJQ3hLoddTiR+pJEH1ldZAUxWdEz9ThKapcslCfNv62tXiFr4Cs6mNvknjKdLOxXBf3wlYm8TAOGdHitaKb5duIat5kuYZiC1saUcLCmg6n+BESkLXTqsMoB5oCUPz6UMF2w6lMIIvtSXk87ZIuRzU+aAaTH5/pQ708/DhvRcZGrSy3BF4X2HUxh+jIsmXEoMlyrRWiA3kDOf0FbRrLeoPN57kNzKSdtWlwOxceRgqG38RCbPKLxfgcjy/C6hpkbgSWbj6RUz26AtLLX4jAFiGcXa7GQOwGqP1L5qzpJz852YZ0qUWSRtYIUOVVHcvWpXep9OjczyrsPijRacNRPSOmssP/duUaL3V5kLVGEkbTrLRmndP4ieGmHAgooQwgC8c3KqSMoyydXh2Un5huwzd3QKhnzYDN+b9SjnYvXqKOAgzSLvIIuWx15lGNuSzJZgVvRDfYBuFV3YIlP8PUzZxG7FBsDtFD2n3ko38CSaviuswCFo/lsf7fybhQ8HoNBxDIQRjDVyn2ZrLDlTYdnnpU5Z1D5U1k+inoecvxAcleFgvNhjQuGNNOSo9He9Z3hAdWiK+6GZGglwfjz6b65417wxqeE4DilB85JwHOQOZ0ObWqX4+xXgKZ12H8eYf4W7jTPpYt9ufMaN2ksruJlg09qsbPi6DJGOAFANN7I8+43aAuGQ1QKzvHzDAip6l7qma9dyXUHrP7pBopjKVSqqDUU4aGCkSmRqsp9jcOG1SwTSHnkV4iW0942qj4btiiXVRtl/E5jRTDTg9HgVMLWpMLm1kjhP22PKgXkYBCVLH0tCOe7iTvIY4FGnkmB6BuRIHPENrDTlpMW7ylyLq6mf2hu5c2oOGLUjqQfOc90qOPDnlTbmoLbpulE/rzZZHpEpGR9/dMww7KlLWlGtMeCyeTxbOitUsmAN9GjdOZFNtqNzhBVSkBoJJoJ5oGNqCi1q30dD67necz4rlCAKid1cHYwrxopuemU5UkYH8fFGOTlcKip3iCbQ6zUhvAw7s3vzS3u7drS37ZrWrwegX1myFS4xgNN76N/d10dnxn5VVnocTmddu0nY49GJB6v0Lv2e6+7YkRHkZSnfbVf+5sesM0gz4ThuJJpPYHdXMsWU7Kt5a6ggRBb/u1UWKTBbcnXfjSCZAWZ4IbwTg6lazbT9hzD4pUOuBVn6HbjhsTnNR8ikHWDz7v45RqbSxhN90FOaAQZyODw09ql5tqc9hT0SOW1fczKogGXYGtOn5Ro3s50vP9GTNyMHEqwgajjzdlX/uMtqjNZ369owv+kapn28S6z+zwdWCJMyMALDg8SikaOXYvhm6Q0WCiwqp5g4/m+zIKHmBo5SZDaQhKXi8Mkh+P4w4bH9FxNpQU0LdJvZd0rYklY2zfdtHTurweW97fCEm1vWx7OmjSIsO63HIu9EAL8ysQ1T6HhXe8HaFAhaROBzTIx6oxGn/SvSbJUk+by7JKHPwCE3Cirz45e5prRUWtBARvIbe/qp55JFdoG6vV2vLE10JUZPdY4xoFmku/nfZH3k9ECIQU9cnIllVOuRf5a4Ch4BSaqkkpNnjyzEd1uG8NLYdujXpt9aRKXcFYE4EJY6t2KsU0NOPOAr001v4/m86FItv+Mrf9ZzV/cvW8EaXSHec9QGSYPpiNGZfWDh5xm2MydVBDf8fp4twe97gGJLgysA1+WzTuCuYrLupxT4tE2huMKHFMvJA7EkUf1cSt2gHPGgzgMbY7oNEfSInPQ0ah98Wt1IECXvdIIxMm/KfTQ8V/kmCZo1FlH7sJ22htfy7lZJGl91uZxB9wBO5Tg20uEcsolXFWlnNNzV150P0PxB6SJpdRBe9eBhmhQaAH76XMorTp/iwjrcCzb5cxvb63YujVQoWUJQKGJHdCmEernnw0A/COGvfDiNa5o/RDzV4nJzdEOBBvFpHJ8sBucasg3ci15GivK+9c7vpCZ6kIzbakjORtj13sMtySA7p8bi4wL4d/j5e2v9dhe9cXXBwHh4Z0RX4NbNH2PpQiVq06DbDf+hNiaLHifchbQFb6vA+8aZLqRoxce0mojF3QMVismtI0MMN0APsnm+cbVFxNBwqjgWRBPypAKZ6TTMiFGO8ZuMRhPRxXRKfw7ikHwROqRbohFpoUiXyxcbosdTo7xGpSFMNvvpKQHITUMuA2FIuS/s/glwm9xABKZwuxFIaKyDxlPPBNtbKLYcyW6ckbuO+vX0Ow2Mf59OTwAfLJRNVlYP+QZ8IRArRahSrpZGg8PSM4XnX08XVUG1IiLjIJJZOzzPHKGIxSfoiEluOB9so/uU2iXBxxmyndfnwHkHbAdIfNldvou64rQjsdSCXaf7E5GSERiCse4rrCE53Up19xsayzMqLCDOxiWR4TvA3qlflhDDeZbT/Jle/Uu0reYVQbTVkNxzlqRmuw1ALcjuQTBInJIs3GahiLRn8DW9Ap4idFO1a8UFPZzWRcBVxGjtIPt/LDE95dQ+1n/8QSzyni12TXrq/0wbPQhE97DCYjBmUdJGueKuWMNIa2AqDALnyYJLeU9bAsyQ1DU88dYvyMlKnaEvWUfqhnx/BCMU5GM0k3JLxEDJoFBMTlN2hxE07LTPKKYxzysJ6o/cv7SDEKQBTJL472NAO5QoWza5crqPARHYcH5VRHOV0aBxRlDbBvE73vKScuEhovKtC8VuES6Cx755wTDardPTnKMXclAkWV29S7n8wviXY0pO1m2MLjHlsRiB0eu6Ga7GC3ge5SOs9SKGfWt5l4tdGT7UtSib21WeiRRs16cEZMxRgTChPvYeizsr5HOvd/rgmj0fDHOGaCXdqWbV2qIpwbwZMoyHNLyYW+0Ip4rCWEzy1QR3etURMieysXEsjyq241azXlYvaxCD1JH0bKFaTNBkei6d+aq3CXMJBE+Kietd3iMPjted+lm1+YKUcEpLtJzu0Lj7ccc4HE8raLVUgAvf2qatiJRc+FTwhsqPXZ6uhaMEpQrykL/u4sqdmI8YzxXhCle/wl3oEQkSfvaFrR6+FtM22NwPP46HYMLebmsRldDHo2xe1B10ZqV7CgjPjcSZmGFzcQ94TLDZ6r9i+8at1ePciozUI9bmKC/ogxoYdT4GjmZK9a7gjluxykFzZmT458W+se3/eVLy0wgY1JjFrvbPoLlFvXxST7bpu6mlDH89MLcXsqJdpDuWwPvzv3THqIIRraNkYzXsE/Uvmp1N/ozIzf1zaYfkp9K7tz5gzK74JmOozfb7cegK5zLLwvTDx1gUuH4s3La6KEMWcz61wPwSuXa1ev3oghvNCMJ/SsUe3JbzwxdAN2qilllcVaRSZPccGMhAU3J194LiMSc75xsPKwTM+/+LbPaupfVE8dSXHHL4KeREsMvIpW/YyUBvIC8iSP8S2WQbLMCH23x6BrcJixJ7qvY0Oz0qstl3Q9EG5VpMTfTgKPob7mCZm5luxO0qZlyBMBsHNMe12rFNpQLepjrx8R5sB4x9GilpCQaGoBH8xdXDAsdMZ+4+xGkZZ6un9Ge4SzaMUO4MmAbmlNyHoi2h3A0+rzaBb/iCe/P6ZYjk0wGJcCgJcxPImLCxXW87BODce3qWIMS3l9grW7xp7xhC+X/wB2IZy3090GUp9SMhWife+NOakd3Hfyjxnj8wipySRYdzFlaADjq6Oq3gzY/oDQ6d3p62JRQKg/ufpA4+CucINEnhfZdQa1hsBN6hDH0I/sL8fUDpg1bLIJQJaYTMlIX8RCq5AYYipdHj0JCdui+IMahzrpHyxY40UwxTpUDEH2aIfw3XdEBJuHByhynDns0zWo12AalS133l9exPOVbbf8GK+9IUy4jjIvO3ninlM8uXfC2slnnRAa3vNQdTy6Kuttd3Dulo+L1x0wQJqvZgp+JURSrmBK3INz6v7GW/eaSwkJeFq3vVJKQePlJSkJj+UftL3gAKCVA9jL+PzCaD/quiS4r28PKWwKM86TZuuW9O19Z2DtB7Z5EZ9+Exr05iYq8lf9ptx1b5SENF3bRHxjsg2qANv5MxIZZqLN9/L8oXhN3Uurb4FiWsV7szZce+/8RiLb/Y+fY/070hjbNbjwtdjYFG32rUazwAUhNoIYzZ/krTO29mDTuS5kbHMIisRDprQcFI8sv5S3E9WWFr0raj1vz3i6v35h8WnP8GadGhUcKEo8dGf341UoRVqSVWgcEs+FVhVagCnwhq+AXpvPeGdr4e6GB4ilpnxt3uh4GmhToWGxPjoRb4GbnYeyiIgDC39Q8M+MW3Kk0BcsWY0aNHFb2VOo9LDnuov9FZIc+c+LkfTIQDrfKMjmDUDb7LGGaOcDLDgL79+zQVi2jQuChgQPY044jihIdw4kMqHQlB17jcvXLKwmIdM8ymVziUH+ciKyRnGT9XQ/vgERVHLCyM/f1IP/9wXANMf07WB60GxOkb6ocQCr2FECaFJSYP0I9byxf+yppwqzCQfDA7pOifAC2tQQgRnQjLm35huWA4uqaajdG4rmNY0opjN7mQnYsbr01mFcOMwdvZw+PAydDursl4abY3ANx2le89YhpgLClOu86b5Em6TN7TOZ7dWLzbScSvy5Jstg4ezAdA0wHLCGZANw7G7kV4TZUiSye18Sh5GG5YnhjBozyYvGLC7tHZAEVzi8eKi+nDWffMmKCQnn6/Ix/IFACkLpCnuOQE18vsfBVNSbN8xJcGrFruO4ChWdmmOWYygropeq0ih5Sj+YPCBCyr5wA+H6EcEKRAsP2YIbCb+IOn1OWWC4Vt+xaxq9JKf40g7ZaSUlqCdT80FPDCZ3TRga1Ex5o6uZ1eh06cxQeOEo/AtH86zyvmuQLqZLL8RqG6DJz6V4CjX/k8J2ynytMePm5X24FdZn0Fv2uHpgJaYfi0ZoTUYAaMFFMzNHRum4Ed+NdaFMyHUDUA095OtWfL0uhuwVgr2+7j7E/Va8DyaDUULp2AX53SBKhZVskoMGFFr94FTj2dGwA7zMPTQdGcBEUGRAiWYrHMtfeeCM9g1xpfhOgAI4KMLhEz5e/8Q+SP8sik6xRyPS4Dew509ukzeZUB0h+NqsEmsw9k2s18s4THWxxeK20cLeNapd1NYrzP1fAmTl5ODM9T1l982PwQYtbmnEdFT1vPlO8510Xz8ZfzPozlQF1lKCcMmDH81KNnHsmhBFVNUSxIhTECFdqz1I5U7snU94NGzhraRiCFUELviQ/uh+qQUZEMoeEDeQzQKyj+nuencx9sN7OvG5xHUQ48VMKUYFupyJopjnPjmNS7Q9ArooY/TkwTLDcSf2afRRTkQtFdCAK5ta7IMLWv2R+k0xjAnriAQa1tD7QFTI1pYqjGI52pVUVzvqgQOZD29gkkZ+tVCtI4mv2DUhyrYKtcQSWR6x8aYk+ojU99Uh2mZOyQ05/zxRC9d0ELm1v4PdLqyxmSuXyh0bDEsDunjGANIM/etlKoYmEUJblS2vh22Jx/2AoZECfcB6JrUQ4MYRfkIcZptCiJEpi7xCeXvBA4VymJv0Sv0S8RX4gbVWTEBZQKLMaxCIVrRNJk/he7EmgfUo2NLK4BsWvOsg2tRssIbDV3gvcyipm7R9Rz1FMuaYHpQk+JVZSBgqKw35zFYttTFXdX559VMvUTehbQ0x8HVZwnzt8YYspeI3pzsCvw2P+Ot5IFB20nO1TOW6tfepVwrrwZRAwB6fmvpXoZZZc7AAWUja7WAP1el2Py7ZEXIEganRQ/wjUu72pinYTYGuLnq5HFlCNSFbhJbVfI1+PGbab5hA+HUaed6TV+n0VFgoHbIslyj3LVvlQYga0/+4w2nMcfqrqswECSputGXftCZw/WUAGKdBzxVDp1jRquHZmh9RMEBmPGWVxGo7ItnOKavdLPRxMRPZsN5p+jw501PgWgxa95ub5mUoZpO2BKP3q4KfL8UHFnbZYLwhKnt4zZlPvkibR9th/7p4tBzd9hR8vW10Vl2ORfNM14Hv+IoEOVvEVT9HZ4hVZ0T20FBz5xabip9c2l66qyKUBUpyuAFgrwcRZyCwX+2mX9f6xBxbPyG6QFnMxLHSXA2JpgymSUAqMImEWz7wdnYR/OOU9+U0uX7GAMgEBQJ2Whjp86KZyGyYTfXBKsBcyPiv948aNHB6B6i75debxTRPbtXrYLW89W08P+M+9/kNkwqiI3EEEj21QE8LLJWQ+h+czMsZcd6hXoUfY1bOFsExLTo7fogzmNbqbw99QV2GaqDUcNAArmP2Ir4zjjcRpWjMl55xmGg90gc7jf/rPqq/orA+l1c4hocN8YXQzhb3VC/P/R0lLyOrRBtsglMMm2bASpLUwGnueNqqbLsLBHdxBkXWD4H3rS4ZusB9J7JXRHH61hE+LAOLXGSeI0B3BfQOhd6UIc9y+1LOPX/Zst2zuoezNY1d9yBp9c+lAgoNUSISAAjdsHhAPliQnDlgvQn7wJi8hnmexjdzsQ0ajnlfpc9ku+J6EmOqjNIyIhzMd8/tm4XXBblUo1MP4rArAgN7J8JLAZxA0lsMoiVefb7aXz1oIQW5NR5WYbcFwcyssbqaF85rbmSFTxMObD7ZMrk0MAaHPkkv9ZfM0ReRYGNYHFl5cLSl273eXkvINusSetCQ7KKHnqDYFHhEqWWy6/9kyruXVSX9iS+o6fQGAytrUzYoltzeEHPVn2xeiULwjGqjfxWXDpyeMR0F8QcSAF9BvgxK4r/gK1RZ7Grthc0WuracyRjZy+9UqRplp0BkaylN9f61y/qhyBcUPfFtSPkksOXxSlUbTLweLTVf7WK5gHh3Go+KvxxpdZX1eHYGCunVf/TomQE4l7fjf7Up+eFagxNUC7xgTRGUC15N3oHtj9u/2dHSoxcCdQwuJZ3PE4D5W9vVkoyKWwBrmwcxZonH4MWz35eczlBidXYlzufCZLHOsV4tWxl6+js8ZkSnhjuhB8kkrUGu+Q9GNV8uaTzVOEgbgnCxB0JWyukG7lsHVQlY1yOpjnwcpvYvIlEwnEdNetQOGCv1MC56xVJ14Mh7oaeOyn22YMy0gBKH+p/L9spm4+2ajIt2CgepzYnhan0lM7uAdRgSlwsZ0Znlda0TTwC82dFhlSnWGddm3KfxJcjHL1AZO8Ziqz0o7+RelHBa2ZZSES4HqXdSiyb0Z1+xl8hXNjF6kEQTJS+ReX5Qp4DIYCCK6iS6MBRWueMrO3eTrF9WwK4X20yGCsJoIvWo/MOJWA72r5SU3dm0ObaZQDCHRjhtiSZyjpkyV5JEIto69+1+fDIU10E1APkopOEtwSGFGXXY/pqB4OGdK3KLXvSEhcjJdtL3UbrhrCIrJF1K+QmLSvawak0co4DCMZ3/YNL5Tq3cIQ2XnMw9ZWx7SWFCtf7c/mWU2yVBqyBQH4kpc795qF3h/XtUTpqztN7sS0x2hbGYLWffyafNI3EqE5uRLtblx0sZAHhYsvfePUrrixVIBjrj7bgFm6GT7K6HZeEm8CAZvWZXWkhexIXi7shphqShHtSIg2ROBtFbM3MSggYPztYM6fZ+53Ah5PTb9SfpdxRrW4mjQb1tzcfToBd2Df0nGkL4HbmU35DVjC0dOc7WWfwtd4gtBYihpBsVByoUd3T4giFp8f8ifLmj9ZeQImaB9flb96w01SJu9dTpK6Ym86JDGB3hYICVyXMlJDTd+50pWGxi6APbDPv+/vspVaaEoYlJWyrrpfsybtjK9EzOPyADm6SJ1ted1pu8EfQy2r6tkvMSxIoUS+1XhUUhyiS3tUoNPF80FcanCwrWhbcI5ah869xUbjXMLan35ySYPUDyihqlGFnXtKAhFdv/4X3fUJw7AtbFubTDi2El4JtHGVyBQiBilMvNmKJHCrZCAy5e8AHEsQ/QCHyg/LxhauGXhOEqs7aGdZpqNIT62bXKk7VT/f0B6M1ha2fQnxqsVYpkADgwibG28IiOXx0glLRiWq20L+kw33BDk3GV1Vo4TMc8NTYDLH76tQlSSOZWFzpYW6eZ9hWIJ23K6sERfMFp3zsihBD1MPAjkai7xCKV5/N4z2L1lyfP1zO9bOZHgH0p0z+C5k7OF8hRtqhA5pXkRvpHXYASqvNoSsX+wZrNb2fJ0cVjUr2tx/PoyneUfIyTXFb+6cbON6KiEY4k3/KoCOUZCpSLlq291cAM5czL4zXuv+YLJ/q/DI5PxTqkLNkQhUlss/CGsyolnOZEYrRPSYGNsKWCsU+11AMv8j4HhBhrVoEn0qSTQnnC2ficw17TadV3xcQmThY8Q2PW3CdeLGMfcoZhaBM6IRULCmejMyLg9C0gN/NB4wjG62l1ibfMWrNuLTLZYda+FEW9Fx46zoQet9NYyeGolBoYyCXXs5mQXp0DFXYn+MRq5dSpcBy61oriFkaCGwGOaCZ6NdLjcAemPFlygAMtBZBCRSMy7A3IF4vK6qeN9fGuu5IjfBVhfy+6Q0F3EAOg5h8yoxBWTIsm+416hAVEePdZZdoOQPJRxIF+GJYYK0fLeUhLmwhepgoznH8Z5hDc2/78MNqzAOlWtkEnD+G8iYCoRuVlHP0sOdpIJinhg6NXjoOJEAZQkWpI3Xhw27xDHW8hisCgJNWFU3NbRsJfjK2QrT8RBno2v1NEsWpMaGPVhNULy9dGCf31ctrVgOWLOKyu4pS/bpKzZ7eJNv9tU/he2XsU6gyfdVpxMJ802RCNP2ZHt4AcsZ1WoIhi4l21fd1Qk6qxFbP5KQViB0yJcVqxnm1hIiW1/xIwHF+2KHKnWHZ9uMnbyxP34gbZnlI0NGkzaUHe+q+lLkzdKnB72QxYiiZeFv3ervACwthtZFj0I7DujwIPycoJozh35pgcaLG7dt+iM7mn1zcs0jGjQCdy8WP4zk01NRc9NEHYo7/CvFHqPcQ17G0uJdoa3tRnOd8gZr/unjrTSZ8iAuM48V/EEGh83ddiX77WESXln7yZuZjAoE1dYdZ0fxkOiQXywSAn+8wTsHICigWNunZ5jMQX/1DmBxizlNb6e5b+XjdQknDBqj2M/xPe1UIBCaCTZhefvan0S62DG+I6Zwb7HjO65Sl6aJnSUyTF4aUCoUvQFkB6qIFdDWsNxwcAewpSxJRyeFbReuxgfnrOUhYFaDsMCOR8yo++y0SKgrSXsBznw4Kfna4DthQvgPV8pqUxWcq3pTxNboWVSTBgOkyNs5yVJ3tw4zRuW3U/hRvHlmqAeSUXqGQ5CxuXZD/E4C5Vn2sC17KuiS97Do6NjWqSB3sm0znWWXoUSttS54g315bi3eU0sFvIedCgdAsEgaSvnkLVECIJuPmLDx7tCxXM0jFOmjo50m9lk0Fhi4Ipb6p06ONxOCLRaa5WRNGs7ljEYAUNHBYnxH95i/ZxfzqnpPvrcBpldehdTAe80dcmSjaW3lFidILTTHL4DscYU9PcUPDYnST6hdQc9eBjuWE2IPjBypit0zRqO35gHIZFSGlKZxOkEg9HiK7nqgm7QpLCPeaAKAsbW95OmjYBzb5THbXmkmdERb/k4RZDhtgtS3tPKqJklmFOoILdpFRqOV0BYJEE0UyjuvVFZNR8qDibTb9Oz4VrAAgRySZo5ZBigaBZ4TFMsZfNd1yoNBfOV27z/cUAO2KGnxcwSOO253z12rzDlslLwitYNEyty6dgsBPNmL6fQQtU/lEhhV7MhLgfwrtsPSOSp6ePlNnZY6PxgjVW8EaMokOjvs+fGeG1R6KgFzdb4ZRLHzIg5FK5TwSFSFr8PG3C0Mnk6J2u9wkjrJKv/nHbmYQAvxm42+vuCnidQSsb0BWMJuFdiTPYN5zQmbykAVbYD3kClczi+1BfrVJfjfcBzCLhTjNjGZTgw5i/5jpSf5Q+jFdk8/RQeIg9TGYVl8dcNjN63gGJ5gAw5ggGTUBY3W/YPgobvz4pZOfs3iSiUGOWR9R5il3AXZmS/lmUUaz39kthjNvhpggU15FFJLxSP1FeusTCw55yk7YvH2NozJvL4MivyuJ9wtP4hIzVX1wm6SSI/pNxld+EFryRkP8LvWYcLBgylQFBn14tqz8JUoeqRQPFShpZLebhmJa6q3bCfxv5qIcVk0ISt5KMQehhIVQEMlK7yr/MiCU3yeOmX62kJkhbM7qsXLEEdwtbvApMCZwlVb0b0i8Xv67uOfNjufARzwxyZzCqtstiii1tYpD7zSfJdmEgc+2SDX5bDPDqHiWqzoL03ZHP3NKu2XSotHw1/5DusuXPewLQtjNQxzqhj+fT0rRSMvSDKTlJohn/dSA9HdqFR5Mm9AKZTwAQHW3g6WqpjPy/OypdW8fG/lyM44IhVp+oJMRDR0vbnIlhf0hw/e3IjxROjBMLKzl/r35BiuIPyDB/C7fFw7ikDnmF4LKP0AbDVgIm4tvTOiUpN/ZmWArubNFzg2p8+2x4NID2TLNyQCK4fakaoQrnnHxjeaLE+AB17u6JTlWxT5t+Qr7D2PFQMJ9OALyjkvCf9cHI4lFNNHCSs11BerjfCUV2bFJm2ezWSv0Y3sgOVkIDbDAyUWrn27+gUicU5kxrG18Wc6qpjhhkcDYN6hsz6SQdmJJR40deBuzC7k5HiCAlIiUWZTGDrOvjdDrl4FzvP9grE+SUHEK86X7TcNuBa+rGGlCwKMbxnTxHEQSXAaxz2ZR9Y4rqsfWIUTWCeIZdm+8lIZugW0OyW3BjNv9Wey7eHQv1EXCBxj25ch0K4GZ2VvVAUkA+jY9XE9fQJR9vbEmQ5guk3EYmsz8xOGXJyzDwen5cot/OgIy0HxQawMnd8Farw9xAzHhLO00KPL4vG4s9sC3cx8wGTzLsXsf3m89IdwYRVfDsCp1QujAFNslqlUo2AxJorVhWbgrr/uPgvqKE0DJSEtlkaCuPVX0EfJ6nuMJmGux8q8TwoK2I9fIseMet9mUXgTSHiZuKv4bHXehApDeWoup9jyrP6KDeIajCWtquHH14H5XXarBBs09yFYOOi0puGbCF4X5HDcmfh/xdGrKWslziFWl+JEa5M5zMRC+AdUIo1XPlNecQVF010dR2gsnP4mEeX6rztudviCP5sf3UOyAnfTiX1hYE7jeBChISH5w8VYvwyuyXXGb9xdpA4rl8m9kYyl7iNRm0GoG6huVqdIVwp048w2iuqIg3sAJRFO1LyAKiYa2R5E4T6+wE6ZwUqYeFeDG2JOFPvfJhp98C/0nPfKNpiVmz/9RHfqkpri7v6Rg9PsV2DHqogY379gVfnvVp/ttM/0yCDFKgO2SPsZ7s+TnIiF7yP3fsWxkbdau+cfTcnZP+szewokCbvzFDAxLZy/SFa4bHc9ePi+WeUrUcCOl4owGlbjH+R6r5StoR6AXzK3j9HQop3l6GV2F6CvBDO6j32I/J/lstHvIIiXOxk5BDsGC3PyMDNMsjPMS29yhjJwUBNSOUJvTeMd78fwxpSeO5vG8tbTlyH4pJLCexTeutqYMDfkltTmGOak0jAYY+EKOt/SvWUqAXZaRlXv5wfsqojatxd4oXcSqtZbrt8fzOpcqEMlPGqOsWh/nxux1hOwDZGCyCigbIf2sWewq/7xkJ5N2MjNt93H5NBKv6fdBdhX79+H0B4xNGFcf9cI0vT+y2Ch23pnirdDHitPlr4LVQM5yNobk3e9MWPwhAWTyzcEKPPWxKj6cqoOddUR2Cn8pBk0tS8idF9eW0v0DG22/9d4n6W8i4LzdYZoKt6OR90laM6bu0b0tVTcWJDDPM5HN8vIQ8ggsxbsrS0CQZzXWK9OmpcZ+Huto4Q6P3OXQlHuZh/gytSbdUDHHsI+gOKmpyQyZHHekHTBY1w3fZ3c7UqM5IB/RlNMzrnX4dH6Ff1NJH4at9owwkeH4Jw6okMEJkixHBlYt4XAiJVg/9BB5JsRyoBQBDkJIC/RVJ2agWpDm2X7HtMxoJt0U5oF5YIYHnLy4agTYmgc4BB+Dwgw+kSfIBF86pKXbvqI1mh1QQH1PmMUQC9L454DxmYliihCDzswWj6Q8U7/JWCbIYslIzFhPm4XMo8gOG5GLF4Xg9zgR1FKjd21NGweygbLbUbihJj9X6p0COhM2lVtvLWIKC+8Z/04XECS2Ewn7pe4Bb0CwrozwsQxsuwKbPa6wWj2TFzZlgdfr/r55HKFt//+Xxv/HOqt1fIFfT8OUuF7ENCzVw+L7DVvxtG0SR1qq5sibHvlO1TLC2iZvbSI1YEt7eTNvyLbGTMnvex3HqGRuxJln9eNbFBmTDF+mLYJp+da+jTZGkWFMUfsTeq/iDbvRFc7x9znh8BPumBNoFHG44jhmbRdmAiM+T8z5SL2A6YFW0FQuMIJrTWubEf/61MEoGxhlR9iLiRGNNPz/uxRNde2XQHH5aJZFrpzGoj3XviO90dHr/94TY3X23zmCyuAhTD3z+drFi7CsW0JnubaCtXz0SCmvecaGRxGyBmzZaUXYTbi2BLJcJbUy62RPf9OUEqNzvyxUbeqNgaAksIr7Nq7rOwq4ST+i5GnhR+Lse4yLpgpldyxuUIQPhFC+y/xnuY+4t32sbOhsHUxLj292TFQnoB+4iLzPoYeq7QCF/PXQ9zkF3UCmx+mvte/JIv8x9Yv5fmk3UcicMR9ycIi7jjfQCXxzDxRnKw957Rzc14N/iLk5DZa+I2Yw4ccL6ufnixOk2bY8SP0B11IugzvQ7B1tybyFsxtGzJ8fmg5Ynl16CLpQ0FUXrWTMhk6/7GnM4Du473VPc3b+iqO35CAZoEq4qM7YL60VesILxAKaiU2Mg5SI48287wjkMkJOoaPG8aT3gFa/J+fbLiHNDTOwF3JBPfivaBf1PNqzd8x4MbWFfduJjwpriFEbXmXEe0HXsUTVikEJzaiqq2KiF+W/Ta7wDAfuS9qbJUxCuIAe85fq52OoRSzFBL0CfqR2cWVkjIXRCYdsp9qvSpIgDAhnaNjyyUDMt4gFpEzU/knJScz5WtSY7G0YoZLevbrSWjm5E8O+4CIvt74J0G7sUxi8Iw9E5sUUmaHlUsnq7h4NsMfCv1E9iUFBGCeoN9w8mCWpMmvV0q0i72TGCGcUVPap0KzZA0jm44Nd5+9wSFwhbLLQBeaztM7t9sjYP+tHUdLcJPJll3QP9CqdafhOj3oeHCrG/OY+L6XRC5GWfdWguEEKqUmlLj5OFt72nbRWcN/t8hQ4/3MO6FVnPI55TwP2q1CqCog2fqmsQpJieI55P70vHmg1QuUhVSNWagbHXB6MgMCEQz8q9JEvWVPelwaikAXhDk/SZgsyjvjsbAv4OY1zzfWU3l7Ve2iZjPKmWeuY7ZM6atiVxJaNYBoWnaBkWeqG6UIO6zDeJgEJm8gfDP5Rd1AvArJ70LaI0k5DunHWjiNNlWR4BFIk7URKU86YfwuFR6jmJz1JO+thVkHe0J3HR8z962jfVdFSdmImm+x0+YhfddWYnMkYk09VeSzMzNptEhl34cWrMI10+OC73ypH2gwzPM15cOjcujGxlioesU9O2mclxsWPhn925E2IbMyA+I26Ks/9qxZGHUdIFIJIo+ixSeYst0S9DNplFwNQCfm9HKIDDWlFQa9V6ruE23tQseCd/po3INNHHSrY4ghz1GQ7R/w5yeOz9MTwvyNU1oy2vTwY7rrMJLZUnHcGqQfdOJUv0znaSxi+1elQwnaGDLSNKag2PSRlzK9aqmQxuihGBpUxnyvCw5ehd93b76Tl7vjGrnBMbptaemx+wTKhEq1uDJF4mCZxqEEhpKoKbjAMKrscn+vyQktZFIYjd6Ol1aTL/FRCa4NfbPhul8ZlXG5Rgfpo2R70SSMarw6nfoP9ApYaNk2tiqs+0unrQq6UC5rJ/+j7F+zZBpY+iicMNgxqrXsw7MAofc5nuSaTIax2wf6noeOFLBlTZxbMrQmtYrB++0y1hygsZ4Zc840rs0+1TybgZGG7O/HZ0UZ25+KMXSIAZg3FjedIlPyu+dAQ2RZ+BIXmZkDc64izSOy+dBqA7Omff1UcYOXjXWouZoxxIMPorS+rNZPtY5TB6SOWLze0fh/eKmF9BGUojZlrTbvn01AkTIauyDgkkZB2j8yQqlCuyap8C5TBc6yV99bH1wQiSUI6Qru4W/A8LJcfA91drJuBR1m0264XNBC9yRzkDy19j7aKhArvCyeS2n6i8anbhLz9AsA11hB+f8o0GP5PrIaVbLFcrmCpSZZHJr2sUSYNRxf3eWGGN5iSuwnfrO9C6RSGhCTLk52ooNCIYPUa+pGvF0cn5pp0BFvFJkONBWibhOTGEvb2XNoBhCnx94KM6WpndGHXeeqj0M3aWKTo+RdFtqcwPMf/xPgVHp+Sf62vTGECZ79TEUnYLSGTKbivGEJd6Bs0FkrMk0XrG9+vUyak5XxWahwJDAz7Y7QHrJjqkUSPlqANtKiE9QKSNMTeyzOQSNckNIE22eMMcTGGDIrvf54fMODHOeBQ6cHoMPMSAkLYYJ7yY+SUldOz4cemwq+9D0pJ86eB9CyY1NlojlvTF8ZMKKGGE7Qtxco4GFsres/oLaqkiU3GhGI81Es5FKPyk/HAwvvyr20TfkjSTEYiXTvrhkNquGbGyjDmQSR/JQ0uzWOJV//HEHrudM/JQfqaSoyBL4zDKklelwMm9Cs582xjFPk/TPkSpzSp3kv+0i+T+/2F9nyctLDRDPffTfg7Vn2Tbts7AkxynVxujjphW2t820CDyQuneITjbNWrYBi5mL9/Ii7YtSMihovkCnosGv08dTPNrknrIvasfHDWyYmwFICLSq0ZcO40tVo69glcJBLStrmwn1xxHKV4WRM40kpEeH+8ai2YzoyF6+oZZ5p+YNgMPeEuMyra0QtLwuQ4n8UmUrbV3YmtZRn/euNj6WLTHRRB3r3zZD+KtjQPKfU5w8hBmkMFFmwicULrps/hIFEoiG7yoPjsDBtbMjZlS+7ld5tm6uhyKt5F+QGUOAkiXUDy6bfQnRVEPPmPjlulZ5kbKpqKJXPNnv5dAl935f4aj0hhNtB/kqcnp8Ih1tBCOpxuZYr5Us3OrrkwQY14z9ycgUQSP0HW/3trIgsylH7Z9FxOiBrUtv3489w3V2zHEU/1smY1xUhRaa0D6zGJtfm4Z8hTWQLFck2Pki+UAsdWAUmnRPNbPj2SXzZF3EFHvUwLIPNF4ynBym2kLRsigVJO7/gm0n9qVgJxXqCyMJdEqlyYGML8FQah1NsUNHpfYeFxjnYP1EBd3MZnpDXZKj4TwxXWb/CwQmf1CAl371gj4bsITASkuO9tX5hWij5H1ZP26GrQoZqUkLkgPp7Vq7zwmhhsqgatKN5LKLAmqF2Gui2Lz+AmTTANHwRPheMZ2s2WiV0lj/yZBjgysAsTdymeungwDA4QJagWYrUuQARPBKZdmXNlBQzZrzrl7d4fjvPhcmHoeMAve/QZ2DaDx/lT6hiH0gq43gT4SnmdFfz94Gh4k3/JFZi0Qr8Pbv9ekj9+rZDjdSYd+e8xsWMgngZ/vmYBS7jch6lfImijKtywg9tLnHu/DNgkUFet4HAHPrQKTfoRUaNQhqMsP9vvRdJGBHpTg+RTphJYzxsdUI307YzZ5PvqSMm79L1f1gRy1yrJMI6bGnPw9iViCVdKqShTRxfWTtr/8LV3Wo/BX2X/SVFuNOgVQR98h0C8QLBHa7lDQvLBdcXakt/1C12fvl3PhpGO4svpWQk40Tj9smTHrgW6peHinhTrGP7bpSYGjiz+fM63JHe2RTBsQ//1vpLasXWb8yetrfmXU1FotLSqggB4/GklQMOsg+ZErAfCz8kh7WbCllGubsOuPrAoyrMwDAWxi5jEJMP7pa/Gh04sHbOSCTkyi77TJPKiDDGA8QdT4quydK+lTris35EC9R/JSb4vNI37SN9jpv6YWiM/VKYg4aZzbFSy+bYnqyY6EmKeGvXnugGhRWiG5Gr7EtpFFHBlMsCQDdsfdAw3rB1NIv1A6QNBSKxpOQ0tKg+D8RgXS0b/LYEbQ8Ex3SE9lLFmvdsmOEil10RA9ov2rlUWg+IQnjKBuISQk8nyLvTyd+Nd9/XNLjiBUMJVqGjqjzdsTFCOdaVsOSlnQ94vBJ3owasqCgusXCk20nBcXnwCW6R7J4qCnt4uvo594byrPpZpBq6NFnhO+377lnKGFMdcR8Ew5N8sjOEb1dS9fmMCqRoutPkGyIAdR6DDJ74xk3JODuiEIQBxytt4BkD15SRX1ACBanFylg+KxKlImtaa6XfV9sYqE2YwX39GOhIlyLLk/XeUlVyN46ZK7ILvoij99OzjnJAmAzutJAcr+VHDPYo768cK2WfWQLOY6Srwi0h3J5gxvSh4QwajL0GX/gx6CUMCyelc8mwE6TS/j2hK/Qohkfr4w3+lpPb88MrCkjevc45APQueoUoHHPBRvc4qV2JnjbjWg81/7XOsBhnPDKpHTCpLjBs+QE7KcfW5k/Zz8jtT3QXBV4NwKkQpAjL22eXR93AQMEaDRxp5mjM5Q99lySS3r8NVq5cX+s0n890x6nmbg7xYXNZGOsdbBd7Oho94tShWsmXZhH4PqF5S4m2whPrF3iggAfqpag8PCIIcw7kCW7n9I1Nx00CbxN7JZwXjw//SAvUq08c8b5ALwLJcmM2yy0/YaDwz1U8s5U2CkE0tZT3ef+XNoFej1ld3R/vufEZMrAv0BxyOt+2RgneYApyNL3V7Uh/E7/S8JS99Bwehy+iADTNH0o9+SxrH1QHikSJKQaVvWnMXS9i+qhCNk0AyYOMhVwHM1VlIk0EfeursMK+ato7l86Xva3BIdpeCN0gD1KVMdJiafHVVGqCyWWh/k0agJEDObNB4NzOFHYInjkghX3fpWrSvI1e6E17v9Fls3G2Dl0JKOJPCzVAo1Ll5miENNty1OaEoJe3z3hcY5IELGnMXnCC7qfAmAugfLYZ1dAyaWkU+QVHwEEUEpqmIWhSrf5Nz8BlrLpH6mGHx8+sdVSx+6fwTQvo2NseWTLaHpZ/QkyyAR1kqHur27ukuFY5bbsVZH1Rx24tlJJyHWAdbsMtQKfyBL8XEMTnTYEyreSPwjvkutZCdHCeGIbLcXfHMGkPcDBnU0mjbJqs3AZnHGkEBFEK0QZSJjAKDdcsrl4m8r1Wq8cESWx/4eKC5FUqLZW8t42TxHOahw5LP68Jt5tXfOemfPV4c6xsT3+kStS9ADS1RerMgYuvu+mU1FVtfJw5PRm9iTN1qykDrgZwQrxHI7Qt0Ooe/h7TQDdzbYQ3JcPtkj+isDQNnfGcVuHk2VW6RdJyPsvSUKyaocScS5RfOqFO8tYpv4eOTvwaY8ImIIrqKmDYUJeUldjv1jwGyaNwSWKVWTKfxRl0aUhwZX6kTwIZ6hLlCio8YrozVbyzHduI0vWZ8hrWaV9DbeKTYTF6tMWUsFG35TTh3JJqoGelmOHkrWi6TNAeiFDp7nGy3r/2fpVBWeGPMQSTbKtGrZzsOulFz5VMh6MQ8f58RZCzxjwTHLVAR/iyp7xNg6pJgQEeRajfNUrfafnVCMkOj9LkupszCl9ypcBdYkyCITv9XXHwnIYTijrugbgDIHEmdZAI0EHM8hRF7rMf4Gl14UYCxpo73rOC4j1WGUm62Et8THqy9IjaYluqn60JNUlKACYEys3HHPWCym8XUjUHevnRuFZVuFcffTPiWKg/3n5jG0cTA4+acrk3mo4giNLbSpaMB1RKYjhA+SF+epiUCjykDI05h14k3SU/9MZz0LhXCJU00J4OoBlxQP1U2Q30lO2BUIdgg1K/puECIowBZG4aKVamrtttd1GXMgGR8Eh8gwaEqGa18WsZN89IHqBGVcZNzmAQ6jUiATVn1K0qzdV2h+5kfcFjJIhWQ4EjlpUAU0sQ6MZzORQlCnQRUigiILTCQvJvFqmsxRhYr03mw77ARL0yBIbKHnnlFb3ztAIL+DTftmJ+u2+S0ts7bMcyulMp6yaCVy+8FVjnfdmEIQvrfXXVFnZ09Fi+3NJmdoy/MQKkGZVe9Lg3UjXwjqyy4URT07C2Pnusk+CXoxpwu080pGclsSdI8Y5PXAUc36gshlPYMYAiQGXdtPMSrk1lAotPrP24UZ3Jfv9WGGAUL1TJNsJW+ZQutYmo3oMt+aSH+XNSQtEMWd4Y/QGZJhyGlzeudG/cFC03WtAWnqa1Y8jOHWQVcMNyk1o5vwijhj6CxmG5hxdHTMN/up2MjRTh9AwhAllUrL/8qD5d5ZbhOpKHeN1QGSm9vGfgPkA2GhDO2VZKQe9KNI3gb7IpeleYf9PFRBWScqUkR4RtYX7qvfjvxr0US+W9OdKZExOqchMRSIrjRvVtiJIxwN59vqpw4v4rB4seuWLsc+nm2yqEii32vUGmjJyx4vpFwnF1x7oLAYZY+grG6zc/f8TdsPCGp1E74roANUWOkCke6Cq7YTq2diRQQ76vVkW5CkJwmfAsAHk4xVQeYjhroqG+crsnOS8nF6iIRSohwfNskDCFvmDEe5TcIdZsGMxqeRkjbAjn8SKIjwKpfgF4arV+EBZ5DtgBLM5JRoX8aq8rzu9wts/hClxsYzJjgUgaRybvH20+V63uV5IUJ/eJhWhMnADcgu67T5vLuIr0TKjr5m0+cUkepOFiqDiuE20imYZmPH4nk8dwZ5EAXuLnqI8rkZ9TVrP6xWWeaMbcjMgLCaTd/dZ+Q/FOJIN39wonuAYA6pI2HC5SIvWVcqgoxI3KVenOHwVBmppWgvwCMqe/jjmnXTMEnmdVewakziVYXuxCe38+goGBNm456sixQT9WsJcTUGLDtUbN/agRrFr6i5dsQx+VkH70v0OQ3crY96AWIliJ7PrnUiAVBrXh9JDFx6+c3MFDjjNwVVbGjvi0jv4qDBUM2tsQEf5mRDt5Eiyd+QreVDznBUY0ROVgsrZUVprTc6itlZoXsxt35yw9qvTAUOuIX5ROWc3qySzNrWU4Xbv87z/FZ6r/H+3RsQrVf0b9xKot8jBib80rXsRtjNM2F+uZfE6lNNK8fiBfjH9Fk76I//SUwb+ZL/AyEgVfyUYMBBFvtiOihlY/PfkI2FiDOL9UU6EALwQ9meXi0WyE+vgA5hWuZi3scAVrk8t/qYuO4ObnZ4mpfjfbgv3MnHv4YsQVNIoHZHnXBd+v725yrLqJHJ2mPw0vyk+eysgKlYA4bleA+VmIOkLXierhe7yQdPVF3BCWrcdMz1TfwHMTafaC44WUei0PHTsSn/2+QDfXldmVxMv9C6iArr8x9qE8Lp3XI362wuwUwFJmDjdh9bdxOg0UYqhdBKa4K5DR6LJNWs2JbLPR+cW7aT9c3kGSuqCIcNBMU/ke9gtuULTBrH9GI7FTAyaWmLbCYKXgCuXfSY7OyXWWns5bQFNAshYhepDxEi3674JpELnPzJkAdNbjtyBal4BC+YMz9qtAU8Qh58Tava7RYaxH+2/I19CpZgh8tKeK8LITEmepEW4zih9XKvCY7sTrpHLfCqRtjdhyi1tCuAhzynKF6dErznRVCcQP5qNDMSElVaNv9xGW/1UF2+2JkYC92hQkbYiO/88oJ3Yojv4pwZO22FxEKIJANzVqrid2cl57nGTIg59WpnN16zBolE3AHiSWU/xj22AilJuAIpMGJ4ePDFb06rVqURwdi299qtaQnTtOBh0usV6f9In+8SYpK9nfWCsTC9flNNDR1i7V+dmdGtvTCVtacy0YTSVTw8mYEh7y+fIP0/WSD3Pk0cZjOw5/5yMZDrhGWvX/JuJUZm/lgwUcYFbefayptlXnZxQSxBhSN3n3uw5ZNDdxh21wuQ9z8eV9xHn5KECz4lY+lbptrDhMbyHkiiBuavqF9yDkf/5e9coqYwT62mz4G8fU3rwhMHrPK8ZuwKl2W/jCpZ2WZW0lex6AZWFAcZp4kHXcat3frsn917OCawh08LSEdnfmFHw1b9uq7h1PtCwckkIOCG4O6jUcN6JEXMdhDLh0HiTkW+QPvlejXyovbiyQMH8ANhnde9XAkltx7jvoz+5MWXnTYXExk9YA0s5kRtj2cglb2U6plkiUEGMaM0T5t6IVmDSBNEWussT6OJg9K2aIIt3Ukb6uKR8Z3UbZBF5WlZxoL1cr4qyYHreLZi1sDZNlfDyIjYwyAfhFL5QN2jXdq0d340fV4XCJbQQQSzt8JbTymmwwLgTIx/zgjj0zpISGAq+Uy+auiZi4tVzBbj5061BHet6XLcSTkd7pbpA/TRSo3tfv4q3VWzg39XouyFfeypgdgtWlFaKHVYQ1UdqEdvCJYiH6qR/wFCLgpjuSc+rrc2tpBmUmWzGwzaBOniog5Tft9N/x7UGVsXZpAyyIdDBmQT2QbHU9sEnjcCC5V6fSs4XNvB6s13SR44rJP0RTqHLp4MOkNAZUBpMyLNfddOGcn3T6GjCFb8Mx2f0H9jSqNNkCNr6qfFGx8Gi9tpdbGOBN5kzRDRFQTze517jW7gFEze/YvMqRs82dUnLGQVFIvNlwx+o1KlpxLElkxV/SQm48cn5v6CiaPiU+cRCwT1ZdW7uSUpPM0a1eGnSNzk0or1XP1aklsRILSz4H6QE6rE4vMeHGh05HA3GsMZlNNRYwMYVwvufQbeo3SHvga/UCbxNgU7I9YoHmSs5xMCoDSaUkNFMpu+14+re/gCR8lFbiWsZ21XAU1C3Hat9H6Zw2aFEZW2jnPFoWusUUmvt19KwYdhxCr74NERIcJPVt9JdlHLfLcxZlRYhuvOpIAd1iiSBWIGMTkFHOMvVsrMrRTarMPqIGRIV5CdI/So5R7ddEFjwt/H7rCw1D6s52Ao0ZhovXYDJCUfPHTuneD3zMCFBJYJtJ84HYczpZcA8FfJWu42+JkofhPX6xpl9hz4UjCP39PxpCHmQnGHIim21a7myP11HF7gG/aWgx3raIESJfe+E/E+CUhrwDo05xGvaAESSzgY1ERLeBWrD+89mbD8sQMsEx98rp6cv7blpBkXk6712BHwJ2AU2mtO18p78abjGmQyBIJsVKw4BXG7OUbHoRIc2Q1UrWx5gOiPns3OY+ofbAs7Dc+wBEwt0aWwkqm8z0hJ6czKPrJldw9lALwBOd7f5upY21A9p2NLZNqW2LxwJp1zSud2Za9co0a8IMA0Bjfws8aYM/zAWnGl4s9zhcuRgkms4DnGjIIo07AQjetRKLrhgu8/CMgrX8tCYYFQniWKhb/BeK2P7dBo5bjBJ0Qtt7nhEOwjMuFqa+/hb5AUdIc728/Q00cW5T7kTSGQRRonIrLynPZr//NeSeI1sr65cXmoW8hQLYoca6XKfa9r6qvUROpipKoXZrAYCOPcsKC4C6TFfYmTaOXk2Ijr0DbsJrt4YIYUrqaWAozN1MJUVbWkE3REOS/fKOEKzbj5WpoPixVkaRfnaIwcnGT3JSPuCpc0QH92N9yHcyDUUXjBVkWKUF7cbVmFI3+PaX45fVPBGgeYGbpSD7RLS3NUy7h38AAtI0GnOYqfAQT+IfDrwHQ9o9vYveo0GsYRk/cQqDtCvSuN5lbqmvbtonG8PQTG4eNpVeCRqp+pCkW5MIieZAU7HidZUFDy821XzH4zclI6vCmnFuOjxTkIgMSAoLHq9MXo3RYdgTV5U+J0tS3xk2JLGE5V/BkETlWJ+nRJ8sbAgN6x08i3wgGhc/wa3QWdl/CYOtnEw8GNVDpbItfxRB6DcpWyAfXUJF8/NMBdNHTibKMd4/12n2gicSmCAyuAV1dFFTF75+Ujj5KpSQgMHy/WOpJjpspJvPsE3Vj9mXg5CHpPWotJGv/KkH16VZWtN/SkLVgtCEthVsP9Al9zWBLjHvGmkLMnxpQSqB8JfqxKdKVkFo8GgjkQCV17eWySMzfoAMUrnN58ftGVqqY0IMF5mKTVah546hF9+QQ0Q61WJVnvD2XSYUBlIdtkZxZ1beq+dB7HqrwxntuYjl2Qa/f/pQX/vkFeJXYOIw/C4tki2MEWbzjhWK+E7jjqInNOkSWChF5wwPCqONKbU80+gXOZ5kxm9DoSYtOq95zbCfU1xND0nquP6ejE5+UMYvrUGOWARVvAEMeycsCr8Nw0D5dI+R/u6G9x4W3LOAs4Z/vTPWdl7LGe5sae5k+k4DezVn0LoDbUHpVmN+i/4W7ygy/SbI690fs/3uy0auIL4wOcIMtiN3e6B1GX9rYrAQ588i8uXjO5ufbg606jMJVXgmMKD0TVj4hEHlhzPL3w7jaqHWDswiJnz/jg4i35RMZFynqB2Mg/QvOLKF480VvWgBNw8YjVvY9Oz5p7d2AXNeeCXNrhRK4f+0QQPA7pqngPNAl3ULKt4oz5q6IcEMxmgUAzJEasvaPwLfR54+FsOtLsMZjGUVcfcb+Jyyl2GGn+KclyLiZrJ1QqX0SZtNsOkw+Bm2TgEPPNI6iuhC+E5eI5IQ48bp9D2RLt61K0y9F7qUyuyDUjZBY7EETkznp/YPxl9CpL6e9wuBKxl1LpmvYROdXAumlGGIZBnLtIH2I+q42aWjq1KLaqgntmvNe2xoLBw7lFksBaLc0cTzNez48VcPLVQ+PL+hf+ZRonbyTigXYRdZiemnQp4A/TWP3H5AwzskdVuIn0N7KT9B+is9xeio5qzIYhyjX3XQUxim7TjbZEYlYyBEcxa3EVANMAyF3S99WjRWMrCY3F09BEAgK89aLqggmJcCyTl09wPX4MfRV0hzvVAQt9ND1Ip4urTrDkT8W9KrAhhNoHF/VV9XJF8Mjj36ix6W+l7ydpFNip23RK+UGQFy+2pK3hdRygdUvRkZlGxiB+NxqSQVAS8TVmR2R6/yODyBRMdTCLAzWvBWgAEuMzBQ95nguCx5VzUfzGA50TFEJWIf1U1xixsELtfSbaNIy+UsmD7fHQDszu/aIkbjvzuaaOOPyNUvkudZg6njtU+nj7fP1UfNuY1gqiI+r3GtnMO3dlUGMcy7EZXXY3fIgHC9wFzn05bMzNyYFr5Zd91dADtsyjelZHFI/ibNrAeRh0I6JP9FNFZp4rgQM4XdOWI0wAi41EvQF7pc3TiyAjsWt8Rg5Pn5pJqsI1LV/9CegGOJPbivf4JBfrRxCCn71g7Bbj8dOL3RtC11BpxCIXQySbsqLYy9Sn8xFRKQ47OKRyI+V+h91vc1V7gID+Zxa7nktH5YcU8hZvehFSC6cIWGu6hBiL9RhsAjl1+KqBM+v5kaeAXqLfqYhcus1dhijs9ZfLoPYjKPfdjEemy3z+i/dp2nSeqpaS2uaLk+R8IkN3IH01T2wd9Qi8O071CxzEQ7CaMQAX9eG9P2nZIpUqZ7LTW8owni65sHBU2D/LEU1LDwRMcQWqFqctN19DFPGoX7Qg+MmcqRDQgy7K0EF8/51nwCkodAQ77fLsYmxa55qV3nVIdLn8Mq3X8xBoT4HxTq19F9mBYmdPTgHf9E3tJ0Vp+RkErhIXnpds73BtKh+UJZgKY8k0LAnL8hvyKcau8aRnrxk8XnwZwy/FQZBV08xl1WRvFmjjDXBt7s0dDn9e2begTkQCh7/ic5Bntg1UjgLnIn+qtn7Ysh+/nTuxcRDuJPfxRo/ldVrIfEsak3NfANyitUvlU3tFuE7OSpqyAoC5D2RaUfM8hboBMCBAURaZRpby0OAirE6BwsgA3MKzQl2bC/lB1o69ErNlu0Z3PdVPkJ4SEAmXlXyIgaE7OPDS/7ABPeoMHEb+PdaYUr3x9U/kOlMrYTNpG3SDALs9fdkTFNdaucsk9VLy3C0hoZEdKPbudBbSqFDNBd2zbR+fgT4DJK89AWHx1EmrxS/MuIECRbJ5MhMcD7aOO8nQ3wAECrhCzxHkB5yi7ki4fU3nwr2Dr2iiStbS9tMWKOSC7HD3ggy5hrl5/qZNSOCVfdc+jvKaqsCL0DyuJeBftyhgBUjCZOmi2wWsyIOisQ+woAz6vr/0KL0RbcEeLiW//wcy2qX6dFXPHQVeyOuEb/JlIVEbhe/H+1pybQ253yXg47dcnLOR9jLROnOwoFmFNLnunTLJswtWr7EarRl6tZcgPwZCdHosvJD+hTYu3KbyncOSRV1nUdNwPpwjc4UNCia89+lwO83UwG6qA3XzzfE3LqIYmA6yXceHtNMYkqA2bYAFuJyktHQ4LhLnXq2FoZ/iBzDwTMEfDsbWDQRwM46x4fxuwDAV4mz4UZWz4rxNL4IKc1YDqR59lC6uMeDclCGIP6BKxdG0ltOUOd1RHvIJMbMvsFTzvk9fTMBr2B1XHIZvfanfhvw0G+bsD/ov3iRhKNIR2+lG80fVGTcBLujeNaGazGkuVKg9Tw3noX6Lm5/DnSwBgY3tnKz6l9dsUSIR69Rak1WDZrBC+n5J6IaDoFSs+di+pEWqjjjR/EVbM79DT2yVEfyU+K5gyBupZqZA+xBkYelXj9nTpTMS1mYpGfRom818JPm+qIXixRcuRS4zcoEXPdL4IYmsL8Io+zo0FIgEHdsQstXyRXcEqhMaqXdR6RVRG3QvO/Z9nIuOgYTV6CQmPiXEFo+Sv1s4zSnd9t9eB45jSQQE7sJnWXuaGOxscrDZfTUxOy0TcA3mlU7bHKpmsbl2ToCuoGvH3S/Uv1S62pONIPAYDwACXPq8JO6VeNjCTxZ/QXtSjF9QESHRMlk6Ckx9gH3IDZ2qDVshEODDdL2iUvj6zbGxO6bQqMBcCuf6wa9cv1kWBxqavgwEfKNHjKX5l3jnmkcfWy+nuKbVhKVDH4O5Hl2PDWgjeV+cENIhNpLl8B/UGUkmfGC1dVgssQBdFxrW7Ni2+n0t7YxOKwfTQaD6/z1dK7gIlFEbGTOvOqCi8cD9Jqfuq1F87P6/vvHv0kwD50AhnnX1qE7bmBJ9sYVvQhpIfXg5MtbZe1OP/6QP6QQ4RVsc2d4XfndZS4MtFMvjUk51Q6zwBl5DcGZceB4Nqte98R6YbQhls59kPEABX2PWVsXh61iKx5kanSgLRnc/mnxPnzxtaG6BsM+Zfg4O8WTZTxp07Qc3dtWwdzavp/6zPwJ8ENVBvG3c8LlegUNELRtXGN7lnemzGS0RJhL6FsJ1dSRZACCKC4bIyRSyOOicr+tWef7ZZLH1q40/IRLaVBjAGFazV9vcXhVgsbX8B2wQtISB1+zJkFZCGiygZMRdTfQsYOpJTwCmWU6ZDQSIV5MRPfbRNiNjYfrcUhUUk6fJmDDN7HTxbcKLEHLWKdeEZoTUcqC/lQM7JznkYkxSJA545rMiYpfWRUQ1cYXx3B8aqpUq3m+4jVK6dB9Gam0GMajnzEuR/6gPZkfX2NmjOnPzpV/kdy+1csZTUbzRRaI6z95LhsOK/bjK1jr6E6o2SGArSCqyZ1vnJw4m/LDrQMJGMtIkZdT4Si26GYsRkI9alLcR/L3ENSAewVtzxuus39UTpNxL6+lhixbo6JVftae9n4xck5HHrLnuWl+zRJpsnFrAuPfa4QmA2h+KXSrT8gIWnupdCzYSokStk4o3YtPOsI7LvCjxj8Ie9Uq7n3tgK+94mQfEp7MX+LCqnfbz3h4L/e1dUJtz/XeLAcFdsJYzS+P2ME4qgpe4CJYkHeIsV+NWtFHZIxq9YwdlZmg7QFOHd1AqsSDYU8t0SiDa3Mz7pCdKz9XaxJ468qMyJ7TOucXdH2tzewkKZEHflLvhKhmpuwsqhooB71jCTrjMZvFYjx0KU4eFqp3RT+Xwj8ES78Ee22XojhWCSHGBK4iB9uczOXJ2O/NvRhWZ6vHZ9Kno1/ZH0WVg9RtdCT9lEuq3KExGM13dSN138dg74OEaypl0MiXLajK/z7sXQLQ9oF/dAqfIB6MXbkENBVX4wR9ULSZgk39zq/8r3TCuCJsvLehZ67L0AyFhLIxX3ALYnVa0Pf0HTgNlMXwl0t+9xT8+cT4pYYkXuVLhjBFwhCxaYsEV8w+WG9v54voq6GP8je0E3R0dl2tvJpogaKx2HgtLZR5g1tPKB3NGD6q9SdesUc7oSqTz30vGbpb/jEtWOGYnCTD+Q7g+MQ0k8dt0F5LyQKQlhjTvd9h1xAQDEUK5XYGrvBqKIhmHCnAirmN5gwRMVIbexORpulVqLe6hdWKbXAH2f3Vh7f0zwAT1U35bNeUwDPOIOMcDe7Njm2VOVIi91mi5wzYQyhYHLzMuvD9IP3Gt2tkcdunEM43siBtQUQvt6cZ2Cj57fHmcTj4NYkeRUFEkYYjzRdddYx159vYOIqdmqZMtOui19vECQ8TBAo+vzIIrYSg/0cGFLa1nqNRJ0BT7+bm1ru0btjhPVSsBkrRvYgsI9F+LMYSFxJ2pgPBcgfEdfJPI1lzeo7+6M5dJj7R34srWO30HKwvtVQvv7uQe2C6HjtHpwnHxWY5CxVbBXEvJmzm7SBP/h0TYu+8x/R3kobrD9iSkj5aAcaFygt8rG4J3VdgM3eF6rg9kfb9Mz+MBI0jtU6dsljC5Ag2ClI5Ui+LxtVsoaogDqggUSkt2HYQaK0Dp9MAXZld5NYngCpwtxLRgOtqT8td+v7TcHdHz0Owcs+iNdryeWFiONhilwY3vENjfiPnPawZNXZlKI+Nte2eQlT1CZj/4HDg7WiAwFclpXI5BRVA8wyGF07RbYP0FaPq99merYl9jLVG5s7nu+ZaG62+6UMSgWC9mQyjd/QUmDlZnEADmu4JD7XovHlyEpd2TVH6WlHmEfr0Nz1boIWEUogrY1hLTOvKyqXKWi7ncZOsz4vyO4EdnfC7w/+97cP0RkWtvAOcgvkDBz8MMFG+VttEHYEhh4Ciayt7e+dtsDINjGMlCJ2R6dxNGaPJOgr9ytB7poAVKXLR3Xz6bYZ4v8XAnU9uLn7XzJfmkGgm1UGBuMBpMhhhXHy1sW+/sTTOYC7esMEcdfZ7+i/3Ng9DsAEvPm8vaPlg2d1sVUc8vs3fvWih4m296C8fYAV4KHaYGqd/G210DOSizuG3RmGKs6t5b9n+k8UeCGJMFEFUpVpeFBeZGRVvG6jwgZCHkSGGKH9exUrSB4Y3XFMZ9kHJOJYf1V5T6qrGF9kbZwSceWPC3sdD1qtjNf4QMSFfMi/uWO94EGY20kRybKBFOCC3sA9Ev0zuKPZAoLp85W7PPjRCvS0Mk0gtWJ7NRmanG3CKLtoPIomtTHrbuCVKhNYMaj+qzEUBaJ9j45lKW6FUNV8lljILp2IszkXcLGdRQ4gMNHtyNxiFx+7GmomAZ0ICzxP5L1wrLVGU+EXjJm0sPIXlDK9lbBuNLr/buRx2Wri+qLmmso+1XWeWz9BJOAOAPcc2/jhKWyIxa5tP/TaNGPOzPgk9kLzFrRACKbD6/cRw6ezCNUWiiDfEBUq8ajSGCyluudMYH3oNv9dM5vJoaIkA2Eknyrve/loHjgMzq/DNehVN1igqlKg+jlsDZv65PnGUeTjuEyzh9wvlC36m8BjbYLOvnfaBiyeFrcvOPbuzY4MWxfC5re/PBIAwDC04JUkLIKgkz/amb7B9UC8menJk9Dsi2WStyQf+72jeYKmVd9exTQCs8jzFnT67DSX8qPGT7LsDsCK4i+5sPfqNNwrb5jSGVAMm2v7ixaVdoac7hLt52pMnVNHl9lMQKxfKAPBrFZeYAiGv3Z/4E1x5Zcd+IPWn2HEKAy0/IzsmOK0Zl8R5GS7n7FaH5ysaRD8XFpwRSSer5wXQ4JbJCl0MC+6++JucYaU8fWIFfyUTrzWJhnfKuyV/cLOrT7hezvrnQa3UYErTxJd9UrN8sJW0OTrspTKnruOzn6gAI8fZPP9D7j0ahzkQrs4PgYdsu6nHJcfuEhhmdXuUYRNO4W0fdPEZHVzPXys0+QlIL4vfbMS/MzNFYzrM6mbCxJeNuNP4K/9+F9b8g/355sibVqcWAQYAQeHdVFK/PEIkFnqUgP0qkZstdLDQGBGRuq6TUcxwaRQH2JpFmWzGUgHoU4xX+g5XszlDXBON7J7SLRNrgVHFtTxJm1WhzFizZu7IDGQHgI+U5WtgaffBNxmHkJmwIYj2xLLHmlBeFJ09ZVHPbOF/EeLbuPkVZZydXEQKL8SJjBCLQkCkAcFILES5cKg1DonLoJBLfxD/s5j7NW3lIi1o6lUCacTE0RdO+nxVU8riYiGlRsML+FN4EMsqy/0ljmUtEVcXUem7dlv98l3dwjJH2kpLCU/y4+25h2xq8+OTZjbBLybL4mR+MdrZt+aHh1RMriF/rrxzKpZTjOgWS4goc3oPBskTtXs/+npu5e2ZYYE1Ol7BHqrCS3El39OkNhqjdRbhykCJS+6udTkjmDJdXnribhhpEgPvE4YT5uuTDydMT/0VNlVny2jW3zVe8HT/L4o42tG/PbnLIuyidnwvkwFfhk7qO6f+7THJ0hdcdBH6AIs8/P6Vzag7+859CJ0s59T9T01ZiACdnzN+CQRMRWk2uGZ4z12Sq6JqTLCBhJY6kz5PkMpyYt0/3hxHrTXDO1GvKLjjoOacHDuzuaJ0+8cmOZ/keKvB45hRDydE1J5YBjq9xKTyFF5dofmTNRGgmLQLsJr88kFsOTsH31U/ZXWNSUZczoQHUXsWPrMZtclxSjMnK6UpDijRvpoN7HibteCZqQI3bPsO8CAwNaLeyYn69haF2/dSLaqvsQrJh0F07+s+n4ItY+OFoNu+J7VtZEIEjJEfabBoj3r0aV1NAgz7aXX/Py9oPLJw0QbzC8ReBHQwPlbKIvw//tmoBk5Nwstrnd4/cSkhSBlF7VVkXMmFF8H4PG+zT1wk2BobQHu8138xM8WfkcN0gbVKrnhoNsEtzzbcb/V1Ib+t0vZnJ4aNyNBR8DLCWCF4SmAAjalTrfAG4gQQdR2a2RadnmJbSCtIZVpGYp54+Ouf4kPK2Nq1ZhUBCZUJLSGK7TXdEomkl/+271C9M/H1YjMnft1B0G7TSWf7u2kb2uuD+/8jZa8JhKDWI9DExkMpPzv+VPWRyBv+mPhznbMEcJnCQUShdnRAdq4e2pcpuHo3aZg/N0QnINKil2W7hVKNLkcff/RTPfcl7JDpSFVgrukLMtjk7+BTM8OD8E4457YtYtoBknIb/Ls4+Onlyu4LA2Z7ceAKCrYn4vZRNY19YTklh+8pcAfs8rAwC2fOV2JDCE2dITHQ6whc5rw8oqcr43TvwSlOsqvFJ7Cn/GcEDZL+VDEJsAm9BJ4nZlVxS4IH1wGNU18IqDT+ZaAtniXlxEUV0C/x6ws7+Ck0xMZuOlT700UW6nHxt6fw+oGmxx/uKTvz80kcFAwzHSf9kMChyE5ZJ7/AuNRvRvgBouqoxAJ8JqsgKIVLIXpJxaF7f4txHPrxTi2YSbZVdDpOK1SUAKIc7Dm3S26V5Xx7U18SpF9kgOPPf+o4UpBFpoXNCd4fkfL5iIEegW2CfLA9tnV3uq9oSa/vCWhqia7aBFAzj9ld1aojDP0Q85alCS2XZhtLS/7i9LSggWzfZsaFJp4W+6naNEYvIsaDjFS60+ymn7jIhyuyJ9ajajs42O57WD+OXCgUe3+vEfY1TR7X5Tx6BwFpd0QbaeU3LnnGfBsjTQiqNRgEgHSO/xip5Up5QqOJMlJeDnd4grnN3xSpZCvT04ELSoUVh6ULbWUWjTUNExO0sgq6Wo4++GwYXEFN7tzuWfincUD+94Xy/CCDizeuj6WyCbnayPJHGjC0qAywAIK6a2GRU1WquyHKIbPcjtKUG7X2ydTeTOLC9lACl69joEMrHlQ+xwyAgN4YDhI0YT1X1bKr8vMNbcgTS7QBtKwiKJCLTN8CpYGfSiyaeja7nLXObaosK8S6EBu0OJdVnZDZs7xRX3d8PfCu2GzYGy+9GKHPei78of9cHdRY0xALEKelCa5Pl8GTcMnwtfAJMHchHs7BclzDLSAMK7kZ8oNL0ttNjNcRQbtsELwrnkiF/FV9ks291TGg2/Ov+P9DsPlWD58o7+QMkORCmmmFs28isXX1LZyNYawRLAj8R3YBaiM/EzmDZ2EhyuqKkZO7DGyfGeEE+l1Ndjf3XNNc5SF2H2oNkr1aK43vaTQB4OewYi1moEpQBTgr2oRwdg+g/mgIQOS8FBapVWUqLaEKQbgq/2RgufhRF8bvysgRkRgEo2tm8/foxCcB8B5R+/lmQhmlz6fNsXjHnEe3CI0An/PVC/nFbRng0fReKyWuwBO/OuYpXfhV8gj3yCO2KvJ+Vb0l7jRqdx+t+7+/MpJx+F9ag9iBzpCdGfMbRxZGaw6f5PX7ZtI+EcOSFp7nvDEkdDXSgEay7UHjbzKcYLdEd7jQVJJXk3RDdd/raItmI+9dsEmoeDR5mQ3vr8hHgOwY/HQfyslyVHpUXhDxCCuWalTkHvF40rTO2jGZ7u3v3Q0W0v0qFWJGRuc29vfMTEE8thyDT9x2SZRCPvFbOTxcihbCmiGPXHTR4I1IqEHkaJJVgx599wuR7h5XpJDN5smtRuJjbK/pofYjmKI1dqMCD87eXvX892q3qaksPgNeFYqxORMXcElT7HYH8FmQRXk3kqLP/R1J3+murubfbdzVqbnrwt11ZjS1x9imV7E0g4ogaCp203ANQge6oeR5g90SxP3SBrwZlSN073XJkiEk4QXkG/MWmZw5xSS62eEdTkS7hMVTGl7NiVsORofcDwz40g6m7ARiMYF7zTdXcy5Zn4kOCz5XftSEHNKV2IVkIJ8/8USqjWKGYe0Zyzo2thyGWs3uxTkVtJ2Pr/yHG1eqIknQ0OSX3xjAQ64zb5EFAtHv7Y98IrUBVEISWYWtTpk/nivMSaZF70KioUGdYB/DuNU6Rf0mjC9Z9lTs7FCtUsmQEZ+SUiNuTmmEna5D7WLiPg4dWV8DXTftQ61pSkl+/6KhXG/n3W2wu4TYYs9bnuZ1VbWmCRvb/s+iFOk2XcrZR/Dp0+sGndKRv+QrhNuTizZuW9h/7oWdVn/1Ea5WBiECIBzbxhpW/QJTYLM/cXwT037tGRAFmo65QJJMHZWNoJsAFXCEWCmU7QHUGX0SpNyuF5+Blid1OB8IidJx3KR6P/ogP+Oc1S19ebnsYsVjh0Oaei826JmRyjoMGOMFGmoqUuc9vdmudp1pGA9dmdPeR3uS1AzoVF6NczRPNPtxM8itaWQ+Aek0IMsL2DHYjNVevZGwde8OMe7XparOT2K8o2Tp6rX/Uh+O9Mqn3cWF3NWJBbArOQi1JzKVi+7Q9koF719oqUKw8M4fQJYZ3cXo8M/g7gUL5lIxN30SqiiUCDHEj7VBlvOYles35174ozCtB90wj/ZvkLBAy7twB8pxJIev5VfYCeMRAsXWhY1srr+Q05GH8xlajvmFr2e7B0YRP81sbK9vO0hbuRZR9FoTFLVJm7xQdWeXZcEBK2OUqDLGPlkXNi9M4zjINQL4gf/P0ymOeppOB5EqRFl2b03RIy2FASKSanzHEzZqrEWTZkm0nzK6klGaA8kP9oDvc/lijoU0lRSGsCYeVMVMjeWkjY0QrTOpYHx93yfGnPNRqJHJYUo/tGmlNPOm9PU8y+wXip2bS41s6eqaNg/cy8TUQQbbqCy+WLdbcu+GqPhZMiOnFL6Xdkmlfea1Fp5Yak6MJMIr6p21gh4g9rBWengnZQm4Rvn3DE5wT1bw+YOF+OwURf5s8BFmq6viIRIxpLo50C7H4E6xZzZHY4LX40XVhtLTrvzns5ydkzwu6J1JWSMsSH6YPeAgg765DoPkqJyOiQM0aTGMOKh6fx2UJUlgcv1kQVUPNIzl0hZHvdSkQfnBHGu2F+e9R+aSiQOHe9rMJFSpal/hzohDNkbwk4AbbJ5Ka5wClCD8uznC6vdI1U2aH2h0qASjqptleGZZ3ettCMTOpR+C4ZqKdbB6P7TD/IncYkvxHNPELrhX0g9lw5mF5Nh8fVFS1gnGxhXNayYjiNuogLuX+j7mle255kqb5oVu03n57Ef0BEWn5eoE3xVzDtNzbmp6iAAZYuR7G4SeAhmNVcjLMg3d/gNFV7Zb953ULRxeGdrU6mxBXjReSpOMrmuptu83+55w716rum7/yNe5FnZf8OxTi2SFgJZqp9qLDrQXjNvakZjy5g20iEATTNw6vR+YJJRaQYJ/WHkT0JYvNUJ7GkIwmNWFWgvJsfcvSB9D2Lci0c4gIj4RGQRo0/mcY//74OSg4qOYnCjJVD3FR/kCApYub1JOUvuYdErsjiq8IaAtGDJgWnRO/sgpeLwrMBl72YnDvNiftbVe9aByVln21OdBposnipGhlMSBkndbf/sYteweAb4Qo1goE13Po88Opei7rrgmqVc9L8UrYdpfatwLUPdqmN9CcNamlHSPRN/lrzBPapFxZVJaH+JPUhNgWfoKr/SYNLXfy8UKQP++1OiSDkOQmLA4/W0IhWbucIOqOE0vWZNNrsrIc9OTJmFTtifepmvDg3tEqH5T1eXEvpYbs5+IhCMSULTY/r0JzK2migUVrIb/fzLVX04J/AgFNgaIrA7SOzeNaLT8LdjIa9pGdWkMn0rAh8HtiG7+jv0VZq9Ck2N0uq4ya11T4zJvpIpu/x+Q8iQMrSrD0grcxpuircwsqzaXOk1chAvYzV4lXEMcDB5hKc11OjshX8AFWSOnspYjB+54tYGhRhdnDbxOt0sUqozEYX7Bvbt41PLRle5NPoru1rl1d15H6DaT6pi7TXgSn9uPbXjqFS/yeY89Cuy7nDn/E5NujAH7BOROeUlYPuV8nByJ2ucpbaLYVJPjljHjcMk2L6nKVDD+nU4GAn6ujBFWbaf46a+jA4bWPvY+ZC9sS7sRmh4BFpKatqRlQ6FLuXYRZOAj9mF3WGXC0Nc+7XDsg6jWd280YrPdY9PIoq4r9ApcaQhiGA0nQpt60oVV0POiMCDZtrhhSN7yx9aQzEsuX+YGZ2Y8IIw6uGipxsCGI+gm9rU5emGH/wXPaxkp8VEvo0PC6DKW+VeQv4AHjn9GqgsbP87KyfWyO05U4ixkTIAra1uoQmz+ua5NcPAzt2nn2f26O4fYMbOMWb7DHCDykXJT3/0uYIqnZLjcZ3OFP0M3kyW3P9vHz9mbYszSI266vyea0L26uQI8FzMG9lf/g1vwVvcZylA9WNTY6NJFVLq+9Sxrkij4AHgrdJn9XgrP0pjafG+zRl1UUjNdoc5jEVOQBB4O08mRNWlMBPeo8a13ctP4gw+Al9GPY2sztjqgndRboVwAVLsOlEr0bamWHPpE7IMc/KRviNHSum9fW0xb2eYW/vAS8MPJZ3XUoM5ARSMG9z8hjIHK0HgeLwD6CupGYkNqkJLQ3gx0zW7I2hnQp7R36bXH+tmLTs9QOehwbbl0HjF6HuOoh4d7qCLixC6vgbjWbcERa/JikQMkBFKvoQoPz4bh5pR7gq5TsCv8qG/fWIg2AYFwvaYQyCr8QSMt0VgLCXIzLVR4sQ0yreFCD+AbKmv85P7m39oG+cyeuyMc9IIy1ms9/M+AbWDTQZ7Pq6D3IaAsh3pigpxYGO3RHwPYrLp4Chjno90MFdJ5gayoG0bBFXza3ZLUBEuS9QStC6xPvTj3AZvBRzwS2mo4Ase+31j4yt5XY9fwNomf/tiFqdKCMAGNPRY2uoKAZDDScPn0Uqp6i4dfa2g22iunEULh3b3fh3xPAJMyn3WH9B/PXM3w0G19FMuTAxlA4ihd075jshpagE0Xb7XeVpNhTptUSZ7cq1lmxjfJNTb5oHdeEVBbb6Xt0yye21wNFzNfnHJ27v9Onc9xEotpLdeK9LFEL2DhsXnPHAE8c4ktqFh0VkWd8f23qwCPFhuYH57j7AyKzANYM0VCrQ1wwpmDELGIgjfFQsBuyWpmr25tY1AJ8EwGzuiGTwuyxqnG1Bpkwu6IebcjrgeJohRt3ncwHuKUrQoanVdLaQbkawdMbRuXngXoAQlmIPDYGkshG7779/pb2S8dZnIyDJDV/Zw5+rZMLHzegg5FrvIrnwIkLrAxpizRZXK5vUbqHm9rYRTkrvdM3vpLN5ph2LiDOPgBN0wy8bswehz9PGWxfe0GwOsItPgXUsn/44VwTJRXAz4htq8G6IStR3YpKY6mRdri96wWrPlaVefLlLrzIvEP67aHcJKOtS4LetQlbp6Hm3HJNLShXxBS4ubrpe0jmBvmBwka6oRSNb81RouoMVFVhPjZsRmoWfN40Gmd7K+MEHZpB4hsSXPo8fKyGVkFtmym5q6dDYhmJ3whs8JKzBJ/t7JXkShxotgpzPgJrdY7VDXuzisdq/HIXnMePjOZiuoE+R1aDKiLBIR36KlIrUXJkX6I/57qMNOlFsmGUTt8UteB+aQtGZN6k8wVB33MNXbLJvPrEVH9bniwL8aYpkKsMhw6AQvE6n578Fk8bCx+NwwDYS2Rt62qkTdtErCAxdbO7gv2RdD0VvyQ+o8GDfxLmviAgcyfO0S7rWzhGMTpfcx35bzs9SqDNweBBhVi8IxOKCQrIRsRljT86zhTkhhVYfW0HtW3PetfCVQKoAGo14zDgU3v1GD/nx2UWCJZbmnUH35TK+FPBb8K5sos74iTGKbFKcTmLq2jlXUtDTQK8yd7dM0kKe/1GCaKmyVr8nbRaFNKilljPL1RrgkMxuWHjYwIM61s4U2Sn9CA7QsvO0IEVkLy9VA9Zr/PBlL9Q9DPRx+MM/wopOJixefH2n+/f8om/aBnxfQDknGcCtHvQqIDqWId/66K0RNRFsZEg6Wejp8187QekICkLP5pk8lOow6RtFLtiad0wJHhK+EoiYIrwd1HbFKdH7IvoiyGGPxWcz2NZ1k+6HaSq/jWDsJCET0i6/N7RA3+D6VHT6xjtZn91TKLEKIbI/sy4j18q7h+uNUQlk7uAhtP8uTQmkt72pCIVy13s8BB5/NGEv/81pKN2NXkaBjcfzVhvo3ZZfpzr7ZfjojwZGDSFa8Cgbr3RARiW39dFDLc+M2MLP2NH0CHulEkXDssRXIg52gYDoZDArSlb1xW5oKiDAtA1e94PFlWGiU+yYwvtJeht025CCq+LA76gxrxsBM3YW8LjX101F/3OwVtsolNBJzWFylRWPaM6ChWtP0DbpC7Mvr+k/2Qbag06/z1D7dfe1czAfWtUTAlkji/FL9YO6fp2tpSMQaRxyhQ2koh5DQnRtZXzlqxKZIMCiHSPD+ncG5UA5ZX4+uvHDNOPKLMSt+dFE2/JtwgCrMV21d/DAYKaN5chUm5iWOZuJctwGTrIwoDhd7rId8Atu9XErbwhj/TcrIqPGGB14mRVY/1SZNA9fcPCp3O5KqYTJrm6Wlc/VUh89L71JVTd09ZlHgRrT9zUOYLp3W9DlIfU1++jyc7UngfP3zY5ciFJdF8NsvcNoe8epOlpFjxAX3FxfL/Xm+RIh+fvlQiKx6vElWKkCZxvjdw+EC4Vja8hgxSMEG1IASSKJI2BrGxIMtXmIYMH5bTYdPLdXnM/TVxESr026U723AB0CoLzgi8yVFJdzBKQl+xCwgMT/AO32WrAKV7poeC/R4nl/5725ea0Kc7RQgOJ4P9mvV9RFbKKQlJGNWgGw74gf3rH1zA8H/auUKToFeTJRQD5CR2iIATPkWLPvjbcNXm69Iqa01TbSyTzQpaBOa3F+ju/xaGW0pHohQ8YqlZI/uqcttT4lEJCjxe7e5PKtFWqpHHdutF5YsGGXK0IP7BoJOeoZPx1A8/ZnQl3Mb67Iq8OQjtjGEZx/n1uGMJos57OuP2K1xGAuH2P8OfkARsnPPs/OH0TkZLejU6eGQN+/+pJVnXOdO299NJ1WMRQ19A8WzaifL1VXgYfKQkz0CYfWsu5fVYiiEodaNA294DhnRJKXi10HJ9HkbW8FV+dndWmK9r50fm93M/fjEbWnYgDVeFN2IJZ7aitbjQ9idMauN81w1qlW+7M2Jpxopzhcua3CKZAGn8yE7vNr46A0N+7rfJ8VgOu7+vnoGntWSCDfc1ywHaRHbPFbS/a4NAD9z280OzlYHdIcHKR/oR4Oss+3PipPeZD/Atvs/JiJjt8AEqXO32VndHX/XufQQmUgic4dji0Jx2mwGMtVYCDqGhwQQdgPWUlD0+6tyr6NcxnP1MAj/bf9uDTJcwHItLUEFJMH2VPiTYYBw89frDVvGK/WfxTjheNK1m8JooATOpkamXPohqocPjc7hcomO/KlfNlFs/f68XP+Vyi7CQq1rccrOVy+F/agk61AqoM39fX5HuS9zfAUud/URASvcq1VGFAlVP1TIFm7X8ENvTKdiGEDemUE4j6sGAzYztggcZQHnfrDdba414QnnJDdD5jLL/cvwtZsUmq15EKJ9htx5Snhqc24EyngBBX9r1HiZMF3x5tDg3Uqi+hkxQ/xUEPz03CCL0Hmblx7dw2VbtuCd6EbwPQWYp5VgHHJZRIoW88G6C5YrA63MeX/xH6//oWT25bcnN+GBYd+20TU7WQYQgkD3pHrvOioc4Wmi3wrscGrC4sooHiHsg5y8fVIA1WgRlFSu2xW1lk/m9yhOKodCKAYTd76HfFPAXuMzg1Q7WVkBilUgN27I28FoyAO3oRECTZWNq9lmrPT67oxOdX98XWoSSSIbsVqODIHzsvMdnONw1j9eghyoe/HKMV4dO/e5LSOxWbmz/ix7jzOsHzptgCN9jFhBp0Iw9B00zg8oNDMsfZaxCIOEA6SHW+SsZWBjJWK/JY2yhP05SW3qEaMGr+Lgma2bacKozgEED5/5bbR6wB4HbEWUvMJ5+9XUPzKNocve7XkWXQG5kaaQ0vvaOjcbscjJD1RXSBhQwnwDADcs2Umg5WHE91DsMAOJ6k3PcukBYHqMmFWqhJxAi3V8BYwAXJiY9OR3RpA/hvgiZT1el/2FOWjMa+vwFS2a+Sp6BUHsEwbT34A7ouHazKeUxorOdMTDvjvYr3alhkBLADtc2/ec7z6qZKbREdhV4hoT9mVlUIqgxuSRu3lQLwtxXkRb02T7EZEm2apYplS+frdmQQMTQrMbMuYpNVdqy4X42mUWgMkQ7OhUDLhCjCpd9R8s63YK1CoOWmSKzjPfzN1gC/qZWIpMCNIx8Nk2ShnGvyO3GzGGK2KT+U5XfhTt7hQBRxTBTKqGOd0tWxGydRIv6rUVJOOCOvAzIrRnN99XUSt85XV4xdsaEFtJpzbCnF16tttXUy1JVNvETKxT2fP0JsfzF4gksZgsTpvcOWOMSi/TRbITiKgzKhqqIEcfX0fxYQRGyL8XnI+bWwndtssONq+LCZDWRJdJH/lgS3StaIrqn3Q0Ysbh/PgnIS0AIDu5UG+zu1KGytJju8W4DCnJE72WGroX7PqhEej/N1p5d8wgADYSr04xPDi7ai8M/7Miqv/63LAsmtRrxtTOyryBiEcXjw4d7A5xoiBdtBwSRNhMZVkyAiR46TtUlX1kWWmKcsLVfI25OsIqzfsrT3hN5fmfZYVffpTUKBEo+qan8m3VX/tn9DVY7KnE4CWGMVkgDPFptTe3J78T5zAGwgkMu+BZQC1w5zVMlNiNIZDycMrmDU4UBwIpcQZYbWHmidimYXV2/NPcSY2JFicPNhu4BBQmSmr8jUudNVIjZjo5reqSLKyCknomQgvPv1Ss4GDwEQRTbwrkwa/t0cXZaNhF6+XIQpBQmK/q0zz3H7bAf36VNk8J1kJVFXm2GtF/hpTZACjYLH9eNdufXzSvBWeCo/lj44sgzPqygMiQa5siqcjH2wXmBuk6x/3UAWkXb5sbzOjPalqOoCARWpu7jzsN1v4OmALSDeEhTbXgwdbDL48mbRiadui0/44WNac/REEI8tnspu4NFXALCG2gx+iHHL5S4C5oSBUilKiZ2vATId8AhcD0mBNT61F0y0UJBD3pThnLE+h/90gcOvywkA6Xr/w+DCmdurVE5clGI34c8a3fSdoVd0i0HP6Fdu/WH59WicvFt7YOarLVvPoqs7NNTPuBpIATGJ3y70t7qqHVfMkh1DSH3ioCaKVtxOCMoQiDskjh9FhTHdhJ/Re+rFlX9oKJjVfizlIcGaqhig4wtbhoBiO/+nfpMyJGIB8Y2LnOdretSQFREl64WQvqPvPIZWdG1tGyqEUyGOLNQcus10dbRrg2BSzWHSTJPkRDipbp08YDqafR9blvlC6jsiAsSQxIg+WCi3WkSN32QBKqtgibR5cumIV9R8O9mAjfL7SOunehqqhccF62MetYQVgzCxKccXpwry7qZOpfuo0KnNCXRWzKeZ3vW10rIaTVnklGRyy7GIkOnd0i0/IGsgaQiGOcZImm0UG+9T7Ld/3VRMlFRAoHns5/0AvBztdDYgY+Sp/vnhHkGDiNGElWExbRW299PtWjMcDX44J/gbIv1t9OlqodLN0GXsrhSUcbp/WLJMebNZ+F01lacDxn4wQue7J4Uz0BdNfzj4mtOR0bvCgCIBIV9vJ/kNSTlxyKlJeHsfjt9oQ6ETeSpI/unAEasSebmoEY66EkUondRYsfOZfuC+AnzWrEFLKU1TiLP2+QIrCwN//u5trTcO5UYFHuG5GwL43V9E+v2kgk8FPBPwhmwTU8SCsn9mRhqcKEqb+rKyaiV0jWBST5IvSgv6AHXYi12f6c6UMipdco1MQ6TtCzGYOowMBm9Pq4P0DzUFbevHO74W4OeakIP5gZ32jt+UbLYvIRodS5wyGO5F5kt3s+Q7rq8NhTs97ykr5uPvrsEffkZlV3+KTuXenCqa6XJNR0kdFiouCyAiz7DBQesW6KQtjVkpGnSxXuPYh62mystHl3WqPPZzuoRFCmtORG2Y2ABBxNChLAFIYP+s3e9fQoTW1i5t9XsC3zEzXd0igjSGPh6WlAEtrBBCTAKazMzQPOn9SmF7r13I4A+IwdS8UHyZkfAIzoj13Cr7DOdzYZeVeT0ICOVCijxQq81eEkVzvuSf+gbGMMFZAp8BiT5Rctd4WLICL9tpqyKqeNN1Fg9X18KdyCm2CUwmAe+/N2E/f1MJy/AWTgiMXctz/alygjGi3MslJJPfH9xYvgnHB6Uld/vEa+/ISb0mwoq5tOihC5teGOYm8AQeUi2+lNk00YPjM8bltW/Hjh6pAyoYiss90LPgJED4Dgx1zBrHmA/3lcVn/Hn5+w2jFwylGDKYi1TtxM3KasRflawxL03AKehVQ8lRNfXIbxBXzOpcLhee9/oQ8Gxwixr2Dc2WkfaDW/gGB/qaxtdQM9tjjlt2RtEMOU1PzF7b9L72cmDdx971hQx+fnRIGmOs0oILYqzFG8rxP64hbgWUtLzyKww7loel9aPQ+8IBkoihrCC3mhhpIMK6/ESNuua2AFyZhFufKNtdHmdyw4gJpXSwdxR8YaQNDwah2GeihPJ9xb5WLMD+XqHg70Lj9R7/8VYc1QmGVP1RJS2S3ow8Vub0SjeaV6NspjcuVohacMiP7mN8xxGQIJTzaq8cX2OkfqKML1hWwFgbBHnesyilmdCDOdF6891jMfdHNqTwNHtLabE0okOgJb7nCfLBP+Mzv2gbiyMtF3xbbkLNzuLCGxy8sWOmT9xJj5LUe/1dLL4AZc2s/NuVIY6IOhsTnwKh0CYLQLCHzeTfZKJV9wkCzvtHzxuxoFT48/dzXj4KPsFOg9UFMW2qATAP8n2LYtS8hQFwaNvDEyUd6LLFQeIzzKRQ9/sgcMy/Tky65NgO6SXIP+3fRN02tT7IhsJrr0xMu60NOJgnAGvsxBI/sz9WmHEaTjvKqwiWgfdVmZaRxHfb6HlShKT9iczUDwbNwOJYgo0ndM+ZvfVODJNHt1s8cgyQO03tyZPkF8Qi5UJAFIzUH91kUPeJat+sAY6nsbxnDLPCo2yMrj2mE53pYl8cHk6vOcEl75sdjMPkOj8HW6RXpOhVyr/krBmsvm5jfncd95K5Fa/zf39tBO66+QFost5NN+vzNgUby/8T3oEEN2bwP+CK1N5/tx5rVEg3udiODhuYkfvViY162pRgDmTQuFFZUDK2ASAgAXhUmH9fV1GDeXoY6Q7nEvnc4esEsd3Pl+ymC19jj0I+3iEucxk/u686UFSnkTGdjRMIJNMXUh9oQa4FhPDVTzxLxJnehT/nXgdJyr8rLM1ybi31DSMuM+mq4P8Bvj3yGW+nVlAexGwJ5NCzxLHpz78KHzMG1IVjIO6cEWSmFFzAFox+iq7FCj+0hQdRB62Oqh+16epR7KDCW3K3lCsz+Du1X6ypfhQ7vnxlzHsnKoXfCGspeS0LiE09n/cWqVX8yII1vR/4SYZjuyFZL2xtyMr7VLQcpItAF+f2oEQMRTc3Hc0/mH/v4FZcGtEPO+PKZVi9xCNum9bIIVdFfp9kIqMM6CAH1v2YjbglO5DM4OXvh9Ve23dY2AI5EsZbjmUYyMhfFBuprSeV9ORTK+lBGGJe5uYvZXxdAUz8kEULCh1OZ22bvXR623quPGbQ3quh9iXgYGitiJShSbBIrCWLhqXWOKnVFcoE0WHu72H4woodqTr+yLV9NFlq/yd9L1i7q7fmOy8eL0eThY3Y0FC8MIHDkgnL6u3tHtPWefGqjKQncVAuVXQQYwB9G/A641ih4qqCWy10vS9iPhPmU9e1HMs6V1JGb70efEyvyA74NRpE5qxjyCPDgrFmLAQzT5iBamySd3CNHbPDTK3vq2MlQFCXsN/w/E5+EPvY3lfd3TTrSeJrJlP9JBoQR3CcHOm0IXkq/Nd/T+DwaoOaiAJ+g73Bxd2h4MXrt+lEK6XbX//WFjKvpQDEl8Nkx6qvFeezvUTQyHwtyHayn9729YQjXcm1d6FHkkxzVrMQMKaQ49i67GgYr1l9buO2SRGG8ZzpO8tWMm9GmaSi+UUuN7ddvhAttVYY4DbSROdJgoh739xeSfTg61YoycygKizOZWajW1B4haUN31cyXEBtfIspq/8jrALXioV2Eu0QV4xcmynoj2quEfPWeH/91i2AYaPCyNGoTayUMFr3WzTdiMt8KXKUr1atYANCAcZXUB3tBdHZycFqzLkQ/SY//8Td9z9NsMJdACOUhlMSi6iQkRQVLzBMpNOgmeyuKENCY82QQnKAavuojUD0pcveTzWLrgPJO3PeufwRFH00BkgOU0O0uOBiLmLLgrSzkAQKGLBdCNJl3MKPZxryqThDCwcAifNSMzJLvBdJ64f0fz+hze+WR5+m8TkEbb4eMicndNlJNqq95a3g9jhH4rVYc284qJWp14FijLA749BE+8hZ8nl8P0o2TWs9RNw3jrjeGkPTVgDmQw2yeEfskmskfs6X1LW5Ez53EPY3PJ55kWykqFoM0kQ8edo+Fv9gZ+gNgR8TK4JDUOcU0reATVfEPZlSBLugps7KWoHIbC6+Gy4QCIv8BrRuW5HAJutbpjFdkktTNQx/9/6aEWgIx4Ih/WFW1vgBESfuvuRKVFs/TtY+HbthY27ajuPCNqn6SzjFwKT+vNxodMMBufVBYT69s6DQ4jMDpUMwLfpQSNMJXlL/SfRv/CLloDor9y4vexp1G5TELObGJi2xwkiMXa2sgEgHnx1hV1FJxX9D+Kamw1BCmOwWm3z5em7kLC94bPHlZGnC2kYirVDz6xH9R/7JMPE6vtHconZIabbUS1VjKmy6QjM7oj+obdxN1DmI2wx6o8+ne4Rgu/bZKglPGD5qoVPpvfnrb8Cs2ChYWy/PGwuZdfY0Zx/pO9IcMjrm84eLiF3RhQbjf55oOskDY/X/a8rk2+ivCpo0dbLkWFgmZegiKRVDCOg1ui6jrppy3bQWXDq1VdRrlcjOKAUeqSMyHGZ1ZiTvGOUv9VqfLASFBBQy0Dey1vs8UHYykrmq650UGSGFvSdRAn2G2tqokGYRbvQ3PT+VwYP+vbzSlxnjO+uqsDGzx+UUUpRsmCLgA3uVZLfpZw3Qo/xakEg9U0GXXeQYHPu4N3p++6o8Y+pviYBQN/8xxloMXNzloPFJFEFeuoQMHeS500uPPXDuy38/cdu5nMqoeM430urXhK39ob2daPLqksWsq92Me7QjCLswZxFRIiqg13v1i1g4oWXKi7jkFzmzDbHBjcHJt5b9sqLdNLDziD4y8WCgga/raLc3tV1Mqw8FzeBARQVIo5mpcqZZYnjd2/laQ45XN79v1/Hq5XAs0q3QIw4Fj+Ug7uS8PA5snkWV9DPjp69yBY/BYSfkxcdA7klTI0ZH9uh2ta+XK2EfIiUQY/Bnn2h1QbuLDYByZ+u2ZTzhFb8Dz7mvC0ktRGYaQPRXG57Ant18WJIx+hfaQE/Q2isc7FvgK+qHg19+t+tJ6GzolLySi0fFwkK6bm47sQDD4e8SapdOj7KiItvJ744POHs6O4h0SqdvPzW2HNo0sjrfZoDyFfvrWg69Pyx6XjZa53ERILHNHztLYdHwtRkRO3V8Jf59vcDSHdtozMFuVlX6eroZhS6LfJyQVbhUOBNZ7aSYa9wwvBsfnR9L/f+p1nMooIY4IcSCliAlnMEsobDZSNBsupW8jM8H2r8dCzrm+FpUglLQ+bNgJElJRV8ZebOhNwUXtSgKfS0IgDnje0yybz2A+MtPJ22FPwJCbRkC5N0WzXB0xLgU5w011/SGRUBPCcddfSltyKAlUq0mBCzY4XOSmfiebI3/7+sxxi+MVy5soCkAFEC+aFKj52WB0wTmYJRFHBkdoZ4KMeSk3+mPNlVSh4ddk+mpFalubr1aXsKB1+EGyzdFhphadoi/a14KmgWWEfOpIV/ehwpOEJpFukvsI2Y/4PKKm35r6hvK2Y0PJVbGbPSiwvLRpUPXxdJ5FMqUqs/WyKLCu/zdyZGRHJ8h27wvVUWRc1u7uwnNInU8gOImSz9S6kvTDal+Y7ZRWnDbTE/JLw6yM2deVhsTajGtVODJwtJs6pgaZIzaBzKdbdTKclAzwNVcmTZIIWdBkAOf8EypT6bPO3Rj80YwVyy3LNbCT302SUtFFhDV0e+GKDZx1+UHMQBQjhffIci5Wacie9u8OeybNfDULI9VW2NHdpQAhio4qimFGUNmoDbtd9ny/E1MAMSY7fh/5/ZAyP3a1bUJ8WjTEkS1MNA5NL02QC43CWWGqbLlYP0kYpp+D3YY3oNc/+rNZ3qbDg9rawa4GAe4rX3lAZmR8JHeBsVnQ/8sBbtl1403L9nDBXZipwwSBOtl0YxCg1peEEpOTAPmeoH8QBY1zpK2tKpGpDApR9B7k9St3RYagTOJeOA6bZLm4Nq2cJlQlYCzuYoxRVJf/G+eagvmA4D0tWRw4j5gKIdTBUuFEjh5lrJKr0iwwXcGmiEIHD+Wb8JgvBTZFy71733zrDR3SxZZnAG7sxi9jDOE1cc578X/jNITHsVm1Ll3Ur4dV4Y6+9NBgtlXjxc6KrcTbBpTUBCgWs5pjWXfCLYCQnsxa+2ZVVzG8yxnAYW7XTr5XkIhIOiciSjtsSWkv8oCTT31mQDsNz3nByzzMaBUtREWhZdGqZ741TFjHJyFEmM3fGCXWCAZn3TJoxobGaPNMXTDZbBeDhS9KqttZD/cM4os3gHCppHMo3zKWLfDC3xYd5b8eMFvtFAK6HVci4oP3bDQV/oxoVyYgltyDHQwVIM2HnYIIecr3Oyd7QXbDcpy14JizGXzkmq/40QWHIWMm+/wu0l082wHoUNEvOAgKs9IP9Lvj76SiCTNaenW89KNqi+XM1qSOvqxWitZa88aVqaikoZud0nv0+bojYPK2hk++MtHFqfV3s49PBZgq/R6NEwnfOJQGGAFOJSbjHBS8ArjR++ZDLJRwt0e6ToYZYmIMaTUe1In4ggQr41NcAFq6vwhKEul+3wi8FIewqT9XBWAZX7xdRqvKZS3EJQqA7g08OzOilpmQghmPcWFmASovPVAyCjiKaxPi2/e3aKQvN2eVoZwQBa0a8lTcqsJaGBfoQf7L1hYea5l9B/I94TbMMwtUFyBIBDukSwbtzppodkJmnEwkGNcTm8K4eUjMY4Pl0kKyWNozzgsZtqt933Lw026uw1KeAReysJ7MEsEr3QUSFufx3hcEdjumMnm50bfKLyg3+xmjKy0LWNZ1liKwEP9gL8UUWCcpeyBs521jd8tOxXB/fN+olovYddFNf2yBRmYf5yIOIgIbXiRhxO7E6//NoIIq3wzHwaU8e4Wemk9NDaAGlBnGs89gCZpZp6XCc7/D3pAoQAMcFh4qjBmY2FCN6JOFi+msVm1tarzEm6lz5onrPmM+ytGgQFNDRWNuF9nY0X7Dc8LNn860392GJ1RXB/qE0OpZGxi58hrkKZ2HiNedAwEExTfm2Xi3ck5vWSXGBcRo7Hb0ImXwuRiP8vSyK0a39DNUjb+CYX/85FLqpQyQoPasxMc8Q0Sifw96ptR7O1BfCWrfkS+o1rqp3XL/eHy/HMNAMvlcPnpm3XSArIpqweQ0Whis3Di7Kyoe50ytD3SSn9o6/L9WAo46Fs9HGwSeaOE08FWSYpNrl6Za05ORo8ZqvxiXYWqoLAyM/2OPEk6s/8pm7RurCFbDeeueXrkHop4FmMMOATm/30J1v2eeO+kxz4rqbPth4J8r4IKdLD/qP3syk89LC4z50wC4ZL33k8+tTmM9muaagC0bREkOQREYFAP2Xxw8qOP7580Grfto+epfT04rSBzyKg9tQCOVWBfOXrTe4E7zi0WSJsR/aI3d/ZjQJ9lfreNPEvDBSt/QCW+zdLMXncX1RNc+w1pd8B3EW2mxRQbH1OcZvBpuvfu2fpkXtj/gEKVp1iW4UihnhRil2+hSReBQH9E3V31TRDLvm3A5HuG5gc4Nzvuczcqj9IHTSLuqJ+qK+TUrtFR/UbI7dyZV8bPfmdsGIC718i2NlehIW/HTvfC2V+6OIqZOyx0cfbWk4Bbs9MZulWX6BSPzHp7LrPxOFpfZWCteIGX2y9Y5EFu9km5aXDJO6nzsbb4j8bqL4gm7N7cWkhPYlpDhfvYoar33twi0yE1BNvARbIMu3KT44PsHYofcBHy5n+ah+be0B+/7ItYayG6nau8F5ogfXmLTJOwBOJIbJpOeypZTT3HdFVR1rLr8+e2GixEUJMif0rQHy4s5utpGn5dzk+xrXtxt7dGGxSrR3RDtcWL4bbztVQzo5GoU1fUC2461IInCSLsRApWwKUE7CCTXtuIITcyCNCPMwVwxzeEbNXNUq9JdrG+y/g5FQBln51ff2cIdtuFFAZucfQlw0VDr2sh5WzRIzAwZOphppfn3J+zlDUkp10tKxcUrzssPlKayGq09qBB5qkUd0B06LMupXrJOiohjB2qXgOFae/4XfQtUk12N2unb3ZsRaC0HMtW7gw0/ycAaNnPXLl6oBdHBFEOMcu087gJ4FW0L7RODLGO0Y0VLO5F7gG14NQhQ7FSNmNiNcUBmb4AheYJ9m+nvXt6DZepNAIxZHoJLFStaurMpcsULKPkwTwikNv1hUm/7k7o3QcCsdbbHMAHPKwh+JTfSjGa3t7UL6kj8JutVHunomNDaY3qk3FbY7bkn7sOhb9fRquwVZqQxOiISPwZUtZE6kC7LDCfl5CYh5Y35US+wtOiVDmGTvGhZgDk0BLTYoJL72JW7T5L/wfY45H4KOUx0udYZqK8Lj3edPgq3g3XCFyOtgV3WYx/RB06khS99hgA2rbwslX1jS+Yyife32vAlJBXlZk8bYBKZTo8Pq9GdX0FMsDt+bomG/OWKqX6PD8EbLIwo/p0cPZrtwv1duTnSD2NHQgfL9Qk9hJI8F+8qFTeNrjhS32zqBaksx6zK2C9eZfMkuPsEcPn5Rhop3W4ayMGCtr3bjkfkoA6D7GuL7kbhkW4i2scqKUfo9wq1oqa49k1R8jPy2Q3B/KRyqNBMTqD1s9ly5NX5bLPkctWVKK06BmmFkNFjVtEkRjUQRAqnqskkga5kNb9RA0NLFQRb7i9JKv6KbmAjPgDEeHYsB6diCnVIEX9OvkVySDAekkvsM3ovHQuSNqH45Xx7GK4dGDA+H3nHM/15HR+Ke6w9XsO4Vz5+pQo/VXfO+wyXbnWXqvYuzTItYiG4Ig18vrId7EJhwRfkrbXYK/rD7t7EcmSBQccXl0dv4fhyT8C12RoqP5FYU0FThpJMpOc9TAdLurl+oHJbfkkrIrIlqtnFu8b9KWPnuE4lnCWr0kClBx63tU0Ar5MBdzpdqPanrOe7oQ1U3uqa3MG7K4kRpoiwU6N3BInk3RB42prtR7rpHLgUk4dNI62RImssU8xTqPrfftEs1mxp3apF0uX+hR5q7nQuVhcfAbH3eg/FdVxoeWCOdse7olq3fUnJRRUe4aH0a+dHQvJkfdimDxIfiAXINCg2eCPraoSW1HB9fQg0IDGps7OPohIxEqWGzZXR55V0rw9W0bK4nA6EzQgPT2jDAPxAapETG7tVeQVFJBifnSnL1/hr0nyqob9N4CFJf3j8jIxJF925ya7jI5eeMLE4PfypLxUqgrx0+OCk8E6HHpK4yCXafMA5uojupZ5U8yBMS9jne5n/w7lrqQDrmZGe3MzvMo9YKQPHYtLCb0GvMCzRHEcVXzok3K3VFIQ9spQ6S9UrMyEHR3Etcdrx7edWr1c4VQA3TpTSFH0bF3geaHzWLuDVlyyLG0GkCmJj80d6hQhJW6GAgeAGXRvvYg4IZMM0ipwwchWBz2xKQNUuujzcEG5I9mU4XfO1UiKo+jf7BY9LRsS1d7HPPTzZ2a5ezjEMj24Ix2fg9D0t3dRRuhZqyQRe9/c17Zf7ErsuLC01XtnLAwZQZ9dmU764yW45OOeTTz72wzf10JlsQnjm4hw2RFy39cU8jPFzFgneQzTuTarA5levcgyrw2Qip5PSaVDcCoEYdIMzbYxqUMNNYBFdkd1dRj72ANr6AGjAJY1pRjjmyiNUDoQcdm0EfvwX7UNKzxqPFTZSB1sF6Qq35Dqf47qvh5SwIut8W2ctJ1SllEUa0i+Ual3PGbjYpqShczTWRqurXTAzmAnWoGM9//QCATw7QPzC9l4pOClOcu+yh96lCnpmys395Qp7P/QXAUrs27HfEd4SzqW9RLouHr8dpA1iOZsaUmpu56Y1V9dTvgKXbohx/bR0LOsLbGYJzRxopcv8I/6nJu9wt7efOL79wwUb8TvOE4lbdWV1F1NLPEuYO/lUOFX8Vh7j/hyNzmfwDlNUA8exogq18W8Md8e6+zfWIhGu/II1eO0fAgubL8Cd7Jl6mgGxqPCVoNWAMxzsyKki/jyDpywnjiJbkZdHYFu48cKVK9QBOGOmhS0lxgee95+IdJrCVeLScXqZG+jKu9emPzRYqltUg1NjeDzwIjBtOtPa6uH7HDi3pz6FIHpKoK4YpeMsh07sF6QyZMejaLt6Psp5qYv8nUVjQuvj7+jwVYaZ8WsW13CMCnvkvUjzgQuWzoxKFOWxCIe2CCl3lR/GWaeelEXhA68Cu1czNeo92dOFplnyfXt3cHKpxLEhAPxX6gTIHB5VD4XHPoyVCUdgDDTbP59ljeSoUTVYYRowXH+otK4OoZgjTkihJ32eUm8c1eAH1SQ5fbgDPACDmCMI1Jpt2Pv/9FTrGbT38ZoW035D5vokPAjQcTBBD4vQY4brx0eWvXoIG3qtcyZNh4OrZbgUi4H+qFxHn66hHM7YwHSDtMpndm1IBnMV6I1J2Eky1s/fSyqEXnyjGxPNcu1a0RqV5VxjANLlI2zBy+qExe8dQqwu9BTP9isvSR/HF5w6KNy96NnqnNewB6hK04pToJ4U50OG8aevK14ziMQ4IlultFECp/DmHMIs4gnp54ydntIu0ZdRImKgVMnVHa6v081PmGLFT37+RKulEMiQ9RuxwP9uQ6h0kv4M8RiZw4ZJow+xbJo+vCq/hJfBCPL8WLsK6YrGNJovTV7WmLNBZiKnDO4ZMXhGJsuw8v4TWPPR6Pw1880o9lDUVMk/USBVW7Z1txQS8LtC6hJFYy0xQMXVQfy3RRiBlA0Ljg5V8rNtvgEjxXCs2rVb1sHgSLLVSVfBGvshX5TeUxK+vEDuUn9VuPcEurjIPfnXrST6z4HJVTXTg/MLCJJL7vfxoUCz9mqaLSuWErZEcq4119twlCwaRnAOmqKVClyAxdAn+/fDyCSJW5GmKXOXunCSY4FVBclYZ7OMnyh6YBrFQbIrZmzs/pwv1yOTWRfUJhDCpaQeD6UU9N9NZgDimPqYJjv9Oq6c4i/+kkpJ6MEpiepLNXiQwjdu2KxopvSyEUnJ7LgCRw+X/LI13loOLP4FpGkoHlxuqia50Y/f+yXXiXnF49jG802Id2xMJGmCA/dBPEV5fz+rJ0YY1eJp2HASwmGwF1zsIvqHzsplEBuBn49a8vAVdNkIuDivs6ixwpOX3XiqNtosc+8aGd0lNdMafAKcPz7vY+slhi8LeF9Ko2zjASfWl/40+XqZORQ4Ts54gf6PI/14DZHiGlDUQ0KZV/eVDoVqN94KWk8KsaLsDptQ0YBHVClLTz/HgR7B92cjreanSE4+hmb5rbslk1/hEbbGweCkZ5+BP5x6lv27GxGBbGXunys8pk99N9MTfMjEQ/rdetuFk97uHaw3tTNL3bWlNdxxwb3WlwUoIBcR4LV5SLFDBl4rjcOGLQTzrhQEwUGfoVIZh0oe/lgLSixwHcjaq4cTn6ZMWCnRBlxL3IcyUTVXomjyBeeWJqm9z8GDnHW0scLc2EnmvRwUFkaAlDfYEL/vFdjvarnvWTDL6ITHwTikFBFeYcXOo8mhLdvHVkA6QwkW4k/abwzncMsBK71LoQZmC4G3XSNu83LH5cmJ9+bVkZf8Tss/duVkwSBmPAnmLj7g1vAw4dHqRd9IgtcFwSCkKlkIDcjEaTVf6b40eHt2Vo6ol8M7UFNoxUZhrPzWjiF5OGOEwqo8A50fC4mMUfJdHaC7QyekcrdZpCXpW3og4UDXMK1smqkxBGBzZv/GS1muo9Ge8iNfSHcdM6upDtcgJBHPVMYzgGl9Xx+LL07ySGjS0pa9tERABUTAjEw9AfhL7aDTYcWJxMPbJfP45CGTA3XXMvrjaUxULbyn3EFj4LUt5Bq2cyoSrd9whOrorXFmH+TAhxSCFCt2dm479w+wvsC/vd13FRgY/DBA11xNip63rgRiY1mCk4Zkl2y95tLR29tvL0i4m7CAcC16a1IuDX1/VGRuK7VuFH5mUnBfgOW4EDfy1z4uqWbWvl4StYqKLaarxBfB86X4dRVpex+sSyFzeNJRWqStsNn+qv5GQQHSGGGP1LrXolhrJfWRCxAGwiv83763WqmgIfJIhaKAuY+L9ti2hwbLgTl6lV8YkuUWLMI0lsETS+BAQZ2qkbDh1gs6Pd4FFHCf2zsAbeg49DJX4AvtZQ4y1q2aeIniCt00BV8G3C5RATHEMHVH5x1pgsW7sz9NO91EI2nj8FDhFAT1+0H1FFsRvoVyLXSz/wWe7tPRzHRZ09rZaTXHribvghMdfBu2pAbAqBmgoMf3li6ko07OjrBJ69Qsr7m6dlJJ9/RbJGdPoSuGY5CtsC1QKK8xKbApEme5GHtBq4TLnEOUCdIAaxdqw8jE/aaLQhMHwfgWQWkp1WcnMVjwTMWb1tz9lO2t6eKwJEJpNmDY6HK5FJ4q/OxhpYqgDVK8EMKYUcjBDW1Zy5lsJh86LNWOunrpqLAxVs21AKQXPHsogrmFBaDPFOtmVm/1mhkJoz9I0c4qOVOWg+zN4uttjroMLunF1Ud1/+ZgxdzftfdojvOjAYNFeyl7mVm8oEotT6WqAwijKOZLR1bxRE6bUD12a9vM68BzMVqry42M6lnQS/JIR7wSXDUcjaNPdpVIVkDjfkdWqvNLqEA3zRGXvTQ2u5F86knz8iT7C9pGEvxCfEX8sLJI8sge13TTF7GZsvRYfbxthd5+UiJX1DzND3dvRB++fxnD1ACQpgPuDEjM8cLIhlze09n51f+aWwZUP1SALePS4+ylT8FPDXg3R17o6Jg0cb/ecJHHpp3VSUV8Vfw0/TtwEt/wlbG4w2jCfxxnyB3Ch5pYfl8cwBQBNd6o5VK9MC6w/yFjtz69NNmwOWLvmhSu5SM8Dt/UBheX0/uvxYPwan3nkDdQjoZlvtRD08D0RGCSsapajD34M6Mk91XxkoALYRPdgQYOt1Wo3DylXUI4Pbar8pySyLekRIV7yz2s2oN9pcFjkQvQSuzfbZwDfcStZFZR4+DcBPt6mORPgiKKk4iuu0v8j0qbjaYb0A6trKEFojlEud1HGUlE16pyX9AfpYnv5+b5f9vCT9IJGvVDJ+g0PpE9kDPm8GmoKij3vIZog86rHS8CX3OTZclTw9SU4D4ElNxTI9COluB9r1KHEvonoKadvoW3hoespNTiljJFukjk7GZAI8AT+EGXbpBurqpFxl7k/uZnNrL1aRRkYutUCvy1a9mSpWfAlZYNFs4G2D/Lvh5StpRaO+kNb8lJ/iJqrSxYzdkzVYMFBfkiLwUtfuMynImEvfhstVeuXAknF56MKq5IOZplgytyxahZ6EyCGYQSNTVF/jlgHKyCASgG8dexCwhoiXnI6w5ZBrwRm+/NNxi+HZgFsBPabZQFeOifcGdJnHEcLa7sSWXSVhuk0n5hCwbKik/EU3enSNhBbGmpitWl/GqIE+YCqbG76G+3yLgKjjdGRNy5E3NqhzHYPmSuSEEVjoDHPoZUkWfoPqMzi1XBV015Yu+sgSIV/j4lZHOc5sXGVnLT1haI3PH3I72teITB7t1JbfE3paeVZ1b0u90Hc2ihmP4UR7gLLPTy2tRZRhdQOXIxlTZfOPVNCHDO2FSGBI5n7HMQDeNCkblQRSY+n2sutkxDX+7TgrzOXgth8o86XB/lllGdfzjRxPXpxRXDOcepUBn+gS/FTupRoYw80P/sW+HcEV566KF2o+rP38Ln2AvcxqLLd2sbR1vWsXwKp0JVrr1CmtAh7xTbnl0mltcGriRP72ab4ugdZGWxLqAR5NcnY8wMZEwZpgIQvob8hBWja1kzc/bT9WtThK56f+k5fXbaElY1D0qT+j/nBmK5fCCqfZszx4akOssLQE7afwzTflL0ymoT4AgO/xhKrIMyJJnvYQLinTGjflVuwGbhLBSfvGYr0BrpSQaHJfYEmo6hI7nnc53VoSh3Id8pV2wA77uL+DgNFE2Qb8htp2S6IasVycH4IURhX5wlgwrk1COWDN1RTjWSzBSFtoUSOg78fvBmZX6HC6+vtQ31SmdPUw76WoPVtv8KMYoT6xj4KPuF0WjykrBSi/l2hesTS22jq0rRO7hYewgg3q9KKlqHKHOYfu180punS1lkMZFB0vjOHOG1RdKoBa77gM/Ow3YUIfjQ+aVAshS40pJLGmxBNSvAkCRecKPpqbEKYosghfXDOUrWVZn9RhLv6raKkIrxjZFBzcbutGhvD6yjKXRfoiv8gWT8UM1ypBOZmUU5lNUVCv1RTDrwEhkWNp+1UbJIFxVgVHryOL3OKjNAFDykbZWuZhXwP1alBRIneyS5cAMLzqh13SB2mYO8t2KhNu2J7JlrTbY9JfNo1aG9jvWGlmE3OvydtBQJY8km1rwGT9dQxJekAUXNx9AWvAM6kRWmA+/vhk9ob00IcliNU5uQ+nsHh0GAynfHgG0vFZTN+7Mmdfw2WMsLCTl4SGFLjI2hvRBNIcB0rUVnENkgMyGsqyklC4cn5PqsMljaKjyMOhr75BbRqsRsYEdfQlJAXURd3PXT8gRUr5Y0q2zRNOwTkIlRdgA9OrwSGUJqAEQTe4oAo+8v9yekdnBs2NW8iwyjjWSRGBldQ9fgnGWolrMgfYec4pSDsyVYjrP/pUycT0iB+Mi3ltveME/3vUiynwlaESMBCN9HLsfgLVbcX/nh9vcouZ24L/lNa2wITXxxU4asKBl9gyS4UYdortGuxdKtr9CBx4G8lPe8llKfFZqpZlDhqAyW0frahIQNjmjzddgJJzMLJa1WqanJ2vj1dL5Kyx0th3m8wGrXat4bUlcEhe9SpZE8Ct04TcweRssQQaPPCzAK7s5BANl1gBRkHIPg9p+3XGJlbyOjhJHlwJCnNE4F6maHppogYFCnACyHgoUdonPnhpdctqqH1/2Ru2uy5jAF90Sjl96+h4UQxAHekOZ9KSE+aDEPdcQRBC+RQgCtiLHa0C+naXOQEvUt7buKrdqhY3xesHfUbvSdszpr+iAXSxV79+IudiwJRFBsFxHZyYPwsBAzFZDOFscgNr6AtZk+Bycm6r73+dTxkT4rnY64j148gDLtixF8ozShJ4Lx6wBrz3F8rnmN0b0nFyx3xBX15s2hu8n7PVF8QKorzzscvV3zZ6spb1GinZ9FauRDqPuQ+SCtbezQfUPFBg1lGtISgEERzihgr83t+Nw5X9SvROe+10lzBi1tfE67WBZUFjxhezp9cXetcE7fQjhqkgT13I9oCjKJ82jEQM+dknXtTmciSfVZTSVaxuj72lnbgh+CAX6z6TGr9tI1kIwQYWih+xVLFY/D2KQWuLF+VzOBJqTlX1C9bCjTYgxmllIu5FumWkGt2oEr8uUI+Am3hWIsaXUTUyqL4unalcCUGtJLyh4gecjXv3Z9Nktsp9v28xpdPwFbmP4Sx2m95YOJEwOM6Li9oN9GskL7T89jZ9ydVdCv5+NMDX48fmVFafy2S0DgA01Nb1mD2svxVX1Na8JkTw8SJkYO9AgL9cQ2nDHpOibHY+AXznKyTdynmNabBqtIE4PDgck2uItc/N3sLeXSS+BEXknl4d0z2vuGGdp7rBkfGxItN0wCPMq8h55UCC9Lmh0QB4ujp3fb5L1iBb/A1I6gy4hTG4/JJcrByAhms9uxYPj2KrCO26oZVq8yLXNuq27rbg+zzwTNmJqJftG8xEfyMjhpvDqBN11nfyTZv6aRvVscZm1CxOBLpEMESG2kB7oy+6myfhlcWJckMqNK5AoPCDdxQBrWYqMORCW4gnnvVjWkRtGlc3svrO8OUDG3vk4cm3oVyHImrrYeuWNsFJo2M9XN3X/vyxMwQ4Q7WSMRYDVBCSeJUWiI2leV6QzUCvsVKsqfAdvpRFFXpvAA/yVVoNgnR4gyyLhtvozKSOQUduqlVc0fWL1JDPueiBdYIw8k+3a9il5S6HKy8HiENKt2SrDs+o+Pg7feFGynYxd8QLicH0V378J+Mh9A4Ibla38faLZ9E+/O3b1VB0splpcJ6A0k4v5mQItuEfiPbjjLHkb64+RLrBx/S3ivp+Z0/PKDpnbsjCa6MZKUcVZkg9jvODFQJBDXjcMQxN10riA96Wc3NW3gX9pGVMcC3pcYQBVSxNlZLyxpYIiMFU0KEZup5GK0btcMruA/mP8KMwekKKmJ8X4s/Ohu92YSEhhZy6Eye74sqjFqOJSDD8sUNGru7HvfvO9LHFa8BGy2QJMaTbSl9nkg64vnYzgST+J7c5t0VcE7AHuRfoaEYcyX5LoI8c7A+4VShns9m7UxPHytvIWa9u2ck9BTHL/4zVt+GVKRDfV3VrTwiKPSp4zR/e1RGyXDLMOLgtkQrd8BMLE4SHvaQcol9iV9fjKf++JYYQ2NHzzl+EsWh8OgOmYwciLM2Wwxxt6JGnvyF21LnayK4r2jF2zGddl13OMW5rEXOAoX5a5bGJH9ifSE60gdJi2O3RhiVflgEkpYjZ+PBewtdvntpLSPlsrb7SMuzVy4Fta5PQWw7GmdV7rD+WVX4sJ0uhzMDCV8lXzH/Z6Mu2QTtYKqWMev23Uxm4eT1T90dforXtKPhj5n55FVnZt3tqF9p1E8jRzCu3Y3y6aeGhH/kJgqmxvkxsomBVkE1rAh1hK7dgUZczSQZTwpUFjY0qLyNWh/VAcVSazeGnAQe39O3l3BkE8cQDrXIJX01XVTkdejSNoP7ccUMnkEJGhmvFjSp3RHGTv5CQftqY4PkQVnXzcoFx/rddJVr8dDv9x9r5Zi9M/6JBs5t+uWW3KhvY2+GVFgb9cQuVqHxRPglqnJbE/HSuXwpjWFprw3DlDGvB90fznMxmx80tBc+OW73RNYUTLhCJ3wKLXJfK8OjF9zAxP0a/qendKA+ltXgZgmDB3lPsEDnk4NAJBAz4nqoiYe4Qx+BgeF5casnZL+GPwRGOGpubYwE+Brj2iDYIcQqc6BFwVzJ64GjQNGdXHOJMF+qZYLvcfIf6EKiwhyAOrFkad6VS7Ubm9lJlluwQ0V2UVg1PbKkUwShmH4/io++IIYeX73WDyWuktE54HiI9utBeBADgOvmwNydAcvxR5NSvc473T9sSZngZWS0adJImIwfCzr7LYhvJxPfvELmJIdaXqHt69nUYWLRynkcATk/l6qrwSiT2Zut8h1WzUhSu0LuKS6YjETcgrXtJkE5dKofSqG3KuKNoIPNWHG4pHxsA5v0xMXgNS2X7f9lcbg5qOSmHbYvXHv1bosG6/Ul+FP1yz6/zti0ujkqdtmDzrEH+MCVmPG14hyrG2jKVydQjAA6eyYBQYZ/21Mosbi9ULZkoWUz0u8vcInsN2W2xfLeqZa9abUwRbTnwqa/JkKLzVgtWUuiE1xIBL8To8D+42mNJt2cuIpYd3NrjtsAZGxKLtefLDzEdD4DkMA15tiNlN5ICckAkNPnKjp5keI2XJaY9GHaP7BvFeBZIKYo0AEl4Mr0w3k9TtwJ9rD1DZ4/Dc4mLVRwdGaH9p4W7kjFJf7d5vdXdlVniwV6wCmKBIQ/JelLvXxqQn/1TFgtjQ2Li0OboPOCphCBW0pifvdMPehdhUNclWsQxfw6qZWq+7DZ0teWUdg+3wVNmORHGCBVGj8WYFDFyFHnr8FS/MrhxpgkvyxJal6Elciv1p4EjQ9C273JJn6fYsaZJO6vbpr0SyGUkHT/ETGT3lzcXXsFMaJIqE1Ek8YrMaJdSCu+LQITKU/m3Nq1nKxPZI+OVb5GfZeyj0VeIVukDYcfD9ppf+NLu00OxQxsTx5vQs2vNsHmR6zxGwm5yfFnUul0EuJS16JtJx/glhW9DhIxerD8TArelQUJfg1WBX8ia6/JA+Sl55m2nWqzjV+VC4VJ+fYW502YU98AoR1QcBJJDw0crZAkyv3w+05VSKT8VdHHjUHU+PWDdc5OTNUKtomTEBORQrhTGroa7TYtqo/szk3OX68vW7OTFW0ycTD1tkNiNKUTEv0niJVeGRaFvunBL3/6F2shVHMgWgvZR45NM0zCqpc6V1KjRkZ5VjV32socnpzPwMsiVL9MUlAM9hDFj9cGHxIviudkJjEnIzWh2qc+urF6jJh90iUg+2xzP6+nTRKvIFnPNmvfL28sUTtROpL6sUKPOFxGSmXX1hpCoVu3rnP1vX6FwtsgXsV2oZEsJSSAWGqfrskyPa3UjJ5D3bWmkRH3NpGxPR8pgB3ZD1Znm21PasQhOMTwz4rzMyL28ddSY0ZuXIaZERC+e2/QJWO0Iy0e79gPIwZbAaZ9BUSmljotjDonXUDYiuHYUmZLcdPVg4kg4bFeL0mo0iZDhudydK+KoSS+LDVtvbMt5fAoJRRIFgxgDWL4HB+S5+0IXVNu3+z4ZNCGjG1Svi/Sig0m0k4IyEZWvkduWyV0Ki3vmoECpAXiA+9diYw3+nmvY3DimgRYfw3KgFC2YEfw60GYJokflUwB7JhsgWzjpLnEriTC6Ll1wiEXXoK4kOnSZD3Vs25doXzyC+QuDrKw9bWoMRoSMwz/Z4m8/7jQR8ATcRVfWpCFS7le+N4B18LIFKf+wyl8tAi6BsA0UuRL9cqlE2dhwBVLI7kFEdteCm/J1uTUb9+P2bcUHByq7D3mqjYzPfRZvdWDFhwHq+622BEgJISMChP9CoM+Xnxg1l67ct6SdtVuFrPpGX5fNZRJc2ZPG7pf0VJHROzHHDlUy4o4Tjzm//S+8GmKSLFUrUBH8pDc6bFdLwqso6UtxI1K3G2EdN8GR5NayHkQundBRFzH85dh4WW/PJWohtFWKpwH5GHtGdpSMqsO2d3FCgFWSJ+VDEmwwLg7fQmhsTDmUWNLqcG9auoTnB4B9McGXYFhORt3a9ixsb7B+J9uGWm7y9+qT5ZmPHntNXxn5lF0WMyvrm5L9cs22zayPuIvnwzdkklpsAW9sd9mmYMZZ9G42yfUkn4SbFb03wJxBRyORgqfR6REdHEiAWSFXdbCemaBQJvaz4eSiEUhtxwyNVIkS/OD3XzROlN3tZ69nUamtbU+HEMaGyk7qCD0B0kNHhWrNIBcI+YE76SoBkJDvviRyuv09ELtsKG2kDt/9qkcFyaa6CkPwBfC+rNUZLzrLlSGIyFF++5QFO56BWjmUxPWW25p2mZL1wFrZ28MJD8Dfk6wIjoCfVRyZDT5MGkBrlpK9+JkZZSxXYVFijEUQlUEqE9IPng4Ropwz5lF4LNlsglQRoPmMdJQ6YuqCbGYkvk8cn9Gi+2kEB4zEAmEy+OMlXhKUzcEnctvTtyTfmw7j7OafsTnXz8i/fkFXgve/GCZ4VropNqdL2hTxpgHo5y2jgSfdhgjNXdhpU/THwnYQDL6aIEmkeDRkMLF/1joyOXrNzIXA0mcP+hUVait22ZtqXlBkXfEWxNCswDg7uj0Y6N7QQtaR9Daq5AE8ikNhFx4nfGKJM6PpH3eLWnVipJ/pB+PQA2ljlndVHGQYVTv4E5+dw+jDLugkrkf3JjGR4hA/8bKhToSfYD2OI6KFTelM/VTvj3O6DTS5RWOQneaSvmkuYXyvxvX4nR9tTg8xRyoUn8bNYD4DCeELJDY0qbPLabuNV9xYvMQn9OvnkUJCoESKugjpbIxXNeIF0XMlaD8skpscFPLZWyeCDjYnJ1WqpSYd/xNthDWlpj12/93oZtFmCCDBs5bY4XMOhll0C48lh4NecEbWfe5Qqqg8G7yjqP1iO/qkVD53vL/xn75OS+JsUxY+esmLjZsX6+QiAdZ3XqHqqxAoTkg4MUqszmZUcuE5Un5KUxpT6kq6C6ypC/Bmz2tb4gv3n9XjdzcOhmNB7LKVjgXkVLf0XdhtB8ikv7jt6iiDjPraXL+IT7E0b2OLBIGo5H+8FrtghiZ/lBvLlBhH45TMNeRm97rPQBclGgKLSPwavu0d2t0dwhL+dWHx0X3+x2yhH2To+fqA2iPG2ynCo1++Sulgm79u9F2sarLR3jeVIj7zUD2ymdfX+srW0mhcQOemdkvI2ocCBAhII/l3iDX569kp8SBT+1a56EoPGtSwc0Tc7nIPeZSFUEf9xa2OSqgj0VDGlVMNXqYr5bVfYP9jU6KSGH2R1IpqF7Z+nb5ZO8wZmcTO+ZBOw/23cwL+kugAUhFQhHztX/1TyZB5c+NVg95rV4913cTB3kDQSRCH6gJScZdEEa7nSXeSdTWy4l+2C6Al6+72eqwmURnTsbcjlQDWIoKqFbvbPAdb6sizgPqu2dWPkDRIjgnNrc4AsFH+sLVOa4zYforNNTAwnr38cj5HLSVYNsipnbLOfgfSLyoE74uSr5eyMHfBKdqW0o+8cY2QDGLeFKjGsouCLMYT57Cx5TUwPn1j4i21SzGp4y6tzsRza65d/mOjGecMdGwDNjkxYJHnNXDqQ7XtZWy8mj6hr+chaePDH64ecvNAfi0hyRLJdHqjRBXIGgX4Kd4Z9y4FggKQOKalfvWosimuzUZbPOTVdapAYeR82zUkhk+EU2/GuOxfrn6rdU0xQ5UVo8FHBwp2V4yHxWmdexu9GIy+44VLXt4R7IreuGlmJNO+6uzSzW5UQsR1cGj7oHIZPEBR5QbJoEBbtSvo8eMOLjVq2COZcyYW6HAa7FP8YJQHBs6UzK0d5bdtpI2/LQ8zysAmjJv1JNIO4PiUUx2MWPFbHWM36GTElsflIltAPvKUD+emyMWlx/pDeMrBSyW9TGfaxphGrOCCJq6/bJMYb1HoSx3RtQBiPzbvt/VVk4Y+P8IBn4JLr/McWDus6fCgrJO2i4ahNMhHCicqnFJJrJ7M61JTHAIZsE5uDXlEx1czcWt1ulxSh83Ww2l35iRAaqf2vUBFMhR7pAjwmDgy8wfS5c4puugWzNRbWDqiKDqozTK+tRGmAsQbKNBB4IRZ1pxvaayqbqzpmA5srxNhhU1s5hdStoGu3Uwaj1wkAN1J3zGprXr4EwoOcFziYizSgDCRgUqXKtTsi5Ezl+HTU2XOAoGpqARnzQPfqiy0YHn2ZT2H/e20us6F4fTwd9yEwX7LsO8Visb1BDb7dPqjh6iz/plmSqU+VJiG6HLY41bifRsU1U8yj/ZVU4H2sRaHeSgAHpFf6MEC2TB8kGlSdp8gYyd0kj9zSM8lmPJa23weLF3HI9OKnwRJ82R/bqyf7sMYfoXo2vct/qNgNKh1NzeBh1pp2luQyTFHKCTCxZqrg+R6gFuTaHdPI9wU6K1zznPsQ/e7ooqZM39JOUzGSsolwrkhu68J69dBnLFze6i/aBSlhx82UR1V7yGs0yn6bv7x+WABNFTrp+J0kOkpp68w3VbFDWH/ZJqef6mNvpnMM1I8wgMS6ovAncu0hnrlWhy6tzygsAeaNvalOgpGtR5RsgeNUVHZtS0wGaX+fAmbaTui8ivamPfOhsYm/lRVwM25yFogXyzo0tS+FMusXE9j+CQEPhfx+B512VjlHdhu5H5vqTHD/g7ZvNO1F/h2E+p5amtdXK9ItjxhoHJrTFEYGgipQ6b0plblKQRhh8a2DjvKO6YwKRpRzsl69EsWZep1Jr+xcuUdPUwwmETZVvmo1LlKJfOy1d20tTN5h+YiFmh8uqeSqFj/Bgg+cyKxFoTHptMe7O2TfBsh8qM/6HimVQ6jTh3aJObPNkoFuaOp3Yro99MrQIFta38O9XznBFRtUcYGogT6lqdNIr70695PuIG+pnMegzmF1KPKr8jgaW+oVDH86WZbgO/zqVENWgj1foW9D/GV4o6vr7/MOv7f9PxhUf9Rn8XqAEzq3X79PAlC73CC9PrrViMF6TIS1dQJ59ORRzRjXyziCPAybMFSFS23X1iJ0WnYmC3lA9+17XUF17zpaWradnBUYAy8Zy+Jqd2YO2CReeT+wbxTKKfcGhVqdj4V7ocf6pWHnmEhWtMTCbcSaaeDKXKuGCBoep7juMt74UPln6tHmbqXkkFAPEl2ra6AYTihAEAZn80vYnLqBU8SUbj/jDJbknUQhiBh8AVHTmCWTR0/ajHY1DoJm6TXanFSL3lV7bwEmg+zHFhc7bF0DE+6vzbLD7QYM3Mzxxa9/zogQYPY1P4c9y7bnH3FpRemq3TwzLy3iRj260gfy+5mrf5CKr8nRbrW5wtSJzc6OkzbE66HZipmRk+IupbDqSvNFEh/7X3F9+3elht9gzKXAC6VQMTWjc/zPCkp+xz1H3HG8D/6bTQnCLiA/PmrHYD3rgHdmWmnlM9nHUeZH1lLmJgiKOx9HYk10Moh2ALv2yFdnejNhQkNgh23w3tQ7T+2Oqeo02QmD779n3VLMLHv1Wv0cHCNu2A9M7Z7ErtJ60kVCcTQe5fcZG/1aoszmZDpYeSr54+aBLlhCdRrmikT7cmDVjZzkqAwnLx/NM5y+5R+sLJB+IEO9wWPmoZ1h+jHv35oc/Cu+Osz/rQ7VvhfBCSEQX4sfvGtySSEF7EnQGYAysbgRest+V/FqT2pvY8i6yio6hcyHi+TuKfZzXDhOQvaO0VQJGUIUA6FE3O1ZKgSoKGj8gyvMzObs6lbwIoXaawEgavsaG/8uCUFvLwvoGZ7rUKTlKpRp95UaoT9s2lUpdwCNZ4icZgsck9Ov5uhky7V2/RJvyu2zknjYZ+l99liC7euj9BDq5BuPiMh8RT7F+1wksQJpdp3h81VsGQGaxaQX8FiaQ6XvOqGtonKex5Cz3eMYhBRy9W5JKJY5dvwUnftG7+TlKenbOpecCyJ+3ItPW3tQaOsuke7Ipe1aUaH3NfIueEe76QOChaeOeSWxjEJK+18H4U6OOxR8wmWcuFlgqfGIyEApl5smysEVOwsnztp3P9NYG+U0/S/no2OD2VCpJe/4lb+R4UUbxdmV8CF1SD9MxWHIxjS+Cui7Nty8589Zj+6ac7SxnRLr+b+WcVyOrQEjWMVFkA6Bp5oeQ4o69q7T5TYO+vIqoZ71jy6NLBfqAYCgFVlAM6pvHMZA/Bmq2qcj6542SAyqUG0QmWparOGZZYlxV3Y1hwQADdWMEBTnmZ4y7fH12PlrHm5c/G2c46qkDwMHIGog5DXwjzf760WnTETjA0jTXoTg5EDd5FFvp0lkJ99Rpib4ZtzVj4IFekugvvGjSUFzJKN3x0X9WUrZ8Q/qe0YS7EOCCAGrQqRFe0YePEbeWwKISASgiYNUO5UPWC6SFHYnYuWR1XEOgCmO0PtCT4qHwBFuRNXL2lFn7KK3xFjuy2TbJFE/xc3ie68FNkJ5reliaNsXMOrQlhPJNUX6Nb7H2Dmmcobdofeg2LSpSRwdbE2IYJtEScf31hZWEhqx3K0FpmQ1m/E+N7eaLPrggbZyNED8yJBxz8QRpdQzEAhrBlY2hONyYYoTm6GKYkB+TP4abRZoeOWYk0ImxQUBCnmeehbNg062ShH9X8pqBwqdM7msYVxkbcwqR45XlafFyrvMUqxAK86XK6HlBn22tsO1e2iCO+5U0nd6ykVud0OarC3CBPr7Ypr+1XC9+M9NS8zoUykllUiO/7Ohrk42CXpVTIabbAWWKVT2p7ioNHJiCra7sXMnQAtZqxiDbqlmnXouLj9AxnaNoZtRqv5cxYyfxPxT/iBR3wFvZXX6lf5Kctl5U4Ru7B7kdxTWGNA1i4Ylk25qugg1zglDzP0q5l+/y8iMBPAihzwBjZL0iv999NCYuC0wOMk1nqk5E4GPKoBZGUrskoy79k9N4poYPvgOYwVZ4g6UP/0fENCJ410PG0nKbs5Z0xDi4SRVYf3QiMVa9EcNKxgbuBK14EvcavsqyuLRJ4ycluT1yOrTgxiNmrnaMzRzOcetsNUbEfsh2IhJ505z1mMnehMBUZnrbXvrEMa/k37bUur+ZzQko6C+W4sfg4yJVqY1TWZUa6XMLumKf8nUQx2LcAyHr0x9g9e43lw5Cg2mi+EtNcef4S632er/MyJqHba0jJlQXD/ycMXGovYhYzLhYBkAGuF8tUuhD6vaHtIDXzoEheo5PoRXZZb8Zp77BGDfDebzvrs1G5TjOqfXOxKkos4KvASSHK1b4j2MjuIR/eIHU6o1OuzAn7wRwFUNGYv76rBUpbtnVbwEGVxfy1sRIQH9rrC8AuvsmU+Vig6uykkNua4CkRazPptY+03AJeiRGreFybbylyZvy8AU+UqtuNkfbs6wwgwEQNR9zCrbhGTc9FfnlMag7lpDfik4NmWWeNO7xdxfE0GnX81X3uPd1nM3hKOCvDcs6MoK1gpq4HzUU60cYNQ13nKrR2m2U1bHNZhHI4n3XZMNx9YgvtRsMINDXnf+ozK66Q7EtLZn/2u4plFNIiiXmFHwpCn/Q8BF4d2VlNzP3sNz217MGAytM3FHZ0gdY4yQZrnjHAsv0CmDns6Z1V7MluRGkSYXadEas5WmlIAcPjuoHfOAC5XOYg159SULcJ1fex9twmrMkPCS+Zy5Jh1s4yX8srW2ckgAaI6BG9ZJbB8LBoV7o2L+eMfXqawbx+NXxpZS1ccQwVuNOf3gaUcs4hvAQ+N8ELi0Ws/CppoHH76YIR65x5zxSSNHXiB9aiMBSwxlu8pLtaAi2V4D42V9jfsD4ubjgC+66gxd01HvOwtPbgiDP1VOBVlz+VlW3PNgvtLbAgBLFYtCy4C5hsyg4a3lS7MPLZ9zIdlMedYSrmtKpChRGbyIHyUEzvBzNxZoWfCjPTaWYYzdTlN9UMqR3Sy20sjKqyf41pY4bovaSDajtCCDkBYvop5Vyy3nJ1EyL0UEKT2eTnecpz8FAvSOSIhBV3aPjcKsLmdZFY8sSRsydETulOI1SZ6HBsq9xy15zDy83MQCQlry9dwS9eaAH4VvNMYh7T0VXf6RrkAI7Gci6HbjGe7JYQL0ieX1P5mM2ztgo82tEWFNZIKAG03wfXxQAOF5pQfmWx2KM8ehLkzdhmDedXvdYa971FIta8TnOpX1A8oAdqwRkrkNKys03GL4shhRGxVmCh9C9cHA7mlNl9fvlsqpmOljw55/0OaiWB9bIzx6kzj6pxvf/Pc4T/86wZWMgie6GWrov1Wrs2fXXlP2FdEzji6n0aHx/ysaYs+a0SDM0DHKAtWoEyYnBJPAtbDYAmzwEolZZlFqWtQxOLx/UhPGQImEt8an25CSNaxZp60lbGmNra67t1GpC/6RyvxBrW7yCsviG4dbfali3ve1D5LAfZjj7govjq1fSKtNuqAuFfXXLTG/736oydeQ2QCRBcQdizHxMRgTwW5DIxOKARQHhCWejlgy0dbs/wSBSEnuxIcU0VN8HZh6JIrA3UZHCFOIYbvVKYFWaaFZ+GR2ezMwUIIzuEfufdKEeVHUISseRF30N/omh7tz8wE6I3IqcqLGHAMN1B1Y4Dl9li5xZNuE0I2TF0GX3m3gmUSQY5csYeT0wkjhtvFWMCGoitv7xgYpx5a/eA+In7xymA4qD/XIVCnlW51v+s9ru8I5eAJsSBBjOudYJp4h4D4PoWyC0GFusUV6FUf+pa3Zf1g1mCqB3/q+zdqxbqNPJwZ5kr1V7u0+Z8NMRLcSJfUkuicKfiW+aUrG06o8kg0aNxBad62nkOKqw+GMbl96s8vKxtcQ2oSxap4jlh9Aj4LMJ7mwqk6/dZlaYyHSq3TZKNyW+UttnvM3UaR3Rh2woimv8XkIS8mgNVEMtWiyMJJ93TjvLpQfST+QTm5/5Bo2dU3FWJQkS18Bpf/FJuxknyfq3Jc/Mo2/EbCJvYieTcA7qJyXtXPqmny0m4W3Kxoo2jUAEdzY+R6WFqC47sLqke3DJU/vSFgW6XP7mK3gNcfDq6g+4dfO9l079Yg7Xti2fJLjVXB0JsqVrhXRbmBvqt4eOTUmdKTmRwWwrgKa5J91xsGPbm6s0VHZzEVeP6T8aT4UhAZ/hosfjCm4+XHMEWP/FlTnqQFV/O8zDqWK/ucvlUaw/bem50Dj8IoaxCfhiCIZy1wEQKbsGyARDTmC9icVhV2av65yFFipVvEZRxQKvOL83uZhE0tg6iLETE1GjPHTXSEgWusdgiHuTfING+gl3do7WByNC8ti+vf6Vs1x4Z2n/lNHdG5ewreXqk1vPdUVJIZ0NIOIyzvLSC/4hS97ATO8FOItGp7XFAYw61KtPz6kell8g/cDDMy1LYntQ/ilWzUh12//806LIMuDzqg9D7UI0s51nUF5Qg/JKAa+fjFas+LAn5/nD/pZpmfY/Yy23xNgAnXmwca9A3LsWwzmAEVbGM47U6zEGZ3y4qpJ+RXlrEm4E2Qx007m+RrkTQZ0rjuy6QGahKcuuYyvT2fXsJNPBv4vVkkuZJCDXJRYHbdp08FLuo7i6dnY7ypKRfifbkIGa73svr29R1CzxKGSW6caDvkgiQiP5ghC2ES25V8NF7RbflYaPeeMDF9mN3k/MfZFUpMpH8NW7DrOb/Q9hCO7mmK717SSyYth8N+vL6xfnzoo2bd3p/VSUCOYwFcRV4Mm4kOzGhIPq5F9n4mCqK9XBVNL0DtHGoMXLP2knTrkHxI9RJg1RO1MDA4w3aK5QwFTN6xh6i3yRUPeC5ACHdMRWIyF3JcOwMZxR9QTRUmcgN5kB0Z6rJCoPvrukHCG+M9ynhYkgriXjeLSvufXqrqqDPQaPAqqEMbIf+bRGlOjta4El6hrm+HoSZZ3uiXg8oCh72JxXnHIbvGCHULOagTfeji/CvpK4Q1RRCJRGiWD8Z/OkuvMhJ6Ywpuibc1+wAID4jrIbvYsFG2Hb3K7DIEtQFndr84npFpQcchu1Reh7V1aA7C8E6WM8IgzwIkkyyfX9DX6r5swq4AHvkKV1TOFpecffMoa5LEuBUqiXffuZnv6TEvkmBuViQxWjMnWV4PmC/jGX0i4yAuEExCErU3kf2IbKM51drxzT6Q2pdd2cSTuBLrgGqzHIMLgMjvT7ux2JlY9YHhAeDi7HsAfM4pXSpM7ZSzOUujDb8MLi7tf2NYxgzQkzbIr4b1tYAz+JEVMrUASdgwXJeJ7bCvIWHehSiXJPivCOd0Pf1a7z+sQESKQtmGC9XBJ9wZtFuzlPobH+fUNyQAipd0xbywFLzphdTVdy+DXdqnGSp2IDM5joGW4lQROejibsb0mJym/w9WT+oxzTJGeax+P0HAs5D+lhiNYoko30KmoFSikieO8iuTee8PvzAIG73I/V9C2n29PGPcli+OC0NsAuJukqgPutb3GYWKoRTBjJkkPjmpKCyFkK8wOvlXL8v1ZqYSFv2S+tQ76fDg94mNwJbgcrW+WC8jDB8J7AUKdPQaIayAnx9cTCo0T4c78MEaCgxrNLIpLkOfBrisXaFoE1QdzR5dc+36bLEiZ0RsxqD98FNAifJ7I0rGM6b0qNdC+7wJ5h4eZeH6n3EYhO+7pU3GbHaxz/d4Pkms+s9Bb1o0E6MSUuAhHX2UfJ0n/wLFjGDmqjouGY1dTp0Ye9Q/ZVjindOQTiooR6RAcCteHqpoh5f5AhRDC5GT7EItGwOx94q6HUjR4o6IRP3YgQk5v1mtgfZ5IHAH1lEQrxavXOeJGS+l1sNJbLcB95WVlYC+WMW403zyOeTQes97S2YAZEoVxUAnJPjrMtBEHVPXOPKmXkgv3GGCuvMcif29pgBTuO64JIGhQc6BogN4LBLW9DfuU5DxKzsiBGHpBDyNWuHAyO9kGuk0i81p7L97VY3LLRW2JE1Pg5rxay0NCFRBEAMUT9QtMSiPcPMUbM6prAWuLPm6r4T/f/92Uw8nO2b4ZDov5c4ldfU2h3bq9i8iW028/BZMCTu9eaRkBOyb1d9nh7yAn/blV8f3oRMAXumlrqZMgCaMYjpjTYUtfTHfNaw9bgCAttpGz+XCHb1P/4zZAKjhghL5pA+db0kRKo9LQvLjNEUUXH2ETwaHMgkvvJRaHfq/PbC5Seq1/LyiDezlbqkxFlLbKfP/79MMvicT5cuXkE4F8mtTRRU6Qg93wFPHTaWxp4sChLeArwxo+znJvykGYKDDYyjILzA54WRXyKnGdX32K/P7/gUdCZxDQ41BkDVTgzNQmRgLSRUHvL0tekhZhU/ISzO1wZctNByG7QUkL1X05wkgXGQg0nWYQfN4flICozMpKxmUSu2npY7gAAyruXzFc7qbkOxZwrV+zV/MoBAacjKp2vm4yNGEPkfJ/mMRWZbwacadU7Fs7lZuP6pdVzLXPsGwumWKKhWEEZEXDImeuCl/NyAb4NIKjdG+pR4y5rCDXMFPJod6rpP085Hlg5cmNZV9VsDmWrr0Xl2p58SWZR0VEQU01tMio3cLm1vBpHZadXewKJZW5neWfBMzELqXBJ7iTcccxqCZIFw9TCcCFeoUT/8lQhS1ue02dVDD48uE8SlQn05acFWxE758zCpeqlINc1hUDeuORz+Jxplrmil9KjFL32BWw6yH+mOpBHWAUE67/E4R5AHVwpq5vgT5ZYg0Ett+RiaF3yQxMMt8fmD2FY8A98Tdd9JPrbngpDB8kBDsojie8eS9j/lG5ueKanCj2EfKMgYPqZ1t+QRCA5TFxu+5Rz/SNOHG/0JyybM+8WCC+YqcAf6K2RSR8aWp1IuFlvIrxOkj4i3dETSEqEhx7hol86TB8NwR/bRSqOelh7Luh3+Sx1/IvMvEeFauf6hM1c6NC0qNIHxibhnroFjr+vOpFam6AWXkDzDzefa7KWZIQrex29pe/9ht6ZMRSSv8zIaKngn9K3KCAnlcKmr3gEC9/4PtlHD1ixOmGGj/ot7OglErLznWBkYJIC1kmDFgz02jWrKJRygDDdT5SWzfeTf59oIvf+++n7FTQH7zz7Rq2rVu8WrFjQpUpMdBMJVADPItzg7XEiMQxNWvmzqTQg9bdWNfMFzHQj2jw+vBG39Ms0lh81xrTv9GhsPpJO2jp/v7DA/N2Q4uk/jppY/4nU4jDVXtH1Iy7w8PR7Q0kPy38dEx7FcsE36H6mgUR3a4zcN2+QPUFuyq5oUqUNn2bLw3UAkrjjvGejFzLCDUtp8Zhxr0bqTup8b3hDw1nFLZ9YGo0VQOXN1tX0SDsRaYZQXHyoIEBE2tp8XDj6bUjwXjWOR6BWGV2fTpoJG5HHfBsYL7yserp9Dy4XPSpy4kji2YOT9aDPtTrZ2GOmQnnCHg9Br3rWt2AtHEvZ+prCymuSpYwtRklvYoTjIeoJTcKdipBHbjqsYGkN4IkTB5CMoAzSCOMBSigqZlguyTTz9qPPI/f/xzVerlB86z8PXqsF1t0qfvLjaZKDV8cGjOWkJJxH7SJt/sQvhztH0h6S6sI4zbfHd80CGl0lTYhOPP3QYdvNU3WAZ/8Ss6dyjYScmaUVakc3E1h6a8FwBlmiqDxOYBeX+GLQC628aQrrTQT+VHvqfOVNQ/VABV47AJjE8O3g+VCeRZ1qHa6u+N8Y1yPIFxljx2BgbivKKioWBiYc+nmeJ/UT7ccGC73+m308aS8db/UewVYZLI5eKOXScbniEexqEgdXVK5s1YfREOQfzE+B5Qbm8UL2rggYFjNJnnax81I4OU35apr6NGhoo7/FUZfDk9hDIjivZnmxfMg3RI3DxJLX4F+HKGQ3ZUFbpQNQMVaMQfREFXgP8lnVb4Ctv864+sZqqIrD8qM56Y4k4lZY3U5/okwPiB584ZAfoX0TilVRSGCdhmKhCZ3GrGkIc7doasAa6JTJLGocKkZ1kiJ3EJu60EMfM1tFkKnNy2jMky7x/hijHzgiNr8cHupPQWAycA3COwzSdutOh5V1/cXixWZoF03mLPDuuNX/6BxN47NoV6PIEYAp8WVmSAGGiQNV7ahhAErwXm2OR0m+TceguDt8IkRSAmbuONwUSVG3Sh9q0jlzbaJIBiP19uP0cOJWM+gzrtDdgKzaXL9r4B6kdMobe/pN7NQOQvpeesI+cCxHeumPeyvo33swdZcEvKO49NRZzUGQQD2OCXcDLYMIen5qejEkvp8cw9D4vue6vbxqPp3FwOVBxfxhqi1f1WEbr2OjPMynV0q5THyt8akZw9uK/X0AkuJTQzRPMaiv3Nqk/YmoIobR5wVTjFe5TuTqs8aVuSd7SNyB6w7K+TDy1NhVVyVsgnPnL/3P1uz70A9iwbvcxaRlHJ7McofAYu4cLFR01qyvH6s0CibBB1IpbRPGRgZ6G6Ts1zER7+M5oY1SC519ow/M+bS/RxBHG0sVsM1NPiRlbJJRf7ttPKnIpaX8PL/hNiadnC9QpTsFz61l1I87zlM9yhjZOmyAXjRDVqWyE56RJ7D+fvC8eIxCCXPH/6qs1jW+VtMOH0rQgtTQbTyc/XVqNZNBeAe64R7qaVjYqKH8VaZVEuBzWD+JDY9aoRjAlzpqrzJmE3sEXnBamCCvi5TzJKFyIgKo4gYfLC93ZeGbCiwX888/qTOtb+mQs81f8rEtmryjIBQhxfRS8oz2WYIwTzHj6yS6FjGCQ0qCVywT4Y1BFvgS6/CDLnNMQnRZX7hUBK2/WfDFw+rA8f+vWIcVjjmRuDDKtaTQvHAPmngyhXtZkIIZCJNDtUzLI7sYVm9fqXN+/qdYirVArtmWt5qmtaUqR0t6H+7Ez5l6bfMoCHiNo35J8Lg0bqutw38HRV206cU1G8/unMjKr+ZOoo6iXuZJ9BbBNmrMdqtC96hmJfbd9XHvw1j9trXezsvF060gp/1+cOUnq7W0vKro6t6SZTakR/Ejph+iApkGlmUKRb/RmVYrfwH0MHfVjrvkorlJ+KSIYkIr3qJoOyysEMAW5amaSqARk/mXzmdQdFiQ3OL3ROZgi59K2D+O+F4hBWHI8VHhFdpBXXjWrLeP64Qkku2OZtTMOJwnFa0BcbKjsVURRRD4cHuzEOu19zfn/KcWb5FMgRB3z51ZgEvb5ZwjvDUwk5NWxYaNoRrJ6GDu/vL/7S4OQUkeW47YDzH8ii79TpZeTvpmVtbD4TbCmvuOm9BEeAcvmXOSTrMnkVSX3rmMTGuMk8utC35rR7LQbzpRs9KVfLX9lV8hZirxGGOkRvJomvLqBSNjvy3+6QTCVKhvtnjYwPjhiCj1yqcXCj6p2vgirptXyPymtGOPKbhNvRBJ2ObKOT2tqQ7GQE5KpPMVE2I423DggXRexzLuhRLPMtB1qa0STRKqLMGvYqG3xkok/6k95I5j3GstVWrcTzE17lazClaKLN8sf8n/W/pYFzH8YE2O4ntTlLN3pjrBoexs1oTRJ3ItqaCqnajkoiBRSUykGjwRW9BZu6yOIXdfKfSZKdC11k5wjUKbpa6LqogtKJm/UDUftzZF38JN+j6fqXhN4Ghx1CH8USFN8/kVZV2xEpQrknko1BG8o2VvuO8pJM3Ti63b6xJixG4BCtEzNA1BM0qYEiMFCi3lEIGvIiK5aXEcgdURREGGHguFjRT2Bva/ER5JiSBQvco2CaEWeiMCqshEY2whmAsRIFZ5U6cYSWVFCrbp7Oq657zqN2bUCr2jVlu15OQ5oPlMdaSXfYiZNO7gBHtkGpcrAykqdXAxp+Yb6gPD70ROJEr9pdy2rnSbovoOEXEovNz4UTCJ842Pj37RTZebFf1hOKkBTMpctu+jnmSl19X1MHUb9vP7F9h9S4f0irOxYqZaq6+7YeOnngEmTKocsAVCewEF1XS+3YIyv5aPowouLx1L4QZi7LQhC9bO2vXivldMK3jCZ7gYFGBGwilxnnjO+w3sE2efLLUvnaqLg6dZguFgkwm5Sxg/jvPI9t+TaJj1x/O0ToNaNRHKn5HCFjRSvnQZiIyXUdbrQsjQABYGIYbGO7wDyFfm/oydDVZhG1uGqbqj/qiZzr4wr5OzEpmOg+nfKZg2/dKp0fmupw9nOUD5YnJvE6ssvJxilJ6x8edFcXb0q1PWU08zhjBYUTnE+VENTD0fpTRBsR0/T88/932NHnt+SgDOI0x3uvuSqvSBRqilWNZbt6LDFs2ORD4A/HVAS7FJu9o0gzguiRBzRTxdq3gPtMmmHTOfpukgiAk1OE9U4JHWQrRIVlqJOtOOIgaedaCqVPtIp2ZWOv25h8Aem4MglU03VwYPU8lxQed8xa1IFZQhPY2ez9NAfoabsjGg0B3mwEkIsEfXoZdgXWRigq7MvjLjVVf4g3+0adNuBjtzAe8cPIdDpRWlpCwZBBUajqEk8Z+Hk77c3EPDxfnMPJJVtdKuqRuJlo/hDPU/9p7iWm7gsf/7c1SgPV61BJVnUOHBSOTmM/MgG3hvhBl96YHwrbquce6PgV4/FfdaZ3IcQWeSSPRP4qiNYSfhmJsOb7bXVk9X9B6g7FQcL981z4cqzY0VG9/GlFf2NHxT3qX1O5FwETIuDj1Gqf+mJsbrBpCL22CulTXPHDbVcitX+1YwpeNZK/lxlpS0tV3Mhb3WTiEzVDdqe7YCxftV6XDgyftW4ddRiCxN5BlJEVFaE2FhinzgIRR7JPg+YgsLO0wBPNg4OBk08tTlrHgZ9VLE3/MkLn17dV3eEIOn647l5b9NaCJnR1H1iMZuKaybNPfjvxejCGXyevrhxaEq/rUxj80GNCEA1g/2gL8ppLF7oEIlJl/WmilbFGOADI52hlqHiSPNMw72CjxEi93hrQbuGk4ourtbumx9SkXcPP1ojD5ftsOQck6AahAM3Zu0jyRJm52nBDIgZq4PmmgzPy9e5pFD6zsuVEEl7nnJJBufx4yiHDY2TEQZBogoPhlEVM1KtCJAiDoj1QC6lVQckimdkOQENP0z9UzZKKu+iVdQgPkHfKY0TiDKeCZYOa0NqZUNqYCG2N60XJb/txyxnVHxq4vGGm9it/GJi+kRmYsJWyjMCvzaD2DbURqEz0XfmmH16zlXi2kMMz4e/SF0JoMCoc3bTiQ+TU/Khwqa6RM9gTOIwHLrEbPzVXiPQR/QpsusPeBOpYeefvOASzUSLUw6wlZC+TENCUGt+Es6gS2SuYZapa4eavIBDG0aw3WoKsie8iSgs31OfJWLmHR6AsCXgMxZiHLsz/QTy4zsEqE1HSmJHHodYXbcmFTO6392GXwsU7tgeRmJBs+M4JO+K1GBWPDHrKeVzDQvRJXIOE0mBrMufVnFCz2Ml1Ki3jilmQZd4oX77uu+EUSSbWMSU3F3JdzTqNLl/MZ5/VTK+0m7CA5j8BL2xhKhXFYcXw04Rfrd5DlLAwgLzsll3wcknYwwTbfudU3DPg/lYxBJKiSI/DwgbHHIvIwVpKWKq7WqRmPkh30puxvKceyd/QDb9OMv1SrCO6L9omu+tXQi0euug/Y1U1r6ebDz4hC5F0b2vz2y8Z4+JQO41SXaURzpkirtY+x/Nc3ApSX6fg/dGf4vh5BPRl+v1py7ftTnxY6t2qky7l4JTJ9CpMMohS6iisbYieDvqTIpnN4xaQOMS6OXsdSOEtrpfMR/kz0pOiDBI6Gh8UlUCUzALqhVFA/winKCeCRSLw9ENYJ1fyPpUzsnEV39iDBii1UFBg6tVsgWFmoLv29gRy/Dnjq8mQn2yrXI3Fx80DlMJy1XPIjGlvizzUI09TNO5OcZrUKNdrVaejq3UHdP3QxahjwEZ3/A15F2DZ6mWxnNnKJG1MH3kjvRHl0vPjy8onfnWqldmAIVrRa2rhZR/loyr0N0Zsb5MJAZ0vSm+ieEegqRKokuBvQtYG7iXmbQLnu9lvRntZRoCEhxSa20lKRhdLgqdbOs+3cdSxxCAFXXppOYy/eApWpXNYOMToHFIy4VAae6Xen6dDpnLj5YaUrWQDa3XCRxtrJzrYuq25WCz/YZCIpgI/c9TVSWQLzj7PHgdaOyfehE7sUMXZMfZAUAcqUCc4kRKmJ5sXm8VxE/Lx+Og7bfHl8PSTuQ84TYpMy/uuNTELmYgbOBFg7ZaEAJuovFUBQAB2RzDwL0tj61RKGaqhVZqrDdnRY8gDGO6JoKoTQaSjjg963FEdO8LBzFRWZfSGJzGljbqn3S7wBsR5/OigLuGKAkwB8+WX7Tyu1/LiPnOedXOJSSx4b/W0eWtjA0tHhF8HV3YU09CGxyrYdDW+ybx6RTVPruxeOvtHtTPaFHmA/zhTC1bocL+94niwTUaQl1LcD+X2xr1GA0HH8Ei4e6hOeFHu8dqjwjHHLGlihLP10xiF5LDbTYFCHKznC9djpHEhCeZe9nGQfij/2ddT0xuhOn4pGbGfEc//YqqCyLidzgCp79cYKWOViHTwBnTruR8OyN1RiZ3n1OQCnqa4aN4zDNiRL/PsCWH9TckAV8msbtygnC5L7JJhSP4i2ZQIDzPiOYFPIDtvKvnoVk9C68ytF/S0G8v9KT6e3EF3v/YGK37GxovGXdkM0kVMKdM0iAQpBrjZc8AiWbYSwFM9C3ep6CBxtWij4wX0aaiB45LWHFyd19QxVetMQYONplTb6EBbp5V/je55JSQCtjdhFG5Q3oht6s+GGqCRly0iiEcMUEmJmTmtnHfFF5Kw/wohavagTAbA/gStZjsJc4ubGoS4JuInCUAmNuZxYkCa4tCoTVsFIQWmmzcZa17XZSOUjTETXGWZd0FVbDk0gRvozYsdaW7XfyzgzSFeqN84V2Bs2lmeTT7CwmdEshJGgQdANN+tE806yNc5HmHRmvbI19SilVDXs55Drgnxcr+kRCuFAMMgx7BqDWYmQQiUeI+KjQ9i8VfC7rQJV1tNYpXsrT6DzQ5O/k7J4QDivO0+Tr+0yKEh+thn0nQli+JGJGXKPOrCPbeveH2YGc0lOd2qOQf7WYZxrEsrFThUyZiT13O1NtV5pmzqtm3l/QsYJ94yPzRqrkWM7yUvD+kohFcJqv36MgV8WgQ55Tn6uc2l9FFm7CpCTBFgJvH5gX3j0OdsIsMEMInBKfVSq2UNloaCDl2CNORL3E9cvNon7oi95wt8kjHxGV2RTMs98KxZmXtOvS8EKkOZYrUQZjw0bScs6SeRqx+/YAVOJBN5+l/iUBRDFgyrk0jR5hsJAR38IPXOiWb1OeuiplWOZlcq15V1rk9XC6vInEwKay2PU+YuKnXvyGnJ2hd+qH02A1MMyn7owHgbFEuN9vCIgkl4tqOF8DQTKQI82IlF3NjCBiwz2P2pGi6n7B0WlygOukvXpkSsb5949kTrVLvW4TOruViZ5Y23qBRS6SdiyzeWfN3BAxDP3p0TmPcNFKf2WcIrXxTQHUGhILtGa9Ek01D8pp7hjV4e7/XQoysXp5RzhHrx45zgCavl7N+KsCtHGnK2Qgq/iX5h/kS1EoSqZu6A4YAnDFzEILku2E54m1Xh9g2KGLNt9QgtKK6HxNiavuRPimTsaXDf3El83d66xfgqAHRlJDajIPR12s0DAS/Yz9fXmzp64Md8pqKGbvzfnJQrbPz6H1NBZgf6gwpH6VYnTXITdX6GyjOYvY7LC7GrtfqzmPo5LdgabN9/iDvPXDnmsRT8OvhF1C4DYTukQbCqKLHEbnfeN4F7IFdJMWTt6GvFtMd0Jj+/Qbn/WOeA/0AocKPLwrpzhGHPVS6zd+tBhpyusT6dr64wMJci1jXKMStElXhGmhiIA4fy6I9q8TM0tc1BtS6CMcx9bqVrO5X4N+IaGyoBxASRf3Lbyw1cxT/2w0Kta3o3OKvkxzuO5wauiGb7QXMYxwtQ5jWdnhVezwKuRL4Ot34qt6kuGrRQkzZ54Tec98Mb47o6bAqVLNqsQ03wHaDgZq3wnoAGIMMBAFj/HKU3qnxsuNnKWcXIMXwmcmpbBlSAbYJhiOwFhfgwoSfEZiaOhmhNq/2kmFld7ZM8A9vlKSQtaoNsPbiwNivZElHVKa7Vvj7WrveoMTSnovS58yox2zTeuGBtegxDxJPHQmAzqDstTHW+4kKmtICdrsAztVvMZU2xoq2tfUbzL2mCxli5kjdnQ5fv8lSlVOau/ufeki6rADQ+X3Nkv8j8Ta1mitA6R0SAbbISUwPDY7CCD7MWLQRI8jlTJ0QbjrZJT5kE95d1qj/9j2Ur0OhvvkCwbANzh4c8LkbW01F8/NoL+j6qwFAI0wEnJ+nBs2MES66ElG2up7DLz9bMc7qn6E/2TEKgtzmJ4ljGveLSfWZgXwZTI76UlCfyuf94tcvNnhn+OgKpAQc7NpkgoYuZsFY2HIt1PzelevA07zimMBKuDRH4ia8+7V6uonowmVWA9+sZFUuNpihK8xk1L47HLb5IpvX0oFLApLctgzzwnmh8dsFwoSEJKhHauOMsG36xeUm4tNEZxiHioQJqNDt5TverPycdBcgD+QrejbY958XDeeE+MQeVcHLbWKtKemwBnhTCMuvVwv6MxGRbtnnhhoSZrACjcZKqmWSKJzwv+GlfqNrjBWnZC/L633kK6b1i6eih6AbSk6qSsmq/8vm4FCDGUBOGlKERL+NdOSBcA7bwBf7XiYK/y2L+/N0iKZftz+whtBOFnBFcsrB8ToyhaTZzn+P4jaHTQsZzCVKS1LHmpFcdsIEiNyZQSIqMn3AxvfvLdqZdjsdtHOCwPgWgf48KvPSnuawGOGZjYzg1FhCh2W9XcpH9x/aQekQcy4FoyDeu+vEbLrycahaU1iD1sUj/zOwCHBgNvS6/T5B7MlPfV5NknRtinj+LUWMuyWm524OyJBRILOeP3behhXt0lGP1O8uA8aoDg10YSTCr8p0E1cpPdXsA3Aes7k/jH3HK8xuoXNriCSqlfhOmCZrRP2xwmX9SrFw5BbRC55VcvIn/ICZtWJaZRzJWUOQ6J3mXVOTtjqFnCzhUCtSS5YbZJD1YUiAwLj+Kdu3bwUYlRVF9jaJvVjDCmMQ9fAc69sP7V1kZISPhpOnCz47hh07T6Rpu0yZ0peXonY0DLMqmXonAp9G9m55HVF4hidQDXQHDpqtqqEcerusKw3fyZWMy5mmmKF02PAIHIxlVg+BI0qbYKDFdp/1cQBFkNazsQUVsEMoJYLyLh5jB+NLL2GudykGpOIk1eSJApr5Br4ZFJ1aHlwO3AQRU1kN7qLmq3c4oJ9XvWWQ0XvSRY9j9MvwIBGbON+iMIAt4MgKWgJy0bDATiLrqabUyhWHyJkAXdwPAsnm6rt/8kQsIko/UZJlglnQW4mVk5GqUzOGyOIpngWtfK/x1/xfvTr7RUttJYrnKVfEHjyqK/Qv54uv5eS4N5dCyI8aDDlRTR+qDSc2Z0xZJoei8vhliqq8vTitU3ld9rhvd8YiCMMrs2+1c+Z5zHHUP2S3Hv9bVurHj5u+MZMy2oUpE6DWUDadMTEB4iFC7/WwWRGHJFutVDxCQmweaQ6c9O/QchOCpPYJNSWkQ/oCQ+yH6RWcQHYaLykU9SFkZCWItfjLPn2J38hnHM1w3iPm/tENJk4WyXpIGjF5IqVaDtiCdapr1nSRWVPedUZXLaubjQlnzqzLCVSZ6FCH7kwBL6hHYwa3SQRhy/kO7tHi3TY4ZtSddjzeGD8bf3i/dtAzYvap54rnq5HQj5cuduuqtlL7eSmNyNAIvMl+C6bt33GE8cuR62s5Dg7ib4U61BzWZzHJDxB3WGnkYKPl7RtBW358VNrowOuKs0nDPTFiKMwAqX9ErdPGpwCptm29BOiuIWdeZC3sZnGZJPCrE0H33e5zr7hMyRhOM4Bprh0WNCB2aon9f3yEHEcY82E4uaolHs+79+bliC0MJvjlZXsVa38YW1MWCwXeomW4rnGFqgQwL7iPwCGfzUpUH9jk9RZ5jN2pexDK6j1kDovDLxJUMuMzOH6/RwCbD2F9aAaY+h9ChOVbRZKcWbnXWeuIODeISvfbBPxXdT8TC3CvR6gxXWSwRR2qenXF3a5Lem3J7Rmt9yGWdiDgxSwlbY97xUdodSnnor8KiNWgTRAyvfqnOegOZ8DYS/0Yvy5LQh4ppScqcr+wTMr5C7NAhQ+PKNFvKGSIzLeowd5hl+iAkICtiwVf7kwU70Ijn3/WqzNA6Tl1LDXr0HDx4k67lZiBpUMYErmE9Uy0Stjd1KTX11DNhCuIuwjkS729+o+0ONnfax8WAJ9At5FrOF7P8ZzG3oj81iO/N8us3HTeOu56fRg5w1pAk2UOkbq/QrrmYjNZ5Y3IGpo6mz8yRli0Bb43omOUPq66Dy8xscGGfwGR0IX0wS/XOiIWq6rpxneeYmwsMmTld8yPdclVAsEwvkMu+2s+5Tt3rjTVbLIJ2fxBQDs9kEh90BNW5a5ot3HBhRkE/O0VzTPTFIWR22jTUdaV64s594OlDpWqle9Rsh9HLoncfUwhtBvLE53LksuTP3CLS0zHeh+jwpPPh51ewrJZxhu+W4BOq8WDhVgiJlGY1nRhsBCgHgIgCWxbidJo3QP2/j+WqSbMD56mZM9Nl0BPItNtuqwNguRYMzg32EnwxFAGF59nUBk5VIOFir78rpb4kG5w89n6rh4K/MazxZKe0jVDWsP8Q3aRSZK2FB3937czVNMtYJJ2QxZx2KT6c9egVAiypz3knMl4BnU8eezSPCzxTF9lJujsB/UCVKTM3TWR9zv6rbo4MgBSKjCQ3suNaZqKC5ajgpdpMGhBZ2T/ZHChKUALvB1VnbWbD4Y7asIUcEo3HxMQsv13sOXwqdsOpI+sZm6YZUxPBm1sgtzyXEFLwcjnyKNJvwmGKu6Z29bbXv+z1sA7NGQ4fRJ8qjpGe6SKJ82ZmzUwx+BsSH1/7x9iofLcJxtM1OL/QqzejUv/Xd2AD4zNpJbmoXW2sKZllMB36SGL4q4Y4jsJ+SpWilS7K4AZqN/gW6DOmKfMZ3NotUG8+zstoiI5vRfmXQjJl3p5aFsMFA8gOq8f+DradVCcp3kgpRyTedfTBWkpaMKChSQpmNyb/D0q+jxDWxDHE68Gxf4CXHc5+pdSst1vtbL4VLibGe7wZ02Vmn8hZ1YgI/f9sIh40YaHGurtwEI40V3HlhBePqRuNExbel1Oo8et5AhWTOD65IALXdY6KmyU0PLxRnx+KhoeDD/nGLMhfbAqzN4S8I7/TnNavRCWPdSAigC6VJj0Fhkg6FfnuFk7QAIW3zwqcOKY3XTko39jzCekCczWgF+els6/60lDJCZbIkOxAK4Hsmps3zMGZUVzIJhhe0aW8oNEJ9XQKwitWNCMzHRsR5WD2SxRpVExdmfza3v9Cuw3WPHkBMqslbNnT0h6pEf0bXykAx9M0dfjYtsacvRMwWPyzv93ejBi/QjeBrq1KDZGZSF6HOKjOoCDVO96KLY5+Lel2s6/pqtD54cYnw0p3mtYdMf7nIAUI4z3RaHgRhId46v0sZ1tUD+Lhgf8yXVF5GVDPTNsqWUMkNk4bRlAWGWCgNZe6z3Tp8TMTETHoNHEPV+aVTAYYig1BfGbi3k472JfQnxlHqNvfuhbL2whiGsoxTr29vomsFSy0Dho0a+87aH/lr0XyWUQ3qT43FHkgTUZbW6clyClGPOJgtvUQTtKGYLOhTifc96k7hDORAMe28r15hkoQ/iosrl8jFsF8LBBPnai3sjY+y1ru+j6OBhEVfCsMK+pIbpAHCp4BZANmc5uYaG1CvcQ7LKLny5Y5eh4jetKtHKdxWSX3SCqVLbGuzLepqaM+onCVCR4ZHTxWtL6ednVYGB2TOIoLYNgU9wlVfWKqvGTwe69akXnAtu3SpbuOARPmLV9GUhm13kyj6mrjCtftMpkxvp7Dg7pl11nbojvYutgm85D4bsiaeV77eBrYJvqRXQ2+v5pyWJo0y+kpLa0/mVYQKltV6+987uv8OcpCwTJNFMQGqiE+cIzSTcTLgYADkxuESBr7vrycNQmxEmrs1Mjua9M0qyo/D/TqRJl88n8N98UoiSDYLRv+haSE14uSuckoTZZ9XkY21daxjweMulY/scu7oLOKcE+n/dYRmbdHN6AldW3l9JSxnlJpjEqqYZYiQ4/xSFwvj+uR+ym8/dAv4X9TLHzuNh7ZNBAg6GDe9TsKJsdh7XNd+F108lrHAsyJOds8J2nZGasnGnogYFU0ve+zu9K6AahvWzInm5vcmsF4UmtCEZRbnvtVEbkDi323yj7dzqIt5v6wcskTCcxYmquF4psc5cUFJ0Lq16ygQaKY2SSaesDkpIps9ocAGGl21FkQhyspq5qMPYiCyrvW+xnynKrWIyk1zMfgn+qRrAgAVt0fiMGvPAeusWskBARuckq108gGyt8lmi/wN6wSNfsHX4bTqZdQnYRYfSX4eWLKBYEciSRgnBpos8zWUfy4OIHee3e+6UtomSkOXeDtII24HnkpgfPXOlpPHw8pmTeR1wSckiMOEjmzqrLNtn/nKoTXQrpmOP1XYvYiZSvLFq20u5d+/3lajVNrSiPxmtqipRJS/PLtjlgDWBmS/zraJXCXPDUv8cp7lbNnmzfvht2ZEEb0db3nmXDGEbnvma+DUH8csCKW5B/zmPbdZVlbaS0Qvv3AIf0qyOcd1FHI42g23ouM3gAo5tN/2h1xYsCszF95kPv4XrGECgQJfOcQsi6v5f4iY77EDkPGg3metMKQ5PkCq6IC5ojGSf6tqFRo8CBE5gzZPvOj8RDjndR2YW9JHYnKB6JOpjFCKx4TEHVSDYe2m8Hc77OCek8VLoKjrlgR695octdF8hDNS5vce+RpzA7SHSvxDv1SQ/A154EEgAN6hzdTw2tMBpxzjDPJtCIFkhD5nqdVDnpltOwCsuYuujbh/ifN5kjbWTXR5Xv6FwwLAq1WxSrh1Ov1afYixkrG/GKHleUo0XTmJrZR2/nfJPEgvlUfut+JESkJmQTAsDryszEx9QUYZegVoUC+G+a60SF9FRW8lKRfNos59M/XRPw2vLtbZW+q6EELKkA3uIB3SRjhoyPswgWTYBFejRo1sKgRzssye9zwBRZ4pmFAtuI4AOWQXziv+PGY9apYf/UPTatFyo0Q/LlRLYS+oqL71lWb5RsYd8Q5hyaFJd/IrKPnimhsVjb7dF/7f0SqdJovh+u0pKVgKMJQxfGQeJDFqnvWZ8/yGlOtI5pxMXAV/vqfhWJT1ajSx7NKXnq89otY7nBVf7gWmGkEtCcJOPQ52TP+fqdfVZJM8uWav6fxD/EKFUVC3Fs2/Mtc5wvaibRqfc/D6NXLfoYt3KSyL26K5/oaLOP/N6ddvNbsicEHxPjYNHvPkaKJXS/uiR4QxLQ3RKhN0cDVjT8VFG6kF5U+sw6uR5EhR8tblv5F3ON1FsbFs0PjqhRSvh7z09UZKbu/XtH/i9WWp60Dn2IFiAPgI8VrjrhVnZ5tIyceHymBhAuKN9wuBob2v0ffpdJmaEteROqaEJ+uuoUFNuvC6KtRnTF9w/MMxsO8d0kFuWWcXEJiM/WPRGbz8E/hsXTNdaSZWKm98+Lj6U9qcOYjhkBckKB7axKhTARYjhftzvmeq6azgfGYhb79iTDFAc8Ntd2nwBMw59okH7Gyt/zNxoAB4Scb6V8wtoRT8nregdg5U53lQhYQuHLWIormyJu9u7b0meAJY8hNv5hRlelTJA/ldXtczzDGJaMEzmdGza4RQyxMi7bCnhvj7lH6jJJWiti7qPxTc8xnnGdKf1deT4Ej/n4Bg//AmLrC4Qe1tpN1/K81k3EKf0B8Vskg5gd1Ok5MOkPjwtGPmglzXwQw3GtIFb6rUcfYeMUPUelVbs0rttDSnMx+Ql6hA4EXZJNqHi3oZdos0vSLvXSzm9abTqD0+alKVW0qW5D7NfHhwCXI1hlYlsdyb9iDNGqqlpXerFw8ZTdgx5hIo/zXLbxASeonkZYJvKwBU279Uhfmdi8E/kbDwMjfQO1yTQzSS3bfugiFqmsnXKI3p5/fw+eQhx26XVNFEpvRcAHE7fxD1QP6EX9MfyNnfMXtcLG+YVKxSlY+Q0pt+tLvtUMv5drNiCLk1ty1x7Ub5uqKzxpu2dUiNe1Jz9K/39m3UmoOKLFmbmbZw6okQ/OQfZgHIhB6Rw0t4D+in125A/QByeqUDThdFlX9l/GHpSECmRDZuRO1fdXk7cRyjGOsOppVBmKGk6dhQ8RU4pI5rbZ3RHGZ/Kd21lxSjcA26ZrGp8jMaH4uBnINtPN2A7rqEZ0Ev5Wfzv2zDUN7L8Bejsxfu0mKavJROsH+urQJl4Zl15XZqxEGXG6T0pX36+tkoyDFGqLeprzmIUBGWFm/v7BuREAK2Nf/ZQofVfTzXuKav56ku1IwY2/edq77Gpy4q53934NCLCazJNvXsXNMAvmkRQhOO7sJAbefhkEOz/bRCbfjhEZ01LmC4sHACd6uF/hKop7aFO2x8/E9rVwojdyfNEoa0XYGR9JJ/kaner+e65wrongUw8r8ulrhfVXsmvMPXrEKXZHKKvFve1SlFfdNg68pDfrtjy7EKC7pyZNKNE5Q4rTjNoD0S2yutVG0ELL+g5UJYFGN44IFI848Oa3cr0UsbJxtF9I5x5/v6lh87qcCPlHiBLSuxPTTeIQewB67oi/0zHyv6Rt+ay1ofTKzuKb1FsvNvpyUCs8Eu23Yy35pVJkkrmEDYBSsNdJywHK7j9rKF4buEld8/BfsdQdKtP54o28o+A1fUgK2IDOm/EsfRZyAxyZ4yVcuaNmpGl9JX1+ZANykinK4guhM06jK8hWK4eTpUrJPQQb8QG2FLv54bYtHrgLDDJu74Ym5wAQlQwgpzrb4juruaAUxiAcpf0hZex26v5p2qRyWEDAl3Wos+LyRxRiQqGkJSLD+YOlAWLFBoduj7q+E+5n1BULa5ai88RWVQMPqgNFsAJieYfdds019g6BsOpg8GkU6VCXC2Tf5b6RpWDjdsmENHOeQFkXOioA8wgChpLBchBZMoSy8tdyDKGuHrT0JYQtTpDbs3BJhkNEV6UfJ8Owx81dA8OucB+xToZr/ts4P/t/cVp5HCgm+rDtgpNPud4AvOCv9J0Y/tm0VJ5LWe34lP25BeOMdrXO6XGb+WyqT+V2lRY/61iHGZuoUU2j+wLCcXvNT8tG7bNT/ZFMu2xdtAjPY9xa5QzE9DE9IlpEwuW12BdYD83DztUCmTPyq9cO89C8BisBni0MJWLeF4TwlWKiksh0Vqt4pFQ3ByHM/Av7xH63FiEhZnsMKIaCTVVo0UcpzjzIOv/IHCdS6TA/C6qQzMAMG6baHRmZ9LKYG+FCRCa4i21MJN+rh1MhvGflRrFR3xrgaObrR/C9GoFTTF+N7+9fNUpSLHxyLYBKTPTiEjBXmo/oUl6H+ayACAL/V2Q3tTAw39sXlGyRBrWLUbxj/eax+957+M6U2z/b29mYvHeNUbBF18lFLFUVrAfpDYiBMzDPT7zLCYm1qCwGikWfZtwXBsaHjRGhIKuYkBTLl34GRwY4lk2fPBoZXEUn4jJk47VQVAgC22VjaujJJn341gwSWnvpoqs5QVeF8rYuAHwPJ+8ie1PhxsPWm6ZCOvWM4SZflKL3NnKV1/bdj+2lnZX7ZA7oa82DItuw4FI/kohIQhTOR4rCDovY7KgXjJ89SL+wOLll1HyOSLyjhEBQ8WPeozp765SykipeflCTgjqGt8vLcwwVyxzugtqaWszM9aeHIFSK1oNsp5cdcWFMh2Hz7khsBroPmFJq0q17Bg7xDN3PtxxzRbXrhvh+kVf069Hp5Bc+OQNFdLDqEVVqAju0D+rpYC6Y+dwpuxvvgXp1o/JjKHBbHi6mJAVjYrsf5raonk5hNlSJe0GG7/N8zjPDL5W8U0v2dZT0kwV5/2HftkRTs7ogIRtpzG2B6AEqxGJVIloDvuvzT+MlNkCk8iGHmQCaNvC5PYQYMPCOKs9pC9ff3XhADHdhplc480Xrd4ojUyECtkuBVXqpmMZgkkHzZJcxRY0y/76RJRY00pRIWLOnGZH6hWBs9Dx452ZsYa+w9dEhVu/QwhV1/V9ffM/kIwvp3s9Y9kPf02/BbRF/7e328UsZ6+7wNZdCiXZhR8rzKGwS/4806GXDQuCCMLRe+IAKUJDFB4Aj6VEIP34PVb68FULX4pDJj7ozF9kgitNKQVmjiW4dkVa25OyaUJ7M+h97duBezyBsbCZy1syR+wffOnSTkBIfaT/7KQbuT6zZfuNlWzFOnCb7rUkfuQP0xGAG5sQHHm2hPxvACc6+bU1/PkS/m55JmPcoe3AmgEEIWolA4ZdR1Qp4lrJnmhfKVe+wX8oiWoMkqtsOl1DjN7rD3VysMAx8BG/0tBqbqdriZwFQZshmllhaMDygq4LIf3QZh2tZyNL8+qAflDGziNFnq086LCijUHKRTfJ+AKgGbB5jygi1ou+bpfuXh+v03ZAH3qrcxnvh5NAs3ReAG59osItddXvLTDkxHMqaFcMBSA2DkRuyOctXwsVsHETsydqhhESzap4lqIGamL2ObRFWoBDGEjxM6CVSuCcU6E2E3n3pJnfBcu4kuaf9TN4/0JcXbuOxmHXYtZutdUSi608r5lacovApCtArHilkHIbVPZ8ETe+Ti3wlVSIDCNSCCOreOy5QV/eO80B+A4MehQLT2ECO9+LhjQSb4h88EHFT2rm9cneLOvUM+EjA+isepslQ+EjTiliiEne9b+2j2T/1IXKsuA2eb/+Arpn/h9zl+xfpi5C56WOgmrVOH8Uq7g2+Pbu8HqRV5jXmnDVBaMtzEfbgb1FCcNJX54WcWUMAipfvlqDh8mDt0lTX0jBSqIhmd+STdpjVXoIqku8CkE+hHSNVgvakunRie8re3X35X6Dnvc3nbL5r9ZXCxWiTNUPHd9gC3KNnzfDXE8coWRlkZVwqUqpgp5xWAV+3fdBoB1bk42nXTo+qF4jhNSP4WQ/nHslTYUjRH1LbtycwtXIYoHrTDNdGMAAsQ0VZtv/e7jdAXrELHsXl9tJgnU9eS0l5Spn8EguSo3NoM1cLAd3/ZG6jLBBQLNZsoGCg+7RXzK5sLxvDkbnt7/f3LorgVyeecBLnhv8TuoMys7HUt1K2zg0zu8UP9u7eLJjE2CrYxT8sl+m6DlANrOA5lde3l3vt4eknQEekpVgPdfnqjxcifUetCzyKXJSYtVztcGadXmdY6Y3eBZMONwJ/cyfjEahu6ZeC8kbsN69ZVdj/l7VS12KU9KegXaOxHmVOMKaFBv2o9IrznGI92jSOcHwK9MyVxyzHcdKFxpzoOPAyMpOXgBHiUF8Iv7pK5BH2fwKXlgB+zcc/iYXQpDsNp5IoyCGZZT7ZDEQp4I/tpEP9bUypAuzjzOboakvcuMjjmOBb2zRZm5NAfplpFnX0wInXdnyPrX/YCIZwOMab7lMIvTz0MNCfoFFcs7zqLI5eLHgqeUaHrxX4At6kDpQaXMdjwhQTvISKsT5eaeeQsvXYlS+NuJpeH/796JqCZy/x3/pJE0QoF7iwp57GRbi+KrbW0cmmRXx3xhTzX9xiSeqTlogYFnEgnxpOrznq9QSh4xTqDCSQ4arXFE38CZjbZm095xbkzzIjAQfa+/ZDaE3i+7hw83SHTTgFjz/MU2kYUxN0vNiL8s0E23jK+neAP0P/MFlTfgW/FkYqGpDrHyYAUDre7d6B6hTIIgGyBZLnbFIVCTcxHA44I/Y1ivpcoiJ6jA692jZWh0XOqEUzErC4QdtmePTt3MqXZJhSve9DvDi0L3fyH2WQN0prj0wrLFJZYaClqfXYLFzLLZKaryboo5YueIUPZSOsV5m5vFDhIdkpAoe1opP/knXFEXhVyDSlIlP0tQ3H/7h9S0XBFe5m6w1b8Zf52GpJBu0ql4KCUK4RE+F0Z8nL8+3EQJNcuGHEoScK+RWu3siEVjTrH2iea9IIFWQhdu4IcSnQhMnDBqN52eT5ycupxd1I5mnVb6d4yy0rtyh6ZgxWSuzkaoGLNP0q2gZUj0bDG4GaMJ9VqzbIuXdUzqdxmCrnuG5UegHDiZfIDJWQNJgG5Nd95lQqdA2oUa8TznzEVOgdxN8SzicEk0L3bH7HSknJzmZ9VSU1aXEy/glGjNlzgr/6mgakS6RgMjgRVpY14OQqbThQmOahlN6cC9IX4dHdJWFtTspF2pV2hlf4RwZ4IvLH7vaiu+fJbCOuDWyYDJit0/oq5ccjpNuiCOT6szXPl5Ye/EXNpecQS7HfT1qa4gBhzvGNnHgYbI7Ictl69s0C7D+nRaNhXC65Rclm3WOwDKY2u162v6HsVVzZrTUNqA4XftEOBJN/1PvOftjfGgXEUOahfIOQf7S5wUEoL6htuOG1pdQgoMDoJlpkwZ4YmxjhZcQj04AbRfchOPPrz+eh4VYHHFa8NbPX4JgGI8XX+WpAWPE21iIK4fUfVV1fBUgleMl/m/VKUi6QRdGyNjbKhmLYSxl+41Hw3B2xbAA2R+j9l/Dt/stL345N4zLKmpbt4slgEjRKo/Yuj4ZC0NI9AyDAbLRyEsTk2Bbu9kHlH3N8b/IL4jLT0FB7YBV8MRfM8RgNtkZb343ZVECCy0fBMDysIBdEuo7UHZ33hlHQPs8eYPjiDraCoYqdiODLzML3Dy3x/QsEfufKL5HAkP5VDXHA1Kb82U0fmXhWcVQwQ7aC03jSJ6JXZSyNhStYSqzX3ZTJqUI7PGemHfDj43mWf8ExrqovQBgwdJrbC6TvesfWpSJhyI7t6ps0eVaBexxzjW88T6R/w+wJ5Kby9VxeO1t1I1KGNssT6UVtiwaMjxHaoKSiKLXIy8udZk2WiOc4yb+kc8EXpehSMQSZEQhg37qq5Sz7v8SxX3iETSj1vLnYDg5Ip2/XCSGxkjfVbnP+nQNXDAcn0yzCIGPhS5PtbOkrQa7Z36r+VE1s62WzfTxu1xMWuTTEx81Q/FNa5Ohp0n+AZpflX/5lLr7S8H9pEaMO0bWh4O/ZjrW7XSfbKZ21c2HdFx82z+BtzwQJzgHeHH7B+vsb/CWqcLvbX/SeVbc8vwTXTVOP2ogA2xTfQ0xj6EhcD1eCIwq2poMejksh6MsMahRBm7SMqliENIGWaG/I/wxqhVTR25C/60p75TBj44UNB3wSdUbC+kfbJjGOsBKyBqRR00lgDK6RZm5R7m3S5M4vuTdI1KdzIkAlpQYqpOtZmLCAQYTsDtUvUioH2aL2soM2Y90PcgejXvbmJZrfVY5Id4Py7aB2FaT3mBf2ffwJRtnsouHcpOTtMHxBtaKf8zR19QArB2QZXKGcvssTQg5Rlxl0Vtz+1aID4s1k0WUxfhJkYV5r4eBpphHpvPST+/uFtfGy6UAcI2SnobQnDw3+2E8frAZpaPBimSk70N94WWaCK94DqoJvFXrjP0k8eYR/Hv3138rl4+44rK/7qKMIAkMm8px0EaMgYgzKtLIQQ3Ata2eNFStIOISQrziGjc8IgCc0yWMT12P6Ll44ANa5+FfsU8hvVR19Ulab+DnDWQu1YCRW9Ej/iHEwLrkECaUOgxy9XWIo1uW3g2bmztcqSigaVIhZOv4uCEh8igj781OTZd+5JYREDFcDBEBtX8swOCCw3MfM4WnDa54/+IvvUCQVoWiCgIr0gE4W3afd1D524nBUUZDgqja51lNUw6gRc2djn4Jvk9pnyAymcAmBroGBF3zas/kYVlLNguWTvuz+Pv6Wo1EMR6iI0h+lpS2XTFkqe0QmMHGR9EFmGdwBgAUHjLlZOr6fpNyDPIMzU0aMxRWilSecmORtrUHtAh9/rTgST2G4QF//icg1iNr8EvwB5kKvhdC0oNcXnbkIOpMiOmmRujlKAuteHu2BWE53d05vgLbElWfVR+PT8Qxbkx9tVUs02jPTF+kkPiOebmvApjRE+FuWdL/lfPMhgCXiWbRAhHrm+bPFwagv7pWtU8cjhqa0v08GyD1FoPin8kBhWbmIULR5cCKYDYdX2tvvG9/mr2ateOEJ3T/khsx/vwv/cRJKn44U6+3VNbOmNU53/+il93a59EVBo3shBzWAt1PzRP7M0Mg/1NK9FnLAmsI/osbrOjZYhizrNdU4zkPz6ZECeBCps/XSa0NrXLWf4H6V7HiQfeKCIidS3X2PfHYHuIqFkD7GD1sgBpEy5cDGX+1w+wl0kr8wHpDOW0CIU6QUzutJZobTWKoyNe1gfnoJkR17xiWsR1In6tGxwy7djsfPazqSgpaXI3lVEZ5yzM3IboM9hkavqt//t07MbHMr8bnafkjMyzXtshpzEmxGcGGMg57IEvB56gnuDQ6zZbNo0WFgbUp9w/DqkQKF/ldytNf5am00H2H96u8OjD7hPNVW1AD5HxuMS58dS9mlOwuCs0LqKeaa3ToPkpPXnTO4JwxeNEDwwH12YR8U2zm1DWbYHWeXgv+U8Fq9mxsA9thQ3vZAr9G1Dyd9i/76w672dMdWwJ5Et5zuUN2zXiN/ZCL+LQgsSNGqNiqfNoxcM5BN7SOJkGFa2v3ptbsNquRWpOpu0R7xVXSuHN7y/BGJVJ+XjCqb871bl4U8agfxrpT5OKr/ZMnZlT1LJT1cpPkMZ7Cm3FGtd4d3IKcRherKfz39pxZdrQMNJhKYgz1MLaJL9lIL7+u4SAqK5/7/PIl4RvXaVPkSSWox87YC3TCVLvkKPR/v2JUUC4r4PBZnDy+FHg1s5QVT9g8tYY3VSY2J60s4G73b+CWk6JoTE7HqBrpZKDkQfmg0s0yD1yX6RD7mlcBynxcZUH3Zu9Sm5DRaurf/jxKGCqLGQQ5TMR19yEPBvwqNpendWhqtpZ2XHV35R/GCpVu9kCWhtrBF6srBjq/SFnEgZpcC1QAL9lCF71cBh3G8SfJRpk1kqTji4phii4XyScZaTBA3yn/vlC9lrhj1lzilTyDf7/MH9EPwOW0WzOD4uMcb2ggPqagqAspeeQyBDAZjaU8TaE6h+BcBTJ8u/dIsz5imQgqzxjE9fu6OnTZaCkCJ6xsHssqfL0NZ+NzMCSvOsIphnSWAlXawAyMasxXPwLI/Ui6ts6dW8XTds3cG0rlrrN0t8wXwox8StvyOJNmNZWk2soimK7IayUdAN6E44i/JCb32uE+TrtDl+51NdMRnBZESBUEtaEg41zO86e3bw27WquriX4R/BFNforKR2vZvHXLu233txqoDyq82E/YKfsHUTA3Se69C1Mqmgv9TG7xxGrBnDpTAwE4HtMQv2T2CIhQjfo76/JHi27B9d/h+id91lz5KF/5sbx2t2r66+pTAi4wrnf+hvYVPGtX7Umx3HNuEWWOYbytLOCLo+o/ceUJpCmY4Fm6++K1dwaYIyfq5lJXM4hMOI5vlahSmldBLgSWKrQF1EIjqbJyq1w1xH83MdsEJYL250foVVCGPUfwdXD//13WAC1RCU+3ex1+vA6iMED1rthrXqKrnzTjFQjIWjL0JdJgW8s2QqkGFsXMXFJxI00Xop7t6uSvVwUajRhwgFKG4sPWwlw8yQdfNOdKTpvm5/uQpCVfnFwKxslGcN4n4zQyKIMiQ5Pj4cytNiCYY5kbT0j0cwbsfJS57GvMCHWUMvvLi1q820lDthzKayXiQJCMmC9KJBlBjEdd2SvIlQyAi83cuj59xmUv1Lb3CXTQIzCvOaqXe9QtP4PGb8Z+S9U3Pke3CNpZ5k+vRRb+twsjZZZMJyDSo1cQti3CIRD+YMohv2VFZl+iJZxtYt3TG6GwDFLmtWTGGiy651jP0qYuNSi0oVMZmYs5iV+PyBrtAc1FX5zf7rZEJYRc8/OiuCOBjO5af8WHocPu1ygWkmNywYmhpwZH0psyxRZFqsnnzUTpu3lk+nlv3zoedB3WBZMjT/UAmFqAWJyL63PwYmnvjg5MlpsOyFA2m9ikgD/P+TwYe9GBvweEWX91pMX4dTR1XfGvaqJYAQ2lSKmWRalGWz55bJTLl5o7mnZ5fW7H16+8PtzJUEYGa/MQH5LkD1tcVkrOPPanOpbC8z48csezIQ9kIUxoV5lAUvZz89MViEssb8RENHsaE2ctrvgT4zJkJaLPkfMmTIQGlE/i/J4XYGwMiGIep4VDsJlbM4rSTKwxkgI7MdW25++oSIiyBAx7ZZ958SA2tnCYh3zd84TNlYKWX/LxnbmN2qyWsr4d+RNRUJ+xiVW0XNX23NfFtrmPDjh5asuf+l6UpUaJgdXVSrcmmXbuWe3lz6f4f6sh2lvtJfa2VxH8h2yEKhgJey0HjbbPiQ3EsXZyPataZON0p7HCUGZNMEfGwghnkSNsP8J1GxSWO42M7SOQKSN1P78HBQTeeiHeRsZtZFxAF3htK18onFJV6IzdGcwoBiLHz1Xqj+BEZzBx7ITY/nZqqrJSnm+063FDmTMrMtmmTkmbpZVKFnb13VEYszHVOSyd6ZNUBqZMl9C8lYMiyJPkrM3u6Z3rOyv8/RI6vDSm5r9Wc1SeVnQIUJT1dkZSW3iC84M+q7Ztql4uBkz2Fvf/9yWWjhZ4PLgvwVmH08ZYrNv/6BWCx2QJQeNkp+yzQZ/EtCy5ZgfjWGjrqdT1XoW2dzP0xV+gfkWTlFw69xsf6obk5zvbO3EHfmX5F/1niYnSFDA4TTsk6smy5VU56v8X3XhxG/SKGBSs5niojJExDoWoJmG5PKsbEEprwavziccKOTq2i7YJq3fW9jrLvZj8fVt+Me0JlQDjjDn74qi48tq+MFgjKCgWmyLKG0NAluPnD2wYgkOadWWyKDh7yYbjv4JVP4sqwV4JlGeUGA9jzPqfthuRWR/OMRsaSOKFQaohYCR6vbtLprxz80XoBxmhHyOp42E2dBbR/2z43mN1ymd2BPmdlbK3gr9fY3S3PM07Y/2Ffl8jFgmXN5cRqu+qfQyXDwbbHlGENj/ableF0KSRaATzeVRZFMTuWRJTnDTteDZvDaZVPvcjoOs7RbK9AhJU6O68Zi4ro0vV/WevwwYH67UEbf5vNu/kV/8NLkdCageoVuTQZKhNOYXwRY5JQJuUxAc2baxq06wNEFQzZXLXcDuN//ZEhJIIOFr/UNBJDfh9/T6P1RDj05JZo8JMA/csGclTnY8y4iU5fuCHgc0Y0wV1BYPi436fgsmxlANx4N+not2Wy8EA2glVVm/WkGKc5cAtlvvcz2QPkpcXkT7hoG2i+L/+c+0Y4QQNlkk0qj3xH3f4zoRa1i2V9cX5pTQ3tzByWUQMa6DzktjKil2BZkonyl9pBpwaNshnAUEm9lqcloDmx0JVDIEyQXhD5MGUGvh9U28mWLr5GUzmjk+wWaNOJs5SVxYOf/ftvln/Vs3jwbPCVlXdanPVnWQvusT139YC1HEFSJ+z/elrVMcfvpradTDIvVY7qAHPpOZRrQFB46J8hmpDf7TXOlixBTlV7BWBcoW4ORnJKE0Ujqh0pECg5lE3F9THR9RWLJhsIWU5ZkDALDgLktL8iaTSV7CaHOlIh18tgyVBiLfSuav8Cq3K9pJ4P77vgXcCWplOi/rvPGez2ehhMjjKyleDAbKWZ9YSSWhnlf4hhkRgyZZNi3jmCL7M1JaMi5eoqhnTurhEjN8a70+IFS+Zp0Zk1HNRG0+/wJ8OFgVs0N7qpA/ldjcjOcyVpU5Z1NNw9qRRapthmphqn6KLqOxoTrqVCXwaoawTd6uzB++CKq09rssjhZnwShayjZIZv2INSj3t+Ii6nZSDk8NUONF2pn6HpFtcPHXAIgQClT+veC9JpIiIEm6/k0oyGFC+C2j7+IjA4GyFwpCSiuWmHJmWF0tzS8Xw8LrAxt2PBrMdBJoqdFnMuiN3alVTu8kdzv2WdW40QRmTZRLCShVIxXkgBqZw0RZ5TP3AhwhDCur8VhosZM93sztgIoLGaL/BAaGi1r43KeLuGcGmrzFsdM7JTkSb9oOmPuDlUem6zepWFulbXkueNpT7b2t7nGCosoO/64mRBF6Qb4NolC09fzcz+2EB51y8xXvU4aDYMLPxsnbfXEgiK+Vo03sMWNsk+oT1fwxyG7ByX5iLBV6CBA8MNHP7wYTwqhwH5m/6wD+e26k5MK/BW3yq5is8rbWQk+YKUsW5tUNITOnpaWnqFP+LR6kCWx6v9dRCRikzDHrfGzzMq5Y0KTePMIqa+kBl8/+XUnV7UFK1mwlbA9a/btS6sklVnUPhuJwXBj02RwmjbiOEHy8TEYr8rGFd9CK54i64U/vZlZoESKIRaEWi1/QcAR3GsdV7mJxO840wTgyKnrWuOD7ITWoHxukSjea9kFNe6cUXJylP5We4KCjJ/riuN1VzXcSmwoYT0qKLELw7AzyOKcwE9d3bNRgHNe4n4V6CAQQTuwoTHCWwBUimLAWhyAoVGZDQ+9p2xny6L3/zbvWSaTbmt66DQHgDJW8OsXKYPmS4ziRxUemZdsBF1DBp0SOoVYhYqqcT4NJY1SyoEhYiKfiRXag73xH2YERwfJdZBwDjxqDTTQ6weAJ41MQ2iSIPfuZzxYTMYycqrc/R1qS9TjBLjh44a931uxw1KucKNWVClXsFWS9tJ1PbC90gKxtuOdBvoT8neGVMcGaJXX1AE5wIm9yFnu8LKesgsPc8J1XxfsfdqcSwbFUSqW0liogI/BdpMKst+osbEwYz0lAanhy/G87KJnVxCxvCGZ1lE9QtkpqVVv3HrP+YfwWbxEsQGzb+VAum69Qt/sNiPX6VU7weSH7KGaswJFMCgVpLWwRsMJicTxhwu9H7x6pmQtmrqVOqlNvpz9rLuH8GcZ1kUxZjtUDIO/2M1ILWr4kuHhOb3F5PviL/Lgea6sj9+jKgwIVrSI7sNAaVGQlmQI1zIUrdzH6hg+tA23/KGXUfVrOCwig4vljgW4yD4uA5WmFkiZ4W0HCWS3OQVWO79T5fk/XXBws9k1KkqQw6oBenSFVTS6Dnt1s9H4hutRaXqOPq5oegqo54USQJMaZKn4+5LOQRe0AzW9nAEgMQQfUHZtLS1CtYcHBeEsChdKoBso9aK0qxfyndSUNB9njoEOwAUXFduVDdb2IWpdNnqa1RGczDgA4OpLEPotdgergrKcLHb7ABoqvXpnXT/HdVXDo7Ke6q2zjOt9ybMdxuLe8dUVg5/y56kfuT8Zw6nETqmoUqjT3pX43Ry+GsEG00M/vi33DwDyUWhbFQx8U8PeDUCDqXtLcghkc716EsMjQn4JhpnZOfBM+Bj+JMx/+qSUr+4PhXWLwY0DqBAmbCc/hmuH1fqP1Uy/FpwzNI00zKuZ6InI5Jv2YhI1oC2pkULdzt8ICorINwTMsEeQY2bd+CtSY4UFtWOQgraG3bWhu9clmT6aHqkI4vTt3DDO9EvgWUbSTBYEZpR85xbaZ5bi6Xrg0QqasERTTKkMgynDiIGxjIuaH5999kYAjbDk2+JIrLQTT6SMkL19tapECZSxI5X5szDtljMjDCVFie+eyVM6Hy5axBP/Aw0mi+qzi98M/sx4/xITsJi/GsjyzeikFHJwTBLGVznDTzKpoiIncApM2byPpmv2AbySVUJKidKByq0TT3SkQwidFNR5y6/tnRxqKjbfOT9MYeip4xfDJNzQs7HsR43ZK5vtQoXwycIlNLkCL3CE+wzCjQGlCKcLT+lfF9kWwVTIsXQfhkdhlkqSUh+x3jyFrJ97p3pVJS/4MmXzmLOb+hfr5oNLhTiPpkBPrYC2TbonCnmRW/nLjAhYl/eTbfuOorl2bt66nSeBb6eixTuKk37zQ8uyv2kX4MhawpIJz6g1FNcb4xYTwUaK7P+AuaCWOH9FeAIKUObTV3T8A+9RkFg7Z9CL6WRJKLWwBjekp5aAmW4hlAKOkEkF/Feedx7qiPYuVN6hpOkipyoDSmkkbCQ/hHlz6YKu00gaqW7V5pEnutb6Wae1pfl10+vZKxLOYmbJzJRt9jDx+aRItveuuSy/uqE5iktjCD9quzJqOOCN8uHvUit/gfOe1U1fzUAZCsnMPQfF+93wXyLKDRCsZmy1NHFzXXDCpQJN4ySQ1KuY1P837iOWxha25M/cCb0v/RxMdCEpjgaDqZsy8E1XfiHgBYGkhuyejsHq8LB65Jpu7Jg0nfOG/CP8lPj5ZbpAW1DSpqM9iCJqzsX94HkE4VRnsL/1T4aQ3z+RBizBzh7GzgB7Nd5jID/DYjzEsfMqYTTkoJumV71UWui0/W0tRLqWsDG5DSrssBUV7I2ab+NjS8mHPPbLf4uGdXjELuE0N4rx8DYEy2p5I3mipqwAWNECOY++6i6h3CeRN3Zx+f3GKRHFEPWuqs8cwuc1TyJVp9EE33m7F+HHyRnRui3dEwDCWHbk3tI1YLBiejsnW+YX3MYXPL5IIaDqrmrqN0Fxan9lUj3/aABvzLFdF9xy/BbtCjz8wLN1ArRo1Geeoa6HkYCq6E28bPHMUo77ThvfNgwweY+ASp0vpbQbbAV4mU54IWiM4F8UVQT6p8T1wcIMifVMdk+WsrS35PPk9/CLs5/HeWw==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
      <category term="notes" scheme="https://www.policx.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/news/harddisk/"/>
    <id>https://www.policx.com/news/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/news/2019/"/>
    <id>https://www.policx.com/news/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/blog/netlify/"/>
    <id>https://www.policx.com/blog/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-08-15T01:05:01.952Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。<br><img src="https://githubpage-1255710107.cos.ap-shanghai.myqcloud.com/static/images/KNN/hexo.png" alt></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。<br>那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。<br>接下来我分步骤的跟大家来介绍我的部署方案。</p><h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/blog/hexo-theme-icarus/"/>
    <id>https://www.policx.com/blog/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-08-15T01:05:01.952Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f0332a3bdc91139.jpg" alt="easyhexo.com"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
