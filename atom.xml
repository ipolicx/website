<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-07-16T04:20:02.139Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://www.policx.com/2019/07/15/spider/"/>
    <id>https://www.policx.com/2019/07/15/spider/</id>
    <published>2019-07-15T02:06:04.000Z</published>
    <updated>2019-07-16T04:20:02.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。 </p><a id="more"></a><p>其实爬虫这个概念很简单，基本可以分成以下几个步骤： </p><ul><li><p>发起网络请求</p></li><li><p>获取网页</p></li><li><p>解析网页获取数据</p></li></ul><p>发起网络请求这个步骤常用的类库有标准库urllib以及Python上常用的requests库。解析网页常用的类库有的BeautifulSoup。另外requests的作者还开发了另一个很好用的库requests-html，提供了发起请求和解析网页的二合一功能，开发小型爬虫非常方便。另外还有一些专业的爬虫类库，其中比较出名的就是scrapy。本文将会简单介绍一下这些类库，之后还会专门写一篇文章介绍scrapy的用法。 </p><p><strong>标准库urllib</strong></p><p>首先先来看标准库urllib。标准库的优点是Python自带的，不需要安装任何第三方库，缺点就是urllib属于偏底层的库，使用起来比较麻烦。下面是urllib发起请求的一个简单例子，大家看看就好。可以看到为了发起一个简单的请求，我们需要创建opener、request、ProxyHandler等好几个对象，比较麻烦。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> urllib.request <span class="hljs-keyword">as</span> request</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="hljs-string">'https'</span>: <span class="hljs-string">'https://127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="hljs-string">'http'</span>: <span class="hljs-string">'http://127.0.0.1:1080'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'--------------使用urllib--------------'</span>)</span><br><span class="line">url = <span class="hljs-string">'http://www.google.com'</span></span><br><span class="line">opener = request.build_opener(request.ProxyHandler(proxies))</span><br><span class="line">request.install_opener(opener)</span><br><span class="line">req = request.Request(url, headers=headers)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure><p><strong>requests</strong></p><p>requests是Kenneth Reitz大神的著名作品之一，优点就是极度简单和好用。首先来安装requests。 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>下面是一个简单的例子，和上面urllib示例代码实现的功能相同，但是代码量少多了，也更易读。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="hljs-string">'--------------使用requests--------------'</span>)</span><br><span class="line">response = requests.get(<span class="hljs-string">'https://www.google.com'</span>, headers=headers, proxies=proxies)</span><br><span class="line">response.encoding = <span class="hljs-string">'utf8'</span></span><br><span class="line">print(response.text)</span><br><span class="line">``` </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">requests还可以方便的发送表单数据，模拟用户登录。返回的Response对象还包含了状态码、header、raw、cookies等很多有用的信息。 </span><br><span class="line"></span><br><span class="line">```Python</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="hljs-string">'name'</span>: <span class="hljs-string">'yitian'</span>,</span><br><span class="line">    <span class="hljs-string">'age'</span>: <span class="hljs-number">22</span>,</span><br><span class="line">    <span class="hljs-string">'friends'</span>: [<span class="hljs-string">'zhang3'</span>, <span class="hljs-string">'li4'</span>]</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="hljs-string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">pprint(response.__dict__)</span><br><span class="line">print(response.text)</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">关于requests我就不多做介绍了，因为它有中文文档，虽然比官方落后几个小版本号，不过无伤大雅，大家可以放心参阅。</span><br></pre></td></tr></table></figure><p><a href="http://cn.python-requests.org/zh_CN/latest/" target="_blank" rel="noopener">http://cn.python-requests.org/zh_CN/latest/</a> </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">**beautifulsoup**</span><br><span class="line"></span><br><span class="line">利用前面介绍的requests类库，我们可以轻易地获取HTML代码，但是为了从HTML中找到所需的数据，我们还需要HTML/XML解析库，BeautifulSoup就是这么一个常用的库。首先先来安装它： </span><br><span class="line"></span><br><span class="line">```    </span><br><span class="line">pip install beautifulsoup4  </span><br><span class="line"></span><br><span class="line">```    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">这次就用我简书主页作为例子，爬取一下我简书的文章列表。首先先用requests获取到网页内容。     </span><br><span class="line"></span><br><span class="line">```Python</span><br><span class="line">from pprint import pprint</span><br><span class="line">import bs4</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &apos;user-agent&apos;:</span><br><span class="line">    &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = &apos;https://www.jianshu.com/u/7753478e1554&apos;</span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line">```   </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">然后就是BeautifulSoup的代码了。在使用BeautifulSoup的时候首先需要创建一个HTML树，然后从树中查找节点。BeautifulSoup主要有两种查找节点的办法，第一种是使用find和find_all方法，第二种方法是使用select方法用css选择器。拿到节点之后，用contents去获取它的子节点，如果子节点是文本，就会拿到文本值，注意这个属性返回的是列表，所以要加[0]。 </span><br><span class="line"></span><br><span class="line">```Python</span><br><span class="line">html = bs4.BeautifulSoup(response.text, features=&apos;lxml&apos;)</span><br><span class="line">note_list = html.find_all(&apos;ul&apos;, class_=&apos;note-list&apos;, limit=1)[0]</span><br><span class="line">for a in note_list.select(&apos;li&gt;div.content&gt;a.title&apos;):</span><br><span class="line">    title = a.contents[0]</span><br><span class="line">    link = f&apos;https://www.jianshu.com&#123;a[&quot;href&quot;]&#125;&apos;</span><br><span class="line">    print(f&apos;《&#123;title&#125;》,&#123;link&#125;&apos;)</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">BeautifulSoup也有中文文档，同样也是稍微落后两个小版本，影响不大。 </span><br><span class="line"></span><br><span class="line">```    </span><br><span class="line">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</span><br><span class="line">```  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">**requests-html**</span><br><span class="line"></span><br><span class="line">这个类库是requests的兄弟，同样也是Kenneth Reitz大神的作品。它将请求网页和解析网页结合到了一起。本来如果你用requests的话只能请求网页，为了解析网页还得使用BeautifulSoup这样的解析库。现在只需要requests-html一个库就可以办到。  </span><br><span class="line">首先先来安装。 </span><br><span class="line"></span><br><span class="line">```    </span><br><span class="line">pip install requests-html </span><br><span class="line">``` </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">然后我们来看看用requests-html如何重写上面这个例子。 </span><br><span class="line"></span><br><span class="line">```Python</span><br><span class="line">from requests_html import HTMLSession</span><br><span class="line">from pprint import pprint</span><br><span class="line"></span><br><span class="line">url = &apos;https://www.jianshu.com/u/7753478e1554&apos;</span><br><span class="line">headers = &#123;</span><br><span class="line">    &apos;user-agent&apos;:</span><br><span class="line">    &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0&apos;</span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line">note_list = r.html.find(&apos;ul.note-list&apos;, first=True)</span><br><span class="line">for a in note_list.find(&apos;li&gt;div.content&gt;a.title&apos;):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = f&apos;https://www.jianshu.com&#123;a.attrs[&quot;href&quot;]&#125;&apos;</span><br><span class="line">    print(f&apos;《&#123;title&#125;》,&#123;link&#125;&apos;)</span><br><span class="line">```    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">requests-html除了可以使用css选择器来搜索以外，还可以使用xpath来查找。 </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">```Python</span><br><span class="line">for a in r.html.xpath(&apos;//ul[@class=&quot;note-list&quot;]/li/div[@class=&quot;content&quot;]/a[@class=&quot;title&quot;]&apos;):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = f&apos;https://www.jianshu.com&#123;a.attrs[&quot;href&quot;]&#125;&apos;</span><br><span class="line">    print(f&apos;《&#123;title&#125;》,&#123;link&#125;&apos;)</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">requests-html还有一个很有用的特性就是浏览器渲染。有些网页是异步加载的，直接用爬虫去爬只能得到一个空页面，因为数据是靠浏览器运行JS脚本异步加载的，这时候就需要浏览器渲染了。而浏览器渲染用requests-html做非常简单，只要多调用一个render函数即可。render函数有两个参数，分别指定页面下滑次数和暂停时间。render函数第一次运行的时候，requests-html会下载一个chromium浏览器，然后用它渲染页面。  </span><br><span class="line">简书的个人文章页面也是一个异步加载的例子，默认只会显示最近几篇文章，通过浏览器渲染模拟页面下滑，我们可以得到所有文章列表。 </span><br><span class="line"></span><br><span class="line">```Python</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line"># render函数指示requests-html用chromium浏览器渲染页面</span><br><span class="line">r.html.render(scrolldown=50, sleep=0.2)</span><br><span class="line">for a in r.html.xpath(&apos;//ul[@class=&quot;note-list&quot;]/li/div[@class=&quot;content&quot;]/a[@class=&quot;title&quot;]&apos;):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = f&apos;https://www.jianshu.com&#123;a.attrs[&quot;href&quot;]&#125;&apos;</span><br><span class="line">    print(f&apos;《&#123;title&#125;》,&#123;link&#125;&apos;)</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">类似的，今日头条的个人页面也是异步加载的，所以也得调用render函数。 </span><br><span class="line">    </span><br><span class="line">```Python</span><br><span class="line">from requests_html import HTMLSession</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &apos;user-agent&apos;:</span><br><span class="line">        &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0&apos;</span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(&apos;https://www.toutiao.com/c/user/6662330738/#mid=1620400303194116&apos;, headers=headers)</span><br><span class="line">r.html.render()</span><br><span class="line"></span><br><span class="line">for i in r.html.find(&apos;div.rbox-inner a&apos;):</span><br><span class="line">    title = i.text</span><br><span class="line">    link = f&apos;https://www.toutiao.com&#123;i.attrs[&quot;href&quot;]&#125;&apos;</span><br><span class="line">    print(f&apos;《&#123;title&#125;》 &#123;link&#125;&apos;)</span><br><span class="line">```   </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">最后是requests-html的官网地址以及中文文档。 </span><br><span class="line"></span><br><span class="line">```    </span><br><span class="line">https://html.python-requests.org/ </span><br><span class="line">https://cncert.github.io/requests-html-doc-cn/</span><br><span class="line">```  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">**scrapy**</span><br><span class="line"></span><br><span class="line">以上介绍的几个框架都是各自有各自的作用，把它们结合起来可以达到编写爬虫的目的，但是要说专业的爬虫框架，还是得谈谈scrapy。作为一个著名的爬虫框架，scrapy将爬虫模型框架化和模块化，利用scrapy，我们可以迅速生成功能强大的爬虫。  </span><br><span class="line">不过scrapy概念众多，要仔细说还得专门开篇文章，这里就只简单演示一下。首先安装scrapy，如果是Windows系统，还需要安装pypiwin32。 </span><br><span class="line"></span><br><span class="line">```    </span><br><span class="line">pip install scrapy  </span><br><span class="line">pip install pypiwin32</span><br></pre></td></tr></table></figure><p>然后创建scrapy项目并添加一个新爬虫。 </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject myproject</span><br><span class="line">cd myproject</span><br><span class="line">scrapy genspider my jianshu.com</span><br><span class="line">```    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">打开配置文件settings.py，设置用户代理，否则会遇到<span class="hljs-number">403</span>错误。 </span><br><span class="line"></span><br><span class="line">```Python</span><br><span class="line">USER_AGENT = <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br></pre></td></tr></table></figure><p>然后修改一下爬虫。 </p><pre><code class="Python"><span class="comment"># -*- coding: utf-8 -*-</span><span class="keyword">import</span> scrapy<span class="class"><span class="keyword">class</span> <span class="title">JianshuSpider</span><span class="params">(scrapy.Spider)</span>:</span>    name = <span class="string">'jianshu'</span>    allowed_domains = [<span class="string">'jianshu.com'</span>]    start_urls = [<span class="string">'https://www.jianshu.com/u/7753478e1554'</span>]    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span>        <span class="keyword">for</span> article <span class="keyword">in</span> response.css(<span class="string">'div.content'</span>):            <span class="keyword">yield</span> {                <span class="string">'title'</span>: article.css(<span class="string">'a.title::text'</span>).get(),                <span class="string">'link'</span>: <span class="string">'https://www.jianshu.com'</span> + article.xpath(<span class="string">'a[@class="title"]/@href'</span>).get()            }</code></pre><p>最后运行一下爬虫。 </p><pre><code>scrapy crawl my </code></pre><p><del>完</del> </p><p><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1563247765&ver=1731&signature=gm2iTUKE3itOZzvlz9SUtKCYNv*PqEYt2C7ReV7kd47e2ZAWPvG5GRXZUJsiRIde34Uh5FznBslw4hHhXmHQXyV3yz0tTdgds1RMCdai6Oyy98w2-iTBRWeJlpm3cWa8&new=1" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2d4c5ba835e96705.jpg" alt></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。 &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DDoS（分布式拒绝服务）攻击是无解的吗？</title>
    <link href="https://www.policx.com/2019/07/14/ddos/"/>
    <id>https://www.policx.com/2019/07/14/ddos/</id>
    <published>2019-07-14T07:26:43.000Z</published>
    <updated>2019-07-14T08:41:14.777Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>“</p><p>DDOS？ </p><p>一言难尽啊！ </p><p>”</p><a id="more"></a><p>先说结论，DDoS是近年来网络攻击中的一棵“常青树”，的确很难缠，但说它是无解的，那也有点太看得起它了。虽然DDoS在对很多大平台的攻击中出尽了风头，但在现在互联网的解决方案中，并不缺乏应对DDoS的解决方案。 </p><p>说起DDoS攻击，我脑海里能够想到的全都是中国民间俗语，什么“双拳难敌四手，好汉架不住人多”，什么“千斤拨四两”，什么“乱拳打死老师傅”等等等等。 </p><p>之前有朋友跑来问我DDoS是个什么东西，为什么这么多互联网巨头都被搞得没有脾气，我记得我当时我是这么举的例子： </p><p>我们这一代人小的时候，自助餐开始在中国内地风行，那会儿这个行业里为了打击竞争对手，对手最惯常使用的阴招是雇佣很多五大三粗的人，给他们钱去对方的店里一通猛吃，杯盘狼藉之下，用不了几天这家自助餐就能给吃黄了。 </p><p>而DDoS攻击比这种还阴损，如果你开了一家餐馆，你的对手如果想搞你，最好的办法就是找一堆地痞流氓到你的店里坐的满满一屋子，你如果上前问，他们就一直跟你扯淡找麻烦，导致真正想吃饭的顾客一看这个情形，掉头就走了。 </p><p>用不了多久，你的餐馆就会开不下去，而你的竞争对手就会趁机蚕食掉你的市场份额，而放在网络语境里，这就是DDoS攻击的最基本原理。 </p><p>而这件事之所以难缠在于，一两个无赖根本成不了气候，想要耍流氓必须要有很多个无赖集结在一起。<strong>所以和现实世界中的无赖一样，DDoS真正的杀手锏在于利用能够发动的汹涌的流量，可以瞬间冲垮被攻击网站的服务器。</strong></p><p>如果我们回溯一下历史的话，会发现黑客组织之所以会有组织有预谋的发起DDoS攻击，基本上都是基于以下几个原因： </p><ul><li><p>有些行业如果网站被恶意攻击，会造成很难估量的损失，这个时候黑客发动DDoS攻击的初衷一般是出于敲诈勒索，为了保证企业的正常运转，他们通常愿意向黑客付高额的赎金； </p></li><li><p>行业内血海一片，DDoS是恶意竞争的屠刀。这个现象从逻辑上，其实雇佣无赖去占领对手餐馆的原理是一毛一样的，而且DDOS攻击早已产业化，现在中国的DDOS黑市，出钱请黑客打1G的流量到一个网吧或网站，市场价只要不到50块钱，但对于一个创业公司或者干脆就是一个小网吧来说，这已经算是可以灭顶的无妄之灾了。 </p></li><li><p>DDoS攻击往往成为掩盖真实网络攻击的烟雾弹，在遭受DDoS攻击的企业中，部分企业还伴随数据丢失的现象，黑客利用DDoS攻击掩盖其窃取用户隐私的真实目的，这种攻击行为在社交网站、金融领域等用户隐私高价值的行业尤为高发。 </p></li></ul><p>比如说，去年年初的时候，荷兰第一大银行荷兰商业银行于2018年1月28日晚间遭到DDoS攻击；第二大银行荷兰合作银行的网银服务29日早晨遭到攻击；第三大银行荷兰银行在那一周内共遭到7次网络攻击，仅周末就有3次。 </p><p>不过这一次发生在荷兰的针对银行系统的攻击并没有造成用户隐私的泄露，原因在于这仅仅是一次来自俄罗斯一个网络间谍组织Cozy Bear对荷兰情报组织AIVD侵犯其计算机的“单纯”的报复行为。<strong>但并不是所有黑客组织发起的DDoS攻击都如此单纯。</strong></p><p>2018年年底时万豪酒店发布了一则公告，称其旗下喜达屋酒店的5亿人次的信息被泄露，共计3.27亿人，泄露信息包括姓名、邮寄地址、电话号码、电子邮件昂面地址、护照号码、出生日期、性别等等入住信息，更糟糕的是万豪无法确定，侵入酒店系统的第三方黑客，在窃取的信息中是否包含客人的银行卡号和密码。（此案例和DDOS攻击无关，建议采用其他案例，比如2011年4月20日至26日，索尼遭受DDoS攻击，目的是为了掩盖盗取索尼PS的用户数据。） </p><p>而游戏领域，则是DDoS攻击的另一个重灾区，不光是刚才前文中提到的暴雪，包括索尼、金山、网易在内的众多知名游戏公司都曾数次遭受攻击，可以说DDoS攻击是游戏企业的噩梦。 </p><p>许多刚创业的游戏公司，可能刚上线就被打死，而一些处在融资阶段的游戏公司，由于遭遇攻击而被迫停服，则很大程度上会调低投资人的预期，甚至导致融资失败。 </p><p>而这些因素，都是竞对打压或者敲诈勒索的绝对软肋。 </p><p>从以上的几个案例我们不难看出，和现实中的耍流氓和敲诈勒索相比，通过网络手段进行攻击的风险和成本更低，坏蛋的嘴脸也更穷凶极恶一点，无论是政府机构还是企业平台，无论你是巨头还是小蚂蚁，只要你身上有羊毛可以薅，你都时刻面临着被洗劫的风险 </p><p>不过刚在开头我也讲了，虽然DDoS很难缠很让人头痛，但本质上图并不是无解的。 </p><p>回到我最开始讲的那个例子。 </p><p>你是一个餐馆老板，过去三十年一直是个老老实实的厨子，突然面对五十个臭流氓到你店里耍无赖的时候，你最好的应对方法，应该是什么？ </p><p>自己组建一支人马，和这些臭流氓正面刚？这恐怕不行，因为你不是臭流氓，你没有相应的作战经验。 </p><p>报警请人民警察来帮忙处理？这恐怕也不行，人家在你店里没有打砸抢，只是“温和的”非暴力不合作，警察来了也只能当民事调解，并且人家马仔众多，明天再换一拨新面孔来，玩的你一点脾气都没有。 </p><p>这就是面对DDoS时，无论是巨头还是小蚂蚁，他们的实实在在的困境。 </p><p>但正所谓“道高一尺魔高一丈”，你在云上和我耍流氓，那我就在云上回击。 </p><p><strong>“云”的事儿，不如还交还给云来处理。</strong>我认为就目前DDoS的在攻击量级上的疯狂进击的前提下，云计算服务厂商或许是狙击它们的最有效手段。 </p><p>2018年年初，峰值1.35TB/秒的流量冲击了开发者平台 GitHub。这是第一次TB量级的DDoS攻击。GitHub 受到攻击后，服务器断断续续，无法访问。攻击发生 10 分钟后，GitHub 向CDN 服务商 Akamai 请求协助，访问 GitHub 的流量已经由后者接管并在15分钟之内完成了防御。 </p><p>Akamai的相关负责人在接受采访时说，我们是基于迄今为止最大规模 DDoS 攻击五倍的峰值而做的相应准备，所以 1.3T 对我们来说是小意思。 </p><p>在关于流量峰值这一点上，我认为饱受双11、双12、618等全民购物狂欢的电商巨头们更有发言权，就拿京东举例子好了。 </p><p>京东云在之前发布的高防版的DDoS服务中，展示出了非常明确的信心是，在多年的电商狂欢流量对抗中，京东云已经在实战中建立了一套完备的防御机制，无论是在流量峰值的建模上，还是在DDoS的防御算法上，它的部署都远远不是纸上谈兵，而是拳拳到肉的经受住了实战的洗礼。要知道，全世界每年有超过5成的DDoS攻击都来自中国，而我们的国家也是全世界超过美国的第一大“肉鸡”市场，由电商大数据加持演化而来的京东云，它在云安全的理解上可以说是非常深刻了。 </p><p>所以说，如果说一定要有一个结论，我想说“上帝的归上帝，而云上的归云上”，像京东云这样的基于电商大数据考验的云计算平台，或许才是对抗DDoS的最终答案。 </p><p>From: <a href="https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA</a></p><p><strong>内容整理自：知乎@例不虚发探花郎</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“&lt;/p&gt;
&lt;p&gt;DDOS？ &lt;/p&gt;
&lt;p&gt;一言难尽啊！ &lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.policx.com/2019/07/14/node/"/>
    <id>https://www.policx.com/2019/07/14/node/</id>
    <published>2019-07-13T16:06:04.000Z</published>
    <updated>2019-07-15T09:40:32.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/15/5d2c47df96f5d45317.jpg" alt="Node.js"></p><p>能方便地搭建响应速度快、易于扩展的网络应用，Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>中文：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org</a>、<a href="https://nodejs.cn/" target="_blank" rel="noopener">https://nodejs.cn</a></p><p>简单说Node.js就是运行在服务器端的JavaScript，是现在流行的语言中能同时运行在前端与后台的程序语言，你可以把JavaScript想像成Java与C#。相关技术：</p><p>数据库：MongoDB，非关系型数据库，NoSQL（Not only SQL）</p><p>MVC框架：AngularJS</p><p>Web服务器：Express</p><p>模板引擎：jade、ejs、htmljs、swig、hogan.js</p><h1 id="二、搭建Node-js开发环境"><a href="#二、搭建Node-js开发环境" class="headerlink" title="二、搭建Node.js开发环境"></a>二、搭建Node.js开发环境</h1><h2 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h2><p>去官网下下载最新版本的Node.js一步一步按提示安装即可，如果安装失败就手动安装，将Node.js的安装位置配置到环境变量的path中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装完成后启动命令行，测试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="三、第一个Node-js程序"><a href="#三、第一个Node-js程序" class="headerlink" title="三、第一个Node.js程序"></a>三、第一个Node.js程序</h1><p>在上面的示例中，我们是通过IDE完成编译与运行的，其实手动运行也可以，比如编写一段代码如下：</p><blockquote><p>server.js</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//依赖一个http模块，相当于java中的import，与C#中的using</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">//创建一个服务器对象</span><br><span class="line">server = http.createServer(function (req, res) &#123;</span><br><span class="line">//设置请求成功时响应头部的MIME为纯文本</span><br><span class="line">res.writeHeader(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">//向客户端输出字符</span><br><span class="line">res.end(&quot;Hello World\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//让服务器监听本地8000端口开始运行</span><br><span class="line">server.listen(8000,&apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server is runing at 127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>在node环境下解释运行：<br><img src="https://i.loli.net/2019/07/14/5d2af984d2fae77488.jpg" alt></p><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2af89c2b5b226144.jpg" alt></p><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。<br>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。<br>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</p><h1 id="四、NPM（Node-js包管理器）"><a href="#四、NPM（Node-js包管理器）" class="headerlink" title="四、NPM（Node.js包管理器）"></a>四、NPM（Node.js包管理器）</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：  </p><ul><li>a)、允许用户从NPM服务器下载别人编写的第三方包到本地使用。  </li><li>b)、允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。  </li><li>c)、允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><h2 id="4-1、查看npm版本"><a href="#4-1、查看npm版本" class="headerlink" title="4.1、查看npm版本"></a>4.1、查看npm版本</h2><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p><h2 id="4-2、升级npm"><a href="#4-2、升级npm" class="headerlink" title="4.2、升级npm"></a>4.2、升级npm</h2><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="4-3、安装模块"><a href="#4-3、安装模块" class="headerlink" title="4.3、安装模块"></a>4.3、安装模块</h2><blockquote><p>npm install <module name> -参数</module></p></blockquote><p>如果带参数-g表示全局安装，否则只是安装到某个目录下。</p><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install express -g</span><br></pre></td></tr></table></figure><h2 id="4-4、卸载模块"><a href="#4-4、卸载模块" class="headerlink" title="4.4、卸载模块"></a>4.4、卸载模块</h2><p>我们可以使用以下命令来卸载 Node.js 模块。  </p><blockquote><p>sudo npm uninstall <module name></module></p></blockquote><p>如先使用安装指令安装bootstrap:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>再使用卸载指令删除模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall bootstrap</span><br></pre></td></tr></table></figure><p>可以到 /node_modules/ 目录下查看包是否还存在</p><h2 id="4-5、模块列表"><a href="#4-5、模块列表" class="headerlink" title="4.5、模块列表"></a>4.5、模块列表</h2><p>使用模块列表命令可以方便的看到当前项目中依赖的包：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h2 id="4-6、更新模块"><a href="#4-6、更新模块" class="headerlink" title="4.6、更新模块"></a>4.6、更新模块</h2><p>我们可以使用以下命令更新模块：<br><code>npm update</code>模块名称<br><code>npm up -g</code> 模块名称</p><h2 id="4-7、搜索模块"><a href="#4-7、搜索模块" class="headerlink" title="4.7、搜索模块"></a>4.7、搜索模块</h2><p><code>npm search</code>模块名称</p><h2 id="4-8、NPM-常用命令"><a href="#4-8、NPM-常用命令" class="headerlink" title="4.8、NPM 常用命令"></a>4.8、NPM 常用命令</h2><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。<br>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。<br>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。<br>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。<br>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。<br>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></package></package></p><h2 id="4-9、更换NPM-镜像"><a href="#4-9、更换NPM-镜像" class="headerlink" title="4.9、更换NPM 镜像"></a>4.9、更换NPM 镜像</h2><p>因为npm的服务器在国外，在网络状态不好的情况下引入一个模块会因为网络延迟而失败，可以更换成国内速度更快的镜像服务器，这里以使用淘宝 NPM 镜像（<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>）为例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/15/5d2c481d14f7270384.jpg" alt></p><p>这样就可以使用 cnpm 命令来安装模块了：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＄ cnpm install [name]</span><br></pre></td></tr></table></figure><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><p>如是安装失败，可以试试：</p><figure class="highlight zsh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">alias</span> cnpm=<span class="hljs-string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">--cache=<span class="hljs-variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">--userconfig=<span class="hljs-variable">$HOME</span>/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">  --userconfig=$HOME/.cnpmrc"'</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。使用Node.js作为AngularJS开发Web服务器的最佳方式是使用Express模块。</p><p>Express官网： <a href="https://expressjs.com/" target="_blank" rel="noopener">https://expressjs.com/</a></p><p>Express4.x API：<a href="https://expressjs.com/zh-cn/4x/api.html" target="_blank" rel="noopener">https://expressjs.com/zh-cn/4x/api.html</a></p><p><img src="https://i.loli.net/2019/07/15/5d2c484698cd427801.jpg" alt></p><h2 id="5-2、Express框架核心特性"><a href="#5-2、Express框架核心特性" class="headerlink" title="5.2、Express框架核心特性"></a><strong>5.2、Express框架核心特性</strong></h2><p>可以设置中间件来响应 HTTP 请求。</p><p>定义了路由表用于执行不同的 HTTP 请求动作。</p><p>可以通过向模板传递参数来动态渲染 HTML 页面。</p><p>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。</p><p>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p><h2 id="5-3、安装-Express"><a href="#5-3、安装-Express" class="headerlink" title="5.3、安装 Express"></a><strong>5.3、安装 Express</strong></h2><p>安装 Express 并将其保存到依赖列表中：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>以上命令全局安装express。也可安装时指定安装中间件。</p><p><em>body-parser</em> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</p><p><em>cookie-parser</em> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p><p><em>multer</em> - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">＄ npm install body-parser --save  </span><br><span class="line">＄ npm install cookie-parser --save  </span><br><span class="line">＄ npm install multer --save</span><br></pre></td></tr></table></figure><p>默认这些模块都已经添加。</p><h2 id="5-4、第一个Express框架实例"><a href="#5-4、第一个Express框架实例" class="headerlink" title="5.4、第一个Express框架实例"></a>5.4、第一个Express框架实例</h2><p>接下来我们使用 Express 框架来输出 “Hello World”。<br>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。</p><p>创建一个目录，如Project，进入命令行：</p><p>使用npm install express 导入express模块。</p><p>在目录下创建hello.js文件，如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//引入express模块</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">//创建一个app对象，类似一个web 应用（网站）</span><br><span class="line">var app = express();</span><br><span class="line">//接受指定路径的请求，指定回调函数</span><br><span class="line">app.get(&apos;/&apos;, function (req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//创建一个web服务器，可以认为就是web服务器对象</span><br><span class="line">//监听8081端口，当监听成功时回调</span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">   var host = server.address().address;  //地址</span><br><span class="line">   var port = server.address().port;  //端口</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-5、开发Express项目"><a href="#5-5、开发Express项目" class="headerlink" title="5.5、开发Express项目"></a>5.5、开发Express项目</h2><p><img src="https://i.loli.net/2019/07/14/5d2b00e97910997783.jpg" alt></p><p>创建好的项目如下：<br><img src="https://i.loli.net/2019/07/14/5d2b02dad205355700.jpg" alt></p><p>app.js是网站：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><p>bin\www是web服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">/**</span><br><span class="line"> * 依赖模块，导入</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;nodejsexpress:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从上下文环境中获得监听端口，如果空则3000</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Web服务器</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开始监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);  //指定发生错误时的事件</span><br><span class="line">server.on(&apos;listening&apos;, onListening);  //当监听成功时的回调</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 规范化端口</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *错误事件监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  //错误处理</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);  //结束程序</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当用户访问服务器成功时的回调</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/index.js路由，有点类似控制器或Servlet：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 获得首页 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>views/index.ejs首页视图：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在www上右键选择“运行方式”-&gt;Run ‘/bin/www’ 运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b034bcca6187136.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b044c2b12347829.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b041724d6091090.jpg" alt></p><h3 id="5-5-1、request对象"><a href="#5-5-1、request对象" class="headerlink" title="5.5.1、request对象"></a>5.5.1、request对象</h3><p>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ul><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ul><h3 id="5-5-2、response对象"><a href="#5-5-2、response对象" class="headerlink" title="5.5.2、response对象"></a>5.5.2、response对象</h3><p>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.app：同req.app一样</span><br><span class="line">res.append()：追加指定HTTP头</span><br><span class="line">res.set()在res.append()后将重置之前设置的头</span><br><span class="line">res.cookie(name，value [，option])：设置Cookie</span><br><span class="line">opition: domain / expires / httpOnly / maxAge / path / secure / signed</span><br><span class="line">res.clearCookie()：清除Cookie</span><br><span class="line">res.download()：传送指定路径的文件</span><br><span class="line">res.get()：返回指定的HTTP头</span><br><span class="line">res.json()：传送JSON响应</span><br><span class="line">res.jsonp()：传送JSONP响应</span><br><span class="line">res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</span><br><span class="line">res.redirect()：设置响应的Location HTTP头，并且设置状态码302</span><br><span class="line">res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</span><br><span class="line">res.send()：传送HTTP响应</span><br><span class="line">res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</span><br><span class="line">res.set()：设置HTTP头，传入object可以一次设置多个头</span><br><span class="line">res.status()：设置HTTP状态码</span><br><span class="line">res.type()：设置Content-Type的MIME类型</span><br></pre></td></tr></table></figure><h3 id="5-5-3、express获取参数有三种方法"><a href="#5-5-3、express获取参数有三种方法" class="headerlink" title="5.5.3、express获取参数有三种方法"></a>5.5.3、express获取参数有三种方法</h3><p>req.query 适合 <a href="https://localhost:3000/form?num=8888" target="_blank" rel="noopener">https://localhost:3000/form?num=8888</a><br>req.body 适合<a href="https://localhost:3000/form，Post请求中的参数" target="_blank" rel="noopener">https://localhost:3000/form，Post请求中的参数</a><br>req.params 适合获取form后的num：<a href="https://localhost:3000/form/num" target="_blank" rel="noopener">https://localhost:3000/form/num</a>  </p><p>（一）、GET</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = req.query.num;</span><br><span class="line">res.send(&quot;你获取的get数据为:&quot; + num);</span><br></pre></td></tr></table></figure><p>（二）、POST</p><p>解析post数据需要用到body-parser</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">//引入body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">//需要use的</span><br><span class="line">app.use(bodyParser.json()); // for parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">extended: true</span><br><span class="line">&#125;)); // for parsing application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.post(&apos;/form&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.body.num;</span><br><span class="line">res.send(&quot;你获取的post数据为:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>public/test.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"tinyphp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（三）、获取路径参数</p><p>app.js  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.get(&apos;/form/:num&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.params.num;</span><br><span class="line">res.send(&quot;你获取到form/后的参数:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="5-6-ejs基础"><a href="#5-6-ejs基础" class="headerlink" title="5.6 ejs基础"></a>5.6 ejs基础</h2><p>ejs是一个Express Web应用的模板引擎，在NodeJS开发中可以选择的模板引擎可能是所有Web应用开发中范围最广的，如jade、ejs、htmljs、swig、hogan.js，但ejs是最容易上手的，与jsp,asp,php的原始模板引擎风格很像。</p><p>官网：<a href="https://www.embeddedjs.com/" target="_blank" rel="noopener">https://www.embeddedjs.com/</a></p><p>添加一个<code>product.js</code>路由：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  var products=[];</span><br><span class="line">  products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">  //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">  res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>在views目录下添加<code>product.ejs</code>视图，这里是一个简单的MVC：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span> - 产品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"80%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%pdts.forEach(function(pdt,index)&#123;%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=index+1%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.name%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.price%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%&#125;);%</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">%=pdts[i].name%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改app，注册定义好的模块product：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> index = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/index'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/users'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> pdts = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/product'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//指定视图引擎为ejs</span></span><br><span class="line">app.set(<span class="hljs-string">'views'</span>, path.join(__dirname, <span class="hljs-string">'views'</span>));</span><br><span class="line">app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="hljs-comment">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class="line">app.use(logger(<span class="hljs-string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="hljs-string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/'</span>, index);</span><br><span class="line">app.use(<span class="hljs-string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="hljs-string">'/pdt'</span>, pdts);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b092ca2eb115835.jpg" alt></p><blockquote><p>原因：没有安装ejs模块<br>解决办法：进入到项目目录，安装ejs</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save ejs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b09efe80ba53992.jpg" alt></p></blockquote><p>重新运行：<br><img src="https://i.loli.net/2019/07/14/5d2b0a951a09231745.jpg" alt></p><h2 id="5-7、lodash"><a href="#5-7、lodash" class="headerlink" title="5.7、lodash"></a>5.7、lodash</h2><p>这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。可以非常方便的操作json。</p><p>官网：<a href="https://lodashjs.com/" target="_blank" rel="noopener">https://lodashjs.com/</a></p><p>安装：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash</span><br></pre></td></tr></table></figure><p>安装时先用cd切换到当前项目下。</p><p>如果浏览器使用可以直接引入：</p><script src="lodash.js"></script><p>添加lodash依赖：<br><img src="https://i.loli.net/2019/07/14/5d2b0c4c7c14a17367.jpg" alt></p><p>依赖成功后会在package.json中添加引用：<br><img src="https://i.loli.net/2019/07/14/5d2b0c9e03f1844597.jpg" alt></p><p>后台Node.js使用，可以引入模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//导入lodash模块</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var products=[];</span><br><span class="line">products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">//1、取出第一个元素</span><br><span class="line">var obj1=_.first(products);</span><br><span class="line">console.log(obj1.name);  //ZTE U880</span><br><span class="line"></span><br><span class="line">//2、取出最后一个元素</span><br><span class="line">var obj2=_.last(products);</span><br><span class="line">console.log(obj2.name);  //iPhone 7 Plus 128G</span><br><span class="line"></span><br><span class="line">//3、指定查找条件返回符合条件的索引</span><br><span class="line">var obj3=_.findIndex(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj3);  //2</span><br><span class="line"></span><br><span class="line">//4、指定查找条件返回查找到的对象</span><br><span class="line">var obj4=_.find(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj4);  //&#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;</span><br><span class="line"></span><br><span class="line">//5、排序</span><br><span class="line">var obj5=_.orderBy(products,[&quot;price&quot;,&quot;name&quot;],[&quot;desc&quot;,&quot;asc&quot;]);</span><br><span class="line">console.log(obj5);</span><br><span class="line"></span><br><span class="line">//[ &#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;HuWei 荣耀8&apos;, price: 1899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;ZTE U880&apos;, price: 899.8 &#125; ]</span><br><span class="line"></span><br><span class="line">//6、查找价格为1899.8的产品的key</span><br><span class="line">var obj6=_.findKey(products,&#123;price:1899.8&#125;);</span><br><span class="line">console.log(obj6);   //1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/14/5d2b0f023a83710965.jpg" alt></p><p>API的使用非常简单，但需要注意版本，可以现查现用，API地址：<a href="https://lodash.com/docs/4.17.2%20" target="_blank" rel="noopener">https://lodash.com/docs/4.17.2 </a></p><h2 id="5-8、参数"><a href="#5-8、参数" class="headerlink" title="5.8、参数"></a>5.8、参数</h2><h3 id="5-8-1、URL中的参数占位"><a href="#5-8-1、URL中的参数占位" class="headerlink" title="5.8.1、URL中的参数占位"></a>5.8.1、URL中的参数占位</h3><p>Checks route params (req.params), ex: /user/:id</p><p>127.0.0.1:3000/index，这种情况下，我们为了得到index，我们可以通过使用req.params得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式；</p><p><code>http://127.0.0.1:3000/pdt/9527/phone</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得产品根据Id</span><br><span class="line">router.get(&apos;/:id/:category&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(request.params.id+&quot;,&quot;+request.params.category);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b10e8e678f43145.jpg" alt></p><h3 id="5-8-2、URL中的QueryString"><a href="#5-8-2、URL中的QueryString" class="headerlink" title="5.8.2、URL中的QueryString"></a>5.8.2、URL中的QueryString</h3><p>Checks query string params (req.query), ex: ?id=12</p><p>127.0.0.1:3000/index?id=12，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用req.query.id就可以获得，类似于PHP的get方法；</p><p><code>http://127.0.0.1:3000/pdt/9527?name=jobs</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(&quot;name:&quot;+request.query.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b12be0371490358.jpg" alt></p><h3 id="5-8-3、HTTP正文中的参数"><a href="#5-8-3、HTTP正文中的参数" class="headerlink" title="5.8.3、HTTP正文中的参数"></a>5.8.3、HTTP正文中的参数</h3><p>在post请求中获得表单中的数据。</p><p>Checks urlencoded body params (req.body), ex: id=</p><p>127.0.0.1：300/index，然后post了一个id=2的值，这种方式是获取客户端post过来的数据，可以通过req.body.id获取，类似于PHP的post方法；</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222150412682-243382356.png" alt></p><p>页面：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &lt;%= title %&gt;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%pdts.forEach(function(pdt,index)&#123;%&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=index+1%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.name%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.price%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%&#125;);%&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=pdts[i].name%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            &lt;%if(typeof msg!=&quot;undefined&quot;)&#123;%&gt;</span><br><span class="line">                &lt;%=msg%&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">        &lt;form action=&quot;pdt/add&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                名称：&lt;input name=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                价格：&lt;input name=&quot;price&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/add&apos;,function(request,res,next)&#123;</span><br><span class="line">    var entity=&#123;name:request.body.name,price:request.body.price&#125;;</span><br><span class="line">    products.push(entity);</span><br><span class="line">      //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">      res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products,msg:&quot;添加成功&quot;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151340745-1374859267.png" alt></p><h2 id="5-9、JSON"><a href="#5-9、JSON" class="headerlink" title="5.9、JSON"></a>5.9、JSON</h2><p>如果需要Node.js向外提供返回JSON的接口，Express也是非常方便的，可以使用原来在浏览器中使用到的JSON对象，这是一个浏览器内置对象在服务可以直接使用：</p><p>将对象序列化成字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象</span><br><span class="line">var rose=&#123;&quot;name&quot;:&quot;Rose&quot;,&quot;weight&quot;:&quot;65&quot;&#125;;</span><br><span class="line">            //序列化成字符串</span><br><span class="line">            var str=JSON.stringify(rose);</span><br><span class="line">            alert(str);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151858839-27300214.png" alt></p><p>反序列化，将字符转换成对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成JavaScript对象</span><br><span class="line">var markStr=&apos;&#123;&quot;name&quot;:&quot;mark&quot;,&quot;weight&quot;:&quot;188&quot;&#125;&apos;;</span><br><span class="line">            var mark=JSON.parse(markStr);</span><br><span class="line">            alert(mark.name+&quot;，&quot;+mark.weight);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222152634417-1260078212.png" alt></p><p>Express已经封装了一个json方法，直接调用该方法就可以序列化对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/rest&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(products);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、RESTful（表述性状态转移）"><a href="#六、RESTful（表述性状态转移）" class="headerlink" title="六、RESTful（表述性状态转移）"></a>六、RESTful（表述性状态转移）</h1><p>REST是英文Representational State Transfer的缩写，中文称之为“表述性状态转移” 基于HTTP协议，是另一种服务架构，传递是JSON、POX（Plain Old XML）而不是SOAP格式的数据，充分利用HTTP谓词（Verb），侧重数据的传输，业务逻辑交给客户端自行处理</p><p>REST是一种分布式服务架构的风格约束，像Java、.Net（WCF、WebAPI）都有对该约束的实现，使URL变得更加有意义，更加简洁明了，如：</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>get请求 表示获得所有产品的第1个</p><p><a href="https://www.zhangguo.com/products/product" target="_blank" rel="noopener">https://www.zhangguo.com/products/product</a><br>post请求 表示添加一个产品</p><p><a href="https://www.zhangguo.com/products/1/price" target="_blank" rel="noopener">https://www.zhangguo.com/products/1/price</a><br>get请求 表示获得第1个产品的价格</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>delete请求 删除编号为1的产品</p><p>REST设计需要遵循的原则<br>网络上的所有事物都被抽象为资源（resource）；<br>每个资源对应一个唯一的资源标识符（resource identifier）；<br>通过通用的连接器接口（generic connector interface）对资源进行操作；<br>对资源的各种操作不会改变资源标识符；<br>所有的操作都是无状态的（stateless）</p><p>谓词<br><strong>GET</strong><br>表示查询操作，相当于Retrieve、Select操作<br><strong>POST</strong><br>表示插入操作，相当于Create，Insert操作<br><strong>PUT</strong><br>表示修改操作，相当于Update操作<br><strong>DELETE</strong><br>表示删除操作，相当于Delete操作</p><p>其它还有：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161223101344557-1727952968.png" alt></p><p>NodeJS+Express可以很容易的实现REST</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>application/json</li><li>res.setHeader(‘Content-Type’, ‘application/json;charset=utf-8’);</li></ul><p>示例代码cars.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var cars=[];</span><br><span class="line">cars.push(&#123;id:201701,name:&quot;BMW&quot;,price:190,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201702,name:&quot;BYD&quot;,price:25,speed:&quot;160km/h&quot;,color:&quot;红色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201703,name:&quot;Benz&quot;,price:300,speed:&quot;215km/h&quot;,color:&quot;蓝色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201704,name:&quot;Honda&quot;,price:190,speed:&quot;170km/h&quot;,color:&quot;黑色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201705,name:&quot;QQ&quot;,price:130,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line"></span><br><span class="line">/* Get */</span><br><span class="line">/*获得所有汽车*/</span><br><span class="line">/*url /cars/*/</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.json(cars);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Get*/</span><br><span class="line">/*获得汽车通过id*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">     //从路径中映射参数，转换成数字</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var car=_.find(cars,&#123;id:id&#125;);</span><br><span class="line">      res.json(car);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Post*/</span><br><span class="line">/*添加汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.post(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      car.id=_.last(cars).id+1;  //将编号修改为最后一辆车的编号+1</span><br><span class="line">      cars.push(car);  //将汽车对象添加到集合中</span><br><span class="line">      res.json(car);  //将添加成功的车以json的形式返回</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Put*/</span><br><span class="line">/*修改汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.put(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      console.log(req.body);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:parseInt(car.id)&#125;);  //根据id获得车在集合中的下标</span><br><span class="line"></span><br><span class="line">      cars[index]=car;  //替换原对象</span><br><span class="line">      //res.json(car);  //将修改后的车以json的形式返回</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;更新成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Delete*/</span><br><span class="line">/*删除汽车*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.delete(&apos;/id/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">      //获得url中的编号参数</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:id&#125;);  //根据id获得车在集合中的下标</span><br><span class="line">      cars.splice(index,1);   //在cars数组中删除下标从index开始的1条数据</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;删除成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>示例代码app.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line">var pdts = require(&apos;./routes/product&apos;);</span><br><span class="line">var task = require(&apos;./routes/task&apos;);</span><br><span class="line">var cars = require(&apos;./routes/cars&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line">app.use(&apos;/pdt&apos;, pdts);</span><br><span class="line">app.use(&quot;/task&quot;,task);</span><br><span class="line">app.use(&quot;/cars&quot;,cars);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得所有汽车  </li><li>url /cars/</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b27eb42dea22132.jpg" alt></p><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得汽车通过id</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b28e456cdf58111.jpg" alt></p><blockquote><p><strong>Post</strong></p></blockquote><ul><li>添加汽车  </li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b30e46f28836556.jpg" alt></p><p>参数中的json格式一定要使用标准格式，注意引号，注意Content-Type，默认的Content-Type类型是：application/x-www-form-urlencoded</p><blockquote><p><strong>Put</strong></p></blockquote><ul><li>修改汽车</li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3434410e778260.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b344cd080581595.jpg" alt></p><blockquote><p><strong>Delete</strong>  </p></blockquote><ul><li>删除汽车</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3526d5bff57574.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b35474e9c447189.jpg" alt></p><p><strong>node.js跨域</strong></p><p>修改app.js文件拦截所有的请求，修改头部</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">app.all(&apos;*&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">    res.header(&quot;X-Powered-By&quot;, &apos; 3.2.1&apos;);</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);</span><br><span class="line">    if(req.method == &quot;OPTIONS&quot;) &#123;</span><br><span class="line">        res.send(&quot;200&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2017.cnblogs.com/blog/63651/201801/63651-20180108142729785-1121920664.png" alt></p><h1 id="九、视频"><a href="#九、视频" class="headerlink" title="九、视频"></a>九、<a href="https://www.bilibili.com/video/av17977069" target="_blank" rel="noopener">视频</a></h1><p>From: <a href="https://www.cnblogs.com/best/p/6204116.html" target="_blank" rel="noopener">https://www.cnblogs.com/best/p/6204116.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>front-matter</title>
    <link href="https://www.policx.com/2019/07/11/Front-matter/"/>
    <id>https://www.policx.com/2019/07/11/Front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-14T08:55:47.989Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/2019/07/11/CSDNnews/"/>
    <id>https://www.policx.com/2019/07/11/CSDNnews/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-15T06:15:13.802Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">hackernoon</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/2019/07/05/BitTorrent/"/>
    <id>https://www.policx.com/2019/07/05/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-08T15:20:42.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/2019/07/04/partner/"/>
    <id>https://www.policx.com/2019/07/04/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-12T09:50:03.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/2019/06/18/harddisk/"/>
    <id>https://www.policx.com/2019/06/18/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-08T15:20:35.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/2019/06/05/2019/"/>
    <id>https://www.policx.com/2019/06/05/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-12T09:40:14.384Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/2019/05/01/netlify/"/>
    <id>https://www.policx.com/2019/05/01/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-13T15:48:09.150Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。<br><img src="https://githubpage-1255710107.cos.ap-shanghai.myqcloud.com/static/images/KNN/hexo.png" alt></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。<br>那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。<br>接下来我分步骤的跟大家来介绍我的部署方案。</p><h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/2019/05/01/hexo-theme-icarus/"/>
    <id>https://www.policx.com/2019/05/01/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-09T14:25:12.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><ul><li>原文链接—&gt; <a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">easyhexo.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="https://www.policx.com/2018/09/17/git-del/"/>
    <id>https://www.policx.com/2018/09/17/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-13T08:10:24.253Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://www.policx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="https://www.policx.com/2018/06/19/python-excel/"/>
    <id>https://www.policx.com/2018/06/19/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-07T04:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="https://www.policx.com/2018/06/17/python-writer/"/>
    <id>https://www.policx.com/2018/06/17/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-07T04:36:07.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="https://www.policx.com/2018/06/05/2018/"/>
    <id>https://www.policx.com/2018/06/05/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-12T10:08:35.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="/post-images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymongo/"/>
    <id>https://www.policx.com/2018/05/02/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-07T04:35:29.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://www.policx.com/2018/05/02/mongodb/"/>
    <id>https://www.policx.com/2018/05/02/mongodb/</id>
    <published>2018-05-02T06:11:11.000Z</published>
    <updated>2019-07-13T08:11:55.980Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。</p><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库。</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。通常情况下，在一个集合中的所有文件都是类似或相关目的。</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。<br>下面给出的示例显示了一个博客网站，仅仅是一个逗号分隔的键值对的文档结构。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorial&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,20,2,15),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My second comments&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,25,7,45),</span><br><span class="line">         like: 5</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>MongoDB use DATABASE_NAME 用于创建数据库。该命令如果数据库不存在，将创建一个新的数据库， 否则将返回现有的数据库。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>use DATABASE语句的基本语法如下：<br><code>use DATABASE_NAME</code></p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">如果想创建一个数据库名称为 &lt;mydb&gt;, 那么 use DATABASE 语句应该如下：</span><br><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line"></span><br><span class="line">要检查当前选择的数据库使用命令 db</span><br><span class="line">&gt;db</span><br><span class="line">mydb</span><br><span class="line"></span><br><span class="line">如果想查询数据库列表，那么使用命令 show dbs.</span><br><span class="line">&gt;show dbs</span><br><span class="line">local     0.78125GB</span><br><span class="line">test      0.23012GB</span><br><span class="line"></span><br><span class="line">所创建的数据库（mydb）不存在于列表中。要显示的数据库，需要至少插入一个文档进去。</span><br><span class="line">&gt;db.movie.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;)</span><br><span class="line">&gt;show dbs</span><br><span class="line">local      0.78125GB</span><br><span class="line">mydb       0.23012GB</span><br><span class="line">test       0.23012GB</span><br></pre></td></tr></table></figure><p>MongoDB的默认数据库是test。 如果没有创建任何数据库，那么集合将被保存在测试数据库。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>MongoDB db.dropDatabase() 命令用于删除现有的数据库。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>dropDatabase()指令的基本语法如下：<br><code>db.dropDatabase()</code></p><p>这将删除选定的数据库。如果没有选择任何数据库，那么它会删除默认的“test”数据库</p><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>如果想删除新的数据库 <mydb>, 那么 dropDatabase() 命令将如下所示：</mydb></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;&#123; &quot;dropped&quot; : &quot;mydb&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>MongoDB 的 db.createCollection(name, options) 用于创建集合。 在命令中, name 是要创建集合的名称。 Options 是一个文档，用于指定集合的配置</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>String</td><td>要创建的集合的名称</td></tr><tr><td>Options</td><td>Document</td><td>（可选）指定有关内存大小和索引选项</td></tr></tbody></table><p>选项参数是可选的，所以需要指定集合的唯一名字。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>createCollection()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt;db.createCollection(&quot;mycollection&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以通过使用 show collections 命令来检查创建的集合</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;show collections</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><h3 id="选项列表"><a href="#选项列表" class="headerlink" title="选项列表"></a>选项列表</h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。</td></tr><tr><td>autoIndexID</td><td>Boolean</td><td>（可选）如果为true，自动创建索引_id字段。默认的值是 false.</td></tr><tr><td>size</td><td>number</td><td>（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。</td></tr><tr><td>max</td><td>number</td><td>（可选）指定上限集合允许的最大文件数。</td></tr></tbody></table><p>尽管插入文档，MongoDB首先检查字段集合的上限大小，那么它会检查最大字段。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法 :"></a>语法 :</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexID : true, size : 6142800, max : 10000 &#125; )</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.yiibai.insert(&#123;&quot;name&quot; : &quot;yiibai&quot;&#125;)</span><br><span class="line">&gt;show collections</span><br><span class="line">mycol</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br><span class="line">yiibai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>MongoDB 的 db.collection.drop() 用于从数据库中删除集合。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>drop() 命令的基本语法如下<br><code>db.COLLECTION_NAME.drop()</code></p><h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>下面给出的例子将删除给定名称的集合：mycollection</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.mycollection.drop()</span><br><span class="line">true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p>将数据插入到MongoDB集合，需要使用MongoDB 的 insert() 方法。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>insert()命令的基本语法如下：<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.insert(&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c),</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里 mycol 是我们的集合名称，它是在之前的教程中创建。如果集合不存在于数据库中，那么MongoDB创建此集合，然后插入文档进去。</p><p>在如果我们不指定_id参数插入的文档，那么 MongoDB 将为文档分配一个唯一的ObjectId。</p><p>_id 是12个字节十六进制数在一个集合的每个文档是唯一的。 12个字节被划分如下：<br>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</p><p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.post.insert([</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;NoSQL Database&apos;, </span><br><span class="line">   description: &apos;NoSQL database doesn&apos;t have tables&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 20, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p>要从集合查询MongoDB数据，需要使用MongoDB的 find()方法。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find()</code><br>find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p><code>&gt;db.mycol.find().pretty()</code></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>除了find()方法还有findOne()方法，仅返回一个文档。</p><h3 id="RDBMS-Where子句等效于MongoDB"><a href="#RDBMS-Where子句等效于MongoDB" class="headerlink" title="RDBMS Where子句等效于MongoDB"></a>RDBMS Where子句等效于MongoDB</h3><p>查询文档在一些条件的基础上，可以使用下面的操作</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>Equality</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td>db.mycol.find({“by”:”yiibai tutorials”}).pretty()</td><td>where by = ‘yiibai tutorials’</td></tr><tr><td>Less Than</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>Less Than Equals</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>Greater Than</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>Greater Than Equals</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>Not Equals</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="AND-在-MongoDB"><a href="#AND-在-MongoDB" class="headerlink" title="AND 在 MongoDB"></a>AND 在 MongoDB</h4><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>在 find()方法，如果您传递多个键通过”,”将它们分开，那么MongoDB对待它就如AND条件一样。基本语法如下所示：<br><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有教程含“yiibai tutorials”和其标题是“MongoDB Overview”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;yiibai tutorials&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>对于上面给出的例子相当于where子句：’ where by=’yiibai tutorials’ AND title=’MongoDB Overview’ ‘。可以传递任何数目的键-值对在find子句。</p><h4 id="OR-在-MongoDB"><a href="#OR-在-MongoDB" class="headerlink" title="OR 在 MongoDB"></a>OR 在 MongoDB</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><p>要查询基于OR条件的文件，需要使用$or关键字。OR的基本语法如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有撰写含有 ‘yiibai tutorials’ 或是标题为 ‘MongoDB Overview’ 的教程</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-AND-和-OR-在一起"><a href="#使用-AND-和-OR-在一起" class="headerlink" title="使用 AND 和 OR 在一起"></a>使用 AND 和 OR 在一起</h4><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子显示有喜欢数大于100 的文档，其标题要么是 ‘MongoDB Overview’ 或 ‘yiibai tutorials’. 等效于SQL的where子句：’where likes&gt;10 AND (by = ‘yiibai tutorials’ OR title = ‘MongoDB Overview’)’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai tutorials&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>MongoDB的update()和save()方法用于更新文档到一个集合。 update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。</p><h4 id="MongoDB-Update-方法"><a href="#MongoDB-Update-方法" class="headerlink" title="MongoDB Update() 方法"></a>MongoDB Update() 方法</h4><h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><p>update()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br></pre></td></tr></table></figure><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将设置其标题“MongoDB Overview”的文件为新标题为“New MongoDB Tutorial”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Tutorial Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 ‘multi’ 设置为 true。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="MongoDB-Save-方法"><a href="#MongoDB-Save-方法" class="headerlink" title="MongoDB Save() 方法"></a>MongoDB Save() 方法</h4><p>save() 方法取代，通过新文档到 save()方法</p><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><p>mongodb 的 save()方法如下所示的基本语法：<br><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><p>下面的例子将替换该文件_id ‘5983548781331adf45ec7’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.save(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>MongoDB 的 remove()方法用于从集合中删除文档。remove()方法接受两个参数。一个是标准缺失，第二是justOne标志<br>deletion criteria : 根据文件（可选）删除条件将被删除。<br>justOne : （可选）如果设置为true或1，然后取出只有一个文档。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>remove()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p><h6 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h6><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将删除所有的文件，其标题为 ‘MongoDB Overview’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Toturials Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="只删除一个"><a href="#只删除一个" class="headerlink" title="只删除一个"></a>只删除一个</h5><p>如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。<br><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p><h5 id="删除所有文件"><a href="#删除所有文件" class="headerlink" title="删除所有文件"></a>删除所有文件</h5><p>如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove()</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="MongoDB投影"><a href="#MongoDB投影" class="headerlink" title="MongoDB投影"></a>MongoDB投影</h4><p>mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。</p><p>MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。</p><p>语法</p><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find({},{KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示文档的标题，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意在执行find()方法时_id字段始终显示，如果不想要显示这个字段，那么需要将其设置为0</p><h5 id="限制文档"><a href="#限制文档" class="headerlink" title="限制文档"></a>限制文档</h5><p>MongoDB Limit() 方法</p><p>要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p>limit()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER)</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将只显示2个文档，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>如果不指定 limit()方法的参数数量，然后它会显示集合中的所有文档。</p><p>MongoDB Skip() 方法</p><p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。</p><p>语法</p><p>skip() 方法的基础语法如下所示：<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p><p>例子：</p><p>下面的例子将仅显示第二个文档。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，skip() 方法的默认值是 0</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p>要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。</p><p>语法</p><p>sort()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().sort({KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有如下数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示的文件排序按标题降序排序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;title&quot;:-1&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果不指定排序类型，那么 sort() 方法将以升序排列文档。</p><h4 id="MongoDB索引"><a href="#MongoDB索引" class="headerlink" title="MongoDB索引"></a>MongoDB索引</h4><p>索引支持查询高效率执行。如果没有索引，MongoDB必须扫描集合中的每一个文档，然后选择那些符合查询语句的文档。若需要 mongod 来处理大量数据，扫描是非常低效的。</p><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。</p><p>要创建索引，需要使用MongoDB的ensureIndex()方法。</p><p>语法</p><p>ensureIndex()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code></p><p>这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.</p><p>例子</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">在 ensureIndex()方法，可以通过多个字段，来创建多个字段索引。</span><br><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法还接受选项列表（这是可选），其列表如下：<br><img src="/post-images/1561132706992.png" alt></p><h4 id="MongoDB-聚合"><a href="#MongoDB-聚合" class="headerlink" title="MongoDB 聚合"></a>MongoDB 聚合</h4><p>聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。 在SQL中的count(*)，使用group by 与mongodb的聚合是等效的。 对于MongoDB的聚合，使用的是aggregate()方法。</p><p>语法</p><p>aggregate()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p><p>例子：</p><p>在集合中有以下数据：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai &apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;, </span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;, </span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;https://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在从上面的集合，如果想知道每一个用户编写的教程是多少，那么使用aggregate()方法，如下图所示的列表：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Yiibai Yiibai&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>用于上述用途将等效于sql查询： select by_user, count(*) from mycol group by by_user</code></pre><p>另外，在上述例子中，我们已经使用字段by_user进行分组并计算总和，也就是by_user 出现各个次数。一个列表中可用的聚集表达式。<br>    <img src="/post-images/1561132965786.png" alt></p><h4 id="MongoDB-复制"><a href="#MongoDB-复制" class="headerlink" title="MongoDB 复制"></a>MongoDB 复制</h4><p>复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。</p><h6 id="为什么要复制？"><a href="#为什么要复制？" class="headerlink" title="为什么要复制？"></a>为什么要复制？</h6><blockquote><pre><code>为了让数据安全数据的高（24*7）可用性灾难恢复无停机维护（如备份，索引重建，压缩）读取缩放（额外的副本来读取）副本集是透明的应用</code></pre></blockquote><h5 id="MongoDB复制的工作原理"><a href="#MongoDB复制的工作原理" class="headerlink" title="MongoDB复制的工作原理"></a>MongoDB复制的工作原理</h5><p>MongoDB通过使用副本集的复制来实现。副本集是一组承载同一个数据集的mongod实例。在副本的一个节点是接收所有的写操作主节点。所有的实例，次级，应用操作从主以便它们具有相同的数据集。副本集只能有一个主节点。</p><blockquote><pre><code>副本集是一组两个或更多个节点（通常至少3节点是必需的）。在副本集一个节点是主节点和其余的节点都是次要的。所有的数据复制是从主到次节点。在自动故障转移或维护时，选建立了主要和一个新的主节点被选择。故障节点的恢复后，再次加入副本集，并可以作为一个辅助节点。</code></pre></blockquote><p>mongodb复制的典型图如下图，其中客户端应用程序总是与主节点和主节点交互，然后将数据复制到辅助节点。<br><img src="/post-images/1561133216694.png" alt><br>副本集特征</p><ul><li>N个节点的集群</li><li>任何节点可为原发/主节点</li><li>所有的写操作进入到主节点</li><li>自动故障转移</li><li>自动恢复</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.policx.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MySQL 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymysql/"/>
    <id>https://www.policx.com/2018/05/02/pymysql/</id>
    <published>2018-05-02T03:14:27.000Z</published>
    <updated>2019-07-13T08:15:01.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是-PyMySQL？"><a href="#什么是-PyMySQL？" class="headerlink" title="什么是 PyMySQL？"></a>什么是 PyMySQL？</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><a id="more"></a> <h2 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h2><p>在文件中引入模块</p><p><code>import pymysql</code></p><h3 id="1-Connection对象"><a href="#1-Connection对象" class="headerlink" title="1.Connection对象"></a>1.Connection对象</h3><p>•  用于建立与数据库的连接<br>•  创建对象：调用connect()方法<br>conn=connect(参数列表)<br>•  参数host：连接的mysql主机，如果本机是’localhost’<br>•  参数port：连接的mysql主机的端口，默认是3306<br>•  参数db：数据库的名称<br>•  参数user：连接的用户名<br>•  参数password：连接的密码<br>•  参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</p><h3 id="2-对象的方法"><a href="#2-对象的方法" class="headerlink" title="2.对象的方法"></a>2.对象的方法</h3><p>•  close()关闭连接<br>•  commit()事务，所以需要提交才会生效<br>•  rollback()事务，放弃之前的操作<br>•  cursor()返回Cursor对象，用于执行sql语句并获得结果</p><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><p>•  执行sql语句<br>•  创建对象：调用Connection对象的cursor()方法<br>cursor1=conn.cursor()</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>•  close()关闭<br>•  execute(operation [, parameters ])执行语句，返回受影响的行数<br>•  fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组<br>•  next()执行查询语句时，获取当前行的下一行<br>•  fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回<br>•  scroll(value[,mode])将行指针移动到某个位置<br>•  mode表示移动的方式<br>•  mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动。相对的<br>•  mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0，绝对的。</p><h4 id="举个例子便于理解"><a href="#举个例子便于理解" class="headerlink" title="举个例子便于理解"></a>举个例子便于理解</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 导入python操作mysql的模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> pymysql</span><br><span class="line"><span class="hljs-comment"># 获取连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="hljs-string">'127.0.0.1'</span>, user=<span class="hljs-string">'root'</span>, password=<span class="hljs-string">'123456'</span>, database=<span class="hljs-string">'python01'</span>, port=<span class="hljs-number">3306</span>, charset=<span class="hljs-string">'utf8'</span>)</span><br><span class="line"><span class="hljs-comment"># 获取执行工具</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="hljs-comment"># sql语句,增删改</span></span><br><span class="line"><span class="hljs-comment">#sql = 'select birthday from t_user'</span></span><br><span class="line">sql = <span class="hljs-string">'select id,name,pwd,birthday from t_user'</span></span><br><span class="line"><span class="hljs-comment"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span></span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(<span class="hljs-string">'查询的结果有%s条数据'</span>%count)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取第一行</span></span><br><span class="line">dateOne = cur.fetchone()</span><br><span class="line">print(dateOne)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向上移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向下移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'absolute'</span>)   绝对的，这里指的是第一行</span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'relative'</span>)   相对的</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取所有行的数据</span></span><br><span class="line">dataAll = cur.fetchall()</span><br><span class="line">print(dataAll)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">     print(temp)</span><br><span class="line">     print(dataAll[<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])      <span class="hljs-comment">#dataAll[-1]得到的是一个用户所有的信息，dataAll[-1][2]获取最后一个人的密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> cur:</span><br><span class="line">     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-string">'id:%s,name:%s,pwd:%s,birthday:%s'</span></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">    print(s%(temp[<span class="hljs-number">0</span>],temp[<span class="hljs-number">1</span>],temp[<span class="hljs-number">2</span>],temp[<span class="hljs-number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-对象的属性"><a href="#3-对象的属性" class="headerlink" title="3.对象的属性"></a>3.对象的属性</h3><p>•  rowcount只读属性，表示最近一次execute()执行后受影响的行数<br>•  connection获得当前连接对象</p><h3 id="2-增删改查-CRUD"><a href="#2-增删改查-CRUD" class="headerlink" title="2.增删改查(CRUD)"></a>2.增删改查(CRUD)</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>•  创建testInsert.py文件，向学生表中插入一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;insert into students(sname) values(&apos;张良&apos;)&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p>•  创建testUpdate.py文件，修改学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;update students set sname=&apos;刘邦&apos; where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>•  创建testDelete.py文件，删除学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8 import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;delete from students where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>•  创建testSelectOne.py文件，查询一条学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Pymysql try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>•  创建testSelectMany.py文件，查询全部学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf8 import Pymysql</span><br><span class="line">try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="实例一：参数"><a href="#实例一：参数" class="headerlink" title="实例一：参数"></a>实例一：参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改，sql注入</span><br><span class="line">sql = &apos;insert into t_user(name,pwd,birthday) values(%s,%s,%s)&apos;</span><br><span class="line"># 参数列表</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = input(&apos;输入生日:&apos;)     # 2017年10月01日--&gt;日期struct_time(---&gt;2017-10-01)</span><br><span class="line">birthday = time.strptime(birthday,&apos;%Y年%m月%d日&apos;)      #这里我们就用到了时间与字符串的相互转换(详情见MySQL高级)</span><br><span class="line"></span><br><span class="line">params = [name,pwd,birthday]</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql,params)</span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">print(&apos;受影响的行数:%s&apos;%count)</span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例二：抛出异常"><a href="#实例二：抛出异常" class="headerlink" title="实例二：抛出异常"></a>实例二：抛出异常</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    conn = None</span><br><span class="line">    cur = None</span><br><span class="line">    # 获取连接对象</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">                           user=&apos;root&apos;,</span><br><span class="line">                           password=&apos;123456&apos;,</span><br><span class="line">                           database=&apos;python01&apos;,</span><br><span class="line">                           port=3306,</span><br><span class="line">                           charset=&apos;utf8&apos;)</span><br><span class="line">    # 模拟异常</span><br><span class="line">    # a = 1 / 0</span><br><span class="line">    # 获取执行工具</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    # sql语句,增删改</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd,birthday) values(&quot;小伊&quot;,&quot;123456&quot;,str_to_date(&quot;2017年10月20日&quot;,&quot;%Y年%m月%d日&quot;))&apos;</span><br><span class="line">    # 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">    count = cur.execute(sql)</span><br><span class="line">    # 提交</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(&apos;受影响的行数:%s&apos; % count)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    # 打印异常信息，测试时候使用，项目上线，去掉</span><br><span class="line">    print(str(ex))</span><br><span class="line">    # 将异常继续抛出</span><br><span class="line">    # raise</span><br><span class="line">finally:</span><br><span class="line">    if cur != None:</span><br><span class="line">        cur.close()</span><br><span class="line">    if conn != None:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例三："><a href="#实例三：" class="headerlink" title="实例三："></a>实例三：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改</span><br><span class="line">#sql = &apos;select birthday from t_user&apos;</span><br><span class="line">sql = &apos;select id,name,pwd,birthday from t_user&apos;</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(&apos;查询的结果有%s条数据&apos;%count)</span><br><span class="line"></span><br><span class="line">#获取第一行</span><br><span class="line"># dateOne = cur.fetchone()</span><br><span class="line"># print(dateOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for temp in cur:</span><br><span class="line">#     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;id:%s,name:%s,pwd:%s,birthday:%s&apos;</span><br><span class="line">for temp in dataAll:</span><br><span class="line">    print(s%(temp[0],temp[1],temp[2],temp[3]))</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h3><p>这个库的名字：mySqlHelper</p><p> python操作mysql进行增删改查的封装</p><pre><code>1、增删改，代码类似2、查询代码分析1、获取连接对象2、sql语句不同，参数不同3、获取执行对象    增删改    查询        1、fetchone        2、fetchall4、处理结果5、关闭</code></pre><h4 id="面向对象-建立类，封装属性和函数"><a href="#面向对象-建立类，封装属性和函数" class="headerlink" title="面向对象  建立类，封装属性和函数"></a>面向对象  建立类，封装属性和函数</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">class MysqlHelper:</span><br><span class="line">    &apos;&apos;&apos;python操作mysql的增删改查的封装&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, host, user, password, database, port=3306, charset=&apos;utf8&apos;):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化参数</span><br><span class="line">        :param host:        主机</span><br><span class="line">        :param user:        用户名</span><br><span class="line">        :param password:    密码</span><br><span class="line">        :param database:    数据库</span><br><span class="line">        :param port:        端口号，默认是3306</span><br><span class="line">        :param charset:     编码，默认是utf8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        获取连接对象和执行对象</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.conn = pymysql.connect(host=self.host,</span><br><span class="line">                                    user=self.user,</span><br><span class="line">                                    password=self.password,</span><br><span class="line">                                    database=self.database,</span><br><span class="line">                                    port=self.port,</span><br><span class="line">                                    charset=self.charset)</span><br><span class="line"></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    def fetchone(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数元组，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataOne = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataOne = self.cur.fetchone()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataOne</span><br><span class="line"></span><br><span class="line">    def fetchall(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数列表，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataall = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataall = self.cur.fetchall()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataall</span><br><span class="line"></span><br><span class="line">    def __item(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行增删改</span><br><span class="line">        :param sql:           sql语句</span><br><span class="line">        :param params:        sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:              受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        count = 0</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行修改</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def insert(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行新增</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def delete(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行删除</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        关闭执行工具和连接对象</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if self.cur != None:</span><br><span class="line">            self.cur.close()</span><br><span class="line">        if self.conn != None:</span><br><span class="line">            self.conn.close()</span><br></pre></td></tr></table></figure><h4 id="1-测试查询多条数据"><a href="#1-测试查询多条数据" class="headerlink" title="1.测试查询多条数据"></a>1.测试查询多条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where name = %s and id &gt; %s&apos;</span><br><span class="line"># params</span><br><span class="line">params = [&apos;小茗&apos;,1]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchall(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    for temp in data:</span><br><span class="line">        print(temp)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br><span class="line"></span><br><span class="line">helper.close()</span><br></pre></td></tr></table></figure><h4 id="2-测试查询一条数据"><a href="#2-测试查询一条数据" class="headerlink" title="2.测试查询一条数据"></a>2.测试查询一条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where id = %s&apos;</span><br><span class="line">#sql = &apos;select * from t_user where id = 1&apos;</span><br><span class="line"># params</span><br><span class="line">params = [2]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchone(sql, params)</span><br><span class="line">#data = helper.fetchone(sql)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    print(data)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br></pre></td></tr></table></figure><h4 id="3-测试增删改"><a href="#3-测试增删改" class="headerlink" title="3.测试增删改"></a>3.测试增删改</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;update t_user set name =%s,pwd=%s,birthday=%s where id=%s&apos;</span><br><span class="line"># params</span><br><span class="line">id = input(&apos;输入编号:&apos;)</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = time.strptime(input(&apos;输入生日:&apos;), &apos;%Y年%m月%d日&apos;)</span><br><span class="line">params = [name, pwd, birthday,id]</span><br><span class="line"># 执行</span><br><span class="line">count = helper.update(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if count:</span><br><span class="line">    print(&apos;操作成功.&apos;)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;操作失败.&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-登录和注册"><a href="#4-登录和注册" class="headerlink" title="4.登录和注册"></a>4.登录和注册</h4><p>登录和注册的时候需要对密码进行加密</p><p>注意：</p><p>•  需要对密码进行加密<br>•  如果使用md5加密，则密码包含32个字符<br>•  如果使用sha1加密，则密码包含40个字符，这里使用这种方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table userinfos(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    uname varchar(20),</span><br><span class="line">    upwd char(40),</span><br><span class="line">    isdelete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">ret = doPwd(&apos;123&apos;)</span><br><span class="line">print(ret)</span><br><span class="line">结果：40bd001563085fc35165329ea1ff5c5ecbdbbeef</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">-- 插入如下数据，用户名为123,密码为123,这是sha1加密后的值</span><br><span class="line"></span><br><span class="line">insert into userinfos </span><br><span class="line">values(1,&apos;123&apos;,&apos;40bd001563085fc35165329ea1ff5c5ecbdbbeef&apos;,0);</span><br></pre></td></tr></table></figure><h4 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from mysqlHelper import MysqlHelper</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    &apos;&apos;&apos;登录&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    #加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;select * from t_user where name=%s and pwd=%s&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    data = helper.fetchone(sql, params)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;登录成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;登录失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doPwd(pwd):</span><br><span class="line">    &apos;&apos;&apos;sha1编码&apos;&apos;&apos;</span><br><span class="line">    mysha1 = hashlib.sha1()</span><br><span class="line">    mysha1.update(pwd.encode(&apos;utf-8&apos;))</span><br><span class="line">    pwd = mysha1.hexdigest()</span><br><span class="line">    return pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    &apos;&apos;&apos;注册&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    # 加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd) values(%s,%s)&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    count = helper.insert(sql, params)</span><br><span class="line">    if count:</span><br><span class="line">        print(&apos;操作成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;操作失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #register()</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PyMySQL？&quot;&gt;&lt;a href=&quot;#什么是-PyMySQL？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PyMySQL？&quot;&gt;&lt;/a&gt;什么是 PyMySQL？&lt;/h2&gt;&lt;p&gt;PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。&lt;/p&gt;
&lt;p&gt;PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django笔记</title>
    <link href="https://www.policx.com/2018/04/18/django-bi-ji/"/>
    <id>https://www.policx.com/2018/04/18/django-bi-ji/</id>
    <published>2018-04-17T17:00:16.000Z</published>
    <updated>2019-07-12T10:07:09.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p><a id="more"></a><h2 id="一-版本选择"><a href="#一-版本选择" class="headerlink" title="一. 版本选择"></a>一. 版本选择</h2><p>Django 2.0.x 支持 Python 3.4, 3.5 和 3.6 （注意，不再支持 Python 2）   </p><h2 id="二-安装-Django"><a href="#二-安装-Django" class="headerlink" title="二. 安装 Django"></a><strong>二. 安装 Django</strong></h2><p><strong>2.1. 用 pip 来安装</strong></p><p><strong>2.1.1 需要先安装pip</strong></p><p>(1). Linux, Mac OSX, Windows 下都可用 get-pip.py 来安装<br>pip：<a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/installing.html</a>  </p><p>或者直接下载：<a href="https://bootstrap.pypa.io/get-pip.py" title="get-pip.py" target="_blank" rel="noopener">get-pip.py</a> 然后运行在终端运行 <strong>python get-pip.py 就可以安装 pip。</strong></p><p>Note: 也可以下载 pip 源码包，运行 <strong>python setup.py install</strong> 进行安装 </p><p><strong>2.1.2 利用 pip 安装 Django</strong></p><p><code>（sudo) pip install Django    或者(sudo) pip install Django==1.8.16 或者 pip install Django==1.11.8</code>    </p><p>如果想升级 pip 可以用： </p><pre><code>(sudo) pip install --upgrade pip</code></pre><p><strong>2.2. 下载源码安装</strong>  </p><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">https://www.djangoproject.com/download/</a></p><p>如果是源码包, 比如 django-1.11.8.tar.gz </p><p><strong>2.2.1 Linux 或 Mac 下</strong></p><pre><code>tar -xvf django-1.11.8.tar.gzcd django-1.11.8(sudo) python setup.py install</code></pre><h2 id="三-检查是否安装成功"><a href="#三-检查是否安装成功" class="headerlink" title="三. 检查是否安装成功"></a><strong>三. 检查是否安装成功</strong></h2><p>终端上输入 python ,点击 Enter，进行 python 环境</p><pre><code>&gt;&gt;&gt; import django&gt;&gt;&gt; django.VERSION(1, 11, 8, &apos;final&apos;, 0)&gt;&gt;&gt; &gt;&gt;&gt; django.get_version()&apos;1.11.8&apos;</code></pre><p>如果运行后看到版本号，就证明安装成功了！ </p><h2 id="四-搭建多个互不干扰的开发环境（可选）"><a href="#四-搭建多个互不干扰的开发环境（可选）" class="headerlink" title="四. 搭建多个互不干扰的开发环境（可选）"></a><strong>四. 搭建多个互不干扰的开发环境（可选）</strong></h2><p>我们有的时候会发现，一个电脑上有多个项目，一个依赖 Django 1.8，另一个比较旧的项目又要用 Django 1.5，这时候怎么办呢？ </p><p>我们需要一个依赖包管理的工具来处理不同的环境。 </p><h3 id="4-1-虚拟环境依赖安装"><a href="#4-1-虚拟环境依赖安装" class="headerlink" title="4.1 虚拟环境依赖安装"></a>4.1 虚拟环境依赖安装</h3><p>开发会用 virtualenv 来管理多个开发环境 </p><p><strong>Linux/MacOS 下</strong></p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了 </p><pre><code># 安装:(sudo) pip install virtualenv virtualenvwrapper</code></pre><p>修改~/.bash_profile或其它环境变量相关文件(如 .bashrc 或用 ZSH 之后的 .zshrc)，添加以下语句  </p><pre><code>export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/workspacesource /usr/local/bin/virtualenvwrapper.sh</code></pre><p>修改后使之立即生效(也可以重启终端使之生效)： </p><pre><code>source ~/.bash_profile</code></pre><h3 id="4-2-虚拟环境使用方法："><a href="#4-2-虚拟环境使用方法：" class="headerlink" title="4.2 虚拟环境使用方法："></a><strong>4.2 虚拟环境使用方法：</strong></h3><p><strong>mkvirtualenv zqxt：创建运行环境zqxt</strong></p><p><strong>workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境</strong></p><p><strong>deactivate</strong>: 退出终端环境</p><p><strong>其它的：</strong></p><p><strong>rmvirtualenv</strong> ENV：删除运行环境ENV </p><p><strong>mkproject</strong> mic：创建mic项目和运行环境mic </p><p><strong>mktmpenv</strong>：创建临时运行环境 </p><p><strong>lsvirtualenv</strong>: 列出可用的运行环境 </p><p><strong>lssitepackages</strong>: 列出当前环境安装了的包 </p><p>创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django部署——uwsgi+Nginx</title>
    <link href="https://www.policx.com/2018/04/17/django/"/>
    <id>https://www.policx.com/2018/04/17/django/</id>
    <published>2018-04-17T09:42:04.000Z</published>
    <updated>2019-07-13T08:10:51.809Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!</p><a id="more"></a><p><img src="/post-images/1560768371650.png" alt><br>环境：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3.6</span><br><span class="line">centos 7</span><br><span class="line">Django1.11</span><br></pre></td></tr></table></figure><h2 id="1、本地跑起来Django"><a href="#1、本地跑起来Django" class="headerlink" title="1、本地跑起来Django"></a>1、本地跑起来Django</h2><p>这里不讲Django项目实施过程，假设你已经写了一个Django项目，并且在本地127.0.0.1:8000能够跑起来。喏，给你个参考，项目大概长这样：<br><img src="/post-images/1560764670814.png" alt></p><ul><li>kindle目录为我创建的Django App</li></ul><h2 id="2、修改项目配置"><a href="#2、修改项目配置" class="headerlink" title="2、修改项目配置"></a>2、修改项目配置</h2><p>也就是项目目录下的settings.py文件，主要强调几个地方：</p><p>①关闭DEBUG模式：<br><img src="/post-images/1560764736238.png" alt><br>②修改ALLOWED_HOSTS：<br><img src="/post-images/1560764863424.png" alt><br>③配置静态文件存放路径：<br><img src="/post-images/1560764833026.png" alt></p><p>修改好配置之后执行:<br><code>python manage.py collectstatic</code><br>将项目用到的静态文件复制到项目根目录下的static文件中<br><img src="/post-images/1560764930146.png" alt></p><h2 id="3、安装uwsgi和Nginx"><a href="#3、安装uwsgi和Nginx" class="headerlink" title="3、安装uwsgi和Nginx"></a>3、安装uwsgi和Nginx</h2><p>这个没什么说的。。。在自己的云服务器上装好这两个工具<br>安装好uwsgi后最好验证一下，验证方法：<br>创建一个test.py文件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)])</span><br><span class="line">    return [b&apos;Hello world!&apos;]    #python3</span><br><span class="line">    # return [&apos;Hello world!&apos;]    #python2</span><br></pre></td></tr></table></figure><p>启动uwsgi服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --wsgi-file test.py</span><br></pre></td></tr></table></figure><p>如果可以正常启动而不报错那就应该没问题，不放心的话再在终端验证一下：<br><code>wget https://127.0.0.1:8000</code><br>看一下能否正确获取内容</p><h2 id="4、配置项目的uwsgi"><a href="#4、配置项目的uwsgi" class="headerlink" title="4、配置项目的uwsgi"></a>4、配置项目的uwsgi</h2><p>在项目所在文件夹下创建uwsgi.ini配置文件，也就是这里:<br><img src="/post-images/1560765049955.png" alt><br>在uwsgi.ini里进行如下配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># Django-related settings</span><br><span class="line"> </span><br><span class="line"># 这里的端口可以根据自己需要设定</span><br><span class="line">socket = 127.0.0.1:8001        </span><br><span class="line"> </span><br><span class="line"># the base directory (full path)</span><br><span class="line"># 这个是Django项目的根目录，也就是包含App的那个目录，仔细对照上图</span><br><span class="line">chdir           = /home/python/book2kindle</span><br><span class="line"> </span><br><span class="line"># Django s wsgi file</span><br><span class="line"># 这里是项目名(不是App名).wsgi</span><br><span class="line">module          = book2kindle.wsgi</span><br><span class="line"> </span><br><span class="line"># process-related settings</span><br><span class="line"># master</span><br><span class="line">master          = true</span><br><span class="line"> </span><br><span class="line"># maximum number of worker processes</span><br><span class="line">processes       = 32</span><br><span class="line"> </span><br><span class="line"># ... with appropriate permissions - may be needed</span><br><span class="line"># chmod-socket    = 664</span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum          = true</span><br><span class="line"> </span><br><span class="line">plugin python = true</span><br><span class="line"> </span><br><span class="line"># 这个是项目的虚拟python环境，如果没用虚拟环境，可以不设定</span><br><span class="line">home = /home/python/book2kindle_env</span><br></pre></td></tr></table></figure><h2 id="5、配置项目的nginx"><a href="#5、配置项目的nginx" class="headerlink" title="5、配置项目的nginx"></a>5、配置项目的nginx</h2><p>找到nginx的配置文件夹，centos7的nginx配置文件在/etc/nginx下，该路径下有一个nginx.conf总配置文件，还有两个文件夹./conf.d、./default.d，我们将nginx.conf复制一份到conf.d文件夹下，命名为nginx.conf（或者项目名.conf）进行如下修改（根据中文注释进行相应配置即可）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream django &#123;</span><br><span class="line">        # 注意这里的server要和uwsgi.ini配置文件中的socket保持一致</span><br><span class="line">        server 127.0.0.1:8002; # for a web port socket</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  xxx.com;  # 这里填自己的域名或者服务器的ip（决定你今后访问网站的方式）</span><br><span class="line">        charset      utf-8;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        location / &#123;</span><br><span class="line">        root        /home/python/book2kindle/kindle;  # 这是Django App的路径</span><br><span class="line">            uwsgi_pass  django;</span><br><span class="line">            include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">        &#125;</span><br><span class="line">        location /static &#123;</span><br><span class="line">            # Django项目静态文件的路径</span><br><span class="line">            alias /home/python/book2kindle/static; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、启动uwsgi和nginx"><a href="#6、启动uwsgi和nginx" class="headerlink" title="6、启动uwsgi和nginx"></a>6、启动uwsgi和nginx</h2><p>进入uwsgi.ini文件夹下执行：<br><code>uwsgi --ini uwsgi.ini</code><br>在终端执行：<br><code>service nginx restart</code><br>然后就可以根据域名（前提是要将域名解析到服务器ip地址）或者服务器ip来访问网站了！</p><p>OK，完事！就是这么简单！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
</feed>
