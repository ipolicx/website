<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-07-20T16:59:24.705Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Python札记》08_集合set</title>
    <link href="https://www.policx.com/python3-notes08/"/>
    <id>https://www.policx.com/python3-notes08/</id>
    <published>2019-07-20T06:10:00.000Z</published>
    <updated>2019-07-20T16:59:24.705Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>集合 <code>set</code>是 <code>Python</code>中的另一种数据类型，用 <code>{ }</code>括起来表示，里面是单个的对象，不是键值对。集合的特点是里面的元素 <strong>有的可变，有的不可变</strong>；元素 <strong>无次序</strong>，元素 <strong>不可重复</strong>。集合 <code>set</code>可以说是 <strong>列表和字典的杂合</strong>。</p></blockquote><a id="more"></a><ul><li>元素无序</li><li>元素是不可变，可哈希的</li><li>自动去重</li><li>集合没有索引，不属于序列</li><li>空集合只能通过 <code>set()</code>方法进行创建</li></ul><p>创建集合有两种方式：</p><ul><li>通过 <code>set()</code>函数创建</li><li>通过 <code>{ }</code>直接进行创建</li><li>创建空集合一定要用 <code>set</code>方法，否则 <code>Python</code>会认为是字典</li></ul><p><strong>set创建</strong><br>如果有重复的元素会自动进行过滤，一种高效的 <strong>去重</strong>方式：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = set(&quot;peter&quot;)</span><br><span class="line">print(s1)</span><br><span class="line"></span><br><span class="line">&#123;&apos;p&apos;, &apos;t&apos;, &apos;e&apos;, &apos;r&apos;&#125;</span><br></pre></td></tr></table></figure><p><strong>{ }创建</strong><br>同样的会自动去重创建，由于 <code>{ }</code>已经使用在字典中，不建议使用</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s2 = &#123;&quot;p&quot;, &quot;e&quot;, &quot;t&quot;, &quot;e&quot;, &quot;r&quot;&#125;</span><br><span class="line">print(s2)</span><br><span class="line"></span><br><span class="line">&#123;&apos;t&apos;, &apos;r&apos;, &apos;e&apos;, &apos;p&apos;&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>set</code>创建的集合都是可变，不可哈希的集合；通过 <code>frozenset</code>创建的是不可变的集合</p><p>哈希 <code>hashable</code>：不可变的，例如字符串、整数型、布尔值等， <strong>字典的键必须是不可变的</strong><br>不可哈希 <code>unhashable</code>：可变的，例如列表、字典等，利用 <strong>set()创建的集合是可变集合</strong></p><h3 id="集合set的方法"><a href="#集合set的方法" class="headerlink" title="集合set的方法"></a>集合set的方法</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>add()</td><td>给一个集合增加元素，参数只能有一个：</td></tr><tr><td>update</td><td>用原有集合自身个其他东西构成的新集合，来更新原来的集合</td></tr><tr><td>pop</td><td><strong>随机删除</strong>一个元素，<strong>返回元素本身</strong>；不能指定参数，不能指定删除某个元素</td></tr><tr><td>remove(obj)</td><td>obj必须是集合set中的元素，否则报错；<strong>没有返回值</strong></td></tr><tr><td>discard(obj)</td><td>obj如果在集合中就执行删除，否则不进行任何操作，与remove不同</td></tr><tr><td>clear()</td><td>删除所有元素，bool(set)为False</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># add</span></span><br><span class="line">s3 = set()</span><br><span class="line">s3.add(<span class="hljs-string">"peter"</span>)     <span class="hljs-comment"># 一次只能增加一个元素</span></span><br><span class="line">print(s3)</span><br><span class="line">s4 = set(<span class="hljs-string">"python"</span>)</span><br><span class="line">s4.add(<span class="hljs-string">"xiaoming"</span>)</span><br><span class="line"><span class="hljs-comment"># s4.add('[1, 2, 3]')    报错：列表是可变，不可哈希的；但集合中的元素必须是不可变的，可哈希的</span></span><br><span class="line">print(s4)</span><br><span class="line"></span><br><span class="line">&#123;<span class="hljs-string">'peter'</span>&#125;</span><br><span class="line">&#123;<span class="hljs-string">'h'</span>, <span class="hljs-string">'p'</span>, <span class="hljs-string">'o'</span>, <span class="hljs-string">'t'</span>, <span class="hljs-string">'y'</span>, <span class="hljs-string">'xiaoming'</span>, <span class="hljs-string">'n'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># update</span></span><br><span class="line">s3.update(s4)    <span class="hljs-comment">#  将s4中的元素合并到s3中</span></span><br><span class="line">print(s3)</span><br><span class="line"></span><br><span class="line">&#123;<span class="hljs-string">'n'</span>, <span class="hljs-string">'xiaoming'</span>, <span class="hljs-string">'peter'</span>, <span class="hljs-string">'y'</span>, <span class="hljs-string">'p'</span>, <span class="hljs-string">'h'</span>, <span class="hljs-string">'t'</span>, <span class="hljs-string">'o'</span>&#125;</span><br><span class="line"></span><br><span class="line">s4.update(<span class="hljs-string">"goo"</span>)</span><br><span class="line">print(s4)</span><br><span class="line"></span><br><span class="line">&#123;<span class="hljs-string">'xiaoming'</span>, <span class="hljs-string">'y'</span>, <span class="hljs-string">'t'</span>, <span class="hljs-string">'p'</span>, <span class="hljs-string">'g'</span>, <span class="hljs-string">'h'</span>, <span class="hljs-string">'n'</span>, <span class="hljs-string">'o'</span>&#125;   <span class="hljs-comment"># 注意结果的去重</span></span><br><span class="line"></span><br><span class="line">s4.update((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))</span><br><span class="line">print(s4)</span><br><span class="line"></span><br><span class="line">&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'t'</span>, <span class="hljs-string">'g'</span>, <span class="hljs-string">'xiaoming'</span>, <span class="hljs-string">'p'</span>, <span class="hljs-string">'n'</span>, <span class="hljs-string">'h'</span>, <span class="hljs-string">'y'</span>, <span class="hljs-string">'o'</span>&#125;</span><br></pre></td></tr></table></figure><p>集合运算</p><ul><li><p>元素和集合关系：判断元素是否在集合中：in</p></li><li><p>集合与集合的关系：</p></li></ul><ol><li><p>两个集合是否相等 ==</p></li><li><p>超集B.issuperset(A)、 B&gt;A和子集A.issubset(B)、A&lt;B关系</p></li><li><p>并集：A.union(B)或者使用|：得到新的集合，原来的集合不变</p></li><li><p>交集：A.intersection(B)或者使用&amp;</p></li><li><p>差集：A.difference(B)或者A-B，(A中存在，B中不存在的元素)</p></li><li><p>对称差集：A.symmetric_difference(B)，（A，B的并集除去A，B的交集）</p></li></ol><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.jianshu.com/c/ab55c73e0037?utm_source=desktop&utm_medium=notes-included-collection" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/20/5d32f16d5b0bf92604.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;集合 &lt;code&gt;set&lt;/code&gt;是 &lt;code&gt;Python&lt;/code&gt;中的另一种数据类型，用 &lt;code&gt;{ }&lt;/code&gt;括起来表示，里面是单个的对象，不是键值对。集合的特点是里面的元素 &lt;strong&gt;有的可变，有的不可变&lt;/strong&gt;；元素 &lt;strong&gt;无次序&lt;/strong&gt;，元素 &lt;strong&gt;不可重复&lt;/strong&gt;。集合 &lt;code&gt;set&lt;/code&gt;可以说是 &lt;strong&gt;列表和字典的杂合&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《Python札记》7_深入理解赋值和深、浅拷贝(更新)</title>
    <link href="https://www.policx.com/python3-notes07/"/>
    <id>https://www.policx.com/python3-notes07/</id>
    <published>2019-07-20T02:38:00.000Z</published>
    <updated>2019-07-20T16:59:05.313Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>Python中有一个很特殊的现象： <code>深浅拷贝</code>，看到一些面经里面很多面试都会考到这个知识点，将笔者自己的理解整理如下</p></blockquote><a id="more"></a><h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><ul><li>浅拷贝：copy()，拷贝第一层</li><li>深拷贝：deepcopy()，拷贝所有数据（可变）； <strong>存在嵌套时</strong>，才和浅拷贝有区别</li></ul><p>对于字符串 <code>str</code>、整数型 <code>int</code>、布尔值 <code>bool</code>三种不可变的对象类型，深浅拷贝是一样的，直接在内存中直接开辟空间进行存储。</p><p>对于列表list、集合set、字典dict：</p><p><strong>单层列表</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">V1 = [1, 2, 3]</span><br><span class="line">V2 = copy.copy(V1)</span><br><span class="line">V3 = copy.deepcopy(V1)   # 找到所有的可变数据类型进行拷贝；V1中只有列表是可变，其中的int类型是不可变的；所以V2和V3相同</span><br><span class="line">print(V2, V3)</span><br><span class="line"></span><br><span class="line">[1, 2, 3] [1, 2, 3]</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">V1 = &quot;xiaoming&quot;</span><br><span class="line">V2 = copy.copy(V1)</span><br><span class="line">print(id(V1), id(V2))    # 内存地址本应该不同，但结果中却是相同，是由于小数据池的缘故；因为列表是不可变的对象类型</span><br><span class="line">V3 = copy.deepcopy(V1)   </span><br><span class="line">print(id(V1), id(V3))    # 原理同上</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">V1 = [1, 2, [3, 4]]</span><br><span class="line">V2 = copy.copy(V1)</span><br><span class="line">print(id(V1), id(V2))    # 内存地址不同，列表是可变数据类型</span><br><span class="line">V3 = copy.deepcopy(V1)   # 存在嵌套：浅拷贝只拷贝第一层，深拷贝里面的所有数据进行拷贝</span><br><span class="line">print(id(V1), id(V3))    # 内存地址不同</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">V1 = [1, 2, [3, 4]]</span><br><span class="line">V2 = copy.copy(V1)</span><br><span class="line">print(id(V1), id(V2))    # 浅拷贝只拷贝第一层，内存地址不同；</span><br><span class="line">print(id(V1[2]), id(V2[2]))  # 第二层的地址是相同的</span><br><span class="line">V3 = copy.deepcopy(V1)   # 存在嵌套：浅拷贝只拷贝第一层，深拷贝里面的所有数据进行拷贝</span><br><span class="line">print(id(V1), id(V3))    # 内存地址不同</span><br><span class="line">print(id(V1[2]), id(V3[2]))  # 在深拷贝中，第二层的地址也是不同的</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.jianshu.com/c/ab55c73e0037?utm_source=desktop&utm_medium=notes-included-collection" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/20/5d32f16d5b0bf92604.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python中有一个很特殊的现象： &lt;code&gt;深浅拷贝&lt;/code&gt;，看到一些面经里面很多面试都会考到这个知识点，将笔者自己的理解整理如下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>《Python札记》6_字典</title>
    <link href="https://www.policx.com/python3-notes06/"/>
    <id>https://www.policx.com/python3-notes06/</id>
    <published>2019-07-20T01:00:00.000Z</published>
    <updated>2019-07-20T16:57:48.733Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>Python中存在一种叫做字典 <code>dictionary</code>的对象类型，用dict表示，字典中的元素用{ }括起来， <strong>字典是无序的</strong>。字典中的元素由键值对组成，即 <code>key-value</code>的形式。 <strong>注意：</strong>字典中的键必须是不可变的数据类型，键可以是任意数据类型。字典具有如下的特点：</p></blockquote><a id="more"></a><ul><li>在字典中， <strong>键是唯一的，不能重复</strong>；值对应于键，能够重复</li><li>键值之间用 英文冒号<code>:</code>隔开</li><li>每一对键值对之间用 英文逗号<code>,</code>隔开</li><li>字典是可以进行 <strong>原地修改</strong>的<br>元组不可变，可哈希 <code>hashable</code>，能够做字典中的键；列表是可变的，不可哈希 <code>unhashable</code>，能够做字典中的值</li><li>在字典中通过键直接得到值，比列表中从头开读取数据要快的多； <em>*检索快捷、高效、数据越大越明显</em></li></ul><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 创建字典</span></span><br><span class="line">mydict = &#123;&#125;   <span class="hljs-comment"># 创建空字典；空字典在实际编程中很有用处</span></span><br><span class="line">print(mydict)</span><br><span class="line">print(id(mydict))</span><br><span class="line">mydict[<span class="hljs-string">"name"</span>] = <span class="hljs-string">"Peter"</span></span><br><span class="line">print(id(mydict))     <span class="hljs-comment"># 修改之后，内存中id不变，说明字典是原地修改的，可变的</span></span><br><span class="line"></span><br><span class="line">person = &#123;<span class="hljs-string">"name"</span>: <span class="hljs-string">"xiaoming"</span>, <span class="hljs-string">"age"</span>:<span class="hljs-number">18</span>, <span class="hljs-string">"city"</span>: <span class="hljs-string">"shenzhen"</span>&#125;</span><br><span class="line">print(person)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 通过元组构建字典</span></span><br><span class="line">name = ([<span class="hljs-string">"python"</span>, <span class="hljs-string">"language"</span>], [<span class="hljs-string">"shenzhen"</span>, <span class="hljs-string">"city"</span>])</span><br><span class="line">dic_tup = dict(name)</span><br><span class="line">print(dic_tup)</span><br><span class="line">name1 = dict(name=<span class="hljs-string">"xiaoming"</span>, language=<span class="hljs-string">"python"</span>, city=<span class="hljs-string">"shenzhen"</span>)</span><br><span class="line">print(name1)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 通过fromkeys创建：只有当字典中的值相同时，才能使用该方法</span></span><br><span class="line">website = &#123;&#125;.fromkeys((<span class="hljs-string">"first"</span>, <span class="hljs-string">"second"</span>), <span class="hljs-string">"google"</span>)   <span class="hljs-comment"># 所有值的键都是google</span></span><br><span class="line">print(website)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 结果：</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="hljs-number">2543227937128</span></span><br><span class="line"><span class="hljs-number">2543227937128</span></span><br><span class="line">&#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'xiaoming'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">18</span>, <span class="hljs-string">'city'</span>: <span class="hljs-string">'shenzhen'</span>&#125;</span><br><span class="line">&#123;<span class="hljs-string">'python'</span>: <span class="hljs-string">'language'</span>, <span class="hljs-string">'shenzhen'</span>: <span class="hljs-string">'city'</span>&#125;</span><br><span class="line">&#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'xiaoming'</span>, <span class="hljs-string">'language'</span>: <span class="hljs-string">'python'</span>, <span class="hljs-string">'city'</span>: <span class="hljs-string">'shenzhen'</span>&#125;</span><br><span class="line">&#123;<span class="hljs-string">'first'</span>: <span class="hljs-string">'google'</span>, <span class="hljs-string">'second'</span>: <span class="hljs-string">'google'</span>&#125;    <span class="hljs-comment"># 使用fromkeys方法创建的字典中，值是相同的</span></span><br></pre></td></tr></table></figure><h3 id="访问字典的值"><a href="#访问字典的值" class="headerlink" title="访问字典的值"></a>访问字典的值</h3><p>字典类型对象是通过键值对进行存储数据，只要知道键 <code>key</code>，就可以访问该键的值 <code>value</code>，本质上是一种 映射关系。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="hljs-string">"name"</span>: <span class="hljs-string">"xiaoming"</span>, <span class="hljs-string">"age"</span>:<span class="hljs-number">18</span>, <span class="hljs-string">"city"</span>: <span class="hljs-string">"shenzhen"</span>&#125;</span><br><span class="line">print(person[<span class="hljs-string">"age"</span>])       <span class="hljs-comment"># 访问键age的值</span></span><br><span class="line">person[<span class="hljs-string">"sex"</span>] = <span class="hljs-string">"male"</span>    <span class="hljs-comment"># 增加键值对</span></span><br><span class="line">print(person)</span><br><span class="line">person[<span class="hljs-string">"age"</span>] = <span class="hljs-number">20</span>    <span class="hljs-comment"># 修改字典中某个键的值 </span></span><br><span class="line">print(person)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 结果</span></span><br><span class="line"><span class="hljs-number">18</span></span><br><span class="line">&#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'xiaoming'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">18</span>, <span class="hljs-string">'city'</span>: <span class="hljs-string">'shenzhen'</span>, <span class="hljs-string">'sex'</span>: <span class="hljs-string">'male'</span>&#125;</span><br><span class="line">&#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'xiaoming'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">20</span>, <span class="hljs-string">'city'</span>: <span class="hljs-string">'shenzhen'</span>, <span class="hljs-string">'sex'</span>: <span class="hljs-string">'male'</span>&#125;    <span class="hljs-comment"># age的值已经被修改成20</span></span><br></pre></td></tr></table></figure><h3 id="字典基本操作"><a href="#字典基本操作" class="headerlink" title="字典基本操作"></a>字典基本操作</h3><p>字典是可变的，能够对其中的元素进行操作，常用的基本操作有：</p><ul><li>len(d)：返回字典d中键值对的数量</li><li>d[key]：返回字典中键key的值</li><li>d[key]=value：将值value赋给字典中的键key</li><li>del d[key]：删除字典d中的键key</li><li>key in d：检查字典d中是否含有键为key的项</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">city = &#123;<span class="hljs-string">'suzhou'</span>: <span class="hljs-string">'0512'</span>, <span class="hljs-string">'beijing'</span>:<span class="hljs-string">'011'</span>, <span class="hljs-string">'shanghai'</span>:<span class="hljs-string">'012'</span>, <span class="hljs-string">'xiamen'</span>:<span class="hljs-string">'0592'</span>&#125;</span><br><span class="line">print(len(city))    <span class="hljs-comment"># 返回字典的长度</span></span><br><span class="line"></span><br><span class="line">city[<span class="hljs-string">'nanjing'</span>] = <span class="hljs-string">'025'</span>    <span class="hljs-comment"># 添加一个键值对</span></span><br><span class="line">print(city)</span><br><span class="line"></span><br><span class="line">city[<span class="hljs-string">'beijing'</span>] = <span class="hljs-string">'010'</span>    <span class="hljs-comment"># 修改某个键值对</span></span><br><span class="line">print(city)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">del</span> city[<span class="hljs-string">'shanghai'</span>]    <span class="hljs-comment"># 删除某个键值对</span></span><br><span class="line">print(city)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 结果</span></span><br><span class="line"><span class="hljs-number">4</span></span><br><span class="line">&#123;<span class="hljs-string">'suzhou'</span>: <span class="hljs-string">'0512'</span>, <span class="hljs-string">'beijing'</span>: <span class="hljs-string">'011'</span>, <span class="hljs-string">'shanghai'</span>: <span class="hljs-string">'012'</span>, <span class="hljs-string">'xiamen'</span>: <span class="hljs-string">'0592'</span>, <span class="hljs-string">'nanjing'</span>: <span class="hljs-string">'025'</span>&#125;</span><br><span class="line">&#123;<span class="hljs-string">'suzhou'</span>: <span class="hljs-string">'0512'</span>, <span class="hljs-string">'beijing'</span>: <span class="hljs-string">'010'</span>, <span class="hljs-string">'shanghai'</span>: <span class="hljs-string">'012'</span>, <span class="hljs-string">'xiamen'</span>: <span class="hljs-string">'0592'</span>, <span class="hljs-string">'nanjing'</span>: <span class="hljs-string">'025'</span>&#125;</span><br><span class="line">&#123;<span class="hljs-string">'suzhou'</span>: <span class="hljs-string">'0512'</span>, <span class="hljs-string">'beijing'</span>: <span class="hljs-string">'010'</span>, <span class="hljs-string">'xiamen'</span>: <span class="hljs-string">'0592'</span>, <span class="hljs-string">'nanjing'</span>: <span class="hljs-string">'025'</span>&#125;   <span class="hljs-comment"># shanghai键值对已经删除</span></span><br></pre></td></tr></table></figure><p><strong>小插曲</strong><br>格式化输出函数有两种情况：format(<em>args, *</em>kwargs)</p><ul><li>前者表示字符串形式，*args</li><li>后者表示字典形式，**kwargs</li></ul><p>利用字典在 <code>format()</code>函数中进行 <strong>格式化输出</strong>：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tr = <span class="hljs-string">"My name is &#123;name&#125; and I am &#123;age&#125;"</span>.format(name=<span class="hljs-string">'Peter'</span>, age=<span class="hljs-number">27</span>)</span><br><span class="line">print(str)   <span class="hljs-comment"># 通过字符串来格式化输出</span></span><br><span class="line"></span><br><span class="line">dict1 = &#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'Peter'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">27</span>&#125;</span><br><span class="line">print(<span class="hljs-string">'My name is &#123;name&#125; and I am &#123;age&#125;'</span>.format(**dict1))    <span class="hljs-comment"># 通过字典来格式化输出</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 结果</span></span><br><span class="line">My name <span class="hljs-keyword">is</span> Peter <span class="hljs-keyword">and</span> I am <span class="hljs-number">27</span></span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">city = &#123;<span class="hljs-string">'suzhou'</span>: <span class="hljs-string">'0512'</span>, <span class="hljs-string">'beijing'</span>:<span class="hljs-string">'011'</span>, <span class="hljs-string">'shanghai'</span>:<span class="hljs-string">'012'</span>, <span class="hljs-string">'xiamen'</span>:<span class="hljs-string">'0592'</span>&#125;</span><br><span class="line">print(<span class="hljs-string">"suzhou is a beautiful city, its area code is &#123;suzhou&#125; and the area code of shanghai is &#123;shanghai&#125;"</span>.format(**city))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 结果</span></span><br><span class="line">suzhou <span class="hljs-keyword">is</span> a beautiful city, its area code <span class="hljs-keyword">is</span> <span class="hljs-number">0512</span> <span class="hljs-keyword">and</span> the area code of shanghai <span class="hljs-keyword">is</span> <span class="hljs-number">012</span></span><br></pre></td></tr></table></figure><p><strong>copy：浅拷贝</strong><br>copy就是复制，但是在Python中复制并不是那么地简单。 <strong>对象有类型，变量无类型</strong>。 <strong>变量其实就是一个标签</strong>，使用id()查询对象在内存中位置。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ab = &#123;&apos;python&apos;: &apos;language&apos;, &apos;city&apos;: &apos;shenzhen&apos;, &apos;code&apos;: &apos;101&apos;&#125;</span><br><span class="line">cd = ab</span><br><span class="line">ef = ab.copy()</span><br><span class="line">print(id(ab))   </span><br><span class="line">print(id(cd))    # cd 和 ab 在内存中同一个对象贴上了不同的标签；改变cd不会影响ab</span><br><span class="line">print(id(ef))    # ef 和 ab 内存地址不同，cd在内存中开辟了另一个空间</span><br><span class="line"></span><br><span class="line">2846288332768   # ab</span><br><span class="line">2846288332768   # cd</span><br><span class="line">2846287021040   # ef</span><br></pre></td></tr></table></figure><p><strong>deepcopy：深拷贝</strong><br>要理解深拷贝需要导入copy模块来实现</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import copy</span><br><span class="line">x = &#123;&apos;language&apos;: [&apos;python&apos;, &apos;html&apos;], &apos;city&apos;: &apos;shenzhen&apos;&#125;</span><br><span class="line">y = copy.deepcopy(x)</span><br><span class="line">print(id(x))</span><br><span class="line">print(id(y))</span><br><span class="line"></span><br><span class="line"># 结果：内存地址不同</span><br><span class="line">2524451325920</span><br><span class="line">2524451324120</span><br><span class="line"></span><br><span class="line">x[&apos;language&apos;].remove(&apos;html&apos;)  #删除x中的元素不会影响y</span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"># 结果</span><br><span class="line">&#123;&apos;language&apos;: [&apos;python&apos;], &apos;city&apos;: &apos;shenzhen&apos;&#125;</span><br><span class="line">&#123;&apos;language&apos;: [&apos;python&apos;, &apos;html&apos;], &apos;city&apos;: &apos;shenzhen&apos;&#125;</span><br></pre></td></tr></table></figure><p><strong>结论：</strong>通过深拷贝，得到是两个不同的对象，内存地址不同，改变其中一个不会影响另一个。</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>clear</td><td>清空字典中元素，属于原地修改，dict.clear()只是变成了空字典，</td></tr><tr><td>del</td><td>方法是全部删除，内存就没有了 get 获取某个键key的值value：dict.get(k, [,d])键不存在返回指定的值d</td></tr><tr><td>setdefault</td><td>类似get方法，如果键不存在，返回指定的值，并在字典中增加这个键值对；如果不指定返回值，默认是None</td></tr></tbody></table><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ab = &#123;&apos;language&apos;: &apos;python&apos;, &apos;city&apos;: &apos;shenzhen&apos;, &apos;code&apos;: &apos;101&apos;&#125;</span><br><span class="line">print(ab.get(&quot;language&quot;))</span><br><span class="line">print(ab[&apos;language&apos;])     # 当键存在时，二者作用相同</span><br><span class="line">print(ab.get(&apos;number&apos;))   # 返回的是None，但是原来的字典不变</span><br><span class="line"># print(ab[&apos;number&apos;])    报错</span><br><span class="line">print(ab.get(&apos;number&apos;, &apos;1234&apos;))  # 返回值是1234，但是原来的字典不变</span><br><span class="line">print(ab.setdefault(&apos;number&apos;, &apos;1234&apos;))  # 返回值是1234，并且原来的字典添加了键值对&apos;number&apos;:&apos;1234&apos;</span><br><span class="line"></span><br><span class="line"># 执行setdefault()后的结果</span><br><span class="line">&#123;&apos;language&apos;: &apos;python&apos;, &apos;city&apos;: &apos;shenzhen&apos;, &apos;code&apos;: &apos;101&apos;, &apos;number&apos;: &apos;1234&apos;&#125;</span><br></pre></td></tr></table></figure><p>关于 <code>dict[&#39;key&#39;]、get()、setdefault()</code>方法的总结:</p><ul><li>若键存在，三者作用效果相同</li><li>若键不存在，通过 <code>dict[&#39;key&#39;]</code>访问报错，另外两种不报错，返回的是None</li><li>对于 <code>get()</code>和 <code>setdefault()</code>，如果指定了返回值，则返回该值，不指定返回值为None；</li><li>上条结论的基础上， <code>get()</code>不改变原来的字典； <code>setdefault()</code>执行之后会增加键值对。</li></ul><p>关于键值对、键、值的获取主要用到的是 <code>items()、keys()、values()</code>三种方法，三种方法得到的结果都能够用 <code>for</code>进行遍历，获取单个元素：</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>items</td><td>获取键值对</td></tr><tr><td>keys</td><td>获取所有的键</td></tr><tr><td>values</td><td>获取所有的值</td></tr></tbody></table><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&apos;language&apos;:&apos;python&apos;, &apos;city&apos;: &apos;shenzhen&apos;&#125;</span><br><span class="line">print(dic.items())</span><br><span class="line">print(type(dic.items()))</span><br><span class="line">for key, value in dic.items():</span><br><span class="line">    print(key, value)</span><br><span class="line">print(dic.keys())</span><br><span class="line">for value in dic.values():   # 用for循环进行遍历</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/21/5d33402f0c6e991413.jpg" alt></p><p>若想得到字典中的键或者值，有两种方法：</p><ul><li>通过 <code>items()</code>进行获取</li><li>通过 <code>keys()</code>或者 <code>values()</code>直接获取</li></ul><p><code>Python</code>中字典的操作函数主要有以下几种：</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>pop</td><td>以<strong>字典的键为参数</strong>，删除键值对；<strong>参数不能省略</strong>；如果键不存在，则报错参数有两个，若不存在键就返回第二个</td></tr><tr><td>popitem</td><td><strong>不用写参数</strong>；字典是无序的，popitem()<strong>随机删除一个</strong>，并且返回删除的值，<strong>返回的格式是元组</strong></td></tr><tr><td>update</td><td>更新字典：将一个字典加到另一个当中；<strong>没有返回值</strong></td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># pop</span></span><br><span class="line">a = &#123;<span class="hljs-string">"language"</span>: <span class="hljs-string">"python"</span>, <span class="hljs-string">"city"</span>: <span class="hljs-string">"shenzhen"</span>, <span class="hljs-string">"number"</span>: <span class="hljs-string">"1234"</span>&#125;</span><br><span class="line">print(a.pop(<span class="hljs-string">"number"</span>))   <span class="hljs-comment"># 返回值是这个键的值1234</span></span><br><span class="line">print(a.pop(<span class="hljs-string">"name"</span>, <span class="hljs-string">"pengcheng"</span>))   <span class="hljs-comment"># 键不存在，返回第二个参数</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-number">1234</span></span><br><span class="line">pengcheng</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># popitem</span></span><br><span class="line">b = &#123;<span class="hljs-string">"language"</span>: <span class="hljs-string">"python"</span>, <span class="hljs-string">"city"</span>: <span class="hljs-string">"shenzhen"</span>, <span class="hljs-string">"number"</span>: <span class="hljs-string">"1234"</span>&#125;</span><br><span class="line">print(b.popitem())  <span class="hljs-comment"># 随机删除，返回值是元组形式</span></span><br><span class="line">print(b.popitem())</span><br><span class="line"></span><br><span class="line">(<span class="hljs-string">'number'</span>, <span class="hljs-string">'1234'</span>)</span><br><span class="line">(<span class="hljs-string">'city'</span>, <span class="hljs-string">'shenzhen'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># update</span></span><br><span class="line">b = &#123;<span class="hljs-string">"language"</span>: <span class="hljs-string">"python"</span>, <span class="hljs-string">"city"</span>: <span class="hljs-string">"shenzhen"</span>, <span class="hljs-string">"number"</span>: <span class="hljs-string">"1234"</span>&#125;</span><br><span class="line">b1 = &#123;<span class="hljs-string">"province"</span>: <span class="hljs-string">"guangdong"</span>&#125;</span><br><span class="line">b.update(b1)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">&#123;<span class="hljs-string">'language'</span>: <span class="hljs-string">'python'</span>, <span class="hljs-string">'city'</span>: <span class="hljs-string">'shenzhen'</span>, <span class="hljs-string">'number'</span>: <span class="hljs-string">'1234'</span>, <span class="hljs-string">'province'</span>: <span class="hljs-string">'guangdong'</span>&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.jianshu.com/c/ab55c73e0037?utm_source=desktop&utm_medium=notes-included-collection" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/20/5d32f16d5b0bf92604.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python中存在一种叫做字典 &lt;code&gt;dictionary&lt;/code&gt;的对象类型，用dict表示，字典中的元素用{ }括起来， &lt;strong&gt;字典是无序的&lt;/strong&gt;。字典中的元素由键值对组成，即 &lt;code&gt;key-value&lt;/code&gt;的形式。 &lt;strong&gt;注意：&lt;/strong&gt;字典中的键必须是不可变的数据类型，键可以是任意数据类型。字典具有如下的特点：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>《Python札记》5_列表与字符串</title>
    <link href="https://www.policx.com/python3-notes03/"/>
    <id>https://www.policx.com/python3-notes03/</id>
    <published>2019-07-19T22:49:00.000Z</published>
    <updated>2019-07-20T16:54:34.012Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>列表和字符串之间有相似点，也有不同的地方，进行如下阐述：</p></blockquote><a id="more"></a><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul><li>二者都是序列类型</li><li>组成二者的元素都是从左向右，索引左边0开始，右边-1开始</li><li>若想得到多个元素，使用切片方法</li><li>对于序列的基本操作都是适用二者</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li>列表 <code>list</code>是可以改变的，字符串 <code>string</code>是不能改变的</li><li>在字符串中每个元素都是字符，列表中的元素可以是 <strong>任意类型</strong>，甚至可以是列表</li><li>多维列表中的其中一个列表，是当做一个元素来使用的</li></ul><h3 id="二者转化"><a href="#二者转化" class="headerlink" title="二者转化"></a>二者转化</h3><blockquote><p>在某些情况下，需要将列表和字符串进行转化，需要使用 <code>split()</code>和 <code>join()</code>函数。</p></blockquote><p><strong>str.split()</strong><br>根据分隔符将某个字符串转换成列表：字符串—&gt;列表，得到的结果是list类型</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">line = <span class="hljs-string">"Hello.I am Peter.Welcome you."</span></span><br><span class="line">lst1 = line.split(<span class="hljs-string">"."</span>)  <span class="hljs-comment"># 按照分隔符.进行分隔</span></span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">lst2 = line.split(<span class="hljs-string">"."</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 指定分割后列表中最大的索引值</span></span><br><span class="line">print(lst2)</span><br><span class="line"></span><br><span class="line">lst3 = line.split()   <span class="hljs-comment"># 默认按照空格进行分割</span></span><br><span class="line">print(lst3)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-string">'Hello'</span>, <span class="hljs-string">'I am Peter'</span>, <span class="hljs-string">'Welcome you'</span>, <span class="hljs-string">''</span>]</span><br><span class="line">[<span class="hljs-string">'Hello'</span>, <span class="hljs-string">'I am Peter.Welcome you.'</span>]</span><br><span class="line">[<span class="hljs-string">'Hello.I'</span>, <span class="hljs-string">'am'</span>, <span class="hljs-string">'Peter.Welcome'</span>, <span class="hljs-string">'you.'</span>]</span><br></pre></td></tr></table></figure><p><strong>seq.join(list)</strong><br>jion()可以看做是split()的 <code>&amp;#x9006;&amp;#x8FD0;&amp;#x7B97;</code>，表示将字符串通过某种连接符连接起来，是字符串的方法，不是列表的方法</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = [&apos;xiaoming&apos;, &apos;peter&apos;]</span><br><span class="line">name1 = &quot;&quot;.join(name)  # 没有指定任何连接符号</span><br><span class="line">print(name1)</span><br><span class="line">name2 = &quot;+&quot;.join(name)  # 连接符号为+</span><br><span class="line">print(name2)</span><br><span class="line">name3 = &quot; &quot;.join(name)  # 空格为连接符号</span><br><span class="line">print(name3)</span><br><span class="line"></span><br><span class="line">xiaomingpeter</span><br><span class="line">xiaoming+peter</span><br><span class="line">xiaoming peter</span><br></pre></td></tr></table></figure><p>注意：传入join函数中的对象或者说参数的值，有一定的条件：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"1"</span>, <span class="hljs-string">"2"</span>, <span class="hljs-string">"3"</span>]</span><br><span class="line">b = <span class="hljs-string">"+"</span>.join(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#结果为：</span></span><br><span class="line">a+b+c+<span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">3</span></span><br><span class="line"></span><br><span class="line">如果a = [<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]则会报错</span><br><span class="line">b = <span class="hljs-string">"+"</span>.join(a)</span><br><span class="line">TypeError:sequence item <span class="hljs-number">3</span>:expected str instance ,int found</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.jianshu.com/c/ab55c73e0037?utm_source=desktop&utm_medium=notes-included-collection" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/20/5d32f16d5b0bf92604.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;列表和字符串之间有相似点，也有不同的地方，进行如下阐述：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>《Python札记》4_元组tuple</title>
    <link href="https://www.policx.com/python3-notes03/"/>
    <id>https://www.policx.com/python3-notes03/</id>
    <published>2019-07-19T02:38:18.000Z</published>
    <updated>2019-07-20T16:53:07.079Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>元组tuple是用圆括号()括起来，其中的元素之间用逗号隔开。元组中的元素是任意类型的。元组可以看做融合了列表或者字符串属性的一种序列。</p></blockquote><a id="more"></a><ul><li>元组是序列，和列表或者字符串比较类似，索引和切片等方法仍然适用</li><li>元组中的元素不能更改</li><li>如果元组中 <strong>只有一个元素，最后需要有逗号</strong></li><li>元组中的元素是任意类型，和列表类似，不同于字符串</li><li><em>*所有在列表中可以修改列表的方法，在元组中全部失效</em></li></ul><h3 id="元组操作"><a href="#元组操作" class="headerlink" title="元组操作"></a>元组操作</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">tup = ()        <span class="hljs-comment"># 创建空元组</span></span><br><span class="line">print(tup)</span><br><span class="line"></span><br><span class="line">tup1 = (<span class="hljs-string">'python'</span>, )   <span class="hljs-comment"># 创建单个元组，必须在最后带上逗号</span></span><br><span class="line">print(tup1)</span><br><span class="line"></span><br><span class="line">tup2 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, (<span class="hljs-number">3</span>, ), [<span class="hljs-string">"python"</span>, <span class="hljs-string">"java"</span>, <span class="hljs-string">"php"</span>])     <span class="hljs-comment"># 创建多重元组</span></span><br><span class="line">print(tup2[<span class="hljs-number">0</span>])       <span class="hljs-comment"># 返回元组中的第一个元素</span></span><br><span class="line">print(tup2[:<span class="hljs-number">1</span>])      <span class="hljs-comment"># 这里1表示索引编号，从编号0到1，只有第一个元素，返回值的形式仍为元组</span></span><br><span class="line">print(tup2[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>])    <span class="hljs-comment"># 从编号1开始，到结束，步长为2</span></span><br><span class="line">print(tup2[::<span class="hljs-number">-1</span>])    <span class="hljs-comment">#  反转元组</span></span><br><span class="line">print(tup2[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>])    <span class="hljs-comment"># 元组中第一层标号为3，第二层中标号为1的元素 </span></span><br><span class="line"></span><br><span class="line">print(len(tup2))     <span class="hljs-comment"># 元素的长度 </span></span><br><span class="line">print(tup2.index(<span class="hljs-number">2</span>))   <span class="hljs-comment"># 返回元组中元素2的索引标号</span></span><br><span class="line"><span class="hljs-keyword">del</span> tup2    <span class="hljs-comment"># 元组中单个元素不能删除，只能删除整个元组</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 结果如下：</span></span><br><span class="line">()</span><br><span class="line">(<span class="hljs-string">'python'</span>,)</span><br><span class="line"><span class="hljs-number">1</span></span><br><span class="line">(<span class="hljs-number">1</span>,)</span><br><span class="line">(<span class="hljs-number">2</span>, [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'php'</span>])</span><br><span class="line">([<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'php'</span>], (<span class="hljs-number">3</span>,), <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)</span><br><span class="line">java</span><br><span class="line"><span class="hljs-number">4</span></span><br><span class="line"><span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><h3 id="元组和列表转化"><a href="#元组和列表转化" class="headerlink" title="元组和列表转化"></a>元组和列表转化</h3><blockquote><p>元组和列表之间是互通的，通过 <code>list()</code>和 <code>tuple()</code>能够实现列表和元组之间的转化。通过 <code>dir(tuple)</code>能够查看元组对象的方法。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; dir(tuple)</span><br><span class="line">[&apos;__add__&apos;, &apos;__class__&apos;, &apos;__contains__&apos;, &apos;__delattr__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__getitem__&apos;, &apos;__getnewargs__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__iter__&apos;, &apos;__le__&apos;, &apos;__len__&apos;, &apos;__lt__&apos;, &apos;__mul__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__rmul__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;count&apos;, &apos;index&apos;]</span><br></pre></td></tr></table></figure><ul><li>_ _iter__：说明元组是可迭代的</li><li><code>count()</code>，<code>index()</code>：能够应用于序列</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 定义一个元组t</span></span><br><span class="line">t = (<span class="hljs-number">1</span>, <span class="hljs-number">123</span>, [<span class="hljs-string">"python"</span>, <span class="hljs-string">"java"</span>], (<span class="hljs-number">123</span>, <span class="hljs-string">'xiaoming'</span>))</span><br><span class="line">list_t = list(t)      <span class="hljs-comment"># tuple---&gt;list</span></span><br><span class="line">print(list_t)</span><br><span class="line">tuple_t = tuple(list_t)   <span class="hljs-comment"># list----&gt;tuple</span></span><br><span class="line">print(tuple_t)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br><strong>元组本身不能被修改</strong>，但是可以将元组先转化成列表，通过列表修改之后再转化成元组。tuple—&gt;list—&gt;tuple</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 定义一个元组t</span></span><br><span class="line">t = (<span class="hljs-number">1</span>, <span class="hljs-number">123</span>, [<span class="hljs-string">"python"</span>, <span class="hljs-string">"java"</span>], (<span class="hljs-number">123</span>, <span class="hljs-string">'xiaoming'</span>))</span><br><span class="line">list_t = list(t)     <span class="hljs-comment"># 元组转换成列表</span></span><br><span class="line">list_t[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>      <span class="hljs-comment"># 通过列表修改元素</span></span><br><span class="line">tuple_t = tuple(list_t)   <span class="hljs-comment"># 再转换成元组 </span></span><br><span class="line">print(tuple_t)</span><br><span class="line"></span><br><span class="line">(<span class="hljs-number">2</span>, <span class="hljs-number">123</span>, [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>], (<span class="hljs-number">123</span>, <span class="hljs-string">'xiaoming'</span>))</span><br></pre></td></tr></table></figure><h3 id="元组用途"><a href="#元组用途" class="headerlink" title="元组用途"></a>元组用途</h3><ul><li>元组表列表 <strong>操作速度快</strong>；在进行遍历操作的时候，请用元组代替列表</li><li>如果对不需要修改的数据进行”写保护”，即改数据是常量，也要使用元组；如果需要改变这些值，转换为列表进行修改</li><li><strong>元组在字典中可以当做key来使用</strong>，但是列表不可以</li></ul><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.jianshu.com/c/ab55c73e0037?utm_source=desktop&utm_medium=notes-included-collection" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/20/5d32f16d5b0bf92604.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;元组tuple是用圆括号()括起来，其中的元素之间用逗号隔开。元组中的元素是任意类型的。元组可以看做融合了列表或者字符串属性的一种序列。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>《Python札记》3_字符串基本操作</title>
    <link href="https://www.policx.com/python3-notes03/"/>
    <id>https://www.policx.com/python3-notes03/</id>
    <published>2019-07-19T02:37:18.000Z</published>
    <updated>2019-07-20T15:57:59.300Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="字符串基本操作"><a href="#字符串基本操作" class="headerlink" title="字符串基本操作"></a>字符串基本操作</h2><a id="more"></a><p>字符串是一种序列，序列常见的公有操作： </p><ul><li>len() :求长度</li><li><ul><li>：两个序列相加</li></ul></li><li>*：序列的重复，相当于是复制</li><li>in：判断元素是否在序列中</li><li>max、min：最大/最小值</li></ul><hr><h3 id="字符串格式化输出"><a href="#字符串格式化输出" class="headerlink" title="字符串格式化输出"></a>字符串格式化输出</h3><p>%s : 占位符，用得少 </p><p>formate(<em>args, *</em>kargs)：完全替代<code>%s</code>的用法 </p><p>前者表示<code>字符串</code>形式；后者表示<code>字典</code>形式 </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">"I am &#123;&#125; and &#123;&#125; years old"</span>.format(<span class="hljs-string">"Peter"</span>, <span class="hljs-number">26</span>)    <span class="hljs-comment"># *args形式</span></span><br><span class="line">    </span><br><span class="line"><span class="hljs-string">"I am &#123;name&#125; and &#123;age&#125; years old"</span>.format(name=<span class="hljs-string">"Peter"</span>, age=<span class="hljs-number">26</span>)  <span class="hljs-comment">#**kargs形式</span></span><br></pre></td></tr></table></figure><hr><h3 id="判断是否全为字母isalpha"><a href="#判断是否全为字母isalpha" class="headerlink" title="判断是否全为字母isalpha"></a>判断是否全为字母isalpha</h3><p>isalpha 输出结果bool值 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;python&quot;.isalpha()</span><br></pre></td></tr></table></figure><hr><h3 id="分隔字符串split"><a href="#分隔字符串split" class="headerlink" title="分隔字符串split"></a>分隔字符串split</h3><p>利用<code>split()</code>方法得到的结果：<strong>列表形式</strong>，能够用于<code>for</code>遍历 </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="hljs-string">"this is python"</span></span><br><span class="line">print(str.splite(<span class="hljs-string">" "</span>))</span><br></pre></td></tr></table></figure><p><strong><em>注意</em></strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="hljs-string">"this is python"</span></span><br><span class="line">print(str.split())    <span class="hljs-comment"># 默认是空格分割</span></span><br><span class="line">print(str.split(<span class="hljs-string">" "</span>)) <span class="hljs-comment"># 结果同上</span></span><br><span class="line">print(str.split(<span class="hljs-string">""</span>))  <span class="hljs-comment"># 报错</span></span><br></pre></td></tr></table></figure><hr><h3 id="去掉空格-strip"><a href="#去掉空格-strip" class="headerlink" title="去掉空格 strip()"></a>去掉空格 strip()</h3><p>str.strip()：去掉左右的空格 </p><p>str.lstrip()：去掉左边的空格 </p><p>str.rstrip()：去掉右边的空格 </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="hljs-string">" hello "</span></span><br><span class="line">print(str.strip())</span><br><span class="line">print(str.lstrip())</span><br><span class="line">print(str.rstrip())</span><br></pre></td></tr></table></figure><p><strong><em>注意</em></strong><br>原来的值没有变化，生成新的字符串 </p><hr><h3 id="字符大小写的转变"><a href="#字符大小写的转变" class="headerlink" title="字符大小写的转变"></a>字符大小写的转变</h3><p>Str.upper():全部转化为大写，生成新的字符串 </p><p>str.lower():全部转化为小写 </p><p>str.capatilize():将首字母转化为大写 </p><p>Str.title():转化为标题形式，单词首字母大写其余小写。 </p><p>str.isupper():是否全为大写，返回bool值 </p><p>str.islower():是否全为小写 </p><p>str.istitle():是否为标题形式，即字符串中的单词首字母为大写，其他字母小写。 </p><hr><h3 id="连接字符串jion"><a href="#连接字符串jion" class="headerlink" title="连接字符串jion()"></a>连接字符串jion()</h3><p>除了+号用于拼接，jion方法也可以用于拼接字符串。 </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="hljs-string">"www.baidu.com"</span></span><br><span class="line"></span><br><span class="line">a= str.split(<span class="hljs-string">"."</span>)</span><br><span class="line">print(a)</span><br><span class="line">[<span class="hljs-string">"www"</span>,<span class="hljs-string">"baidu"</span>,<span class="hljs-string">"com"</span>]</span><br><span class="line"></span><br><span class="line">b = <span class="hljs-string">"*"</span>.join(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">www*baidu*com</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.jianshu.com/c/ab55c73e0037?utm_source=desktop&utm_medium=notes-included-collection" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/20/5d32f16d5b0bf92604.jpg" alt></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符串基本操作&quot;&gt;&lt;a href=&quot;#字符串基本操作&quot; class=&quot;headerlink&quot; title=&quot;字符串基本操作&quot;&gt;&lt;/a&gt;字符串基本操作&lt;/h2&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>《Python札记》2_IO文件操作</title>
    <link href="https://www.policx.com/python3-notes02/"/>
    <id>https://www.policx.com/python3-notes02/</id>
    <published>2019-07-18T15:06:54.000Z</published>
    <updated>2019-07-20T10:57:04.761Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>在编程工作中，时常需要对各种文件进行操作。读写文件是最常见的IO编程，Python中内置了读写文件的函数。读写文件是请求系统打开一个文件对象，通常称为文件描述符；然后通过操作系统提供的接口从这个文件对象中读取数据，或者将数据写入文件对象。 </p></blockquote><a id="more"></a> <p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.runoob.com%2Fpython%2Ffile-methods.html" target="_blank" rel="noopener">菜鸟课程</a><br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F1016959663602400%2F1017606916795776" target="_blank" rel="noopener">廖雪峰官方课程—IO编程</a></p><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p>打开文件使用<code>open()</code>函数，用读的模式打开返回的是文件对象，它是可迭代的；如果不存在就会报错<code>IOError</code>，标准的语法为： </p><p><code>open(name[,mode[,buffering]])</code></p><p>open函数的文件名是必须的，模式和缓冲参数是可选： </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="hljs-string">'c:\text\a.txt'</span>，<span class="hljs-string">'r'</span>)  <span class="hljs-comment"># 用读的模式打开</span></span><br></pre></td></tr></table></figure><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><p>文件使用完毕必须关闭，因为文件对象会占用操作系统的资源，调用close()函数关闭文件 </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>如果读写文件出错，close()函数就不会被调用执行。为了保证文件能够正确关闭文件，使用<code>try...finally</code>实现： </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    f = open(<span class="hljs-string">'/path/to/file'</span>, <span class="hljs-string">'r'</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="hljs-keyword">finally</span>:</span><br><span class="line">    <span class="hljs-keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><h3 id="不同模式"><a href="#不同模式" class="headerlink" title="不同模式"></a>不同模式</h3><p>文件打开模式<code>r、w、a</code>对应基本的<code>只读、只写、追加模式</code>；<code>b、t、+、U</code>对应二进制模式、文本模式、读写模式、通用换行符。 </p><table><thead><tr><th>英文</th><th>中文</th><th>文件是否存在</th><th>是否清空</th><th>打开位置</th></tr></thead><tbody><tr><td>r</td><td>只读</td><td>报错</td><td>不</td><td>文件开头</td></tr><tr><td>r+</td><td>读+写</td><td>报错</td><td>不</td><td>文件开头</td></tr><tr><td>w</td><td>只写</td><td>创建</td><td>清空</td><td>文件开头</td></tr><tr><td>w+</td><td>写+读</td><td>创建</td><td>清空</td><td>文件开头</td></tr><tr><td>a</td><td>追加写</td><td>创建</td><td>不</td><td>文件结尾</td></tr><tr><td>a+</td><td>追加写+读</td><td>创建</td><td>不</td><td>文件结尾</td></tr></tbody></table><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>读取文件对象有3种方式：<code>read</code>、 <code>readline</code>、<code>readlines</code>，每种方法接受一个变量以限制每次读取的数据量。3种方法都会把每行末尾的<code>\n</code>读进来，通过<code>strip()</code>进行去除空格。 </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file = open(<span class="hljs-string">'/home/ubuntu/PycharmProjects/test.txt'</span>, <span class="hljs-string">'w'</span>)</span><br><span class="line">print(file)   </span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 结果显示为文件对象，用于读操作</span></span><br><span class="line">&lt;_io.TextIOWrapper name=<span class="hljs-string">'/home/ubuntu/PycharmProjects/test.txt'</span> mode=<span class="hljs-string">'w'</span> encoding=<span class="hljs-string">'UTF-8'</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="以test-txt文件为例"><a href="#以test-txt文件为例" class="headerlink" title="以test.txt文件为例"></a>以test.txt文件为例</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hello python</span><br><span class="line">this <span class="hljs-keyword">is</span> a test file</span><br><span class="line"></span><br><span class="line">count = <span class="hljs-number">0</span> </span><br><span class="line">sum = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">3</span>:</span><br><span class="line">    sum += <span class="hljs-number">1</span></span><br><span class="line">    print(<span class="hljs-string">"hello linux)"</span></span><br><span class="line">    count += <span class="hljs-number">1</span></span><br><span class="line">print(<span class="hljs-string">"hello python"</span>)</span><br></pre></td></tr></table></figure><p><strong>1、read</strong><br>每次读取整个文件，将文件内容放入一个<code>字符串</code>中。如果文件较大，用<code>read(size)</code>，指定每次最多读取size个字节。 </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file = open(<span class="hljs-string">'/home/ubuntu/PycharmProjects/test.txt'</span>, <span class="hljs-string">'r'</span>)</span><br><span class="line">res1 = file.read()</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p><strong>结果</strong>： </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hello python</span><br><span class="line">this <span class="hljs-keyword">is</span> a test file</span><br><span class="line"></span><br><span class="line">count = <span class="hljs-number">0</span> </span><br><span class="line">sum = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">3</span>:</span><br><span class="line">    sum += <span class="hljs-number">1</span></span><br><span class="line">    print(<span class="hljs-string">"hello linux)"</span></span><br><span class="line">    count += <span class="hljs-number">1</span></span><br><span class="line">print(<span class="hljs-string">"hello python"</span>)          <span class="hljs-comment"># str形式</span></span><br></pre></td></tr></table></figure><p><strong>2、readline</strong><br>每次只读取一行数据，相比较于<code>readlines</code>慢，读取时候占用内存小，适合于大文件，返回的是<code>字符串</code>对象。如果对同一个文件进行多次读取，将会在上次的基础上再进行读取下一行。 </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">file = open(<span class="hljs-string">'/home/ubuntu/PycharmProjects/test.txt'</span>, <span class="hljs-string">'r'</span>)</span><br><span class="line"></span><br><span class="line">res2 = file.readline()</span><br><span class="line">res2 = file.readline()</span><br><span class="line">res2 = file.readline()   <span class="hljs-comment"># 空行也算</span></span><br><span class="line">res2 = file.readline()</span><br><span class="line">print(res2)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="hljs-number">0</span>    <span class="hljs-comment"># 结果为第四行的数据，具体看test文件   str形式</span></span><br></pre></td></tr></table></figure><p><strong>3、readlines</strong><br>读取全部文件内容，自动将文件分成一个行的列表，可用于<code>for...in...</code>迭代获取里面的每个数据。<code>适合读取配置文件</code></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file = open(<span class="hljs-string">'/home/ubuntu/PycharmProjects/test.txt'</span>, <span class="hljs-string">'r'</span>)</span><br><span class="line">res3 = file.readlines()</span><br><span class="line">print(res3)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p><strong>结果</strong>： </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="hljs-string">'Hello python\n'</span>, <span class="hljs-string">'this is a test file\n'</span>, <span class="hljs-string">'\n'</span>, <span class="hljs-string">'count = 0 \n'</span>, <span class="hljs-string">'sum = 0\n'</span>, <span class="hljs-string">'while count &lt; 3:\n'</span>, <span class="hljs-string">'    sum += 1\n'</span>, <span class="hljs-string">'    print("hello linux)"\n'</span>, <span class="hljs-string">'    count += 1\n'</span>, <span class="hljs-string">'print("hello python")\n'</span>]    <span class="hljs-comment"># list形式</span></span><br></pre></td></tr></table></figure><p>去掉空行，并用<code>for...in...</code>进行遍历 </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file = open(<span class="hljs-string">'/home/ubuntu/PycharmProjects/test.txt'</span>, <span class="hljs-string">'r'</span>)</span><br><span class="line">res3 = file.readlines()</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res3:</span><br><span class="line">    print(i.strip())    <span class="hljs-comment"># 去掉空格</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p><strong>结果</strong>： </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hello python</span><br><span class="line">this <span class="hljs-keyword">is</span> a test file</span><br><span class="line"></span><br><span class="line">count = <span class="hljs-number">0</span></span><br><span class="line">sum = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">3</span>:</span><br><span class="line">sum += <span class="hljs-number">1</span></span><br><span class="line">print(<span class="hljs-string">"hello linux"</span>)</span><br><span class="line">count += <span class="hljs-number">1</span></span><br><span class="line">print(<span class="hljs-string">"hello python"</span>)</span><br></pre></td></tr></table></figure><h3 id="with-open-…-as-f"><a href="#with-open-…-as-f" class="headerlink" title="with open(…) as f"></a>with open(…) as f</h3><p>Python中引入了<code>with</code>语句来自动调用<code>close()</code>方法；传入<code>encoding</code>和<code>errors</code>参数处理编码问题 </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">with</span> open(<span class="hljs-string">'/path/to/file'</span>, <span class="hljs-string">'r'</span>, encoding=<span class="hljs-string">'gbk'</span>, errors=<span class="hljs-string">'ignore'</span>) <span class="hljs-keyword">as</span> f:    <span class="hljs-comment"># 写入特定编码的文件，传入encoding和error参数</span></span><br><span class="line">    print(f.read())    <span class="hljs-comment"># 不必再调用close方法</span></span><br></pre></td></tr></table></figure><p><strong>题目</strong>： </p><p>两个文件中，每个有多行的IP地址，找出两个文件中相同的IP地址 </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> bisect</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">with</span> open(<span class="hljs-string">'test1.txt'</span>, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f1:</span><br><span class="line">    list1 = f1.readlines()</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(list1)):</span><br><span class="line">    list1[i] = list1[i].strip(<span class="hljs-string">'\n'</span>)</span><br><span class="line"><span class="hljs-keyword">with</span> open(<span class="hljs-string">'test2.txt'</span>, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f2:</span><br><span class="line">    list2 = f2.readlines()</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(list2)):</span><br><span class="line">    list2[i] = list2[i].strip(<span class="hljs-string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">list2.sort()</span><br><span class="line">length_2 = len(list2)</span><br><span class="line">same_data = []</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1:</span><br><span class="line">    pos = bisect.bisect_left(list2, i)</span><br><span class="line">    <span class="hljs-keyword">if</span> pos &lt; len(list2) <span class="hljs-keyword">and</span> list2[pos] == i:</span><br><span class="line">        same_data.append(i)</span><br><span class="line">same_data = list(set(same_data))</span><br><span class="line">print(same_data)</span><br></pre></td></tr></table></figure><hr><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>写文件用<code>write()</code>和<code>writelines()</code>来进行操作，用法同<code>read</code>和<code>readlines</code>对应。 </p><p>write()方法是将<code>字符串</code>写入到文件中。 </p><ul><li>w模式从头开始写入文件</li><li>a模式从结尾追加文件</li></ul><p>writelines()方法是针对<code>列表</code>的操作。它接收一个字符串列表作为参数，将他们写入到文件中，换行符不会自动的加入，因此，需要显式的加入换行符。 </p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f1 = open(<span class="hljs-string">'test1.txt'</span>, <span class="hljs-string">'w'</span>)</span><br><span class="line">f1.writelines([<span class="hljs-string">"1"</span>, <span class="hljs-string">"2"</span>, <span class="hljs-string">"3"</span>])   <span class="hljs-comment"># 内容为:123</span></span><br><span class="line"></span><br><span class="line">f1 = open(<span class="hljs-string">'test1.txt'</span>, <span class="hljs-string">'w'</span>)</span><br><span class="line">f1.writelines([<span class="hljs-string">"1\n"</span>, <span class="hljs-string">"2\n"</span>, <span class="hljs-string">"3\n"</span>]) </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#    1</span></span><br><span class="line"><span class="hljs-comment">#    2        </span></span><br><span class="line"><span class="hljs-comment">#    3</span></span><br></pre></td></tr></table></figure><hr><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><ul><li>ASCII:</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 最早密码本，只包含字母、数字、特殊字符</span><br><span class="line">- 一个字符一个字节</span><br></pre></td></tr></table></figure><ul><li>Unicode </li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 万国码</span><br><span class="line">- 一个字符需要<span class="hljs-number">4</span>个字节</span><br><span class="line">- 浪费资源</span><br></pre></td></tr></table></figure><ul><li>utf-8</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 最小用<span class="hljs-number">8</span>位也就是一个字节表示一个字符</span><br><span class="line">- 字母：一个字节，映射ASCII码</span><br><span class="line">- 欧洲的文字：两个字节</span><br><span class="line">- 中文：三个字节</span><br></pre></td></tr></table></figure><ul><li>gbk</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 国标：每个国家都有自己的国标</span><br><span class="line">- 字母：一个字节，映射ASCII码</span><br><span class="line">- 中文：两个字节</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.jianshu.com/c/ab55c73e0037?utm_source=desktop&utm_medium=notes-included-collection" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/20/5d32f16d5b0bf92604.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在编程工作中，时常需要对各种文件进行操作。读写文件是最常见的IO编程，Python中内置了读写文件的函数。读写文件是请求系统打开一个文件对象，通常称为文件描述符；然后通过操作系统提供的接口从这个文件对象中读取数据，或者将数据写入文件对象。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>《Python札记》1_列表list</title>
    <link href="https://www.policx.com/python3-notes01/"/>
    <id>https://www.policx.com/python3-notes01/</id>
    <published>2019-07-18T14:55:41.000Z</published>
    <updated>2019-07-20T10:57:05.922Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="写于开始之前"><a href="#写于开始之前" class="headerlink" title="写于开始之前"></a>写于开始之前</h3><p>笔者即将开始写一个系列的《<code>Python</code>札记》。本系列的札记主要是自学<code>齐伟</code>老师《跟老齐学<code>Python</code>轻松入门》一书整理而来。书第一遍断断续续花了5个月，第二遍边看边整理，保守3个月。</p><a id="more"></a><p><strong>在此深深感谢齐伟老师带我入门<code>Python</code></strong>。<strong>工欲善其事，必先利其器</strong>，本札记的学习环境为：<code>Python3.7.2 + pycharm + jupyter notebook</code>： </p><ul><li><code>Python3</code>取代了<code>Python2</code>，成为主流</li><li>针对<code>Python</code>语言，<code>Pycharm</code>是最好的<code>IDE</code></li><li><code>Jupyter notebook</code>是利用<code>Python</code>进行机器学习的强大利器</li></ul><p><strong>本札记一定会在2个月之内完成</strong>，主要内容包含： </p><ul><li>学习笔记整理</li><li>代码实战练习</li><li>各种练习题</li><li>利用<code>Python</code>实现常用算法 <a href="https://www.jianshu.com/c/7287d92c5db4" target="_blank" rel="noopener">机器学习_Python算法</a></li></ul><p><strong>希望对<code>Python</code>感兴趣的朋友有所帮助，自己也在努力学习中，将来主要方向是：<code>机器学习+数据挖掘+量化投资</code></strong></p><h4 id="良好的开始是成功的一半！Let-s-go-go-go"><a href="#良好的开始是成功的一半！Let-s-go-go-go" class="headerlink" title="良好的开始是成功的一半！Let`s go go go!!!"></a>良好的开始是成功的一半！Let`s go go go!!!</h4><hr><blockquote><p>列表是<code>Python</code>中使用非常广泛的一种对象，用方括号<code>[ ]</code>来表示。括号里面可以是数字，字符串或者<code>True</code>，<code>False</code>的布尔值，或者是多种不同类型的对象，里面也可以嵌套列表。如果列表是空的，用<code>bool()</code>来进行判断，会返回 <code>False</code>。 </p></blockquote><hr><h3 id="一、索引、切片、反转"><a href="#一、索引、切片、反转" class="headerlink" title="一、索引、切片、反转"></a>一、索引、切片、反转</h3><p>列表和字符串一样，都是序列，里面的元素是有序的，也有索引和切片。索引<code>index</code>左边从<code>0</code>开始，右边从<code>-1</code>开始，<code>index()</code>函数可以查看某个元素的索引编号。 </p><p><strong>索引</strong></p><ul><li>左边0开始，右边-1开始</li><li>通过<code>index()</code>函数查看索引编号</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># lang = ['python', 'java', 'html']</span></span><br><span class="line"><span class="hljs-comment"># lang.index('python')</span></span><br><span class="line"><span class="hljs-number">0</span>  <span class="hljs-comment"># 索引从0开始</span></span><br><span class="line"><span class="hljs-comment"># lang.index('html')</span></span><br><span class="line"><span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><p><strong>切片</strong></p><ul><li>索引左边从0开始，右边-1开始</li><li>含头不含尾</li><li>步长可正可负</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">print(lst[:])     <span class="hljs-comment">#  相当于是复制 lst</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">print(lst[::<span class="hljs-number">2</span>])  <span class="hljs-comment">#  步长是2    [开始:结束:步长]</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(lst[<span class="hljs-number">-3</span>:<span class="hljs-number">-1</span>])</span><br><span class="line"></span><br><span class="line">lst = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]</span><br><span class="line">print(lst[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])     <span class="hljs-comment"># 常规用法</span></span><br><span class="line">print(lst[<span class="hljs-number">-5</span>:<span class="hljs-number">-2</span>:<span class="hljs-number">2</span>])   <span class="hljs-comment"># 标号-5代表的是元素2，标号-2代表的是5，步长为2</span></span><br><span class="line">print(lst[<span class="hljs-number">-5</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>])</span><br><span class="line">print(lst[<span class="hljs-number">1</span>:<span class="hljs-number">-2</span>:<span class="hljs-number">2</span>])</span><br><span class="line">[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]</span><br></pre></td></tr></table></figure><p><strong>反转</strong></p><ul><li>通过步长-1进行反转，[::-1]</li><li>通过<code>reversed()</code>进行反转，得到的是<strong>可迭代对象</strong>，并且将迭代对象转为为<code>列表显示</code></li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 反转1</span></span><br><span class="line">print(lst[::<span class="hljs-number">-1</span>])  <span class="hljs-comment"># 通过步长为-1进行反转</span></span><br><span class="line">print(lst)   <span class="hljs-comment"># 不影响原来对象</span></span><br><span class="line">[<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 反转2</span></span><br><span class="line">print(list(reversed(lst)))  <span class="hljs-comment"># 通过reversed函数进行反转</span></span><br><span class="line">[<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">print(list(reversed(<span class="hljs-string">'abcde'</span>)))    <span class="hljs-comment"># 对字符串进行反转，列表显示</span></span><br><span class="line">[<span class="hljs-string">'e'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'a'</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="二、操作列表"><a href="#二、操作列表" class="headerlink" title="二、操作列表"></a>二、操作列表</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>len()：求长度</li><li>+：连接两个序列</li><li>*：复制序列</li><li>in：判断元素是否在列表中</li><li>max()、min()：按照元素的字典顺序进行排序</li></ul><p><strong>1、修改元素</strong></p><blockquote><p><strong>列表</strong>中的元素可以进行<strong>修改</strong>，但是字符串中的不能进行修改。列表中修改的时候，直接通过索引号进行指定： </p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst[<span class="hljs-number">2</span>] = <span class="hljs-number">7</span>   <span class="hljs-comment"># 指定第三个元素为7</span></span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br></pre></td></tr></table></figure><p><strong>2、增加元素</strong><br>追加元素的方法有两种，都是追加在<strong>末尾</strong></p><ul><li>append()函数进行追加</li><li>切片的方式进行追加：a[len(a):] = [ x ]</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst.append(<span class="hljs-number">8</span>)  </span><br><span class="line">lst[len(lst):] = [<span class="hljs-number">8</span>]</span><br><span class="line">print(lst)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]   <span class="hljs-comment"># 例子承接上面，第三个元素为7，不是3</span></span><br></pre></td></tr></table></figure><p><strong>3、列表函数</strong></p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>append</td><td>将单个元素追加到列表的<strong>最右边</strong>，即末尾部分；<strong>list[len(list):] = [x]</strong>，x是待追加的元素；  <strong>没有返回值None</strong></td></tr><tr><td>extend</td><td>将<strong>两个列表进行合并</strong>，扩充列表的作用；  参数必须是<strong>可迭代对象</strong>；  <strong>list[len(list):] = L</strong>，L是待并入的列表；  完成追加过程，列表L不变，list发生变化；  <strong>没有返回值None</strong></td></tr><tr><td>insert</td><td>指定位置添加元素  格式：list.insert(i,x)，i是插入的位置，x是待追加元素 ；  i如果是0，相当于是插在首位；i如果是len(list)，相当于是插在最后面，则等价于append()函数</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># extend()函数</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</span><br><span class="line">print(id(lst))   <span class="hljs-comment"># 查看lst的内存地址</span></span><br><span class="line">lst1 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line">lst.extend(lst1)</span><br><span class="line">print(id(lst))   <span class="hljs-comment"># 查看追加列表之后的内存地址，与原来系相同的</span></span><br><span class="line">print(<span class="hljs-string">"lst:"</span>, lst)</span><br><span class="line">print(<span class="hljs-string">"lst1:"</span>, lst1)</span><br><span class="line"></span><br><span class="line"><span class="hljs-number">2435334264968</span></span><br><span class="line"><span class="hljs-number">2435334264968</span></span><br><span class="line">lst: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line">lst1: [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># append与extend区别</span></span><br><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst2 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]</span><br><span class="line">lst1.append(lst2)</span><br><span class="line">print(lst1)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]]   <span class="hljs-comment"># 整建制，将lst2当做一个整体</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst2 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]</span><br><span class="line">lst1.extend(lst2)</span><br><span class="line">print(lst1)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]   <span class="hljs-comment"># 个体化，将lst2的每个元素进行追加</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li>列表是可以进行<strong>修改</strong>的，原地修改</li><li>append是将一个元素加到列表的末尾，<strong>整建制追加</strong></li><li>extend将两个列表进行合并，<strong>个体化扩编</strong></li><li>extend方法执行之后，<strong>内存中id不变</strong>，只是在该id上的内容发生了变化</li><li>insert()函数中的i如果超过最大索引值，则自动追加到末尾，相当于是append()函数的作用</li><li>三种方法均是原地修改，无返回值</li></ul><hr><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>count</td><td>查看元素重复出现的次数  <strong>如果不存在，返回0</strong>，而不是报错</td></tr><tr><td>index</td><td>查看索引编号，不存在则报错  检索的是元素<strong>第一次</strong>出现的位置</td></tr><tr><td>remove</td><td>删除元素，原地修改，无返回值；  list.remove(x)：如果x不存在，则会报错；  如果x出现多次，<strong>删除第一个x，剩下不变</strong></td></tr><tr><td>pop</td><td>pop([i]):参数是可选的；  为空，<strong>默认删除最后一个</strong>，并且将该元素作为返回值；  如果不为空，<strong>可删除索引为i的元素</strong>，并且将该元素作为返回值</td></tr><tr><td>reverse</td><td>原地反转，没有生成新的列表，没有返回值</td></tr><tr><td>reversed</td><td>类似reverse，区别：生成的列表能够<strong>用于迭代</strong></td></tr></tbody></table><p><strong>remove和pop的区别</strong></p><ul><li>remove 没有返回值，pop有返回值</li><li>remove的参数是元素，pop的参数是索引</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">lst1.remove(<span class="hljs-number">2</span>)</span><br><span class="line">print(lst1)</span><br><span class="line"><span class="hljs-comment"># lst1.remove(7)</span></span><br><span class="line"><span class="hljs-comment"># print(lst1)   ValueError: list.remove(x): x not in list</span></span><br><span class="line">lst1.pop(<span class="hljs-number">2</span>)</span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]   <span class="hljs-comment"># 将元素2删除掉</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]      <span class="hljs-comment">#  将索引为2的元素3删除掉，本步骤是接在上面的执行，即在列表[1, 3, 4, 5, 6] 中删除4</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关于反转</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(lst[::<span class="hljs-number">-1</span>])   <span class="hljs-comment"># 反转实现1</span></span><br><span class="line">print(lst)          <span class="hljs-comment"># 原来的列表对象不改变</span></span><br><span class="line">lst.reverse()    <span class="hljs-comment"># 反转实现2</span></span><br><span class="line">print(lst)          <span class="hljs-comment"># 原来的列表变成反转之后的新列表</span></span><br><span class="line">lst1= reversed(lst)</span><br><span class="line">print(lst1)       <span class="hljs-comment"># lst1是一个列表反转迭代器对象：&lt;list_reverseiterator object at 0x00000233C677F320&gt;</span></span><br><span class="line">print(list(lst1))    <span class="hljs-comment"># 用list函数显示lst1的内容</span></span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>sort</td><td>排序函数，用于<code>列表list</code>中，<strong>原地修改没有返回值</strong>；  <strong>默认从小到大</strong>；将<strong>reverse=True</strong>则变成从大到小排序sort(self, /, *, key=None, reverse=False)</td></tr><tr><td>sorted</td><td>对<code>所有可迭代对象</code>进行操作，返回一个新的 <code>list</code>，不是在原来的list上进行操作  sorted(iterable[, cmp[, key[, reverse]]])</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># sort()</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst.sort()</span><br><span class="line">print(lst)</span><br><span class="line">lst1 = [<span class="hljs-string">'python'</span>, ‘Java’, <span class="hljs-string">'html'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'php'</span>]</span><br><span class="line">lst1.sort(key=len)  <span class="hljs-comment"># 列表中的字符串进行排序；如果长度相同，则按照出现的先后顺序</span></span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</span><br><span class="line">[<span class="hljs-string">'c'</span>, <span class="hljs-string">'php'</span>, <span class="hljs-string">'Java'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'python'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># sorted()</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst1 = sorted(lst)</span><br><span class="line">print(lst)  <span class="hljs-comment"># 原对象不变</span></span><br><span class="line">print(lst1) <span class="hljs-comment"># 新列表为排序后的对象</span></span><br><span class="line"></span><br><span class="line">lst2 =[(<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>),(<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>),(<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>),(<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>)]</span><br><span class="line">lst3 = sorted(lst2, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])   <span class="hljs-comment"># 由元组构成的复合列表，按照元组的第二个元素进行排序，通过匿名函数lamba()</span></span><br><span class="line">print(lst3)</span><br><span class="line">[(<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>)]</span><br><span class="line"></span><br><span class="line">lst4 = sorted(lst2, key=<span class="hljs-keyword">lambda</span> x: len(x[<span class="hljs-number">0</span>]))   <span class="hljs-comment"># 通过元组中第一个元素的长度进行排序</span></span><br><span class="line">print(lst4)</span><br><span class="line">[(<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>), (<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>)]</span><br></pre></td></tr></table></figure><h4 id="自定义类中的元素进行排序"><a href="#自定义类中的元素进行排序" class="headerlink" title="自定义类中的元素进行排序"></a>自定义类中的元素进行排序</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, age, grade)</span>:</span></span><br><span class="line">        self.name =  name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.grade = grade</span><br><span class="line">        </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span>  repr((self.name, self.grade, self.age))</span><br><span class="line">    </span><br><span class="line">students_objects = [</span><br><span class="line">    Student(<span class="hljs-string">'Tom'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-number">12</span>),</span><br><span class="line">    Student(<span class="hljs-string">'xiaoming'</span>,<span class="hljs-string">'A'</span>,<span class="hljs-number">17</span>),</span><br><span class="line">    Student(<span class="hljs-string">'xiaohong'</span>, <span class="hljs-string">'C'</span>, <span class="hljs-number">12</span>),</span><br><span class="line">    Student(<span class="hljs-string">'Peter'</span>, <span class="hljs-string">'D'</span>, <span class="hljs-number">8</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">lst5 = sorted(students_objects, key=<span class="hljs-keyword">lambda</span> t:t.age)   <span class="hljs-comment"># 自定义类中，按照年龄进行排序</span></span><br><span class="line">print(lst5)</span><br><span class="line">lst6 = sorted(students_objects, key=<span class="hljs-keyword">lambda</span> t:(t.age, t.grade))   <span class="hljs-comment"># 使用元组，先根据年龄排序，若年龄相同按照grade排序</span></span><br><span class="line">print(lst6)</span><br><span class="line"></span><br><span class="line">[(<span class="hljs-string">'xiaoming'</span>, <span class="hljs-number">17</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'Tom'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'xiaohong'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'Peter'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'D'</span>)]</span><br><span class="line">[(<span class="hljs-string">'xiaoming'</span>, <span class="hljs-number">17</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'Tom'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'xiaohong'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'Peter'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'D'</span>)]</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.jianshu.com/c/ab55c73e0037?utm_source=desktop&utm_medium=notes-included-collection" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/20/5d32f16d5b0bf92604.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写于开始之前&quot;&gt;&lt;a href=&quot;#写于开始之前&quot; class=&quot;headerlink&quot; title=&quot;写于开始之前&quot;&gt;&lt;/a&gt;写于开始之前&lt;/h3&gt;&lt;p&gt;笔者即将开始写一个系列的《&lt;code&gt;Python&lt;/code&gt;札记》。本系列的札记主要是自学&lt;code&gt;齐伟&lt;/code&gt;老师《跟老齐学&lt;code&gt;Python&lt;/code&gt;轻松入门》一书整理而来。书第一遍断断续续花了5个月，第二遍边看边整理，保守3个月。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>超时空从犯</title>
    <link href="https://www.policx.com/Accomplice/"/>
    <id>https://www.policx.com/Accomplice/</id>
    <published>2019-07-18T02:18:06.000Z</published>
    <updated>2019-07-18T06:24:43.588Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><input checked disabled type="checkbox"> 你回头看了我一眼</li></ul><a id="more"></a><ul><li><input disabled type="checkbox"> 我觉得那很久很久</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;input checked disabled type=&quot;checkbox&quot;&gt; 你回头看了我一眼&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="label" scheme="https://www.policx.com/categories/label/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter的环境配置 for Mac</title>
    <link href="https://www.policx.com/flutter/"/>
    <id>https://www.policx.com/flutter/</id>
    <published>2019-07-16T10:14:18.000Z</published>
    <updated>2019-07-18T06:22:40.943Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 </p><a id="more"></a><h2 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装Flutter</h2><p>首先我们可以在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fdocs%2Fget-started%2Finstall" target="_blank" rel="noopener">Flutter官网</a>上面看到一些配置环境的步骤。这里就直接开干了，走起。 </p><h3 id="1、配置HomeBrew"><a href="#1、配置HomeBrew" class="headerlink" title="1、配置HomeBrew"></a>1、配置HomeBrew</h3><p>我们在去配置Flutter的环境之前，需要先检查一下HomeBrew是不是最新的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br></pre></td></tr></table></figure><p>如果没有brew的话，可以去<a href="https://link.juejin.im?target=https%3A%2F%2Fbrew.sh%2F" target="_blank" rel="noopener">HomeBrew官网</a>自行下载。这里就不赘述了，这里如果重新下载的话，看到下面的打印信息就说明下载完毕了。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3aad595f24923.jpg" alt></p><h3 id="2、下载SDK"><a href="#2、下载SDK" class="headerlink" title="2、下载SDK"></a>2、下载SDK</h3><p>接下来就是去官网下载SDK了。注意，这里下载SDK有两种方法：</p><ul><li>一是直接<code>git clone -b beta https://github.com/flutter/flutter.git</code>下载</li><li>二是自己在官网下载下来，如下图<br><img src="https://i.loli.net/2019/07/16/5d2db40e0aecc50465.jpg" alt></li></ul><p>这里我两种方法都试过了一遍，第一种方法实在是太慢了，在经历了耗费一个半小时下载到94%，最后提示失败了的过程之后，我决定还是用第二种方法，整个过程只用了3分钟的样子，相当满意。下载完之后，是一个名字叫<code>flutter_macos_v1.5.4-hotfix.2-stable.zip</code>的压缩包。 然后我们解压这个zip包，把解压出来的<strong>flutter</strong>文件放到根目录下即可。 </p><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p>因为Flutter的SDK中包含了很多的命令行工具。我们就需要配置环境变量，所以我直接就安装到了根目录下了。</p><p><strong>配置镜像</strong></p><p>因为Flutter在运行的时候，就需要去官网下载一些需要的资源，但是因为天国特色的wall的原因，我们就需要镜像服务器，这个在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fcommunity%2Fchina" target="_blank" rel="noopener">官网</a>上面有写的很明白，而且这是一个临时的镜像，后面还要以官网的镜像地址为准。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3f2c1f4f64480.jpg" alt></p><p>我们跳转到根目录 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>就能找到这个<code>.bash_profile</code>隐藏文件，我们用vim打开这个文件 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后需要输入就把A键按一下进入编辑模式，把下面三个环境变量配置进去 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line">export PATH=/Users/xueliheng/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>注意下，第三个环境变量这里<code>/Users/xueliheng/</code>是我的根目录，然后<code>/flutter/</code>是我们刚刚解压的的zip包里面的<code>flutter</code>文件夹。上面两个环境变量是两个镜像地址，上文中也有说过。 接着<code>shift+：</code>然后输入<code>wq</code>保存并退出vim。输入如下命令： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>最后我们就可以验证一下flutter环境有没有配置成功了。输入： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure><p>看到如下如的打印信息就是配置成功了<br><img src="https://i.loli.net/2019/07/16/5d2db44407fa682753.jpg" alt></p><h3 id="4、配置Android-Studio"><a href="#4、配置Android-Studio" class="headerlink" title="4、配置Android Studio"></a>4、配置Android Studio</h3><p>如果没有下载<strong>Android Studio</strong>的话，就去<a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.android.google.cn%2Fstudio" target="_blank" rel="noopener">官网</a>去下载一下。 我们用<code>flutter doctor</code>命令去检查一下flutter的环境配置，我们可以看到如下打印 </p><p><img src="https://i.loli.net/2019/07/16/5d2db4676ec3a36838.jpg" alt></p><p>这里的每个<code>✗</code>都是我们要去解决的问题。不过他有告诉你应该怎么做。比如第一个提示： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices</span><br><span class="line">    ✗ Unable to locate Android SDK.</span><br></pre></td></tr></table></figure><p>这就是让你去下载Android Studio。我们在下载完成之后，打开AS让他去下载一些应该下载的东西。 如果这里有提示你 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices (Android SDK version 24.0.2)</span><br><span class="line">    ✗ Flutter requires Android SDK 28 and the Android BuildTools 28.0.3</span><br></pre></td></tr></table></figure><p>这就是在提示让你去升级一下SDK，然后命令如下 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;/Users/xueliheng/Library/Android/sdk/tools/bin/sdkmanager&quot; &quot;platforms;android-28&quot; &quot;build-tools;28.0.3&quot;</span><br></pre></td></tr></table></figure><p>注意一下，这个地方的升级是需要”科学上网“的，如果有的小伙伴没有这个条件的话，我这边百度云上面给大家准备了一个<a href="https://link.juejin.im?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F10yp8PuRXxk7YvcNR_dTy8Q" target="_blank" rel="noopener">链接</a>，提取码: e48c，大家可以下载下来。下载下来之后解压到<code>/Users/Library/Android/</code>这个文件夹。把原先的SDK直接覆盖就行了，就已经是最新的SDK了。 </p><p>接下来我们配置一下安卓的环境变量，还是在根目录下找到<code>.bash_profile</code>文件，并在其中添加四个环境变量 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=~/Library/Android/sdk</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/emulator</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br></pre></td></tr></table></figure><p>分别是： </p><ul><li>安卓sdk的路径</li><li>安卓的模拟器路径</li><li>安卓tools路径</li><li>安卓平台工具</li></ul><p>接下来我们再用<code>flutter doctor</code>检查的时候，显示的信息如下图<br><img src="https://i.loli.net/2019/07/16/5d2db4964a70b73490.jpg" alt></p><p>意思就是让我们去下载iOS的相关环境，我们先暂时放放，下面还有一个关于<strong>Android Studio</strong>的没有解决完</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">✗ Dart plugin not installed; this adds Dart specific functionality.</span><br></pre></td></tr></table></figure><p>这个就是缺少Flutter插件的意思，那么我们就去AS里面去配置一下好了。打开AS的<code>Preferences</code>，点击<code>Plugins</code>，在搜索栏中输入<code>flutter</code>，找到相应的插件，然后<code>Install</code>。当跳出安装Dart插件的提示界面时，记得点击Yes进行安装。安装完毕之后<code>restart IDE</code>重启AS。 重启之后就能看到多了一个这个东西<br><img src="https://i.loli.net/2019/07/16/5d2db4b731cbd14001.jpg" alt></p><p>我们再用<code>flutter doctor</code>检测一下<br><img src="https://i.loli.net/2019/07/16/5d2db4cdc6dd137908.jpg" alt></p><p>现在终于ok了。我们看到<code>[✓]Android Studio</code>说明，安卓的环境基本上配置成功，接下来我们就配置一下安卓的模拟器就好了。 </p><h3 id="5、安卓模拟器配置"><a href="#5、安卓模拟器配置" class="headerlink" title="5、安卓模拟器配置"></a>5、安卓模拟器配置</h3><p>在AS中找到模拟器配置如下图并选择<br><img src="https://i.loli.net/2019/07/16/5d2db4dacfde455330.jpg" alt></p><p>接着就创建设备，选择设备<br><img src="https://i.loli.net/2019/07/16/5d2db4e68a2ed68879.jpg" alt></p><p>选择系统<br><img src="https://i.loli.net/2019/07/16/5d2db4f6cdc5889902.jpg" alt></p><p>最后点击下载就完成了。 </p><h3 id="6、配置iOS环境"><a href="#6、配置iOS环境" class="headerlink" title="6、配置iOS环境"></a>6、配置iOS环境</h3><p>我们配置完了安卓的环境，再来<code>flutter doctor</code>检测一下。<br><img src="https://i.loli.net/2019/07/16/5d2db50ad75eb82331.jpg" alt></p><p>情况是这样的。目前1.5.4版本的Flutter需要匹配新版本的Xcode10.2.1。按照他提示的来试试，提示我Xcode版本太低了，需要升级Xcode<br><img src="https://i.loli.net/2019/07/16/5d2db5275c8f825074.jpg" alt></p><p>更新到最新的之后，继续走下面的步骤依旧会报错。那么我们可以试试下面的这个办法： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew link pkg-config</span><br><span class="line">$ brew install --HEAD usbmuxd</span><br><span class="line">$ brew unlink usbmuxd</span><br><span class="line">$ brew link usbmuxd</span><br><span class="line">$ brew install --HEAD libimobiledevice</span><br><span class="line">$ brew install ideviceinstaller</span><br></pre></td></tr></table></figure><p>这些执行完之后执行一下<code>flutter doctor</code><br><img src="https://i.loli.net/2019/07/16/5d2db5515858b19228.jpg" alt></p><p>最后还真是没错，全部配置完成了！那么我们就把iOS的也配置完毕了。</p><h3 id="7、VSCode的使用"><a href="#7、VSCode的使用" class="headerlink" title="7、VSCode的使用"></a>7、VSCode的使用</h3><p>VSCode上面使用的话，就简单多了，这里我就简答的赘述一下。 只需要将<code>Dart</code>和<code>Flutter</code>插件都下载下来<br><img src="https://i.loli.net/2019/07/16/5d2db5643b08597602.jpg" alt></p><p>然后<code>command+shift+p</code>输入<code>flutter</code>，选择<code>Flutter：New Project</code><br><img src="https://i.loli.net/2019/07/16/5d2db576e145096766.jpg" alt></p><p>输入要创建的项目的名称和存放项目的地址。如果提示需要指明flutter的SDK的路径，那就选择根目录那个经过解压得来的flutter的文件夹就好了。 接下来是这样一个界面<br><img src="https://i.loli.net/2019/07/16/5d2db588f1b5152482.jpg" alt></p><p>接下来我们选择<code>View-&gt;Start Debugging</code>来运行项目。<br><img src="https://i.loli.net/2019/07/16/5d2db59bb3b3338193.jpg" alt></p><p>当然这个过程需要你把Xcode的模拟器打开。运行完之后就能看到这个界面，也就是你的第一个Flutter工程啦！<br><img src="https://i.loli.net/2019/07/16/5d2db5ad5eaf434960.jpg" alt></p><h3 id="8、Hot-reload的使用"><a href="#8、Hot-reload的使用" class="headerlink" title="8、Hot reload的使用"></a>8、Hot reload的使用</h3><p>我们打开<code>lib/main.dart</code>文件，然后在其中找到 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have pushed the button this many times:</span><br></pre></td></tr></table></figure><p>并把这个改为 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have clicked the button this many times:</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2db5cc5b4f279074.jpg" alt><br>那么我们就能看到界面上多了一个小闪电<br><img src="https://i.loli.net/2019/07/16/5d2db5f044c0553935.jpg" alt></p><p>我们现在如果<code>command+s</code>保存一下更改的话，就能很快的在模拟器上面看到相应的更改，不需要再重新去编译一边。这一点简直是太棒了！解决了iOS开发者一个大痛点啊！！！ </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，flutter的环境搭建工作基本上就进行完毕了，整个过程大概耗时接近2个小时，这期间包括采坑、查资料、下载、科学上网…等等很蛋疼的事情。当然网速基本上是最大的障碍，浪费了很多的时间。所以也是需要一定的耐心来完成的。 后面的文章也会持续的更新，最近有点懈怠，OpenGL系列的文章有点拖更的节奏，这个后面会补起来。Flutter我也才刚刚接手，也是慢慢的来采坑，也会以此来记录自己的学习经历，也希望能多多跟大家交流。 再次我附上自己的邮箱<code>coderspr1nghall@gmail.com</code>欢迎讨论交流。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://juejin.im/post/5d0508d56fb9a07ec373eb9e" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2dbb03b8ef977558.jpg" alt></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 &lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://www.policx.com/spider/"/>
    <id>https://www.policx.com/spider/</id>
    <published>2019-07-15T02:06:04.000Z</published>
    <updated>2019-07-18T06:22:40.946Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。</p><a id="more"></a><p>其实爬虫这个概念很简单，基本可以分成以下几个步骤：</p><ul><li><p>发起网络请求</p></li><li><p>获取网页</p></li><li><p>解析网页获取数据</p></li></ul><p>发起网络请求这个步骤常用的类库有标准库urllib以及Python上常用的requests库。解析网页常用的类库有的BeautifulSoup。另外requests的作者还开发了另一个很好用的库requests-html，提供了发起请求和解析网页的二合一功能，开发小型爬虫非常方便。另外还有一些专业的爬虫类库，其中比较出名的就是scrapy。本文将会简单介绍一下这些类库，之后还会专门写一篇文章介绍scrapy的用法。</p><h2 id="标准库urllib"><a href="#标准库urllib" class="headerlink" title="标准库urllib"></a><strong>标准库urllib</strong></h2><p>首先先来看标准库urllib。标准库的优点是Python自带的，不需要安装任何第三方库，缺点就是urllib属于偏底层的库，使用起来比较麻烦。下面是urllib发起请求的一个简单例子，大家看看就好。可以看到为了发起一个简单的请求，我们需要创建opener、request、ProxyHandler等好几个对象，比较麻烦。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> urllib.request <span class="hljs-keyword">as</span> request</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="hljs-string">'https'</span>: <span class="hljs-string">'https://127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="hljs-string">'http'</span>: <span class="hljs-string">'http://127.0.0.1:1080'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'--------------使用urllib--------------'</span>)</span><br><span class="line">url = <span class="hljs-string">'http://www.google.com'</span></span><br><span class="line">opener = request.build_opener(request.ProxyHandler(proxies))</span><br><span class="line">request.install_opener(opener)</span><br><span class="line">req = request.Request(url, headers=headers)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a><strong>requests</strong></h2><p>requests是Kenneth Reitz大神的著名作品之一，优点就是极度简单和好用。首先来安装requests。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>下面是一个简单的例子，和上面urllib示例代码实现的功能相同，但是代码量少多了，也更易读。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="hljs-string">'--------------使用requests--------------'</span>)</span><br><span class="line">response = requests.get(<span class="hljs-string">'https://www.google.com'</span>, headers=headers, proxies=proxies)</span><br><span class="line">response.encoding = <span class="hljs-string">'utf8'</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>requests还可以方便的发送表单数据，模拟用户登录。返回的Response对象还包含了状态码、header、raw、cookies等很多有用的信息。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="hljs-string">'name'</span>: <span class="hljs-string">'yitian'</span>,</span><br><span class="line">    <span class="hljs-string">'age'</span>: <span class="hljs-number">22</span>,</span><br><span class="line">    <span class="hljs-string">'friends'</span>: [<span class="hljs-string">'zhang3'</span>, <span class="hljs-string">'li4'</span>]</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="hljs-string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">pprint(response.__dict__)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>关于requests我就不多做介绍了，因为它有中文文档，虽然比官方落后几个小版本号，不过无伤大雅，大家可以放心参阅。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://cn.python-requests.org/zh_CN/latest/</span><br></pre></td></tr></table></figure><h2 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a><strong>beautifulsoup</strong></h2><p>利用前面介绍的requests类库，我们可以轻易地获取HTML代码，但是为了从HTML中找到所需的数据，我们还需要HTML/XML解析库，BeautifulSoup就是这么一个常用的库。首先先来安装它：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>这次就用我简书主页作为例子，爬取一下我简书的文章列表。首先先用requests获取到网页内容。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"><span class="hljs-keyword">import</span> bs4</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><p>然后就是BeautifulSoup的代码了。在使用BeautifulSoup的时候首先需要创建一个HTML树，然后从树中查找节点。BeautifulSoup主要有两种查找节点的办法，第一种是使用find和find_all方法，第二种方法是使用select方法用css选择器。拿到节点之后，用contents去获取它的子节点，如果子节点是文本，就会拿到文本值，注意这个属性返回的是列表，所以要加[0]。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html = bs4.BeautifulSoup(response.text, features=<span class="hljs-string">'lxml'</span>)</span><br><span class="line">note_list = html.find_all(<span class="hljs-string">'ul'</span>, class_=<span class="hljs-string">'note-list'</span>, limit=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.select(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.contents[<span class="hljs-number">0</span>]</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>BeautifulSoup也有中文文档，同样也是稍微落后两个小版本，影响不大。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</span><br></pre></td></tr></table></figure><h2 id="requests-html"><a href="#requests-html" class="headerlink" title="requests-html"></a><strong>requests-html</strong></h2><p>这个类库是requests的兄弟，同样也是Kenneth Reitz大神的作品。它将请求网页和解析网页结合到了一起。本来如果你用requests的话只能请求网页，为了解析网页还得使用BeautifulSoup这样的解析库。现在只需要requests-html一个库就可以办到。<br>首先先来安装。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests-html</span><br></pre></td></tr></table></figure><p>然后我们来看看用requests-html如何重写上面这个例子。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line">note_list = r.html.find(<span class="hljs-string">'ul.note-list'</span>, first=<span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.find(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html除了可以使用css选择器来搜索以外，还可以使用xpath来查找。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html还有一个很有用的特性就是浏览器渲染。有些网页是异步加载的，直接用爬虫去爬只能得到一个空页面，因为数据是靠浏览器运行JS脚本异步加载的，这时候就需要浏览器渲染了。而浏览器渲染用requests-html做非常简单，只要多调用一个render函数即可。render函数有两个参数，分别指定页面下滑次数和暂停时间。render函数第一次运行的时候，requests-html会下载一个chromium浏览器，然后用它渲染页面。<br>简书的个人文章页面也是一个异步加载的例子，默认只会显示最近几篇文章，通过浏览器渲染模拟页面下滑，我们可以得到所有文章列表。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line"><span class="hljs-comment"># render函数指示requests-html用chromium浏览器渲染页面</span></span><br><span class="line">r.html.render(scrolldown=<span class="hljs-number">50</span>, sleep=<span class="hljs-number">0.2</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>类似的，今日头条的个人页面也是异步加载的，所以也得调用render函数。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">        <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(<span class="hljs-string">'https://www.toutiao.com/c/user/6662330738/#mid=1620400303194116'</span>, headers=headers)</span><br><span class="line">r.html.render()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r.html.find(<span class="hljs-string">'div.rbox-inner a'</span>):</span><br><span class="line">    title = i.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.toutiao.com<span class="hljs-subst">&#123;i.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》 <span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>最后是requests-html的官网地址以及中文文档。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://html.python-requests.org/</span><br><span class="line">https://cncert.github.io/requests-html-doc-cn/</span><br></pre></td></tr></table></figure><h2 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a><strong>scrapy</strong></h2><p>以上介绍的几个框架都是各自有各自的作用，把它们结合起来可以达到编写爬虫的目的，但是要说专业的爬虫框架，还是得谈谈scrapy。作为一个著名的爬虫框架，scrapy将爬虫模型框架化和模块化，利用scrapy，我们可以迅速生成功能强大的爬虫。<br>不过scrapy概念众多，要仔细说还得专门开篇文章，这里就只简单演示一下。首先安装scrapy，如果是Windows系统，还需要安装pypiwin32。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy  </span><br><span class="line">pip install pypiwin32</span><br></pre></td></tr></table></figure><p>然后创建scrapy项目并添加一个新爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject myproject</span><br><span class="line">cd myproject</span><br><span class="line">scrapy genspider my jianshu.com</span><br></pre></td></tr></table></figure><p>打开配置文件settings.py，设置用户代理，否则会遇到403错误。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br></pre></td></tr></table></figure><p>然后修改一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JianshuSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="hljs-string">'jianshu'</span></span><br><span class="line">    allowed_domains = [<span class="hljs-string">'jianshu.com'</span>]</span><br><span class="line">    start_urls = [<span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">'div.content'</span>):</span><br><span class="line">            <span class="hljs-keyword">yield</span> &#123;</span><br><span class="line">                <span class="hljs-string">'title'</span>: article.css(<span class="hljs-string">'a.title::text'</span>).get(),</span><br><span class="line">                <span class="hljs-string">'link'</span>: <span class="hljs-string">'https://www.jianshu.com'</span> + article.xpath(<span class="hljs-string">'a[@class="title"]/@href'</span>).get()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>最后运行一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl my</span><br></pre></td></tr></table></figure><br><table><thead><tr><th>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1563247765&ver=1731&signature=gm2iTUKE3itOZzvlz9SUtKCYNv*PqEYt2C7ReV7kd47e2ZAWPvG5GRXZUJsiRIde34Uh5FznBslw4hHhXmHQXyV3yz0tTdgds1RMCdai6Oyy98w2-iTBRWeJlpm3cWa8&new=1" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2d4c5ba835e96705.jpg" alt="Python"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>DDoS（分布式拒绝服务）攻击是无解的吗？</title>
    <link href="https://www.policx.com/ddos/"/>
    <id>https://www.policx.com/ddos/</id>
    <published>2019-07-14T07:26:43.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>“</strong></p><p>DDOS？ </p><p>一言难尽啊！ </p><p>”</p><a id="more"></a><p>先说结论，DDoS是近年来网络攻击中的一棵“常青树”，的确很难缠，但说它是无解的，那也有点太看得起它了。虽然DDoS在对很多大平台的攻击中出尽了风头，但在现在互联网的解决方案中，并不缺乏应对DDoS的解决方案。 </p><p>说起DDoS攻击，我脑海里能够想到的全都是中国民间俗语，什么“双拳难敌四手，好汉架不住人多”，什么“千斤拨四两”，什么“乱拳打死老师傅”等等等等。 </p><p>之前有朋友跑来问我DDoS是个什么东西，为什么这么多互联网巨头都被搞得没有脾气，我记得我当时我是这么举的例子： </p><p>我们这一代人小的时候，自助餐开始在中国内地风行，那会儿这个行业里为了打击竞争对手，对手最惯常使用的阴招是雇佣很多五大三粗的人，给他们钱去对方的店里一通猛吃，杯盘狼藉之下，用不了几天这家自助餐就能给吃黄了。 </p><p>而DDoS攻击比这种还阴损，如果你开了一家餐馆，你的对手如果想搞你，最好的办法就是找一堆地痞流氓到你的店里坐的满满一屋子，你如果上前问，他们就一直跟你扯淡找麻烦，导致真正想吃饭的顾客一看这个情形，掉头就走了。 </p><p>用不了多久，你的餐馆就会开不下去，而你的竞争对手就会趁机蚕食掉你的市场份额，而放在网络语境里，这就是DDoS攻击的最基本原理。 </p><p>而这件事之所以难缠在于，一两个无赖根本成不了气候，想要耍流氓必须要有很多个无赖集结在一起。<strong>所以和现实世界中的无赖一样，DDoS真正的杀手锏在于利用能够发动的汹涌的流量，可以瞬间冲垮被攻击网站的服务器。</strong></p><p>如果我们回溯一下历史的话，会发现黑客组织之所以会有组织有预谋的发起DDoS攻击，基本上都是基于以下几个原因： </p><ul><li><p>有些行业如果网站被恶意攻击，会造成很难估量的损失，这个时候黑客发动DDoS攻击的初衷一般是出于敲诈勒索，为了保证企业的正常运转，他们通常愿意向黑客付高额的赎金； </p></li><li><p>行业内血海一片，DDoS是恶意竞争的屠刀。这个现象从逻辑上，其实雇佣无赖去占领对手餐馆的原理是一毛一样的，而且DDOS攻击早已产业化，现在中国的DDOS黑市，出钱请黑客打1G的流量到一个网吧或网站，市场价只要不到50块钱，但对于一个创业公司或者干脆就是一个小网吧来说，这已经算是可以灭顶的无妄之灾了。 </p></li><li><p>DDoS攻击往往成为掩盖真实网络攻击的烟雾弹，在遭受DDoS攻击的企业中，部分企业还伴随数据丢失的现象，黑客利用DDoS攻击掩盖其窃取用户隐私的真实目的，这种攻击行为在社交网站、金融领域等用户隐私高价值的行业尤为高发。 </p></li></ul><p>比如说，去年年初的时候，荷兰第一大银行荷兰商业银行于2018年1月28日晚间遭到DDoS攻击；第二大银行荷兰合作银行的网银服务29日早晨遭到攻击；第三大银行荷兰银行在那一周内共遭到7次网络攻击，仅周末就有3次。 </p><p>不过这一次发生在荷兰的针对银行系统的攻击并没有造成用户隐私的泄露，原因在于这仅仅是一次来自俄罗斯一个网络间谍组织Cozy Bear对荷兰情报组织AIVD侵犯其计算机的“单纯”的报复行为。<strong>但并不是所有黑客组织发起的DDoS攻击都如此单纯。</strong></p><p>2018年年底时万豪酒店发布了一则公告，称其旗下喜达屋酒店的5亿人次的信息被泄露，共计3.27亿人，泄露信息包括姓名、邮寄地址、电话号码、电子邮件昂面地址、护照号码、出生日期、性别等等入住信息，更糟糕的是万豪无法确定，侵入酒店系统的第三方黑客，在窃取的信息中是否包含客人的银行卡号和密码。（此案例和DDOS攻击无关，建议采用其他案例，比如2011年4月20日至26日，索尼遭受DDoS攻击，目的是为了掩盖盗取索尼PS的用户数据。） </p><p>而游戏领域，则是DDoS攻击的另一个重灾区，不光是刚才前文中提到的暴雪，包括索尼、金山、网易在内的众多知名游戏公司都曾数次遭受攻击，可以说DDoS攻击是游戏企业的噩梦。 </p><p>许多刚创业的游戏公司，可能刚上线就被打死，而一些处在融资阶段的游戏公司，由于遭遇攻击而被迫停服，则很大程度上会调低投资人的预期，甚至导致融资失败。 </p><p>而这些因素，都是竞对打压或者敲诈勒索的绝对软肋。 </p><p>从以上的几个案例我们不难看出，和现实中的耍流氓和敲诈勒索相比，通过网络手段进行攻击的风险和成本更低，坏蛋的嘴脸也更穷凶极恶一点，无论是政府机构还是企业平台，无论你是巨头还是小蚂蚁，只要你身上有羊毛可以薅，你都时刻面临着被洗劫的风险 </p><p>不过刚在开头我也讲了，虽然DDoS很难缠很让人头痛，但本质上图并不是无解的。 </p><p>回到我最开始讲的那个例子。 </p><p>你是一个餐馆老板，过去三十年一直是个老老实实的厨子，突然面对五十个臭流氓到你店里耍无赖的时候，你最好的应对方法，应该是什么？ </p><p>自己组建一支人马，和这些臭流氓正面刚？这恐怕不行，因为你不是臭流氓，你没有相应的作战经验。 </p><p>报警请人民警察来帮忙处理？这恐怕也不行，人家在你店里没有打砸抢，只是“温和的”非暴力不合作，警察来了也只能当民事调解，并且人家马仔众多，明天再换一拨新面孔来，玩的你一点脾气都没有。 </p><p>这就是面对DDoS时，无论是巨头还是小蚂蚁，他们的实实在在的困境。 </p><p>但正所谓“道高一尺魔高一丈”，你在云上和我耍流氓，那我就在云上回击。 </p><p><strong>“云”的事儿，不如还交还给云来处理。</strong>我认为就目前DDoS的在攻击量级上的疯狂进击的前提下，云计算服务厂商或许是狙击它们的最有效手段。 </p><p>2018年年初，峰值1.35TB/秒的流量冲击了开发者平台 GitHub。这是第一次TB量级的DDoS攻击。GitHub 受到攻击后，服务器断断续续，无法访问。攻击发生 10 分钟后，GitHub 向CDN 服务商 Akamai 请求协助，访问 GitHub 的流量已经由后者接管并在15分钟之内完成了防御。 </p><p>Akamai的相关负责人在接受采访时说，我们是基于迄今为止最大规模 DDoS 攻击五倍的峰值而做的相应准备，所以 1.3T 对我们来说是小意思。 </p><p>在关于流量峰值这一点上，我认为饱受双11、双12、618等全民购物狂欢的电商巨头们更有发言权，就拿京东举例子好了。 </p><p>京东云在之前发布的高防版的DDoS服务中，展示出了非常明确的信心是，在多年的电商狂欢流量对抗中，京东云已经在实战中建立了一套完备的防御机制，无论是在流量峰值的建模上，还是在DDoS的防御算法上，它的部署都远远不是纸上谈兵，而是拳拳到肉的经受住了实战的洗礼。要知道，全世界每年有超过5成的DDoS攻击都来自中国，而我们的国家也是全世界超过美国的第一大“肉鸡”市场，由电商大数据加持演化而来的京东云，它在云安全的理解上可以说是非常深刻了。 </p><p>所以说，如果说一定要有一个结论，我想说“上帝的归上帝，而云上的归云上”，像京东云这样的基于电商大数据考验的云计算平台，或许才是对抗DDoS的最终答案。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f3adcbb2ed60428.png" alt="jd"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;“&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DDOS？ &lt;/p&gt;
&lt;p&gt;一言难尽啊！ &lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.policx.com/program/JavaScript/node/"/>
    <id>https://www.policx.com/program/JavaScript/node/</id>
    <published>2019-07-13T16:06:04.000Z</published>
    <updated>2019-07-18T06:22:40.943Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/15/5d2c47df96f5d45317.jpg" alt="Node.js"></p><p>能方便地搭建响应速度快、易于扩展的网络应用，Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>中文：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org</a>、<a href="https://nodejs.cn/" target="_blank" rel="noopener">https://nodejs.cn</a></p><p>简单说Node.js就是运行在服务器端的JavaScript，是现在流行的语言中能同时运行在前端与后台的程序语言，你可以把JavaScript想像成Java与C#。相关技术：</p><p>数据库：MongoDB，非关系型数据库，NoSQL（Not only SQL）</p><p>MVC框架：AngularJS</p><p>Web服务器：Express</p><p>模板引擎：jade、ejs、htmljs、swig、hogan.js</p><h1 id="二、搭建Node-js开发环境"><a href="#二、搭建Node-js开发环境" class="headerlink" title="二、搭建Node.js开发环境"></a>二、搭建Node.js开发环境</h1><h2 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h2><p>去官网下下载最新版本的Node.js一步一步按提示安装即可，如果安装失败就手动安装，将Node.js的安装位置配置到环境变量的path中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装完成后启动命令行，测试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="三、第一个Node-js程序"><a href="#三、第一个Node-js程序" class="headerlink" title="三、第一个Node.js程序"></a>三、第一个Node.js程序</h1><p>在上面的示例中，我们是通过IDE完成编译与运行的，其实手动运行也可以，比如编写一段代码如下：</p><blockquote><p>server.js</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//依赖一个http模块，相当于java中的import，与C#中的using</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">//创建一个服务器对象</span><br><span class="line">server = http.createServer(function (req, res) &#123;</span><br><span class="line">//设置请求成功时响应头部的MIME为纯文本</span><br><span class="line">res.writeHeader(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">//向客户端输出字符</span><br><span class="line">res.end(&quot;Hello World\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//让服务器监听本地8000端口开始运行</span><br><span class="line">server.listen(8000,&apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server is runing at 127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>在node环境下解释运行：<br><img src="https://i.loli.net/2019/07/14/5d2af984d2fae77488.jpg" alt></p><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2af89c2b5b226144.jpg" alt></p><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。<br>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。<br>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</p><h1 id="四、NPM（Node-js包管理器）"><a href="#四、NPM（Node-js包管理器）" class="headerlink" title="四、NPM（Node.js包管理器）"></a>四、NPM（Node.js包管理器）</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：  </p><ul><li>a)、允许用户从NPM服务器下载别人编写的第三方包到本地使用。  </li><li>b)、允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。  </li><li>c)、允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><h2 id="4-1、查看npm版本"><a href="#4-1、查看npm版本" class="headerlink" title="4.1、查看npm版本"></a>4.1、查看npm版本</h2><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p><h2 id="4-2、升级npm"><a href="#4-2、升级npm" class="headerlink" title="4.2、升级npm"></a>4.2、升级npm</h2><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="4-3、安装模块"><a href="#4-3、安装模块" class="headerlink" title="4.3、安装模块"></a>4.3、安装模块</h2><blockquote><p>npm install <module name> -参数</module></p></blockquote><p>如果带参数-g表示全局安装，否则只是安装到某个目录下。</p><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install express -g</span><br></pre></td></tr></table></figure><h2 id="4-4、卸载模块"><a href="#4-4、卸载模块" class="headerlink" title="4.4、卸载模块"></a>4.4、卸载模块</h2><p>我们可以使用以下命令来卸载 Node.js 模块。  </p><blockquote><p>sudo npm uninstall <module name></module></p></blockquote><p>如先使用安装指令安装bootstrap:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>再使用卸载指令删除模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall bootstrap</span><br></pre></td></tr></table></figure><p>可以到 /node_modules/ 目录下查看包是否还存在</p><h2 id="4-5、模块列表"><a href="#4-5、模块列表" class="headerlink" title="4.5、模块列表"></a>4.5、模块列表</h2><p>使用模块列表命令可以方便的看到当前项目中依赖的包：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h2 id="4-6、更新模块"><a href="#4-6、更新模块" class="headerlink" title="4.6、更新模块"></a>4.6、更新模块</h2><p>我们可以使用以下命令更新模块：<br><code>npm update</code>模块名称<br><code>npm up -g</code> 模块名称</p><h2 id="4-7、搜索模块"><a href="#4-7、搜索模块" class="headerlink" title="4.7、搜索模块"></a>4.7、搜索模块</h2><p><code>npm search</code>模块名称</p><h2 id="4-8、NPM-常用命令"><a href="#4-8、NPM-常用命令" class="headerlink" title="4.8、NPM 常用命令"></a>4.8、NPM 常用命令</h2><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。<br>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。<br>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。<br>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。<br>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。<br>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></package></package></p><h2 id="4-9、更换NPM-镜像"><a href="#4-9、更换NPM-镜像" class="headerlink" title="4.9、更换NPM 镜像"></a>4.9、更换NPM 镜像</h2><p>因为npm的服务器在国外，在网络状态不好的情况下引入一个模块会因为网络延迟而失败，可以更换成国内速度更快的镜像服务器，这里以使用淘宝 NPM 镜像（<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>）为例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/15/5d2c481d14f7270384.jpg" alt></p><p>这样就可以使用 cnpm 命令来安装模块了：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＄ cnpm install [name]</span><br></pre></td></tr></table></figure><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><p>如是安装失败，可以试试：</p><figure class="highlight zsh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">alias</span> cnpm=<span class="hljs-string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">--cache=<span class="hljs-variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">--userconfig=<span class="hljs-variable">$HOME</span>/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">  --userconfig=$HOME/.cnpmrc"'</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。使用Node.js作为AngularJS开发Web服务器的最佳方式是使用Express模块。</p><p>Express官网： <a href="https://expressjs.com/" target="_blank" rel="noopener">https://expressjs.com/</a></p><p>Express4.x API：<a href="https://expressjs.com/zh-cn/4x/api.html" target="_blank" rel="noopener">https://expressjs.com/zh-cn/4x/api.html</a></p><p><img src="https://i.loli.net/2019/07/15/5d2c484698cd427801.jpg" alt></p><h2 id="5-2、Express框架核心特性"><a href="#5-2、Express框架核心特性" class="headerlink" title="5.2、Express框架核心特性"></a><strong>5.2、Express框架核心特性</strong></h2><p>可以设置中间件来响应 HTTP 请求。</p><p>定义了路由表用于执行不同的 HTTP 请求动作。</p><p>可以通过向模板传递参数来动态渲染 HTML 页面。</p><p>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。</p><p>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p><h2 id="5-3、安装-Express"><a href="#5-3、安装-Express" class="headerlink" title="5.3、安装 Express"></a><strong>5.3、安装 Express</strong></h2><p>安装 Express 并将其保存到依赖列表中：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>以上命令全局安装express。也可安装时指定安装中间件。</p><p><em>body-parser</em> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</p><p><em>cookie-parser</em> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p><p><em>multer</em> - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">＄ npm install body-parser --save  </span><br><span class="line">＄ npm install cookie-parser --save  </span><br><span class="line">＄ npm install multer --save</span><br></pre></td></tr></table></figure><p>默认这些模块都已经添加。</p><h2 id="5-4、第一个Express框架实例"><a href="#5-4、第一个Express框架实例" class="headerlink" title="5.4、第一个Express框架实例"></a>5.4、第一个Express框架实例</h2><p>接下来我们使用 Express 框架来输出 “Hello World”。<br>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。</p><p>创建一个目录，如Project，进入命令行：</p><p>使用npm install express 导入express模块。</p><p>在目录下创建hello.js文件，如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//引入express模块</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">//创建一个app对象，类似一个web 应用（网站）</span><br><span class="line">var app = express();</span><br><span class="line">//接受指定路径的请求，指定回调函数</span><br><span class="line">app.get(&apos;/&apos;, function (req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//创建一个web服务器，可以认为就是web服务器对象</span><br><span class="line">//监听8081端口，当监听成功时回调</span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">   var host = server.address().address;  //地址</span><br><span class="line">   var port = server.address().port;  //端口</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-5、开发Express项目"><a href="#5-5、开发Express项目" class="headerlink" title="5.5、开发Express项目"></a>5.5、开发Express项目</h2><p><img src="https://i.loli.net/2019/07/14/5d2b00e97910997783.jpg" alt></p><p>创建好的项目如下：<br><img src="https://i.loli.net/2019/07/14/5d2b02dad205355700.jpg" alt></p><p>app.js是网站：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><p>bin\www是web服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">/**</span><br><span class="line"> * 依赖模块，导入</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;nodejsexpress:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从上下文环境中获得监听端口，如果空则3000</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Web服务器</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开始监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);  //指定发生错误时的事件</span><br><span class="line">server.on(&apos;listening&apos;, onListening);  //当监听成功时的回调</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 规范化端口</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *错误事件监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  //错误处理</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);  //结束程序</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当用户访问服务器成功时的回调</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/index.js路由，有点类似控制器或Servlet：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 获得首页 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>views/index.ejs首页视图：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在www上右键选择“运行方式”-&gt;Run ‘/bin/www’ 运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b034bcca6187136.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b044c2b12347829.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b041724d6091090.jpg" alt></p><h3 id="5-5-1、request对象"><a href="#5-5-1、request对象" class="headerlink" title="5.5.1、request对象"></a>5.5.1、request对象</h3><p>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ul><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ul><h3 id="5-5-2、response对象"><a href="#5-5-2、response对象" class="headerlink" title="5.5.2、response对象"></a>5.5.2、response对象</h3><p>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.app：同req.app一样</span><br><span class="line">res.append()：追加指定HTTP头</span><br><span class="line">res.set()在res.append()后将重置之前设置的头</span><br><span class="line">res.cookie(name，value [，option])：设置Cookie</span><br><span class="line">opition: domain / expires / httpOnly / maxAge / path / secure / signed</span><br><span class="line">res.clearCookie()：清除Cookie</span><br><span class="line">res.download()：传送指定路径的文件</span><br><span class="line">res.get()：返回指定的HTTP头</span><br><span class="line">res.json()：传送JSON响应</span><br><span class="line">res.jsonp()：传送JSONP响应</span><br><span class="line">res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</span><br><span class="line">res.redirect()：设置响应的Location HTTP头，并且设置状态码302</span><br><span class="line">res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</span><br><span class="line">res.send()：传送HTTP响应</span><br><span class="line">res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</span><br><span class="line">res.set()：设置HTTP头，传入object可以一次设置多个头</span><br><span class="line">res.status()：设置HTTP状态码</span><br><span class="line">res.type()：设置Content-Type的MIME类型</span><br></pre></td></tr></table></figure><h3 id="5-5-3、express获取参数有三种方法"><a href="#5-5-3、express获取参数有三种方法" class="headerlink" title="5.5.3、express获取参数有三种方法"></a>5.5.3、express获取参数有三种方法</h3><p>req.query 适合 <a href="https://localhost:3000/form?num=8888" target="_blank" rel="noopener">https://localhost:3000/form?num=8888</a><br>req.body 适合<a href="https://localhost:3000/form，Post请求中的参数" target="_blank" rel="noopener">https://localhost:3000/form，Post请求中的参数</a><br>req.params 适合获取form后的num：<a href="https://localhost:3000/form/num" target="_blank" rel="noopener">https://localhost:3000/form/num</a>  </p><p>（一）、GET</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = req.query.num;</span><br><span class="line">res.send(&quot;你获取的get数据为:&quot; + num);</span><br></pre></td></tr></table></figure><p>（二）、POST</p><p>解析post数据需要用到body-parser</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">//引入body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">//需要use的</span><br><span class="line">app.use(bodyParser.json()); // for parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">extended: true</span><br><span class="line">&#125;)); // for parsing application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.post(&apos;/form&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.body.num;</span><br><span class="line">res.send(&quot;你获取的post数据为:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>public/test.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"tinyphp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（三）、获取路径参数</p><p>app.js  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.get(&apos;/form/:num&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.params.num;</span><br><span class="line">res.send(&quot;你获取到form/后的参数:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="5-6-ejs基础"><a href="#5-6-ejs基础" class="headerlink" title="5.6 ejs基础"></a>5.6 ejs基础</h2><p>ejs是一个Express Web应用的模板引擎，在NodeJS开发中可以选择的模板引擎可能是所有Web应用开发中范围最广的，如jade、ejs、htmljs、swig、hogan.js，但ejs是最容易上手的，与jsp,asp,php的原始模板引擎风格很像。</p><p>官网：<a href="https://www.embeddedjs.com/" target="_blank" rel="noopener">https://www.embeddedjs.com/</a></p><p>添加一个<code>product.js</code>路由：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  var products=[];</span><br><span class="line">  products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">  //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">  res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>在views目录下添加<code>product.ejs</code>视图，这里是一个简单的MVC：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span> - 产品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"80%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%pdts.forEach(function(pdt,index)&#123;%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=index+1%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.name%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.price%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%&#125;);%</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">%=pdts[i].name%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改app，注册定义好的模块product：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> index = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/index'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/users'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> pdts = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/product'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//指定视图引擎为ejs</span></span><br><span class="line">app.set(<span class="hljs-string">'views'</span>, path.join(__dirname, <span class="hljs-string">'views'</span>));</span><br><span class="line">app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="hljs-comment">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class="line">app.use(logger(<span class="hljs-string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="hljs-string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/'</span>, index);</span><br><span class="line">app.use(<span class="hljs-string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="hljs-string">'/pdt'</span>, pdts);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b092ca2eb115835.jpg" alt></p><blockquote><p>原因：没有安装ejs模块<br>解决办法：进入到项目目录，安装ejs</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save ejs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b09efe80ba53992.jpg" alt></p></blockquote><p>重新运行：<br><img src="https://i.loli.net/2019/07/14/5d2b0a951a09231745.jpg" alt></p><h2 id="5-7、lodash"><a href="#5-7、lodash" class="headerlink" title="5.7、lodash"></a>5.7、lodash</h2><p>这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。可以非常方便的操作json。</p><p>官网：<a href="https://lodashjs.com/" target="_blank" rel="noopener">https://lodashjs.com/</a></p><p>安装：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash</span><br></pre></td></tr></table></figure><p>安装时先用cd切换到当前项目下。</p><p>如果浏览器使用可以直接引入：</p><script src="lodash.js"></script><p>添加lodash依赖：<br><img src="https://i.loli.net/2019/07/14/5d2b0c4c7c14a17367.jpg" alt></p><p>依赖成功后会在package.json中添加引用：<br><img src="https://i.loli.net/2019/07/14/5d2b0c9e03f1844597.jpg" alt></p><p>后台Node.js使用，可以引入模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//导入lodash模块</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var products=[];</span><br><span class="line">products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">//1、取出第一个元素</span><br><span class="line">var obj1=_.first(products);</span><br><span class="line">console.log(obj1.name);  //ZTE U880</span><br><span class="line"></span><br><span class="line">//2、取出最后一个元素</span><br><span class="line">var obj2=_.last(products);</span><br><span class="line">console.log(obj2.name);  //iPhone 7 Plus 128G</span><br><span class="line"></span><br><span class="line">//3、指定查找条件返回符合条件的索引</span><br><span class="line">var obj3=_.findIndex(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj3);  //2</span><br><span class="line"></span><br><span class="line">//4、指定查找条件返回查找到的对象</span><br><span class="line">var obj4=_.find(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj4);  //&#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;</span><br><span class="line"></span><br><span class="line">//5、排序</span><br><span class="line">var obj5=_.orderBy(products,[&quot;price&quot;,&quot;name&quot;],[&quot;desc&quot;,&quot;asc&quot;]);</span><br><span class="line">console.log(obj5);</span><br><span class="line"></span><br><span class="line">//[ &#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;HuWei 荣耀8&apos;, price: 1899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;ZTE U880&apos;, price: 899.8 &#125; ]</span><br><span class="line"></span><br><span class="line">//6、查找价格为1899.8的产品的key</span><br><span class="line">var obj6=_.findKey(products,&#123;price:1899.8&#125;);</span><br><span class="line">console.log(obj6);   //1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/14/5d2b0f023a83710965.jpg" alt></p><p>API的使用非常简单，但需要注意版本，可以现查现用，API地址：<a href="https://lodash.com/docs/4.17.2%20" target="_blank" rel="noopener">https://lodash.com/docs/4.17.2 </a></p><h2 id="5-8、参数"><a href="#5-8、参数" class="headerlink" title="5.8、参数"></a>5.8、参数</h2><h3 id="5-8-1、URL中的参数占位"><a href="#5-8-1、URL中的参数占位" class="headerlink" title="5.8.1、URL中的参数占位"></a>5.8.1、URL中的参数占位</h3><p>Checks route params (req.params), ex: /user/:id</p><p>127.0.0.1:3000/index，这种情况下，我们为了得到index，我们可以通过使用req.params得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式；</p><p><code>http://127.0.0.1:3000/pdt/9527/phone</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得产品根据Id</span><br><span class="line">router.get(&apos;/:id/:category&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(request.params.id+&quot;,&quot;+request.params.category);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b10e8e678f43145.jpg" alt></p><h3 id="5-8-2、URL中的QueryString"><a href="#5-8-2、URL中的QueryString" class="headerlink" title="5.8.2、URL中的QueryString"></a>5.8.2、URL中的QueryString</h3><p>Checks query string params (req.query), ex: ?id=12</p><p>127.0.0.1:3000/index?id=12，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用req.query.id就可以获得，类似于PHP的get方法；</p><p><code>http://127.0.0.1:3000/pdt/9527?name=jobs</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(&quot;name:&quot;+request.query.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b12be0371490358.jpg" alt></p><h3 id="5-8-3、HTTP正文中的参数"><a href="#5-8-3、HTTP正文中的参数" class="headerlink" title="5.8.3、HTTP正文中的参数"></a>5.8.3、HTTP正文中的参数</h3><p>在post请求中获得表单中的数据。</p><p>Checks urlencoded body params (req.body), ex: id=</p><p>127.0.0.1：300/index，然后post了一个id=2的值，这种方式是获取客户端post过来的数据，可以通过req.body.id获取，类似于PHP的post方法；</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222150412682-243382356.png" alt></p><p>页面：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &lt;%= title %&gt;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%pdts.forEach(function(pdt,index)&#123;%&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=index+1%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.name%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.price%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%&#125;);%&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=pdts[i].name%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            &lt;%if(typeof msg!=&quot;undefined&quot;)&#123;%&gt;</span><br><span class="line">                &lt;%=msg%&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">        &lt;form action=&quot;pdt/add&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                名称：&lt;input name=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                价格：&lt;input name=&quot;price&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/add&apos;,function(request,res,next)&#123;</span><br><span class="line">    var entity=&#123;name:request.body.name,price:request.body.price&#125;;</span><br><span class="line">    products.push(entity);</span><br><span class="line">      //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">      res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products,msg:&quot;添加成功&quot;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151340745-1374859267.png" alt></p><h2 id="5-9、JSON"><a href="#5-9、JSON" class="headerlink" title="5.9、JSON"></a>5.9、JSON</h2><p>如果需要Node.js向外提供返回JSON的接口，Express也是非常方便的，可以使用原来在浏览器中使用到的JSON对象，这是一个浏览器内置对象在服务可以直接使用：</p><p>将对象序列化成字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象</span><br><span class="line">var rose=&#123;&quot;name&quot;:&quot;Rose&quot;,&quot;weight&quot;:&quot;65&quot;&#125;;</span><br><span class="line">            //序列化成字符串</span><br><span class="line">            var str=JSON.stringify(rose);</span><br><span class="line">            alert(str);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151858839-27300214.png" alt></p><p>反序列化，将字符转换成对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成JavaScript对象</span><br><span class="line">var markStr=&apos;&#123;&quot;name&quot;:&quot;mark&quot;,&quot;weight&quot;:&quot;188&quot;&#125;&apos;;</span><br><span class="line">            var mark=JSON.parse(markStr);</span><br><span class="line">            alert(mark.name+&quot;，&quot;+mark.weight);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222152634417-1260078212.png" alt></p><p>Express已经封装了一个json方法，直接调用该方法就可以序列化对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/rest&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(products);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、RESTful（表述性状态转移）"><a href="#六、RESTful（表述性状态转移）" class="headerlink" title="六、RESTful（表述性状态转移）"></a>六、RESTful（表述性状态转移）</h1><p>REST是英文Representational State Transfer的缩写，中文称之为“表述性状态转移” 基于HTTP协议，是另一种服务架构，传递是JSON、POX（Plain Old XML）而不是SOAP格式的数据，充分利用HTTP谓词（Verb），侧重数据的传输，业务逻辑交给客户端自行处理</p><p>REST是一种分布式服务架构的风格约束，像Java、.Net（WCF、WebAPI）都有对该约束的实现，使URL变得更加有意义，更加简洁明了，如：</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>get请求 表示获得所有产品的第1个</p><p><a href="https://www.zhangguo.com/products/product" target="_blank" rel="noopener">https://www.zhangguo.com/products/product</a><br>post请求 表示添加一个产品</p><p><a href="https://www.zhangguo.com/products/1/price" target="_blank" rel="noopener">https://www.zhangguo.com/products/1/price</a><br>get请求 表示获得第1个产品的价格</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>delete请求 删除编号为1的产品</p><p>REST设计需要遵循的原则<br>网络上的所有事物都被抽象为资源（resource）；<br>每个资源对应一个唯一的资源标识符（resource identifier）；<br>通过通用的连接器接口（generic connector interface）对资源进行操作；<br>对资源的各种操作不会改变资源标识符；<br>所有的操作都是无状态的（stateless）</p><p>谓词<br><strong>GET</strong><br>表示查询操作，相当于Retrieve、Select操作<br><strong>POST</strong><br>表示插入操作，相当于Create，Insert操作<br><strong>PUT</strong><br>表示修改操作，相当于Update操作<br><strong>DELETE</strong><br>表示删除操作，相当于Delete操作</p><p>其它还有：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161223101344557-1727952968.png" alt></p><p>NodeJS+Express可以很容易的实现REST</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>application/json</li><li>res.setHeader(‘Content-Type’, ‘application/json;charset=utf-8’);</li></ul><p>示例代码cars.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var cars=[];</span><br><span class="line">cars.push(&#123;id:201701,name:&quot;BMW&quot;,price:190,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201702,name:&quot;BYD&quot;,price:25,speed:&quot;160km/h&quot;,color:&quot;红色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201703,name:&quot;Benz&quot;,price:300,speed:&quot;215km/h&quot;,color:&quot;蓝色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201704,name:&quot;Honda&quot;,price:190,speed:&quot;170km/h&quot;,color:&quot;黑色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201705,name:&quot;QQ&quot;,price:130,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line"></span><br><span class="line">/* Get */</span><br><span class="line">/*获得所有汽车*/</span><br><span class="line">/*url /cars/*/</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.json(cars);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Get*/</span><br><span class="line">/*获得汽车通过id*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">     //从路径中映射参数，转换成数字</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var car=_.find(cars,&#123;id:id&#125;);</span><br><span class="line">      res.json(car);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Post*/</span><br><span class="line">/*添加汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.post(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      car.id=_.last(cars).id+1;  //将编号修改为最后一辆车的编号+1</span><br><span class="line">      cars.push(car);  //将汽车对象添加到集合中</span><br><span class="line">      res.json(car);  //将添加成功的车以json的形式返回</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Put*/</span><br><span class="line">/*修改汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.put(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      console.log(req.body);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:parseInt(car.id)&#125;);  //根据id获得车在集合中的下标</span><br><span class="line"></span><br><span class="line">      cars[index]=car;  //替换原对象</span><br><span class="line">      //res.json(car);  //将修改后的车以json的形式返回</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;更新成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Delete*/</span><br><span class="line">/*删除汽车*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.delete(&apos;/id/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">      //获得url中的编号参数</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:id&#125;);  //根据id获得车在集合中的下标</span><br><span class="line">      cars.splice(index,1);   //在cars数组中删除下标从index开始的1条数据</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;删除成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>示例代码app.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line">var pdts = require(&apos;./routes/product&apos;);</span><br><span class="line">var task = require(&apos;./routes/task&apos;);</span><br><span class="line">var cars = require(&apos;./routes/cars&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line">app.use(&apos;/pdt&apos;, pdts);</span><br><span class="line">app.use(&quot;/task&quot;,task);</span><br><span class="line">app.use(&quot;/cars&quot;,cars);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得所有汽车  </li><li>url /cars/</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b27eb42dea22132.jpg" alt></p><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得汽车通过id</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b28e456cdf58111.jpg" alt></p><blockquote><p><strong>Post</strong></p></blockquote><ul><li>添加汽车  </li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b30e46f28836556.jpg" alt></p><p>参数中的json格式一定要使用标准格式，注意引号，注意Content-Type，默认的Content-Type类型是：application/x-www-form-urlencoded</p><blockquote><p><strong>Put</strong></p></blockquote><ul><li>修改汽车</li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3434410e778260.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b344cd080581595.jpg" alt></p><blockquote><p><strong>Delete</strong>  </p></blockquote><ul><li>删除汽车</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3526d5bff57574.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b35474e9c447189.jpg" alt></p><p><strong>node.js跨域</strong></p><p>修改app.js文件拦截所有的请求，修改头部</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">app.all(&apos;*&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">    res.header(&quot;X-Powered-By&quot;, &apos; 3.2.1&apos;);</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);</span><br><span class="line">    if(req.method == &quot;OPTIONS&quot;) &#123;</span><br><span class="line">        res.send(&quot;200&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2017.cnblogs.com/blog/63651/201801/63651-20180108142729785-1121920664.png" alt></p><h1 id="九、视频"><a href="#九、视频" class="headerlink" title="九、视频"></a>九、<a href="https://www.bilibili.com/video/av17977069" target="_blank" rel="noopener">视频</a></h1><p>From: <a href="https://www.cnblogs.com/best/p/6204116.html" target="_blank" rel="noopener">https://www.cnblogs.com/best/p/6204116.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Node.js" scheme="https://www.policx.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hexo front-matter 怎么写？</title>
    <link href="https://www.policx.com/front-matter/"/>
    <id>https://www.policx.com/front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-18T06:25:47.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/CSDNnews/"/>
    <id>https://www.policx.com/CSDNnews/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-18T06:25:40.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">hackernoon</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/news/BitTorrent/"/>
    <id>https://www.policx.com/news/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/notes/partner/"/>
    <id>https://www.policx.com/notes/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-18T06:23:38.164Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
      <category term="notes" scheme="https://www.policx.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/news/harddisk/"/>
    <id>https://www.policx.com/news/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/news/2019/"/>
    <id>https://www.policx.com/news/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-18T06:25:40.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/blog/netlify/"/>
    <id>https://www.policx.com/blog/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-18T06:25:47.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。<br><img src="https://githubpage-1255710107.cos.ap-shanghai.myqcloud.com/static/images/KNN/hexo.png" alt></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。<br>那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。<br>接下来我分步骤的跟大家来介绍我的部署方案。</p><h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
