<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南一道街</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-08-05T15:29:38.651Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>appleCard</title>
    <link href="https://www.policx.com/news/appleCard/"/>
    <id>https://www.policx.com/news/appleCard/</id>
    <published>2019-08-05T09:42:00.000Z</published>
    <updated>2019-08-05T15:29:38.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>免年费的钛金卡，办一张来收藏也不错。</p><a id="more"></a><p><img src="https://i.loli.net/2019/08/05/bf9BtCq2kErvRGY.jpg" alt="appleCard"><br><img src="https://gitee.com/policx/im/raw/master/images/btDbRs.jpg" alt="appleCard"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;免年费的钛金卡，办一张来收藏也不错。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>善用佳软 uPic</title>
    <link href="https://www.policx.com/uPic/"/>
    <id>https://www.policx.com/uPic/</id>
    <published>2019-07-27T04:11:04.000Z</published>
    <updated>2019-07-27T16:32:08.603Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>对于markdown重度用户而言，一款好用的图床工具能够有效提升效率。从Windows到Mac，笔者也算是辗转用过多款图床客户端，包括iPic、PicGo等等。而自从更换新的工作环境之后，笔者对于图床客户端又有了新的需求——自定义图床。</p><a id="more"></a><p>幸好，一次机缘巧合让笔者遇到了uPic，除了支持微博、SM.MS、七牛云、腾讯云等图床之外，还可以自定义配置图床。 </p><blockquote><p>uPic下载地址：<a href="https://github.com/gee1k/uPic/releases" target="_blank" rel="noopener">https://github.com/gee1k/uPic/releases</a> </p></blockquote><p>笔者目前工作所用的编辑器，既不支持外链，也不支持图片粘贴后自动上传，一旦涉及多图文章，光上传图片就浪费不少时间。因此，笔者萌生了构建自定义图床的想法，更幸运的是，笔者公司对于图片上传服务并没有做太多的限制，也让这种想法成为可能。 </p><p>uPic是一款开源简洁的图床客户端，方便用户直接上传图片到指定的存储空间，并获取有效的markdown图片地址，其默认图床为SM.MS，当然也支持配置腾讯云、七牛云、又拍云等常见的对象存储。最关键的是支持图床自定义配置，也让我毅然抛弃了一直以来付费使用的iPic。<br><img src="https://i.loli.net/2019/07/27/5d3bd2c197d8592897.jpg" alt></p><p>其实起初并不顺利，刚上手的uPic（大概是v0.7.0版本），自定义图床配置并不适用于笔者常用的编辑器环境。好在软件开发者@svend足够热心，在了解了笔者的需求及编辑环境之后，重构了自定义图床，使得笔者的想法得以实现，包括大家在反馈群里提出的一些建议，也都及时采纳并更新。 </p><p>直到最新发布的v0.8.0版本，uPic已经成为一款非常成熟且强大的图床客户端，且安装包大小也不过才10.5M。 </p><p>好了，啰嗦了这么多，也该进入正题了。 </p><p>uPic目前仅支持Mac端，默认上传到SM.MS匿名图床，除此之外还支持微博、码云、Github以及腾讯云、阿里云、又拍云、七牛云总共八个图床。其中，由于微博近期已经陆续开启防盗链，笔者不建议在个人博客中使用。<br><img src="https://i.loli.net/2019/07/27/5d3bd288ac38618894.jpg" alt><br>在上传方式上，uPic支持本地选择/复制文件上传、截图上传，甚至可直接拖动文件到菜单栏uPic图标上完成上传动作。<br><img src="https://i.loli.net/2019/07/27/5d3bd3727bf6963617.gif" alt="640"></p><p>在最新更新v0.8.0版本之后，uPic新增支持直接从浏览器中复制或者拖动在线图片上传到指定图床，这样就不用下载到本地再进行上传。<br><img src="https://gitee.com/policx/im/raw/master/images/GoRrBa.gif" alt></p><p>不过需要注意的是，GIF动图不大一样，直接从浏览器中复制或者拖动GIF上传至uPic图床，可能最终上传的只是GIF图中一帧的画面，所以对于GIF最好还是先下载到本地，然后使用uPic上传到图床。 </p><p>在“设置——拓展——访达拓展”中勾选uPic一项，即可开启本地文件右键菜单中“使用uPic上传”的功能，也算是比较方便的一种本地文件上传方式。<br><img src="https://i.loli.net/2019/07/27/5d3bdbd03d58f62506.jpg" alt><br><img src="https://gitee.com/policx/im/raw/master/images/mOO863.jpg" alt></p><p>一旦完成上传动作，所输出的文件链接会自动复制到剪切板，直接在文档中粘贴即可，在输出链接格式上可根据需求选择URL、HTML、Markdown三种。<br><img src="https://gitee.com/policx/im/raw/master/images/Y0lYcO.jpg" alt></p><p>点击菜单栏uPic图标，还可以查看最近十条上传记录，同时可以预览上传内容缩略图，以便选择重新复制。<br><img src="https://gitee.com/policx/im/raw/master/images/Ze9ScG.jpg" alt><br>熟练使用快捷键操作，可以进一步提升使用效率。uPic支持三种上传方式的自定义快捷键。基本不用点击菜单了去选择，即可完成上传动作。<br><img src="https://gitee.com/policx/im/raw/master/images/MqUOQy.jpg" alt><br>例如，通过设定好的快捷键完成截图上传操作，按住鼠标框选所需区域，松开鼠标之后即完成截图并直接上传到图床（注意没有确认截图的过程哦～）。<br><img src="https://gitee.com/policx/im/raw/master/images/k0GikB.gif" alt><br>使用这段时间，笔者感觉uPic已经足够成为一款高效、简洁的图床客户端，支持强大的自定义图床配置，支持复制/拖动上传以及快捷键操作。不过在部分体验上iPic依然值得uPic借鉴，例如复制图片后点击菜单栏的iPic，能够比较直观地看到已复制图片及近期上传图片的预览，体验更加直观。<br><img src="https://gitee.com/policx/im/raw/master/images/dLyZLX.jpg" alt="a"><br>不得不提的是，开发者@svend虽然只利用业余时间更新维护，同样保持了较高的更新频率，发现bug或者其他不稳定的因素更是会连夜修复，并且会及时反馈用户的意见。作为一款免费的Mac图床客户端，uPic已经赢得了越来越多的用户亲睐。 </p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/WcchsHp007SswWr2qHGxTQ" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/27/5d3bcf474c70088570.jpg" alt="wechat"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于markdown重度用户而言，一款好用的图床工具能够有效提升效率。从Windows到Mac，笔者也算是辗转用过多款图床客户端，包括iPic、PicGo等等。而自从更换新的工作环境之后，笔者对于图床客户端又有了新的需求——自定义图床。&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>「拖放」Mac 的底层能力，也是效率神技</title>
    <link href="https://www.policx.com/DragAndDrop/"/>
    <id>https://www.policx.com/DragAndDrop/</id>
    <published>2019-07-26T14:19:21.000Z</published>
    <updated>2019-07-27T15:16:49.565Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>个人惯用 Mac 拖放，但每每身边同事看我的操作习惯，都大惊失色，感叹 Mac 还有这种操作，所以决定单独讲一篇 Mac 拖放。</p><a id="more"></a><p>Mac的拖放几乎是全局的，比如你可以将图片文件从应用拖到 Finder，同样可以将文件从 Finder 拖至应用内，甚至从应用A拖拽至应用B。</p><p>总之，基于 Finder 的文件拖拽，让系统和应用、应用和应用协同起来，大大提速。以下是一些示例。</p><blockquote><p>应用-&gt;Finder</p></blockquote><p>1.微信-&gt;Finder<br><img src="https://i.loli.net/2019/07/27/5d3c5f3ea1d9e89990.gif" alt></p><p>2.浏览器-&gt;Finder<br><img src="https://gitee.com/policx/im/raw/master/images/Xfj58J.gif" alt></p><p>出于版权安全的考虑，以及前端技术的极速革新，部分网站已不再支持将图片拖拽至 Finder，但多数网站仍然支持。</p><p>3.PDF-&gt;Finder<br><img src="https://gitee.com/policx/im/raw/master/images/wEnYQa.gif" alt="pic"></p><p>如果你只需要 PDF 20P中的1P，可以单独拖拽至Finder。</p><blockquote><p>Finder-&gt;应用</p></blockquote><p>1.Finder-&gt;微信<br><img src="https://gitee.com/policx/im/raw/master/images/H2aKxW.gif" alt="pic"></p><p>2.Finder-&gt;办公套件<br><img src="https://gitee.com/policx/im/raw/master/images/Pc9jOK.gif" alt="pic"></p><p>3.Finder-&gt;PDF<br><img src="https://gitee.com/policx/im/raw/master/images/Hi56sE.gif" alt="pic"></p><blockquote><p>应用-&gt;应用</p></blockquote><p>1.浏览器-&gt;微信<br><img src="https://gitee.com/policx/im/raw/master/images/6whkO3.gif" alt="pic"></p><p>2.微信-&gt;办公套件<br><img src="https://gitee.com/policx/im/raw/master/images/37ryoD.gif" alt="pic"></p><p>除了以上”应用-&gt;Finder，Finder-&gt;应用，应用-&gt;应用”几种拖放，Mac 还有其他很多地方支持此操作，比如文件拖拽至垃圾桶、应用拖拽至Docker、文件拖拽至 Docker 上应用图标即可打开……  </p><p>使用拖拽，还是复制粘贴，或是通过各个应用的菜单完成操作，都没什么问题，如果你知道了 MacOS 的一项新能力，不妨试试。</p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/DPhrXF5qfPEMrEGimslh1w" target="_blank" rel="noopener"><img src="https://gitee.com/policx/im/raw/master/images/Z2gkII.png" alt="pic"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人惯用 Mac 拖放，但每每身边同事看我的操作习惯，都大惊失色，感叹 Mac 还有这种操作，所以决定单独讲一篇 Mac 拖放。&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>Python导图</title>
    <link href="https://www.policx.com/mind/"/>
    <id>https://www.policx.com/mind/</id>
    <published>2019-07-21T06:03:24.000Z</published>
    <updated>2019-07-21T08:40:14.360Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>推荐：<strong>XMind</strong> 一个全功能的思维导图和头脑风暴软件。</p></blockquote><a id="more"></a><h2 id="Python-系列-一-核心知识"><a href="#Python-系列-一-核心知识" class="headerlink" title="Python 系列 (一)  核心知识"></a>Python 系列 (一)  核心知识</h2><p><img src="/mindImage/0%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80.png" alt><br><img src="/mindImage/2Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80.png" alt><br><img src="/mindImage/3%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%B8%80)%E6%95%B0%E5%80%BC%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88.png" alt><br><img src="/mindImage/4%E6%A0%87%E5%87%86%E7%B1%BB%E5%9E%8B%E8%A1%A5%E5%85%85.png" alt><br><img src="/mindImage/5%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%BA%8C)%E5%BA%8F%E5%88%97%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/6%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%B8%89)%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt><br><img src="/mindImage/7%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/8%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/9%E5%87%BD%E6%95%B0%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/10%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E5%87%BD%E6%95%B0.png" alt><br><img src="/mindImage/11%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/12%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/13%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/14%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/15%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/16%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt><br><img src="/mindImage/17%E6%B5%8B%E8%AF%95%E8%B0%83%E8%AF%95.png" alt></p><h2 id="Python系列-一-基础编程"><a href="#Python系列-一-基础编程" class="headerlink" title="Python系列 (一) 基础编程"></a>Python系列 (一) 基础编程</h2><p><img src="/mindImage/1Python%E7%B3%BB%E5%88%97(%E4%B8%80)%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861.png" alt><br><img src="/mindImage/3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862.png" alt><br><img src="/mindImage/4%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt><br><img src="/mindImage/5%E5%BA%8F%E5%88%97.png" alt><br><img src="/mindImage/6%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt><br><img src="/mindImage/7%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84.png" alt><br><img src="/mindImage/8%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88.png" alt><br><img src="/mindImage/9%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/10%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/11%E9%94%99%E8%AF%AF%EF%BC%86%E5%BC%82%E5%B8%B8.png" alt><br><img src="/mindImage/12%E5%87%BD%E6%95%B0%E4%B8%80.png" alt><br><img src="/mindImage/13%E5%87%BD%E6%95%B0%E4%BA%8C.png" alt><br><img src="/mindImage/14%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/15%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt></p><h2 id="Python系列-二-常用标准库及拓展知识"><a href="#Python系列-二-常用标准库及拓展知识" class="headerlink" title="Python系列(二)常用标准库及拓展知识"></a>Python系列(二)常用标准库及拓展知识</h2><p><img src="/mindImage/0%E3%80%90%E7%9B%AE%E5%BD%95%E3%80%91Python%E7%B3%BB%E5%88%97(%E4%BA%8C)%E5%B8%B8%E7%94%A8%E6%A0%87%E5%87%86%E5%BA%93%E5%8F%8A%E6%8B%93%E5%B1%95%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/1%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%BF%B0.png" alt><br><img src="/mindImage/2%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt><br><img src="/mindImage/3%E6%97%A5%E6%9C%9F&%E6%97%B6%E9%97%B4.png" alt><br><img src="/mindImage/4%E7%B3%BB%E7%BB%9F&%E6%96%87%E4%BB%B6.png" alt><br><img src="/mindImage/5%E8%BF%9B%E7%A8%8B&%E7%BA%BF%E7%A8%8B.png" alt><br><img src="/mindImage/6%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt><br><img src="/mindImage/7%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97&%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt></p><h2 id="Python应用领域和数据结构"><a href="#Python应用领域和数据结构" class="headerlink" title="Python应用领域和数据结构"></a>Python应用领域和数据结构</h2><p><a href="https://www.jianshu.com/p/66f6d9a434f9" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/21/5d3400422503e26621.jpg" alt="Python数据结构"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;推荐：&lt;strong&gt;XMind&lt;/strong&gt; 一个全功能的思维导图和头脑风暴软件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《Python札记》1_列表list</title>
    <link href="https://www.policx.com/python3-notes01/"/>
    <id>https://www.policx.com/python3-notes01/</id>
    <published>2019-07-18T14:55:41.000Z</published>
    <updated>2019-07-21T05:10:58.223Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="写于开始之前"><a href="#写于开始之前" class="headerlink" title="写于开始之前"></a>写于开始之前</h3><p>笔者即将开始写一个系列的《<code>Python</code>札记》。本系列的札记主要是自学<code>齐伟</code>老师《跟老齐学<code>Python</code>轻松入门》一书整理而来。书第一遍断断续续花了5个月，第二遍边看边整理，保守3个月。</p><a id="more"></a><p><strong>在此深深感谢齐伟老师带我入门<code>Python</code></strong>。<strong>工欲善其事，必先利其器</strong>，本札记的学习环境为：<code>Python3.7.2 + pycharm + jupyter notebook</code>： </p><ul><li><code>Python3</code>取代了<code>Python2</code>，成为主流</li><li>针对<code>Python</code>语言，<code>Pycharm</code>是最好的<code>IDE</code></li><li><code>Jupyter notebook</code>是利用<code>Python</code>进行机器学习的强大利器</li></ul><p><strong>本札记一定会在2个月之内完成</strong>，主要内容包含： </p><ul><li>学习笔记整理</li><li>代码实战练习</li><li>各种练习题</li><li>利用<code>Python</code>实现常用算法 <a href="https://www.jianshu.com/c/7287d92c5db4" target="_blank" rel="noopener">机器学习_Python算法</a></li></ul><p><strong>希望对<code>Python</code>感兴趣的朋友有所帮助，自己也在努力学习中，将来主要方向是：<code>机器学习+数据挖掘+量化投资</code></strong></p><h4 id="良好的开始是成功的一半！Let-s-go-go-go"><a href="#良好的开始是成功的一半！Let-s-go-go-go" class="headerlink" title="良好的开始是成功的一半！Let`s go go go!!!"></a>良好的开始是成功的一半！Let`s go go go!!!</h4><hr><blockquote><p>列表是<code>Python</code>中使用非常广泛的一种对象，用方括号<code>[ ]</code>来表示。括号里面可以是数字，字符串或者<code>True</code>，<code>False</code>的布尔值，或者是多种不同类型的对象，里面也可以嵌套列表。如果列表是空的，用<code>bool()</code>来进行判断，会返回 <code>False</code>。 </p></blockquote><hr><h3 id="一、索引、切片、反转"><a href="#一、索引、切片、反转" class="headerlink" title="一、索引、切片、反转"></a>一、索引、切片、反转</h3><p>列表和字符串一样，都是序列，里面的元素是有序的，也有索引和切片。索引<code>index</code>左边从<code>0</code>开始，右边从<code>-1</code>开始，<code>index()</code>函数可以查看某个元素的索引编号。 </p><p><strong>索引</strong></p><ul><li>左边0开始，右边-1开始</li><li>通过<code>index()</code>函数查看索引编号</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># lang = ['python', 'java', 'html']</span></span><br><span class="line"><span class="hljs-comment"># lang.index('python')</span></span><br><span class="line"><span class="hljs-number">0</span>  <span class="hljs-comment"># 索引从0开始</span></span><br><span class="line"><span class="hljs-comment"># lang.index('html')</span></span><br><span class="line"><span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><p><strong>切片</strong></p><ul><li>索引左边从0开始，右边-1开始</li><li>含头不含尾</li><li>步长可正可负</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">print(lst[:])     <span class="hljs-comment">#  相当于是复制 lst</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">print(lst[::<span class="hljs-number">2</span>])  <span class="hljs-comment">#  步长是2    [开始:结束:步长]</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(lst[<span class="hljs-number">-3</span>:<span class="hljs-number">-1</span>])</span><br><span class="line"></span><br><span class="line">lst = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]</span><br><span class="line">print(lst[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])     <span class="hljs-comment"># 常规用法</span></span><br><span class="line">print(lst[<span class="hljs-number">-5</span>:<span class="hljs-number">-2</span>:<span class="hljs-number">2</span>])   <span class="hljs-comment"># 标号-5代表的是元素2，标号-2代表的是5，步长为2</span></span><br><span class="line">print(lst[<span class="hljs-number">-5</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>])</span><br><span class="line">print(lst[<span class="hljs-number">1</span>:<span class="hljs-number">-2</span>:<span class="hljs-number">2</span>])</span><br><span class="line">[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]</span><br></pre></td></tr></table></figure><p><strong>反转</strong></p><ul><li>通过步长-1进行反转，[::-1]</li><li>通过<code>reversed()</code>进行反转，得到的是<strong>可迭代对象</strong>，并且将迭代对象转为为<code>列表显示</code></li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 反转1</span></span><br><span class="line">print(lst[::<span class="hljs-number">-1</span>])  <span class="hljs-comment"># 通过步长为-1进行反转</span></span><br><span class="line">print(lst)   <span class="hljs-comment"># 不影响原来对象</span></span><br><span class="line">[<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 反转2</span></span><br><span class="line">print(list(reversed(lst)))  <span class="hljs-comment"># 通过reversed函数进行反转</span></span><br><span class="line">[<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">print(list(reversed(<span class="hljs-string">'abcde'</span>)))    <span class="hljs-comment"># 对字符串进行反转，列表显示</span></span><br><span class="line">[<span class="hljs-string">'e'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'a'</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="二、操作列表"><a href="#二、操作列表" class="headerlink" title="二、操作列表"></a>二、操作列表</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>len()：求长度</li><li>+：连接两个序列</li><li>*：复制序列</li><li>in：判断元素是否在列表中</li><li>max()、min()：按照元素的字典顺序进行排序</li></ul><p><strong>1、修改元素</strong></p><blockquote><p><strong>列表</strong>中的元素可以进行<strong>修改</strong>，但是字符串中的不能进行修改。列表中修改的时候，直接通过索引号进行指定： </p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst[<span class="hljs-number">2</span>] = <span class="hljs-number">7</span>   <span class="hljs-comment"># 指定第三个元素为7</span></span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br></pre></td></tr></table></figure><p><strong>2、增加元素</strong><br>追加元素的方法有两种，都是追加在<strong>末尾</strong></p><ul><li>append()函数进行追加</li><li>切片的方式进行追加：a[len(a):] = [ x ]</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst.append(<span class="hljs-number">8</span>)  </span><br><span class="line">lst[len(lst):] = [<span class="hljs-number">8</span>]</span><br><span class="line">print(lst)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]   <span class="hljs-comment"># 例子承接上面，第三个元素为7，不是3</span></span><br></pre></td></tr></table></figure><p><strong>3、列表函数</strong></p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>append</td><td>将单个元素追加到列表的<strong>最右边</strong>，即末尾部分；<strong>list[len(list):] = [x]</strong>，x是待追加的元素；  <strong>没有返回值None</strong></td></tr><tr><td>extend</td><td>将<strong>两个列表进行合并</strong>，扩充列表的作用；  参数必须是<strong>可迭代对象</strong>；  <strong>list[len(list):] = L</strong>，L是待并入的列表；  完成追加过程，列表L不变，list发生变化；  <strong>没有返回值None</strong></td></tr><tr><td>insert</td><td>指定位置添加元素  格式：list.insert(i,x)，i是插入的位置，x是待追加元素 ；  i如果是0，相当于是插在首位；i如果是len(list)，相当于是插在最后面，则等价于append()函数</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># extend()函数</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</span><br><span class="line">print(id(lst))   <span class="hljs-comment"># 查看lst的内存地址</span></span><br><span class="line">lst1 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line">lst.extend(lst1)</span><br><span class="line">print(id(lst))   <span class="hljs-comment"># 查看追加列表之后的内存地址，与原来系相同的</span></span><br><span class="line">print(<span class="hljs-string">"lst:"</span>, lst)</span><br><span class="line">print(<span class="hljs-string">"lst1:"</span>, lst1)</span><br><span class="line"></span><br><span class="line"><span class="hljs-number">2435334264968</span></span><br><span class="line"><span class="hljs-number">2435334264968</span></span><br><span class="line">lst: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line">lst1: [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># append与extend区别</span></span><br><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst2 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]</span><br><span class="line">lst1.append(lst2)</span><br><span class="line">print(lst1)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]]   <span class="hljs-comment"># 整建制，将lst2当做一个整体</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst2 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]</span><br><span class="line">lst1.extend(lst2)</span><br><span class="line">print(lst1)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]   <span class="hljs-comment"># 个体化，将lst2的每个元素进行追加</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li>列表是可以进行<strong>修改</strong>的，原地修改</li><li>append是将一个元素加到列表的末尾，<strong>整建制追加</strong></li><li>extend将两个列表进行合并，<strong>个体化扩编</strong></li><li>extend方法执行之后，<strong>内存中id不变</strong>，只是在该id上的内容发生了变化</li><li>insert()函数中的i如果超过最大索引值，则自动追加到末尾，相当于是append()函数的作用</li><li>三种方法均是原地修改，无返回值</li></ul><hr><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>count</td><td>查看元素重复出现的次数  <strong>如果不存在，返回0</strong>，而不是报错</td></tr><tr><td>index</td><td>查看索引编号，不存在则报错  检索的是元素<strong>第一次</strong>出现的位置</td></tr><tr><td>remove</td><td>删除元素，原地修改，无返回值；  list.remove(x)：如果x不存在，则会报错；  如果x出现多次，<strong>删除第一个x，剩下不变</strong></td></tr><tr><td>pop</td><td>pop([i]):参数是可选的；  为空，<strong>默认删除最后一个</strong>，并且将该元素作为返回值；  如果不为空，<strong>可删除索引为i的元素</strong>，并且将该元素作为返回值</td></tr><tr><td>reverse</td><td>原地反转，没有生成新的列表，没有返回值</td></tr><tr><td>reversed</td><td>类似reverse，区别：生成的列表能够<strong>用于迭代</strong></td></tr></tbody></table><p><strong>remove和pop的区别</strong></p><ul><li>remove 没有返回值，pop有返回值</li><li>remove的参数是元素，pop的参数是索引</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">lst1.remove(<span class="hljs-number">2</span>)</span><br><span class="line">print(lst1)</span><br><span class="line"><span class="hljs-comment"># lst1.remove(7)</span></span><br><span class="line"><span class="hljs-comment"># print(lst1)   ValueError: list.remove(x): x not in list</span></span><br><span class="line">lst1.pop(<span class="hljs-number">2</span>)</span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]   <span class="hljs-comment"># 将元素2删除掉</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]      <span class="hljs-comment">#  将索引为2的元素3删除掉，本步骤是接在上面的执行，即在列表[1, 3, 4, 5, 6] 中删除4</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关于反转</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(lst[::<span class="hljs-number">-1</span>])   <span class="hljs-comment"># 反转实现1</span></span><br><span class="line">print(lst)          <span class="hljs-comment"># 原来的列表对象不改变</span></span><br><span class="line">lst.reverse()    <span class="hljs-comment"># 反转实现2</span></span><br><span class="line">print(lst)          <span class="hljs-comment"># 原来的列表变成反转之后的新列表</span></span><br><span class="line">lst1= reversed(lst)</span><br><span class="line">print(lst1)       <span class="hljs-comment"># lst1是一个列表反转迭代器对象：&lt;list_reverseiterator object at 0x00000233C677F320&gt;</span></span><br><span class="line">print(list(lst1))    <span class="hljs-comment"># 用list函数显示lst1的内容</span></span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>sort</td><td>排序函数，用于<code>列表list</code>中，<strong>原地修改没有返回值</strong>；  <strong>默认从小到大</strong>；将<strong>reverse=True</strong>则变成从大到小排序sort(self, /, *, key=None, reverse=False)</td></tr><tr><td>sorted</td><td>对<code>所有可迭代对象</code>进行操作，返回一个新的 <code>list</code>，不是在原来的list上进行操作  sorted(iterable[, cmp[, key[, reverse]]])</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># sort()</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst.sort()</span><br><span class="line">print(lst)</span><br><span class="line">lst1 = [<span class="hljs-string">'python'</span>, ‘Java’, <span class="hljs-string">'html'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'php'</span>]</span><br><span class="line">lst1.sort(key=len)  <span class="hljs-comment"># 列表中的字符串进行排序；如果长度相同，则按照出现的先后顺序</span></span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</span><br><span class="line">[<span class="hljs-string">'c'</span>, <span class="hljs-string">'php'</span>, <span class="hljs-string">'Java'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'python'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># sorted()</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst1 = sorted(lst)</span><br><span class="line">print(lst)  <span class="hljs-comment"># 原对象不变</span></span><br><span class="line">print(lst1) <span class="hljs-comment"># 新列表为排序后的对象</span></span><br><span class="line"></span><br><span class="line">lst2 =[(<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>),(<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>),(<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>),(<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>)]</span><br><span class="line">lst3 = sorted(lst2, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])   <span class="hljs-comment"># 由元组构成的复合列表，按照元组的第二个元素进行排序，通过匿名函数lamba()</span></span><br><span class="line">print(lst3)</span><br><span class="line">[(<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>)]</span><br><span class="line"></span><br><span class="line">lst4 = sorted(lst2, key=<span class="hljs-keyword">lambda</span> x: len(x[<span class="hljs-number">0</span>]))   <span class="hljs-comment"># 通过元组中第一个元素的长度进行排序</span></span><br><span class="line">print(lst4)</span><br><span class="line">[(<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>), (<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>)]</span><br></pre></td></tr></table></figure><h4 id="自定义类中的元素进行排序"><a href="#自定义类中的元素进行排序" class="headerlink" title="自定义类中的元素进行排序"></a>自定义类中的元素进行排序</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, age, grade)</span>:</span></span><br><span class="line">        self.name =  name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.grade = grade</span><br><span class="line">        </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span>  repr((self.name, self.grade, self.age))</span><br><span class="line">    </span><br><span class="line">students_objects = [</span><br><span class="line">    Student(<span class="hljs-string">'Tom'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-number">12</span>),</span><br><span class="line">    Student(<span class="hljs-string">'xiaoming'</span>,<span class="hljs-string">'A'</span>,<span class="hljs-number">17</span>),</span><br><span class="line">    Student(<span class="hljs-string">'xiaohong'</span>, <span class="hljs-string">'C'</span>, <span class="hljs-number">12</span>),</span><br><span class="line">    Student(<span class="hljs-string">'Peter'</span>, <span class="hljs-string">'D'</span>, <span class="hljs-number">8</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">lst5 = sorted(students_objects, key=<span class="hljs-keyword">lambda</span> t:t.age)   <span class="hljs-comment"># 自定义类中，按照年龄进行排序</span></span><br><span class="line">print(lst5)</span><br><span class="line">lst6 = sorted(students_objects, key=<span class="hljs-keyword">lambda</span> t:(t.age, t.grade))   <span class="hljs-comment"># 使用元组，先根据年龄排序，若年龄相同按照grade排序</span></span><br><span class="line">print(lst6)</span><br><span class="line"></span><br><span class="line">[(<span class="hljs-string">'xiaoming'</span>, <span class="hljs-number">17</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'Tom'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'xiaohong'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'Peter'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'D'</span>)]</span><br><span class="line">[(<span class="hljs-string">'xiaoming'</span>, <span class="hljs-number">17</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'Tom'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'xiaohong'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'Peter'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'D'</span>)]</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.jianshu.com/c/ab55c73e0037?utm_source=desktop&utm_medium=notes-included-collection" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/20/5d32f16d5b0bf92604.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写于开始之前&quot;&gt;&lt;a href=&quot;#写于开始之前&quot; class=&quot;headerlink&quot; title=&quot;写于开始之前&quot;&gt;&lt;/a&gt;写于开始之前&lt;/h3&gt;&lt;p&gt;笔者即将开始写一个系列的《&lt;code&gt;Python&lt;/code&gt;札记》。本系列的札记主要是自学&lt;code&gt;齐伟&lt;/code&gt;老师《跟老齐学&lt;code&gt;Python&lt;/code&gt;轻松入门》一书整理而来。书第一遍断断续续花了5个月，第二遍边看边整理，保守3个月。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>超时空从犯</title>
    <link href="https://www.policx.com/Accomplice/"/>
    <id>https://www.policx.com/Accomplice/</id>
    <published>2019-07-18T02:18:06.000Z</published>
    <updated>2019-07-27T15:14:02.285Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><input checked disabled type="checkbox"> 你回头看了我一眼</li></ul><a id="more"></a><ul><li><input disabled type="checkbox"> 我觉得那很久很久</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;input checked disabled type=&quot;checkbox&quot;&gt; 你回头看了我一眼&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="label" scheme="https://www.policx.com/categories/label/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter的环境配置 for Mac</title>
    <link href="https://www.policx.com/flutter/"/>
    <id>https://www.policx.com/flutter/</id>
    <published>2019-07-16T10:14:18.000Z</published>
    <updated>2019-07-18T06:22:40.943Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 </p><a id="more"></a><h2 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装Flutter</h2><p>首先我们可以在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fdocs%2Fget-started%2Finstall" target="_blank" rel="noopener">Flutter官网</a>上面看到一些配置环境的步骤。这里就直接开干了，走起。 </p><h3 id="1、配置HomeBrew"><a href="#1、配置HomeBrew" class="headerlink" title="1、配置HomeBrew"></a>1、配置HomeBrew</h3><p>我们在去配置Flutter的环境之前，需要先检查一下HomeBrew是不是最新的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br></pre></td></tr></table></figure><p>如果没有brew的话，可以去<a href="https://link.juejin.im?target=https%3A%2F%2Fbrew.sh%2F" target="_blank" rel="noopener">HomeBrew官网</a>自行下载。这里就不赘述了，这里如果重新下载的话，看到下面的打印信息就说明下载完毕了。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3aad595f24923.jpg" alt></p><h3 id="2、下载SDK"><a href="#2、下载SDK" class="headerlink" title="2、下载SDK"></a>2、下载SDK</h3><p>接下来就是去官网下载SDK了。注意，这里下载SDK有两种方法：</p><ul><li>一是直接<code>git clone -b beta https://github.com/flutter/flutter.git</code>下载</li><li>二是自己在官网下载下来，如下图<br><img src="https://i.loli.net/2019/07/16/5d2db40e0aecc50465.jpg" alt></li></ul><p>这里我两种方法都试过了一遍，第一种方法实在是太慢了，在经历了耗费一个半小时下载到94%，最后提示失败了的过程之后，我决定还是用第二种方法，整个过程只用了3分钟的样子，相当满意。下载完之后，是一个名字叫<code>flutter_macos_v1.5.4-hotfix.2-stable.zip</code>的压缩包。 然后我们解压这个zip包，把解压出来的<strong>flutter</strong>文件放到根目录下即可。 </p><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p>因为Flutter的SDK中包含了很多的命令行工具。我们就需要配置环境变量，所以我直接就安装到了根目录下了。</p><p><strong>配置镜像</strong></p><p>因为Flutter在运行的时候，就需要去官网下载一些需要的资源，但是因为天国特色的wall的原因，我们就需要镜像服务器，这个在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fcommunity%2Fchina" target="_blank" rel="noopener">官网</a>上面有写的很明白，而且这是一个临时的镜像，后面还要以官网的镜像地址为准。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3f2c1f4f64480.jpg" alt></p><p>我们跳转到根目录 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>就能找到这个<code>.bash_profile</code>隐藏文件，我们用vim打开这个文件 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后需要输入就把A键按一下进入编辑模式，把下面三个环境变量配置进去 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line">export PATH=/Users/xueliheng/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>注意下，第三个环境变量这里<code>/Users/xueliheng/</code>是我的根目录，然后<code>/flutter/</code>是我们刚刚解压的的zip包里面的<code>flutter</code>文件夹。上面两个环境变量是两个镜像地址，上文中也有说过。 接着<code>shift+：</code>然后输入<code>wq</code>保存并退出vim。输入如下命令： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>最后我们就可以验证一下flutter环境有没有配置成功了。输入： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure><p>看到如下如的打印信息就是配置成功了<br><img src="https://i.loli.net/2019/07/16/5d2db44407fa682753.jpg" alt></p><h3 id="4、配置Android-Studio"><a href="#4、配置Android-Studio" class="headerlink" title="4、配置Android Studio"></a>4、配置Android Studio</h3><p>如果没有下载<strong>Android Studio</strong>的话，就去<a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.android.google.cn%2Fstudio" target="_blank" rel="noopener">官网</a>去下载一下。 我们用<code>flutter doctor</code>命令去检查一下flutter的环境配置，我们可以看到如下打印 </p><p><img src="https://i.loli.net/2019/07/16/5d2db4676ec3a36838.jpg" alt></p><p>这里的每个<code>✗</code>都是我们要去解决的问题。不过他有告诉你应该怎么做。比如第一个提示： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices</span><br><span class="line">    ✗ Unable to locate Android SDK.</span><br></pre></td></tr></table></figure><p>这就是让你去下载Android Studio。我们在下载完成之后，打开AS让他去下载一些应该下载的东西。 如果这里有提示你 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices (Android SDK version 24.0.2)</span><br><span class="line">    ✗ Flutter requires Android SDK 28 and the Android BuildTools 28.0.3</span><br></pre></td></tr></table></figure><p>这就是在提示让你去升级一下SDK，然后命令如下 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;/Users/xueliheng/Library/Android/sdk/tools/bin/sdkmanager&quot; &quot;platforms;android-28&quot; &quot;build-tools;28.0.3&quot;</span><br></pre></td></tr></table></figure><p>注意一下，这个地方的升级是需要”科学上网“的，如果有的小伙伴没有这个条件的话，我这边百度云上面给大家准备了一个<a href="https://link.juejin.im?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F10yp8PuRXxk7YvcNR_dTy8Q" target="_blank" rel="noopener">链接</a>，提取码: e48c，大家可以下载下来。下载下来之后解压到<code>/Users/Library/Android/</code>这个文件夹。把原先的SDK直接覆盖就行了，就已经是最新的SDK了。 </p><p>接下来我们配置一下安卓的环境变量，还是在根目录下找到<code>.bash_profile</code>文件，并在其中添加四个环境变量 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=~/Library/Android/sdk</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/emulator</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br></pre></td></tr></table></figure><p>分别是： </p><ul><li>安卓sdk的路径</li><li>安卓的模拟器路径</li><li>安卓tools路径</li><li>安卓平台工具</li></ul><p>接下来我们再用<code>flutter doctor</code>检查的时候，显示的信息如下图<br><img src="https://i.loli.net/2019/07/16/5d2db4964a70b73490.jpg" alt></p><p>意思就是让我们去下载iOS的相关环境，我们先暂时放放，下面还有一个关于<strong>Android Studio</strong>的没有解决完</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">✗ Dart plugin not installed; this adds Dart specific functionality.</span><br></pre></td></tr></table></figure><p>这个就是缺少Flutter插件的意思，那么我们就去AS里面去配置一下好了。打开AS的<code>Preferences</code>，点击<code>Plugins</code>，在搜索栏中输入<code>flutter</code>，找到相应的插件，然后<code>Install</code>。当跳出安装Dart插件的提示界面时，记得点击Yes进行安装。安装完毕之后<code>restart IDE</code>重启AS。 重启之后就能看到多了一个这个东西<br><img src="https://i.loli.net/2019/07/16/5d2db4b731cbd14001.jpg" alt></p><p>我们再用<code>flutter doctor</code>检测一下<br><img src="https://i.loli.net/2019/07/16/5d2db4cdc6dd137908.jpg" alt></p><p>现在终于ok了。我们看到<code>[✓]Android Studio</code>说明，安卓的环境基本上配置成功，接下来我们就配置一下安卓的模拟器就好了。 </p><h3 id="5、安卓模拟器配置"><a href="#5、安卓模拟器配置" class="headerlink" title="5、安卓模拟器配置"></a>5、安卓模拟器配置</h3><p>在AS中找到模拟器配置如下图并选择<br><img src="https://i.loli.net/2019/07/16/5d2db4dacfde455330.jpg" alt></p><p>接着就创建设备，选择设备<br><img src="https://i.loli.net/2019/07/16/5d2db4e68a2ed68879.jpg" alt></p><p>选择系统<br><img src="https://i.loli.net/2019/07/16/5d2db4f6cdc5889902.jpg" alt></p><p>最后点击下载就完成了。 </p><h3 id="6、配置iOS环境"><a href="#6、配置iOS环境" class="headerlink" title="6、配置iOS环境"></a>6、配置iOS环境</h3><p>我们配置完了安卓的环境，再来<code>flutter doctor</code>检测一下。<br><img src="https://i.loli.net/2019/07/16/5d2db50ad75eb82331.jpg" alt></p><p>情况是这样的。目前1.5.4版本的Flutter需要匹配新版本的Xcode10.2.1。按照他提示的来试试，提示我Xcode版本太低了，需要升级Xcode<br><img src="https://i.loli.net/2019/07/16/5d2db5275c8f825074.jpg" alt></p><p>更新到最新的之后，继续走下面的步骤依旧会报错。那么我们可以试试下面的这个办法： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew link pkg-config</span><br><span class="line">$ brew install --HEAD usbmuxd</span><br><span class="line">$ brew unlink usbmuxd</span><br><span class="line">$ brew link usbmuxd</span><br><span class="line">$ brew install --HEAD libimobiledevice</span><br><span class="line">$ brew install ideviceinstaller</span><br></pre></td></tr></table></figure><p>这些执行完之后执行一下<code>flutter doctor</code><br><img src="https://i.loli.net/2019/07/16/5d2db5515858b19228.jpg" alt></p><p>最后还真是没错，全部配置完成了！那么我们就把iOS的也配置完毕了。</p><h3 id="7、VSCode的使用"><a href="#7、VSCode的使用" class="headerlink" title="7、VSCode的使用"></a>7、VSCode的使用</h3><p>VSCode上面使用的话，就简单多了，这里我就简答的赘述一下。 只需要将<code>Dart</code>和<code>Flutter</code>插件都下载下来<br><img src="https://i.loli.net/2019/07/16/5d2db5643b08597602.jpg" alt></p><p>然后<code>command+shift+p</code>输入<code>flutter</code>，选择<code>Flutter：New Project</code><br><img src="https://i.loli.net/2019/07/16/5d2db576e145096766.jpg" alt></p><p>输入要创建的项目的名称和存放项目的地址。如果提示需要指明flutter的SDK的路径，那就选择根目录那个经过解压得来的flutter的文件夹就好了。 接下来是这样一个界面<br><img src="https://i.loli.net/2019/07/16/5d2db588f1b5152482.jpg" alt></p><p>接下来我们选择<code>View-&gt;Start Debugging</code>来运行项目。<br><img src="https://i.loli.net/2019/07/16/5d2db59bb3b3338193.jpg" alt></p><p>当然这个过程需要你把Xcode的模拟器打开。运行完之后就能看到这个界面，也就是你的第一个Flutter工程啦！<br><img src="https://i.loli.net/2019/07/16/5d2db5ad5eaf434960.jpg" alt></p><h3 id="8、Hot-reload的使用"><a href="#8、Hot-reload的使用" class="headerlink" title="8、Hot reload的使用"></a>8、Hot reload的使用</h3><p>我们打开<code>lib/main.dart</code>文件，然后在其中找到 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have pushed the button this many times:</span><br></pre></td></tr></table></figure><p>并把这个改为 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have clicked the button this many times:</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2db5cc5b4f279074.jpg" alt><br>那么我们就能看到界面上多了一个小闪电<br><img src="https://i.loli.net/2019/07/16/5d2db5f044c0553935.jpg" alt></p><p>我们现在如果<code>command+s</code>保存一下更改的话，就能很快的在模拟器上面看到相应的更改，不需要再重新去编译一边。这一点简直是太棒了！解决了iOS开发者一个大痛点啊！！！ </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，flutter的环境搭建工作基本上就进行完毕了，整个过程大概耗时接近2个小时，这期间包括采坑、查资料、下载、科学上网…等等很蛋疼的事情。当然网速基本上是最大的障碍，浪费了很多的时间。所以也是需要一定的耐心来完成的。 后面的文章也会持续的更新，最近有点懈怠，OpenGL系列的文章有点拖更的节奏，这个后面会补起来。Flutter我也才刚刚接手，也是慢慢的来采坑，也会以此来记录自己的学习经历，也希望能多多跟大家交流。 再次我附上自己的邮箱<code>coderspr1nghall@gmail.com</code>欢迎讨论交流。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://juejin.im/post/5d0508d56fb9a07ec373eb9e" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2dbb03b8ef977558.jpg" alt></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 &lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://www.policx.com/spider/"/>
    <id>https://www.policx.com/spider/</id>
    <published>2019-07-15T02:06:04.000Z</published>
    <updated>2019-07-18T06:22:40.946Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。</p><a id="more"></a><p>其实爬虫这个概念很简单，基本可以分成以下几个步骤：</p><ul><li><p>发起网络请求</p></li><li><p>获取网页</p></li><li><p>解析网页获取数据</p></li></ul><p>发起网络请求这个步骤常用的类库有标准库urllib以及Python上常用的requests库。解析网页常用的类库有的BeautifulSoup。另外requests的作者还开发了另一个很好用的库requests-html，提供了发起请求和解析网页的二合一功能，开发小型爬虫非常方便。另外还有一些专业的爬虫类库，其中比较出名的就是scrapy。本文将会简单介绍一下这些类库，之后还会专门写一篇文章介绍scrapy的用法。</p><h2 id="标准库urllib"><a href="#标准库urllib" class="headerlink" title="标准库urllib"></a><strong>标准库urllib</strong></h2><p>首先先来看标准库urllib。标准库的优点是Python自带的，不需要安装任何第三方库，缺点就是urllib属于偏底层的库，使用起来比较麻烦。下面是urllib发起请求的一个简单例子，大家看看就好。可以看到为了发起一个简单的请求，我们需要创建opener、request、ProxyHandler等好几个对象，比较麻烦。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> urllib.request <span class="hljs-keyword">as</span> request</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="hljs-string">'https'</span>: <span class="hljs-string">'https://127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="hljs-string">'http'</span>: <span class="hljs-string">'http://127.0.0.1:1080'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'--------------使用urllib--------------'</span>)</span><br><span class="line">url = <span class="hljs-string">'http://www.google.com'</span></span><br><span class="line">opener = request.build_opener(request.ProxyHandler(proxies))</span><br><span class="line">request.install_opener(opener)</span><br><span class="line">req = request.Request(url, headers=headers)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a><strong>requests</strong></h2><p>requests是Kenneth Reitz大神的著名作品之一，优点就是极度简单和好用。首先来安装requests。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>下面是一个简单的例子，和上面urllib示例代码实现的功能相同，但是代码量少多了，也更易读。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="hljs-string">'--------------使用requests--------------'</span>)</span><br><span class="line">response = requests.get(<span class="hljs-string">'https://www.google.com'</span>, headers=headers, proxies=proxies)</span><br><span class="line">response.encoding = <span class="hljs-string">'utf8'</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>requests还可以方便的发送表单数据，模拟用户登录。返回的Response对象还包含了状态码、header、raw、cookies等很多有用的信息。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="hljs-string">'name'</span>: <span class="hljs-string">'yitian'</span>,</span><br><span class="line">    <span class="hljs-string">'age'</span>: <span class="hljs-number">22</span>,</span><br><span class="line">    <span class="hljs-string">'friends'</span>: [<span class="hljs-string">'zhang3'</span>, <span class="hljs-string">'li4'</span>]</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="hljs-string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">pprint(response.__dict__)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>关于requests我就不多做介绍了，因为它有中文文档，虽然比官方落后几个小版本号，不过无伤大雅，大家可以放心参阅。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://cn.python-requests.org/zh_CN/latest/</span><br></pre></td></tr></table></figure><h2 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a><strong>beautifulsoup</strong></h2><p>利用前面介绍的requests类库，我们可以轻易地获取HTML代码，但是为了从HTML中找到所需的数据，我们还需要HTML/XML解析库，BeautifulSoup就是这么一个常用的库。首先先来安装它：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>这次就用我简书主页作为例子，爬取一下我简书的文章列表。首先先用requests获取到网页内容。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"><span class="hljs-keyword">import</span> bs4</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><p>然后就是BeautifulSoup的代码了。在使用BeautifulSoup的时候首先需要创建一个HTML树，然后从树中查找节点。BeautifulSoup主要有两种查找节点的办法，第一种是使用find和find_all方法，第二种方法是使用select方法用css选择器。拿到节点之后，用contents去获取它的子节点，如果子节点是文本，就会拿到文本值，注意这个属性返回的是列表，所以要加[0]。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html = bs4.BeautifulSoup(response.text, features=<span class="hljs-string">'lxml'</span>)</span><br><span class="line">note_list = html.find_all(<span class="hljs-string">'ul'</span>, class_=<span class="hljs-string">'note-list'</span>, limit=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.select(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.contents[<span class="hljs-number">0</span>]</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>BeautifulSoup也有中文文档，同样也是稍微落后两个小版本，影响不大。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</span><br></pre></td></tr></table></figure><h2 id="requests-html"><a href="#requests-html" class="headerlink" title="requests-html"></a><strong>requests-html</strong></h2><p>这个类库是requests的兄弟，同样也是Kenneth Reitz大神的作品。它将请求网页和解析网页结合到了一起。本来如果你用requests的话只能请求网页，为了解析网页还得使用BeautifulSoup这样的解析库。现在只需要requests-html一个库就可以办到。<br>首先先来安装。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests-html</span><br></pre></td></tr></table></figure><p>然后我们来看看用requests-html如何重写上面这个例子。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line">note_list = r.html.find(<span class="hljs-string">'ul.note-list'</span>, first=<span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.find(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html除了可以使用css选择器来搜索以外，还可以使用xpath来查找。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html还有一个很有用的特性就是浏览器渲染。有些网页是异步加载的，直接用爬虫去爬只能得到一个空页面，因为数据是靠浏览器运行JS脚本异步加载的，这时候就需要浏览器渲染了。而浏览器渲染用requests-html做非常简单，只要多调用一个render函数即可。render函数有两个参数，分别指定页面下滑次数和暂停时间。render函数第一次运行的时候，requests-html会下载一个chromium浏览器，然后用它渲染页面。<br>简书的个人文章页面也是一个异步加载的例子，默认只会显示最近几篇文章，通过浏览器渲染模拟页面下滑，我们可以得到所有文章列表。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line"><span class="hljs-comment"># render函数指示requests-html用chromium浏览器渲染页面</span></span><br><span class="line">r.html.render(scrolldown=<span class="hljs-number">50</span>, sleep=<span class="hljs-number">0.2</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>类似的，今日头条的个人页面也是异步加载的，所以也得调用render函数。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">        <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(<span class="hljs-string">'https://www.toutiao.com/c/user/6662330738/#mid=1620400303194116'</span>, headers=headers)</span><br><span class="line">r.html.render()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r.html.find(<span class="hljs-string">'div.rbox-inner a'</span>):</span><br><span class="line">    title = i.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.toutiao.com<span class="hljs-subst">&#123;i.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》 <span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>最后是requests-html的官网地址以及中文文档。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://html.python-requests.org/</span><br><span class="line">https://cncert.github.io/requests-html-doc-cn/</span><br></pre></td></tr></table></figure><h2 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a><strong>scrapy</strong></h2><p>以上介绍的几个框架都是各自有各自的作用，把它们结合起来可以达到编写爬虫的目的，但是要说专业的爬虫框架，还是得谈谈scrapy。作为一个著名的爬虫框架，scrapy将爬虫模型框架化和模块化，利用scrapy，我们可以迅速生成功能强大的爬虫。<br>不过scrapy概念众多，要仔细说还得专门开篇文章，这里就只简单演示一下。首先安装scrapy，如果是Windows系统，还需要安装pypiwin32。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy  </span><br><span class="line">pip install pypiwin32</span><br></pre></td></tr></table></figure><p>然后创建scrapy项目并添加一个新爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject myproject</span><br><span class="line">cd myproject</span><br><span class="line">scrapy genspider my jianshu.com</span><br></pre></td></tr></table></figure><p>打开配置文件settings.py，设置用户代理，否则会遇到403错误。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br></pre></td></tr></table></figure><p>然后修改一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JianshuSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="hljs-string">'jianshu'</span></span><br><span class="line">    allowed_domains = [<span class="hljs-string">'jianshu.com'</span>]</span><br><span class="line">    start_urls = [<span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">'div.content'</span>):</span><br><span class="line">            <span class="hljs-keyword">yield</span> &#123;</span><br><span class="line">                <span class="hljs-string">'title'</span>: article.css(<span class="hljs-string">'a.title::text'</span>).get(),</span><br><span class="line">                <span class="hljs-string">'link'</span>: <span class="hljs-string">'https://www.jianshu.com'</span> + article.xpath(<span class="hljs-string">'a[@class="title"]/@href'</span>).get()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>最后运行一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl my</span><br></pre></td></tr></table></figure><br><table><thead><tr><th>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1563247765&ver=1731&signature=gm2iTUKE3itOZzvlz9SUtKCYNv*PqEYt2C7ReV7kd47e2ZAWPvG5GRXZUJsiRIde34Uh5FznBslw4hHhXmHQXyV3yz0tTdgds1RMCdai6Oyy98w2-iTBRWeJlpm3cWa8&new=1" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2d4c5ba835e96705.jpg" alt="Python"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>DDoS（分布式拒绝服务）攻击是无解的吗？</title>
    <link href="https://www.policx.com/ddos/"/>
    <id>https://www.policx.com/ddos/</id>
    <published>2019-07-14T07:26:43.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>“</strong></p><p>DDOS？ </p><p>一言难尽啊！ </p><p>”</p><a id="more"></a><p>先说结论，DDoS是近年来网络攻击中的一棵“常青树”，的确很难缠，但说它是无解的，那也有点太看得起它了。虽然DDoS在对很多大平台的攻击中出尽了风头，但在现在互联网的解决方案中，并不缺乏应对DDoS的解决方案。 </p><p>说起DDoS攻击，我脑海里能够想到的全都是中国民间俗语，什么“双拳难敌四手，好汉架不住人多”，什么“千斤拨四两”，什么“乱拳打死老师傅”等等等等。 </p><p>之前有朋友跑来问我DDoS是个什么东西，为什么这么多互联网巨头都被搞得没有脾气，我记得我当时我是这么举的例子： </p><p>我们这一代人小的时候，自助餐开始在中国内地风行，那会儿这个行业里为了打击竞争对手，对手最惯常使用的阴招是雇佣很多五大三粗的人，给他们钱去对方的店里一通猛吃，杯盘狼藉之下，用不了几天这家自助餐就能给吃黄了。 </p><p>而DDoS攻击比这种还阴损，如果你开了一家餐馆，你的对手如果想搞你，最好的办法就是找一堆地痞流氓到你的店里坐的满满一屋子，你如果上前问，他们就一直跟你扯淡找麻烦，导致真正想吃饭的顾客一看这个情形，掉头就走了。 </p><p>用不了多久，你的餐馆就会开不下去，而你的竞争对手就会趁机蚕食掉你的市场份额，而放在网络语境里，这就是DDoS攻击的最基本原理。 </p><p>而这件事之所以难缠在于，一两个无赖根本成不了气候，想要耍流氓必须要有很多个无赖集结在一起。<strong>所以和现实世界中的无赖一样，DDoS真正的杀手锏在于利用能够发动的汹涌的流量，可以瞬间冲垮被攻击网站的服务器。</strong></p><p>如果我们回溯一下历史的话，会发现黑客组织之所以会有组织有预谋的发起DDoS攻击，基本上都是基于以下几个原因： </p><ul><li><p>有些行业如果网站被恶意攻击，会造成很难估量的损失，这个时候黑客发动DDoS攻击的初衷一般是出于敲诈勒索，为了保证企业的正常运转，他们通常愿意向黑客付高额的赎金； </p></li><li><p>行业内血海一片，DDoS是恶意竞争的屠刀。这个现象从逻辑上，其实雇佣无赖去占领对手餐馆的原理是一毛一样的，而且DDOS攻击早已产业化，现在中国的DDOS黑市，出钱请黑客打1G的流量到一个网吧或网站，市场价只要不到50块钱，但对于一个创业公司或者干脆就是一个小网吧来说，这已经算是可以灭顶的无妄之灾了。 </p></li><li><p>DDoS攻击往往成为掩盖真实网络攻击的烟雾弹，在遭受DDoS攻击的企业中，部分企业还伴随数据丢失的现象，黑客利用DDoS攻击掩盖其窃取用户隐私的真实目的，这种攻击行为在社交网站、金融领域等用户隐私高价值的行业尤为高发。 </p></li></ul><p>比如说，去年年初的时候，荷兰第一大银行荷兰商业银行于2018年1月28日晚间遭到DDoS攻击；第二大银行荷兰合作银行的网银服务29日早晨遭到攻击；第三大银行荷兰银行在那一周内共遭到7次网络攻击，仅周末就有3次。 </p><p>不过这一次发生在荷兰的针对银行系统的攻击并没有造成用户隐私的泄露，原因在于这仅仅是一次来自俄罗斯一个网络间谍组织Cozy Bear对荷兰情报组织AIVD侵犯其计算机的“单纯”的报复行为。<strong>但并不是所有黑客组织发起的DDoS攻击都如此单纯。</strong></p><p>2018年年底时万豪酒店发布了一则公告，称其旗下喜达屋酒店的5亿人次的信息被泄露，共计3.27亿人，泄露信息包括姓名、邮寄地址、电话号码、电子邮件昂面地址、护照号码、出生日期、性别等等入住信息，更糟糕的是万豪无法确定，侵入酒店系统的第三方黑客，在窃取的信息中是否包含客人的银行卡号和密码。（此案例和DDOS攻击无关，建议采用其他案例，比如2011年4月20日至26日，索尼遭受DDoS攻击，目的是为了掩盖盗取索尼PS的用户数据。） </p><p>而游戏领域，则是DDoS攻击的另一个重灾区，不光是刚才前文中提到的暴雪，包括索尼、金山、网易在内的众多知名游戏公司都曾数次遭受攻击，可以说DDoS攻击是游戏企业的噩梦。 </p><p>许多刚创业的游戏公司，可能刚上线就被打死，而一些处在融资阶段的游戏公司，由于遭遇攻击而被迫停服，则很大程度上会调低投资人的预期，甚至导致融资失败。 </p><p>而这些因素，都是竞对打压或者敲诈勒索的绝对软肋。 </p><p>从以上的几个案例我们不难看出，和现实中的耍流氓和敲诈勒索相比，通过网络手段进行攻击的风险和成本更低，坏蛋的嘴脸也更穷凶极恶一点，无论是政府机构还是企业平台，无论你是巨头还是小蚂蚁，只要你身上有羊毛可以薅，你都时刻面临着被洗劫的风险 </p><p>不过刚在开头我也讲了，虽然DDoS很难缠很让人头痛，但本质上图并不是无解的。 </p><p>回到我最开始讲的那个例子。 </p><p>你是一个餐馆老板，过去三十年一直是个老老实实的厨子，突然面对五十个臭流氓到你店里耍无赖的时候，你最好的应对方法，应该是什么？ </p><p>自己组建一支人马，和这些臭流氓正面刚？这恐怕不行，因为你不是臭流氓，你没有相应的作战经验。 </p><p>报警请人民警察来帮忙处理？这恐怕也不行，人家在你店里没有打砸抢，只是“温和的”非暴力不合作，警察来了也只能当民事调解，并且人家马仔众多，明天再换一拨新面孔来，玩的你一点脾气都没有。 </p><p>这就是面对DDoS时，无论是巨头还是小蚂蚁，他们的实实在在的困境。 </p><p>但正所谓“道高一尺魔高一丈”，你在云上和我耍流氓，那我就在云上回击。 </p><p><strong>“云”的事儿，不如还交还给云来处理。</strong>我认为就目前DDoS的在攻击量级上的疯狂进击的前提下，云计算服务厂商或许是狙击它们的最有效手段。 </p><p>2018年年初，峰值1.35TB/秒的流量冲击了开发者平台 GitHub。这是第一次TB量级的DDoS攻击。GitHub 受到攻击后，服务器断断续续，无法访问。攻击发生 10 分钟后，GitHub 向CDN 服务商 Akamai 请求协助，访问 GitHub 的流量已经由后者接管并在15分钟之内完成了防御。 </p><p>Akamai的相关负责人在接受采访时说，我们是基于迄今为止最大规模 DDoS 攻击五倍的峰值而做的相应准备，所以 1.3T 对我们来说是小意思。 </p><p>在关于流量峰值这一点上，我认为饱受双11、双12、618等全民购物狂欢的电商巨头们更有发言权，就拿京东举例子好了。 </p><p>京东云在之前发布的高防版的DDoS服务中，展示出了非常明确的信心是，在多年的电商狂欢流量对抗中，京东云已经在实战中建立了一套完备的防御机制，无论是在流量峰值的建模上，还是在DDoS的防御算法上，它的部署都远远不是纸上谈兵，而是拳拳到肉的经受住了实战的洗礼。要知道，全世界每年有超过5成的DDoS攻击都来自中国，而我们的国家也是全世界超过美国的第一大“肉鸡”市场，由电商大数据加持演化而来的京东云，它在云安全的理解上可以说是非常深刻了。 </p><p>所以说，如果说一定要有一个结论，我想说“上帝的归上帝，而云上的归云上”，像京东云这样的基于电商大数据考验的云计算平台，或许才是对抗DDoS的最终答案。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f3adcbb2ed60428.png" alt="jd"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;“&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DDOS？ &lt;/p&gt;
&lt;p&gt;一言难尽啊！ &lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.policx.com/program/JavaScript/node/"/>
    <id>https://www.policx.com/program/JavaScript/node/</id>
    <published>2019-07-13T16:06:04.000Z</published>
    <updated>2019-07-18T06:22:40.943Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/15/5d2c47df96f5d45317.jpg" alt="Node.js"></p><p>能方便地搭建响应速度快、易于扩展的网络应用，Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>中文：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org</a>、<a href="https://nodejs.cn/" target="_blank" rel="noopener">https://nodejs.cn</a></p><p>简单说Node.js就是运行在服务器端的JavaScript，是现在流行的语言中能同时运行在前端与后台的程序语言，你可以把JavaScript想像成Java与C#。相关技术：</p><p>数据库：MongoDB，非关系型数据库，NoSQL（Not only SQL）</p><p>MVC框架：AngularJS</p><p>Web服务器：Express</p><p>模板引擎：jade、ejs、htmljs、swig、hogan.js</p><h1 id="二、搭建Node-js开发环境"><a href="#二、搭建Node-js开发环境" class="headerlink" title="二、搭建Node.js开发环境"></a>二、搭建Node.js开发环境</h1><h2 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h2><p>去官网下下载最新版本的Node.js一步一步按提示安装即可，如果安装失败就手动安装，将Node.js的安装位置配置到环境变量的path中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装完成后启动命令行，测试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="三、第一个Node-js程序"><a href="#三、第一个Node-js程序" class="headerlink" title="三、第一个Node.js程序"></a>三、第一个Node.js程序</h1><p>在上面的示例中，我们是通过IDE完成编译与运行的，其实手动运行也可以，比如编写一段代码如下：</p><blockquote><p>server.js</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//依赖一个http模块，相当于java中的import，与C#中的using</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">//创建一个服务器对象</span><br><span class="line">server = http.createServer(function (req, res) &#123;</span><br><span class="line">//设置请求成功时响应头部的MIME为纯文本</span><br><span class="line">res.writeHeader(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">//向客户端输出字符</span><br><span class="line">res.end(&quot;Hello World\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//让服务器监听本地8000端口开始运行</span><br><span class="line">server.listen(8000,&apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server is runing at 127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>在node环境下解释运行：<br><img src="https://i.loli.net/2019/07/14/5d2af984d2fae77488.jpg" alt></p><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2af89c2b5b226144.jpg" alt></p><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。<br>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。<br>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</p><h1 id="四、NPM（Node-js包管理器）"><a href="#四、NPM（Node-js包管理器）" class="headerlink" title="四、NPM（Node.js包管理器）"></a>四、NPM（Node.js包管理器）</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：  </p><ul><li>a)、允许用户从NPM服务器下载别人编写的第三方包到本地使用。  </li><li>b)、允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。  </li><li>c)、允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><h2 id="4-1、查看npm版本"><a href="#4-1、查看npm版本" class="headerlink" title="4.1、查看npm版本"></a>4.1、查看npm版本</h2><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p><h2 id="4-2、升级npm"><a href="#4-2、升级npm" class="headerlink" title="4.2、升级npm"></a>4.2、升级npm</h2><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="4-3、安装模块"><a href="#4-3、安装模块" class="headerlink" title="4.3、安装模块"></a>4.3、安装模块</h2><blockquote><p>npm install <module name> -参数</module></p></blockquote><p>如果带参数-g表示全局安装，否则只是安装到某个目录下。</p><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install express -g</span><br></pre></td></tr></table></figure><h2 id="4-4、卸载模块"><a href="#4-4、卸载模块" class="headerlink" title="4.4、卸载模块"></a>4.4、卸载模块</h2><p>我们可以使用以下命令来卸载 Node.js 模块。  </p><blockquote><p>sudo npm uninstall <module name></module></p></blockquote><p>如先使用安装指令安装bootstrap:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>再使用卸载指令删除模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall bootstrap</span><br></pre></td></tr></table></figure><p>可以到 /node_modules/ 目录下查看包是否还存在</p><h2 id="4-5、模块列表"><a href="#4-5、模块列表" class="headerlink" title="4.5、模块列表"></a>4.5、模块列表</h2><p>使用模块列表命令可以方便的看到当前项目中依赖的包：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h2 id="4-6、更新模块"><a href="#4-6、更新模块" class="headerlink" title="4.6、更新模块"></a>4.6、更新模块</h2><p>我们可以使用以下命令更新模块：<br><code>npm update</code>模块名称<br><code>npm up -g</code> 模块名称</p><h2 id="4-7、搜索模块"><a href="#4-7、搜索模块" class="headerlink" title="4.7、搜索模块"></a>4.7、搜索模块</h2><p><code>npm search</code>模块名称</p><h2 id="4-8、NPM-常用命令"><a href="#4-8、NPM-常用命令" class="headerlink" title="4.8、NPM 常用命令"></a>4.8、NPM 常用命令</h2><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。<br>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。<br>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。<br>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。<br>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。<br>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></package></package></p><h2 id="4-9、更换NPM-镜像"><a href="#4-9、更换NPM-镜像" class="headerlink" title="4.9、更换NPM 镜像"></a>4.9、更换NPM 镜像</h2><p>因为npm的服务器在国外，在网络状态不好的情况下引入一个模块会因为网络延迟而失败，可以更换成国内速度更快的镜像服务器，这里以使用淘宝 NPM 镜像（<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>）为例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/15/5d2c481d14f7270384.jpg" alt></p><p>这样就可以使用 cnpm 命令来安装模块了：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＄ cnpm install [name]</span><br></pre></td></tr></table></figure><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><p>如是安装失败，可以试试：</p><figure class="highlight zsh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">alias</span> cnpm=<span class="hljs-string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">--cache=<span class="hljs-variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">--userconfig=<span class="hljs-variable">$HOME</span>/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">  --userconfig=$HOME/.cnpmrc"'</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。使用Node.js作为AngularJS开发Web服务器的最佳方式是使用Express模块。</p><p>Express官网： <a href="https://expressjs.com/" target="_blank" rel="noopener">https://expressjs.com/</a></p><p>Express4.x API：<a href="https://expressjs.com/zh-cn/4x/api.html" target="_blank" rel="noopener">https://expressjs.com/zh-cn/4x/api.html</a></p><p><img src="https://i.loli.net/2019/07/15/5d2c484698cd427801.jpg" alt></p><h2 id="5-2、Express框架核心特性"><a href="#5-2、Express框架核心特性" class="headerlink" title="5.2、Express框架核心特性"></a><strong>5.2、Express框架核心特性</strong></h2><p>可以设置中间件来响应 HTTP 请求。</p><p>定义了路由表用于执行不同的 HTTP 请求动作。</p><p>可以通过向模板传递参数来动态渲染 HTML 页面。</p><p>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。</p><p>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p><h2 id="5-3、安装-Express"><a href="#5-3、安装-Express" class="headerlink" title="5.3、安装 Express"></a><strong>5.3、安装 Express</strong></h2><p>安装 Express 并将其保存到依赖列表中：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>以上命令全局安装express。也可安装时指定安装中间件。</p><p><em>body-parser</em> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</p><p><em>cookie-parser</em> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p><p><em>multer</em> - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">＄ npm install body-parser --save  </span><br><span class="line">＄ npm install cookie-parser --save  </span><br><span class="line">＄ npm install multer --save</span><br></pre></td></tr></table></figure><p>默认这些模块都已经添加。</p><h2 id="5-4、第一个Express框架实例"><a href="#5-4、第一个Express框架实例" class="headerlink" title="5.4、第一个Express框架实例"></a>5.4、第一个Express框架实例</h2><p>接下来我们使用 Express 框架来输出 “Hello World”。<br>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。</p><p>创建一个目录，如Project，进入命令行：</p><p>使用npm install express 导入express模块。</p><p>在目录下创建hello.js文件，如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//引入express模块</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">//创建一个app对象，类似一个web 应用（网站）</span><br><span class="line">var app = express();</span><br><span class="line">//接受指定路径的请求，指定回调函数</span><br><span class="line">app.get(&apos;/&apos;, function (req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//创建一个web服务器，可以认为就是web服务器对象</span><br><span class="line">//监听8081端口，当监听成功时回调</span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">   var host = server.address().address;  //地址</span><br><span class="line">   var port = server.address().port;  //端口</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-5、开发Express项目"><a href="#5-5、开发Express项目" class="headerlink" title="5.5、开发Express项目"></a>5.5、开发Express项目</h2><p><img src="https://i.loli.net/2019/07/14/5d2b00e97910997783.jpg" alt></p><p>创建好的项目如下：<br><img src="https://i.loli.net/2019/07/14/5d2b02dad205355700.jpg" alt></p><p>app.js是网站：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><p>bin\www是web服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">/**</span><br><span class="line"> * 依赖模块，导入</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;nodejsexpress:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从上下文环境中获得监听端口，如果空则3000</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Web服务器</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开始监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);  //指定发生错误时的事件</span><br><span class="line">server.on(&apos;listening&apos;, onListening);  //当监听成功时的回调</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 规范化端口</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *错误事件监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  //错误处理</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);  //结束程序</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当用户访问服务器成功时的回调</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/index.js路由，有点类似控制器或Servlet：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 获得首页 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>views/index.ejs首页视图：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在www上右键选择“运行方式”-&gt;Run ‘/bin/www’ 运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b034bcca6187136.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b044c2b12347829.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b041724d6091090.jpg" alt></p><h3 id="5-5-1、request对象"><a href="#5-5-1、request对象" class="headerlink" title="5.5.1、request对象"></a>5.5.1、request对象</h3><p>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ul><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ul><h3 id="5-5-2、response对象"><a href="#5-5-2、response对象" class="headerlink" title="5.5.2、response对象"></a>5.5.2、response对象</h3><p>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.app：同req.app一样</span><br><span class="line">res.append()：追加指定HTTP头</span><br><span class="line">res.set()在res.append()后将重置之前设置的头</span><br><span class="line">res.cookie(name，value [，option])：设置Cookie</span><br><span class="line">opition: domain / expires / httpOnly / maxAge / path / secure / signed</span><br><span class="line">res.clearCookie()：清除Cookie</span><br><span class="line">res.download()：传送指定路径的文件</span><br><span class="line">res.get()：返回指定的HTTP头</span><br><span class="line">res.json()：传送JSON响应</span><br><span class="line">res.jsonp()：传送JSONP响应</span><br><span class="line">res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</span><br><span class="line">res.redirect()：设置响应的Location HTTP头，并且设置状态码302</span><br><span class="line">res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</span><br><span class="line">res.send()：传送HTTP响应</span><br><span class="line">res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</span><br><span class="line">res.set()：设置HTTP头，传入object可以一次设置多个头</span><br><span class="line">res.status()：设置HTTP状态码</span><br><span class="line">res.type()：设置Content-Type的MIME类型</span><br></pre></td></tr></table></figure><h3 id="5-5-3、express获取参数有三种方法"><a href="#5-5-3、express获取参数有三种方法" class="headerlink" title="5.5.3、express获取参数有三种方法"></a>5.5.3、express获取参数有三种方法</h3><p>req.query 适合 <a href="https://localhost:3000/form?num=8888" target="_blank" rel="noopener">https://localhost:3000/form?num=8888</a><br>req.body 适合<a href="https://localhost:3000/form，Post请求中的参数" target="_blank" rel="noopener">https://localhost:3000/form，Post请求中的参数</a><br>req.params 适合获取form后的num：<a href="https://localhost:3000/form/num" target="_blank" rel="noopener">https://localhost:3000/form/num</a>  </p><p>（一）、GET</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = req.query.num;</span><br><span class="line">res.send(&quot;你获取的get数据为:&quot; + num);</span><br></pre></td></tr></table></figure><p>（二）、POST</p><p>解析post数据需要用到body-parser</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">//引入body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">//需要use的</span><br><span class="line">app.use(bodyParser.json()); // for parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">extended: true</span><br><span class="line">&#125;)); // for parsing application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.post(&apos;/form&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.body.num;</span><br><span class="line">res.send(&quot;你获取的post数据为:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>public/test.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"tinyphp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（三）、获取路径参数</p><p>app.js  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.get(&apos;/form/:num&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.params.num;</span><br><span class="line">res.send(&quot;你获取到form/后的参数:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="5-6-ejs基础"><a href="#5-6-ejs基础" class="headerlink" title="5.6 ejs基础"></a>5.6 ejs基础</h2><p>ejs是一个Express Web应用的模板引擎，在NodeJS开发中可以选择的模板引擎可能是所有Web应用开发中范围最广的，如jade、ejs、htmljs、swig、hogan.js，但ejs是最容易上手的，与jsp,asp,php的原始模板引擎风格很像。</p><p>官网：<a href="https://www.embeddedjs.com/" target="_blank" rel="noopener">https://www.embeddedjs.com/</a></p><p>添加一个<code>product.js</code>路由：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  var products=[];</span><br><span class="line">  products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">  //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">  res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>在views目录下添加<code>product.ejs</code>视图，这里是一个简单的MVC：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span> - 产品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"80%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%pdts.forEach(function(pdt,index)&#123;%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=index+1%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.name%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.price%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%&#125;);%</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">%=pdts[i].name%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改app，注册定义好的模块product：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> index = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/index'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/users'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> pdts = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/product'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//指定视图引擎为ejs</span></span><br><span class="line">app.set(<span class="hljs-string">'views'</span>, path.join(__dirname, <span class="hljs-string">'views'</span>));</span><br><span class="line">app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="hljs-comment">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class="line">app.use(logger(<span class="hljs-string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="hljs-string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/'</span>, index);</span><br><span class="line">app.use(<span class="hljs-string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="hljs-string">'/pdt'</span>, pdts);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b092ca2eb115835.jpg" alt></p><blockquote><p>原因：没有安装ejs模块<br>解决办法：进入到项目目录，安装ejs</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save ejs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b09efe80ba53992.jpg" alt></p></blockquote><p>重新运行：<br><img src="https://i.loli.net/2019/07/14/5d2b0a951a09231745.jpg" alt></p><h2 id="5-7、lodash"><a href="#5-7、lodash" class="headerlink" title="5.7、lodash"></a>5.7、lodash</h2><p>这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。可以非常方便的操作json。</p><p>官网：<a href="https://lodashjs.com/" target="_blank" rel="noopener">https://lodashjs.com/</a></p><p>安装：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash</span><br></pre></td></tr></table></figure><p>安装时先用cd切换到当前项目下。</p><p>如果浏览器使用可以直接引入：</p><script src="lodash.js"></script><p>添加lodash依赖：<br><img src="https://i.loli.net/2019/07/14/5d2b0c4c7c14a17367.jpg" alt></p><p>依赖成功后会在package.json中添加引用：<br><img src="https://i.loli.net/2019/07/14/5d2b0c9e03f1844597.jpg" alt></p><p>后台Node.js使用，可以引入模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//导入lodash模块</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var products=[];</span><br><span class="line">products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">//1、取出第一个元素</span><br><span class="line">var obj1=_.first(products);</span><br><span class="line">console.log(obj1.name);  //ZTE U880</span><br><span class="line"></span><br><span class="line">//2、取出最后一个元素</span><br><span class="line">var obj2=_.last(products);</span><br><span class="line">console.log(obj2.name);  //iPhone 7 Plus 128G</span><br><span class="line"></span><br><span class="line">//3、指定查找条件返回符合条件的索引</span><br><span class="line">var obj3=_.findIndex(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj3);  //2</span><br><span class="line"></span><br><span class="line">//4、指定查找条件返回查找到的对象</span><br><span class="line">var obj4=_.find(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj4);  //&#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;</span><br><span class="line"></span><br><span class="line">//5、排序</span><br><span class="line">var obj5=_.orderBy(products,[&quot;price&quot;,&quot;name&quot;],[&quot;desc&quot;,&quot;asc&quot;]);</span><br><span class="line">console.log(obj5);</span><br><span class="line"></span><br><span class="line">//[ &#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;HuWei 荣耀8&apos;, price: 1899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;ZTE U880&apos;, price: 899.8 &#125; ]</span><br><span class="line"></span><br><span class="line">//6、查找价格为1899.8的产品的key</span><br><span class="line">var obj6=_.findKey(products,&#123;price:1899.8&#125;);</span><br><span class="line">console.log(obj6);   //1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/14/5d2b0f023a83710965.jpg" alt></p><p>API的使用非常简单，但需要注意版本，可以现查现用，API地址：<a href="https://lodash.com/docs/4.17.2%20" target="_blank" rel="noopener">https://lodash.com/docs/4.17.2 </a></p><h2 id="5-8、参数"><a href="#5-8、参数" class="headerlink" title="5.8、参数"></a>5.8、参数</h2><h3 id="5-8-1、URL中的参数占位"><a href="#5-8-1、URL中的参数占位" class="headerlink" title="5.8.1、URL中的参数占位"></a>5.8.1、URL中的参数占位</h3><p>Checks route params (req.params), ex: /user/:id</p><p>127.0.0.1:3000/index，这种情况下，我们为了得到index，我们可以通过使用req.params得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式；</p><p><code>http://127.0.0.1:3000/pdt/9527/phone</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得产品根据Id</span><br><span class="line">router.get(&apos;/:id/:category&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(request.params.id+&quot;,&quot;+request.params.category);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b10e8e678f43145.jpg" alt></p><h3 id="5-8-2、URL中的QueryString"><a href="#5-8-2、URL中的QueryString" class="headerlink" title="5.8.2、URL中的QueryString"></a>5.8.2、URL中的QueryString</h3><p>Checks query string params (req.query), ex: ?id=12</p><p>127.0.0.1:3000/index?id=12，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用req.query.id就可以获得，类似于PHP的get方法；</p><p><code>http://127.0.0.1:3000/pdt/9527?name=jobs</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(&quot;name:&quot;+request.query.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b12be0371490358.jpg" alt></p><h3 id="5-8-3、HTTP正文中的参数"><a href="#5-8-3、HTTP正文中的参数" class="headerlink" title="5.8.3、HTTP正文中的参数"></a>5.8.3、HTTP正文中的参数</h3><p>在post请求中获得表单中的数据。</p><p>Checks urlencoded body params (req.body), ex: id=</p><p>127.0.0.1：300/index，然后post了一个id=2的值，这种方式是获取客户端post过来的数据，可以通过req.body.id获取，类似于PHP的post方法；</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222150412682-243382356.png" alt></p><p>页面：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &lt;%= title %&gt;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%pdts.forEach(function(pdt,index)&#123;%&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=index+1%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.name%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.price%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%&#125;);%&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=pdts[i].name%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            &lt;%if(typeof msg!=&quot;undefined&quot;)&#123;%&gt;</span><br><span class="line">                &lt;%=msg%&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">        &lt;form action=&quot;pdt/add&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                名称：&lt;input name=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                价格：&lt;input name=&quot;price&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/add&apos;,function(request,res,next)&#123;</span><br><span class="line">    var entity=&#123;name:request.body.name,price:request.body.price&#125;;</span><br><span class="line">    products.push(entity);</span><br><span class="line">      //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">      res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products,msg:&quot;添加成功&quot;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151340745-1374859267.png" alt></p><h2 id="5-9、JSON"><a href="#5-9、JSON" class="headerlink" title="5.9、JSON"></a>5.9、JSON</h2><p>如果需要Node.js向外提供返回JSON的接口，Express也是非常方便的，可以使用原来在浏览器中使用到的JSON对象，这是一个浏览器内置对象在服务可以直接使用：</p><p>将对象序列化成字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象</span><br><span class="line">var rose=&#123;&quot;name&quot;:&quot;Rose&quot;,&quot;weight&quot;:&quot;65&quot;&#125;;</span><br><span class="line">            //序列化成字符串</span><br><span class="line">            var str=JSON.stringify(rose);</span><br><span class="line">            alert(str);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151858839-27300214.png" alt></p><p>反序列化，将字符转换成对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成JavaScript对象</span><br><span class="line">var markStr=&apos;&#123;&quot;name&quot;:&quot;mark&quot;,&quot;weight&quot;:&quot;188&quot;&#125;&apos;;</span><br><span class="line">            var mark=JSON.parse(markStr);</span><br><span class="line">            alert(mark.name+&quot;，&quot;+mark.weight);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222152634417-1260078212.png" alt></p><p>Express已经封装了一个json方法，直接调用该方法就可以序列化对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/rest&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(products);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、RESTful（表述性状态转移）"><a href="#六、RESTful（表述性状态转移）" class="headerlink" title="六、RESTful（表述性状态转移）"></a>六、RESTful（表述性状态转移）</h1><p>REST是英文Representational State Transfer的缩写，中文称之为“表述性状态转移” 基于HTTP协议，是另一种服务架构，传递是JSON、POX（Plain Old XML）而不是SOAP格式的数据，充分利用HTTP谓词（Verb），侧重数据的传输，业务逻辑交给客户端自行处理</p><p>REST是一种分布式服务架构的风格约束，像Java、.Net（WCF、WebAPI）都有对该约束的实现，使URL变得更加有意义，更加简洁明了，如：</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>get请求 表示获得所有产品的第1个</p><p><a href="https://www.zhangguo.com/products/product" target="_blank" rel="noopener">https://www.zhangguo.com/products/product</a><br>post请求 表示添加一个产品</p><p><a href="https://www.zhangguo.com/products/1/price" target="_blank" rel="noopener">https://www.zhangguo.com/products/1/price</a><br>get请求 表示获得第1个产品的价格</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>delete请求 删除编号为1的产品</p><p>REST设计需要遵循的原则<br>网络上的所有事物都被抽象为资源（resource）；<br>每个资源对应一个唯一的资源标识符（resource identifier）；<br>通过通用的连接器接口（generic connector interface）对资源进行操作；<br>对资源的各种操作不会改变资源标识符；<br>所有的操作都是无状态的（stateless）</p><p>谓词<br><strong>GET</strong><br>表示查询操作，相当于Retrieve、Select操作<br><strong>POST</strong><br>表示插入操作，相当于Create，Insert操作<br><strong>PUT</strong><br>表示修改操作，相当于Update操作<br><strong>DELETE</strong><br>表示删除操作，相当于Delete操作</p><p>其它还有：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161223101344557-1727952968.png" alt></p><p>NodeJS+Express可以很容易的实现REST</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>application/json</li><li>res.setHeader(‘Content-Type’, ‘application/json;charset=utf-8’);</li></ul><p>示例代码cars.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var cars=[];</span><br><span class="line">cars.push(&#123;id:201701,name:&quot;BMW&quot;,price:190,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201702,name:&quot;BYD&quot;,price:25,speed:&quot;160km/h&quot;,color:&quot;红色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201703,name:&quot;Benz&quot;,price:300,speed:&quot;215km/h&quot;,color:&quot;蓝色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201704,name:&quot;Honda&quot;,price:190,speed:&quot;170km/h&quot;,color:&quot;黑色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201705,name:&quot;QQ&quot;,price:130,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line"></span><br><span class="line">/* Get */</span><br><span class="line">/*获得所有汽车*/</span><br><span class="line">/*url /cars/*/</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.json(cars);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Get*/</span><br><span class="line">/*获得汽车通过id*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">     //从路径中映射参数，转换成数字</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var car=_.find(cars,&#123;id:id&#125;);</span><br><span class="line">      res.json(car);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Post*/</span><br><span class="line">/*添加汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.post(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      car.id=_.last(cars).id+1;  //将编号修改为最后一辆车的编号+1</span><br><span class="line">      cars.push(car);  //将汽车对象添加到集合中</span><br><span class="line">      res.json(car);  //将添加成功的车以json的形式返回</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Put*/</span><br><span class="line">/*修改汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.put(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      console.log(req.body);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:parseInt(car.id)&#125;);  //根据id获得车在集合中的下标</span><br><span class="line"></span><br><span class="line">      cars[index]=car;  //替换原对象</span><br><span class="line">      //res.json(car);  //将修改后的车以json的形式返回</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;更新成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Delete*/</span><br><span class="line">/*删除汽车*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.delete(&apos;/id/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">      //获得url中的编号参数</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:id&#125;);  //根据id获得车在集合中的下标</span><br><span class="line">      cars.splice(index,1);   //在cars数组中删除下标从index开始的1条数据</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;删除成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>示例代码app.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line">var pdts = require(&apos;./routes/product&apos;);</span><br><span class="line">var task = require(&apos;./routes/task&apos;);</span><br><span class="line">var cars = require(&apos;./routes/cars&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line">app.use(&apos;/pdt&apos;, pdts);</span><br><span class="line">app.use(&quot;/task&quot;,task);</span><br><span class="line">app.use(&quot;/cars&quot;,cars);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得所有汽车  </li><li>url /cars/</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b27eb42dea22132.jpg" alt></p><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得汽车通过id</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b28e456cdf58111.jpg" alt></p><blockquote><p><strong>Post</strong></p></blockquote><ul><li>添加汽车  </li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b30e46f28836556.jpg" alt></p><p>参数中的json格式一定要使用标准格式，注意引号，注意Content-Type，默认的Content-Type类型是：application/x-www-form-urlencoded</p><blockquote><p><strong>Put</strong></p></blockquote><ul><li>修改汽车</li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3434410e778260.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b344cd080581595.jpg" alt></p><blockquote><p><strong>Delete</strong>  </p></blockquote><ul><li>删除汽车</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3526d5bff57574.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b35474e9c447189.jpg" alt></p><p><strong>node.js跨域</strong></p><p>修改app.js文件拦截所有的请求，修改头部</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">app.all(&apos;*&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">    res.header(&quot;X-Powered-By&quot;, &apos; 3.2.1&apos;);</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);</span><br><span class="line">    if(req.method == &quot;OPTIONS&quot;) &#123;</span><br><span class="line">        res.send(&quot;200&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2017.cnblogs.com/blog/63651/201801/63651-20180108142729785-1121920664.png" alt></p><h1 id="九、视频"><a href="#九、视频" class="headerlink" title="九、视频"></a>九、<a href="https://www.bilibili.com/video/av17977069" target="_blank" rel="noopener">视频</a></h1><p>From: <a href="https://www.cnblogs.com/best/p/6204116.html" target="_blank" rel="noopener">https://www.cnblogs.com/best/p/6204116.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Node.js" scheme="https://www.policx.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hexo front-matter 怎么写？</title>
    <link href="https://www.policx.com/front-matter/"/>
    <id>https://www.policx.com/front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-21T05:19:48.805Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr><tr><td>link</td><td>点击文章跳转地址</td><td></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/CSDNnews/"/>
    <id>https://www.policx.com/CSDNnews/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-18T06:25:40.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">hackernoon</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/news/BitTorrent/"/>
    <id>https://www.policx.com/news/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/notes/partner/"/>
    <id>https://www.policx.com/notes/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-28T03:30:14.778Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
      <category term="notes" scheme="https://www.policx.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/news/harddisk/"/>
    <id>https://www.policx.com/news/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/news/2019/"/>
    <id>https://www.policx.com/news/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-18T06:25:40.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/blog/netlify/"/>
    <id>https://www.policx.com/blog/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-18T06:25:47.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。<br><img src="https://githubpage-1255710107.cos.ap-shanghai.myqcloud.com/static/images/KNN/hexo.png" alt></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。<br>那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。<br>接下来我分步骤的跟大家来介绍我的部署方案。</p><h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/blog/hexo-theme-icarus/"/>
    <id>https://www.policx.com/blog/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-18T06:25:47.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f0332a3bdc91139.jpg" alt="easyhexo.com"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>善用佳软 Blinks</title>
    <link href="https://www.policx.com/Blinks/"/>
    <id>https://www.policx.com/Blinks/</id>
    <published>2019-04-30T04:11:04.000Z</published>
    <updated>2019-07-27T14:56:24.752Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>我们已经离不开电子屏幕了！</p><a id="more"></a><p>不管是家用的电视机，办公用的电脑，还是无时无刻把玩的手机，大部分时间和我们共处的设备，都有显示屏。</p><p>高亮、蓝光、屏闪都会对眼睛造成损害，「护眼」变成了用户的强需求，也是设备厂商需要为用户考虑的问题。</p><p>在 MacOS 增加「夜览」功能之前，多年的护眼功能空缺是由诸如「f.lux」这类软件来填补的， 就算到现在，「f.lux」仍然不过时，除了减少蓝光，「f.lux」还能随时间变换屏幕颜色。</p><p>过滤蓝光、调整色温，是一种护眼思路，还有另外一种思路。</p><p>研究显示，盯着电脑屏幕工作的人眨眼频次大概是正常水平的 1/4，而正常眨眼可保持眼睛表面湿润，减少干燥和刺激。</p><p><img src="https://i.loli.net/2019/07/27/5d3c5c67b08d727186.png" alt="眨眼"></p><p>「Blinks」是一款 Mac 眨眼提醒软件，它并不会提醒你原理电脑，这也不显示，而是提醒你该更密集地眨眨眼了。看看它都有哪些功能和自定义项：</p><p>1.两种提醒模式：动画和非动画</p><p>2.可随系统启动</p><p>3.可设置时间间隔</p><p>4.可设置全屏下禁用，不打扰沉浸工作</p><p>5.通知窗口不会影响在用的应用、键盘和鼠标动作</p><p>6.可设置背景透明度</p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/NveP1sif_IqFGalS2BxOkg" target="_blank" rel="noopener"><img src="https://gitee.com/policx/im/raw/master/images/Z2gkII.png" alt="pic"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们已经离不开电子屏幕了！&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>善用佳软-Moom</title>
    <link href="https://www.policx.com/Software/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF-Moom/"/>
    <id>https://www.policx.com/Software/善用佳软-Moom/</id>
    <published>2019-04-09T14:40:35.000Z</published>
    <updated>2019-07-27T14:52:21.582Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>「Moom」是一款 Mac 窗口整理软件，功能和「Magnet」类似，软件提供了几个预置的窗口位置供你选择，使窗口排列不会杂乱无章，不管是单项事务还是协同任务都能井井有条。</p><a id="more"></a><p>首先要说，个人更喜欢「Magnet」，因为其存在感低，只需要记住几个快捷键便能随心所欲地使用并获得极好的体验。</p><p>「Moom」在热键的效率上并不如「Magnet」，因为他的热键逻辑是需要两步才能完成，即第一步呼出「Moom」，第二部选择预设动作。但它给了用户其他可能更好的选择。<br><img src="https://gitee.com/policx/im/raw/master/images/ojYfRU.jpg" alt="pic"></p><p>只需要将鼠标指针悬停在任意窗口的绿色最大化按钮上，「Moom」的弹出菜单就会出现，选择其中的预设即可将该窗口变换到想要的位置和尺寸比例。</p><p>这更符合使用直觉，并被很多更倾向使用鼠标的用户接受。<br><img src="https://gitee.com/policx/im/raw/master/images/jRFNDR.jpg" alt="pic"></p><p>还有，当你将鼠标指针悬停在任意窗口的绿色最大化按钮上，并按住 Option 键，「Moom」会给你更多的选择，主要是 1/4 窗口的扩展。</p><p>「Moom」还支持”边缘和角落吸附”，拖拽窗口到屏幕边缘或一角，便能触发相应的窗口变换。</p><p>「Moom」还提供了诸多自定义项，比如尺寸比例、保存当前窗口位置比例为预设、响应时间等，如果你更喜欢其和窗口的融合性，不妨试试。</p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s?__biz=MjM5MjY0OTUzMw==&mid=2449442057&idx=1&sn=5eb650c241a2de4928ad4230a1b5d772&chksm=b2a83d5b85dfb44d7c1d277863589caed2eb0955bc4d2e4de28b661dfb1f6c72a4d3fa980e2b&scene=21#wechat_redirect" target="_blank" rel="noopener"><img src="https://gitee.com/policx/im/raw/master/images/Z2gkII.png" alt="pic"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「Moom」是一款 Mac 窗口整理软件，功能和「Magnet」类似，软件提供了几个预置的窗口位置供你选择，使窗口排列不会杂乱无章，不管是单项事务还是协同任务都能井井有条。&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
</feed>
