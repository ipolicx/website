<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-07-12T09:30:58.040Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Front-matter</title>
    <link href="https://www.policx.com/2019/07/11/Front-matter/"/>
    <id>https://www.policx.com/2019/07/11/Front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-12T09:30:58.040Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/2019/07/11/20190711194445/"/>
    <id>https://www.policx.com/2019/07/11/20190711194445/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-13T08:04:16.822Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/2019/07/05/BitTorrent/"/>
    <id>https://www.policx.com/2019/07/05/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-08T15:20:42.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/2019/07/04/partner/"/>
    <id>https://www.policx.com/2019/07/04/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-12T09:50:03.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/2019/06/18/harddisk/"/>
    <id>https://www.policx.com/2019/06/18/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-08T15:20:35.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/2019/06/05/2019/"/>
    <id>https://www.policx.com/2019/06/05/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-12T09:40:14.384Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/2019/05/01/netlify/"/>
    <id>https://www.policx.com/2019/05/01/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-13T08:12:52.239Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。</p><div id="bushu"></div># 部署进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。接下来我分步骤的跟大家来介绍我的部署方案。<h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/2019/05/01/hexo-theme-icarus/"/>
    <id>https://www.policx.com/2019/05/01/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-09T14:25:12.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><ul><li>原文链接—&gt; <a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">easyhexo.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="https://www.policx.com/2018/09/17/git-del/"/>
    <id>https://www.policx.com/2018/09/17/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-13T08:10:24.253Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://www.policx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="https://www.policx.com/2018/06/19/python-excel/"/>
    <id>https://www.policx.com/2018/06/19/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-07T04:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="https://www.policx.com/2018/06/17/python-writer/"/>
    <id>https://www.policx.com/2018/06/17/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-07T04:36:07.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="https://www.policx.com/2018/06/05/2018/"/>
    <id>https://www.policx.com/2018/06/05/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-12T10:08:35.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="/post-images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymongo/"/>
    <id>https://www.policx.com/2018/05/02/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-07T04:35:29.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://www.policx.com/2018/05/02/mongodb/"/>
    <id>https://www.policx.com/2018/05/02/mongodb/</id>
    <published>2018-05-02T06:11:11.000Z</published>
    <updated>2019-07-13T08:11:55.980Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。</p><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库。</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。通常情况下，在一个集合中的所有文件都是类似或相关目的。</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。<br>下面给出的示例显示了一个博客网站，仅仅是一个逗号分隔的键值对的文档结构。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorial&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,20,2,15),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My second comments&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,25,7,45),</span><br><span class="line">         like: 5</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>MongoDB use DATABASE_NAME 用于创建数据库。该命令如果数据库不存在，将创建一个新的数据库， 否则将返回现有的数据库。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>use DATABASE语句的基本语法如下：<br><code>use DATABASE_NAME</code></p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">如果想创建一个数据库名称为 &lt;mydb&gt;, 那么 use DATABASE 语句应该如下：</span><br><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line"></span><br><span class="line">要检查当前选择的数据库使用命令 db</span><br><span class="line">&gt;db</span><br><span class="line">mydb</span><br><span class="line"></span><br><span class="line">如果想查询数据库列表，那么使用命令 show dbs.</span><br><span class="line">&gt;show dbs</span><br><span class="line">local     0.78125GB</span><br><span class="line">test      0.23012GB</span><br><span class="line"></span><br><span class="line">所创建的数据库（mydb）不存在于列表中。要显示的数据库，需要至少插入一个文档进去。</span><br><span class="line">&gt;db.movie.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;)</span><br><span class="line">&gt;show dbs</span><br><span class="line">local      0.78125GB</span><br><span class="line">mydb       0.23012GB</span><br><span class="line">test       0.23012GB</span><br></pre></td></tr></table></figure><p>MongoDB的默认数据库是test。 如果没有创建任何数据库，那么集合将被保存在测试数据库。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>MongoDB db.dropDatabase() 命令用于删除现有的数据库。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>dropDatabase()指令的基本语法如下：<br><code>db.dropDatabase()</code></p><p>这将删除选定的数据库。如果没有选择任何数据库，那么它会删除默认的“test”数据库</p><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>如果想删除新的数据库 <mydb>, 那么 dropDatabase() 命令将如下所示：</mydb></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;&#123; &quot;dropped&quot; : &quot;mydb&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>MongoDB 的 db.createCollection(name, options) 用于创建集合。 在命令中, name 是要创建集合的名称。 Options 是一个文档，用于指定集合的配置</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>String</td><td>要创建的集合的名称</td></tr><tr><td>Options</td><td>Document</td><td>（可选）指定有关内存大小和索引选项</td></tr></tbody></table><p>选项参数是可选的，所以需要指定集合的唯一名字。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>createCollection()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt;db.createCollection(&quot;mycollection&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以通过使用 show collections 命令来检查创建的集合</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;show collections</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><h3 id="选项列表"><a href="#选项列表" class="headerlink" title="选项列表"></a>选项列表</h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。</td></tr><tr><td>autoIndexID</td><td>Boolean</td><td>（可选）如果为true，自动创建索引_id字段。默认的值是 false.</td></tr><tr><td>size</td><td>number</td><td>（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。</td></tr><tr><td>max</td><td>number</td><td>（可选）指定上限集合允许的最大文件数。</td></tr></tbody></table><p>尽管插入文档，MongoDB首先检查字段集合的上限大小，那么它会检查最大字段。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法 :"></a>语法 :</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexID : true, size : 6142800, max : 10000 &#125; )</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.yiibai.insert(&#123;&quot;name&quot; : &quot;yiibai&quot;&#125;)</span><br><span class="line">&gt;show collections</span><br><span class="line">mycol</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br><span class="line">yiibai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>MongoDB 的 db.collection.drop() 用于从数据库中删除集合。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>drop() 命令的基本语法如下<br><code>db.COLLECTION_NAME.drop()</code></p><h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>下面给出的例子将删除给定名称的集合：mycollection</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.mycollection.drop()</span><br><span class="line">true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p>将数据插入到MongoDB集合，需要使用MongoDB 的 insert() 方法。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>insert()命令的基本语法如下：<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.insert(&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c),</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里 mycol 是我们的集合名称，它是在之前的教程中创建。如果集合不存在于数据库中，那么MongoDB创建此集合，然后插入文档进去。</p><p>在如果我们不指定_id参数插入的文档，那么 MongoDB 将为文档分配一个唯一的ObjectId。</p><p>_id 是12个字节十六进制数在一个集合的每个文档是唯一的。 12个字节被划分如下：<br>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</p><p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.post.insert([</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;NoSQL Database&apos;, </span><br><span class="line">   description: &apos;NoSQL database doesn&apos;t have tables&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 20, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p>要从集合查询MongoDB数据，需要使用MongoDB的 find()方法。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find()</code><br>find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p><code>&gt;db.mycol.find().pretty()</code></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>除了find()方法还有findOne()方法，仅返回一个文档。</p><h3 id="RDBMS-Where子句等效于MongoDB"><a href="#RDBMS-Where子句等效于MongoDB" class="headerlink" title="RDBMS Where子句等效于MongoDB"></a>RDBMS Where子句等效于MongoDB</h3><p>查询文档在一些条件的基础上，可以使用下面的操作</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>Equality</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td>db.mycol.find({“by”:”yiibai tutorials”}).pretty()</td><td>where by = ‘yiibai tutorials’</td></tr><tr><td>Less Than</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>Less Than Equals</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>Greater Than</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>Greater Than Equals</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>Not Equals</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="AND-在-MongoDB"><a href="#AND-在-MongoDB" class="headerlink" title="AND 在 MongoDB"></a>AND 在 MongoDB</h4><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>在 find()方法，如果您传递多个键通过”,”将它们分开，那么MongoDB对待它就如AND条件一样。基本语法如下所示：<br><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有教程含“yiibai tutorials”和其标题是“MongoDB Overview”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;yiibai tutorials&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>对于上面给出的例子相当于where子句：’ where by=’yiibai tutorials’ AND title=’MongoDB Overview’ ‘。可以传递任何数目的键-值对在find子句。</p><h4 id="OR-在-MongoDB"><a href="#OR-在-MongoDB" class="headerlink" title="OR 在 MongoDB"></a>OR 在 MongoDB</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><p>要查询基于OR条件的文件，需要使用$or关键字。OR的基本语法如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有撰写含有 ‘yiibai tutorials’ 或是标题为 ‘MongoDB Overview’ 的教程</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-AND-和-OR-在一起"><a href="#使用-AND-和-OR-在一起" class="headerlink" title="使用 AND 和 OR 在一起"></a>使用 AND 和 OR 在一起</h4><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子显示有喜欢数大于100 的文档，其标题要么是 ‘MongoDB Overview’ 或 ‘yiibai tutorials’. 等效于SQL的where子句：’where likes&gt;10 AND (by = ‘yiibai tutorials’ OR title = ‘MongoDB Overview’)’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai tutorials&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>MongoDB的update()和save()方法用于更新文档到一个集合。 update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。</p><h4 id="MongoDB-Update-方法"><a href="#MongoDB-Update-方法" class="headerlink" title="MongoDB Update() 方法"></a>MongoDB Update() 方法</h4><h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><p>update()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br></pre></td></tr></table></figure><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将设置其标题“MongoDB Overview”的文件为新标题为“New MongoDB Tutorial”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Tutorial Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 ‘multi’ 设置为 true。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="MongoDB-Save-方法"><a href="#MongoDB-Save-方法" class="headerlink" title="MongoDB Save() 方法"></a>MongoDB Save() 方法</h4><p>save() 方法取代，通过新文档到 save()方法</p><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><p>mongodb 的 save()方法如下所示的基本语法：<br><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><p>下面的例子将替换该文件_id ‘5983548781331adf45ec7’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.save(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>MongoDB 的 remove()方法用于从集合中删除文档。remove()方法接受两个参数。一个是标准缺失，第二是justOne标志<br>deletion criteria : 根据文件（可选）删除条件将被删除。<br>justOne : （可选）如果设置为true或1，然后取出只有一个文档。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>remove()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p><h6 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h6><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将删除所有的文件，其标题为 ‘MongoDB Overview’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Toturials Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="只删除一个"><a href="#只删除一个" class="headerlink" title="只删除一个"></a>只删除一个</h5><p>如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。<br><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p><h5 id="删除所有文件"><a href="#删除所有文件" class="headerlink" title="删除所有文件"></a>删除所有文件</h5><p>如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove()</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="MongoDB投影"><a href="#MongoDB投影" class="headerlink" title="MongoDB投影"></a>MongoDB投影</h4><p>mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。</p><p>MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。</p><p>语法</p><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find({},{KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示文档的标题，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意在执行find()方法时_id字段始终显示，如果不想要显示这个字段，那么需要将其设置为0</p><h5 id="限制文档"><a href="#限制文档" class="headerlink" title="限制文档"></a>限制文档</h5><p>MongoDB Limit() 方法</p><p>要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p>limit()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER)</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将只显示2个文档，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>如果不指定 limit()方法的参数数量，然后它会显示集合中的所有文档。</p><p>MongoDB Skip() 方法</p><p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。</p><p>语法</p><p>skip() 方法的基础语法如下所示：<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p><p>例子：</p><p>下面的例子将仅显示第二个文档。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，skip() 方法的默认值是 0</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p>要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。</p><p>语法</p><p>sort()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().sort({KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有如下数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示的文件排序按标题降序排序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;title&quot;:-1&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果不指定排序类型，那么 sort() 方法将以升序排列文档。</p><h4 id="MongoDB索引"><a href="#MongoDB索引" class="headerlink" title="MongoDB索引"></a>MongoDB索引</h4><p>索引支持查询高效率执行。如果没有索引，MongoDB必须扫描集合中的每一个文档，然后选择那些符合查询语句的文档。若需要 mongod 来处理大量数据，扫描是非常低效的。</p><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。</p><p>要创建索引，需要使用MongoDB的ensureIndex()方法。</p><p>语法</p><p>ensureIndex()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code></p><p>这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.</p><p>例子</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">在 ensureIndex()方法，可以通过多个字段，来创建多个字段索引。</span><br><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法还接受选项列表（这是可选），其列表如下：<br><img src="/post-images/1561132706992.png" alt></p><h4 id="MongoDB-聚合"><a href="#MongoDB-聚合" class="headerlink" title="MongoDB 聚合"></a>MongoDB 聚合</h4><p>聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。 在SQL中的count(*)，使用group by 与mongodb的聚合是等效的。 对于MongoDB的聚合，使用的是aggregate()方法。</p><p>语法</p><p>aggregate()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p><p>例子：</p><p>在集合中有以下数据：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai &apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;, </span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;, </span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;https://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在从上面的集合，如果想知道每一个用户编写的教程是多少，那么使用aggregate()方法，如下图所示的列表：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Yiibai Yiibai&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>用于上述用途将等效于sql查询： select by_user, count(*) from mycol group by by_user</code></pre><p>另外，在上述例子中，我们已经使用字段by_user进行分组并计算总和，也就是by_user 出现各个次数。一个列表中可用的聚集表达式。<br>    <img src="/post-images/1561132965786.png" alt></p><h4 id="MongoDB-复制"><a href="#MongoDB-复制" class="headerlink" title="MongoDB 复制"></a>MongoDB 复制</h4><p>复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。</p><h6 id="为什么要复制？"><a href="#为什么要复制？" class="headerlink" title="为什么要复制？"></a>为什么要复制？</h6><blockquote><pre><code>为了让数据安全数据的高（24*7）可用性灾难恢复无停机维护（如备份，索引重建，压缩）读取缩放（额外的副本来读取）副本集是透明的应用</code></pre></blockquote><h5 id="MongoDB复制的工作原理"><a href="#MongoDB复制的工作原理" class="headerlink" title="MongoDB复制的工作原理"></a>MongoDB复制的工作原理</h5><p>MongoDB通过使用副本集的复制来实现。副本集是一组承载同一个数据集的mongod实例。在副本的一个节点是接收所有的写操作主节点。所有的实例，次级，应用操作从主以便它们具有相同的数据集。副本集只能有一个主节点。</p><blockquote><pre><code>副本集是一组两个或更多个节点（通常至少3节点是必需的）。在副本集一个节点是主节点和其余的节点都是次要的。所有的数据复制是从主到次节点。在自动故障转移或维护时，选建立了主要和一个新的主节点被选择。故障节点的恢复后，再次加入副本集，并可以作为一个辅助节点。</code></pre></blockquote><p>mongodb复制的典型图如下图，其中客户端应用程序总是与主节点和主节点交互，然后将数据复制到辅助节点。<br><img src="/post-images/1561133216694.png" alt><br>副本集特征</p><ul><li>N个节点的集群</li><li>任何节点可为原发/主节点</li><li>所有的写操作进入到主节点</li><li>自动故障转移</li><li>自动恢复</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.policx.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MySQL 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymysql/"/>
    <id>https://www.policx.com/2018/05/02/pymysql/</id>
    <published>2018-05-02T03:14:27.000Z</published>
    <updated>2019-07-13T08:15:01.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是-PyMySQL？"><a href="#什么是-PyMySQL？" class="headerlink" title="什么是 PyMySQL？"></a>什么是 PyMySQL？</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><a id="more"></a> <h2 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h2><p>在文件中引入模块</p><p><code>import pymysql</code></p><h3 id="1-Connection对象"><a href="#1-Connection对象" class="headerlink" title="1.Connection对象"></a>1.Connection对象</h3><p>•  用于建立与数据库的连接<br>•  创建对象：调用connect()方法<br>conn=connect(参数列表)<br>•  参数host：连接的mysql主机，如果本机是’localhost’<br>•  参数port：连接的mysql主机的端口，默认是3306<br>•  参数db：数据库的名称<br>•  参数user：连接的用户名<br>•  参数password：连接的密码<br>•  参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</p><h3 id="2-对象的方法"><a href="#2-对象的方法" class="headerlink" title="2.对象的方法"></a>2.对象的方法</h3><p>•  close()关闭连接<br>•  commit()事务，所以需要提交才会生效<br>•  rollback()事务，放弃之前的操作<br>•  cursor()返回Cursor对象，用于执行sql语句并获得结果</p><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><p>•  执行sql语句<br>•  创建对象：调用Connection对象的cursor()方法<br>cursor1=conn.cursor()</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>•  close()关闭<br>•  execute(operation [, parameters ])执行语句，返回受影响的行数<br>•  fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组<br>•  next()执行查询语句时，获取当前行的下一行<br>•  fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回<br>•  scroll(value[,mode])将行指针移动到某个位置<br>•  mode表示移动的方式<br>•  mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动。相对的<br>•  mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0，绝对的。</p><h4 id="举个例子便于理解"><a href="#举个例子便于理解" class="headerlink" title="举个例子便于理解"></a>举个例子便于理解</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 导入python操作mysql的模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> pymysql</span><br><span class="line"><span class="hljs-comment"># 获取连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="hljs-string">'127.0.0.1'</span>, user=<span class="hljs-string">'root'</span>, password=<span class="hljs-string">'123456'</span>, database=<span class="hljs-string">'python01'</span>, port=<span class="hljs-number">3306</span>, charset=<span class="hljs-string">'utf8'</span>)</span><br><span class="line"><span class="hljs-comment"># 获取执行工具</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="hljs-comment"># sql语句,增删改</span></span><br><span class="line"><span class="hljs-comment">#sql = 'select birthday from t_user'</span></span><br><span class="line">sql = <span class="hljs-string">'select id,name,pwd,birthday from t_user'</span></span><br><span class="line"><span class="hljs-comment"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span></span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(<span class="hljs-string">'查询的结果有%s条数据'</span>%count)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取第一行</span></span><br><span class="line">dateOne = cur.fetchone()</span><br><span class="line">print(dateOne)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向上移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向下移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'absolute'</span>)   绝对的，这里指的是第一行</span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'relative'</span>)   相对的</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取所有行的数据</span></span><br><span class="line">dataAll = cur.fetchall()</span><br><span class="line">print(dataAll)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">     print(temp)</span><br><span class="line">     print(dataAll[<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])      <span class="hljs-comment">#dataAll[-1]得到的是一个用户所有的信息，dataAll[-1][2]获取最后一个人的密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> cur:</span><br><span class="line">     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-string">'id:%s,name:%s,pwd:%s,birthday:%s'</span></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">    print(s%(temp[<span class="hljs-number">0</span>],temp[<span class="hljs-number">1</span>],temp[<span class="hljs-number">2</span>],temp[<span class="hljs-number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-对象的属性"><a href="#3-对象的属性" class="headerlink" title="3.对象的属性"></a>3.对象的属性</h3><p>•  rowcount只读属性，表示最近一次execute()执行后受影响的行数<br>•  connection获得当前连接对象</p><h3 id="2-增删改查-CRUD"><a href="#2-增删改查-CRUD" class="headerlink" title="2.增删改查(CRUD)"></a>2.增删改查(CRUD)</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>•  创建testInsert.py文件，向学生表中插入一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;insert into students(sname) values(&apos;张良&apos;)&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p>•  创建testUpdate.py文件，修改学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;update students set sname=&apos;刘邦&apos; where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>•  创建testDelete.py文件，删除学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8 import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;delete from students where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>•  创建testSelectOne.py文件，查询一条学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Pymysql try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>•  创建testSelectMany.py文件，查询全部学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf8 import Pymysql</span><br><span class="line">try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="实例一：参数"><a href="#实例一：参数" class="headerlink" title="实例一：参数"></a>实例一：参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改，sql注入</span><br><span class="line">sql = &apos;insert into t_user(name,pwd,birthday) values(%s,%s,%s)&apos;</span><br><span class="line"># 参数列表</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = input(&apos;输入生日:&apos;)     # 2017年10月01日--&gt;日期struct_time(---&gt;2017-10-01)</span><br><span class="line">birthday = time.strptime(birthday,&apos;%Y年%m月%d日&apos;)      #这里我们就用到了时间与字符串的相互转换(详情见MySQL高级)</span><br><span class="line"></span><br><span class="line">params = [name,pwd,birthday]</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql,params)</span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">print(&apos;受影响的行数:%s&apos;%count)</span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例二：抛出异常"><a href="#实例二：抛出异常" class="headerlink" title="实例二：抛出异常"></a>实例二：抛出异常</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    conn = None</span><br><span class="line">    cur = None</span><br><span class="line">    # 获取连接对象</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">                           user=&apos;root&apos;,</span><br><span class="line">                           password=&apos;123456&apos;,</span><br><span class="line">                           database=&apos;python01&apos;,</span><br><span class="line">                           port=3306,</span><br><span class="line">                           charset=&apos;utf8&apos;)</span><br><span class="line">    # 模拟异常</span><br><span class="line">    # a = 1 / 0</span><br><span class="line">    # 获取执行工具</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    # sql语句,增删改</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd,birthday) values(&quot;小伊&quot;,&quot;123456&quot;,str_to_date(&quot;2017年10月20日&quot;,&quot;%Y年%m月%d日&quot;))&apos;</span><br><span class="line">    # 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">    count = cur.execute(sql)</span><br><span class="line">    # 提交</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(&apos;受影响的行数:%s&apos; % count)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    # 打印异常信息，测试时候使用，项目上线，去掉</span><br><span class="line">    print(str(ex))</span><br><span class="line">    # 将异常继续抛出</span><br><span class="line">    # raise</span><br><span class="line">finally:</span><br><span class="line">    if cur != None:</span><br><span class="line">        cur.close()</span><br><span class="line">    if conn != None:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例三："><a href="#实例三：" class="headerlink" title="实例三："></a>实例三：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改</span><br><span class="line">#sql = &apos;select birthday from t_user&apos;</span><br><span class="line">sql = &apos;select id,name,pwd,birthday from t_user&apos;</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(&apos;查询的结果有%s条数据&apos;%count)</span><br><span class="line"></span><br><span class="line">#获取第一行</span><br><span class="line"># dateOne = cur.fetchone()</span><br><span class="line"># print(dateOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for temp in cur:</span><br><span class="line">#     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;id:%s,name:%s,pwd:%s,birthday:%s&apos;</span><br><span class="line">for temp in dataAll:</span><br><span class="line">    print(s%(temp[0],temp[1],temp[2],temp[3]))</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h3><p>这个库的名字：mySqlHelper</p><p> python操作mysql进行增删改查的封装</p><pre><code>1、增删改，代码类似2、查询代码分析1、获取连接对象2、sql语句不同，参数不同3、获取执行对象    增删改    查询        1、fetchone        2、fetchall4、处理结果5、关闭</code></pre><h4 id="面向对象-建立类，封装属性和函数"><a href="#面向对象-建立类，封装属性和函数" class="headerlink" title="面向对象  建立类，封装属性和函数"></a>面向对象  建立类，封装属性和函数</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">class MysqlHelper:</span><br><span class="line">    &apos;&apos;&apos;python操作mysql的增删改查的封装&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, host, user, password, database, port=3306, charset=&apos;utf8&apos;):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化参数</span><br><span class="line">        :param host:        主机</span><br><span class="line">        :param user:        用户名</span><br><span class="line">        :param password:    密码</span><br><span class="line">        :param database:    数据库</span><br><span class="line">        :param port:        端口号，默认是3306</span><br><span class="line">        :param charset:     编码，默认是utf8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        获取连接对象和执行对象</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.conn = pymysql.connect(host=self.host,</span><br><span class="line">                                    user=self.user,</span><br><span class="line">                                    password=self.password,</span><br><span class="line">                                    database=self.database,</span><br><span class="line">                                    port=self.port,</span><br><span class="line">                                    charset=self.charset)</span><br><span class="line"></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    def fetchone(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数元组，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataOne = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataOne = self.cur.fetchone()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataOne</span><br><span class="line"></span><br><span class="line">    def fetchall(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数列表，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataall = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataall = self.cur.fetchall()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataall</span><br><span class="line"></span><br><span class="line">    def __item(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行增删改</span><br><span class="line">        :param sql:           sql语句</span><br><span class="line">        :param params:        sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:              受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        count = 0</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行修改</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def insert(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行新增</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def delete(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行删除</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        关闭执行工具和连接对象</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if self.cur != None:</span><br><span class="line">            self.cur.close()</span><br><span class="line">        if self.conn != None:</span><br><span class="line">            self.conn.close()</span><br></pre></td></tr></table></figure><h4 id="1-测试查询多条数据"><a href="#1-测试查询多条数据" class="headerlink" title="1.测试查询多条数据"></a>1.测试查询多条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where name = %s and id &gt; %s&apos;</span><br><span class="line"># params</span><br><span class="line">params = [&apos;小茗&apos;,1]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchall(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    for temp in data:</span><br><span class="line">        print(temp)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br><span class="line"></span><br><span class="line">helper.close()</span><br></pre></td></tr></table></figure><h4 id="2-测试查询一条数据"><a href="#2-测试查询一条数据" class="headerlink" title="2.测试查询一条数据"></a>2.测试查询一条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where id = %s&apos;</span><br><span class="line">#sql = &apos;select * from t_user where id = 1&apos;</span><br><span class="line"># params</span><br><span class="line">params = [2]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchone(sql, params)</span><br><span class="line">#data = helper.fetchone(sql)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    print(data)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br></pre></td></tr></table></figure><h4 id="3-测试增删改"><a href="#3-测试增删改" class="headerlink" title="3.测试增删改"></a>3.测试增删改</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;update t_user set name =%s,pwd=%s,birthday=%s where id=%s&apos;</span><br><span class="line"># params</span><br><span class="line">id = input(&apos;输入编号:&apos;)</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = time.strptime(input(&apos;输入生日:&apos;), &apos;%Y年%m月%d日&apos;)</span><br><span class="line">params = [name, pwd, birthday,id]</span><br><span class="line"># 执行</span><br><span class="line">count = helper.update(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if count:</span><br><span class="line">    print(&apos;操作成功.&apos;)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;操作失败.&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-登录和注册"><a href="#4-登录和注册" class="headerlink" title="4.登录和注册"></a>4.登录和注册</h4><p>登录和注册的时候需要对密码进行加密</p><p>注意：</p><p>•  需要对密码进行加密<br>•  如果使用md5加密，则密码包含32个字符<br>•  如果使用sha1加密，则密码包含40个字符，这里使用这种方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table userinfos(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    uname varchar(20),</span><br><span class="line">    upwd char(40),</span><br><span class="line">    isdelete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">ret = doPwd(&apos;123&apos;)</span><br><span class="line">print(ret)</span><br><span class="line">结果：40bd001563085fc35165329ea1ff5c5ecbdbbeef</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">-- 插入如下数据，用户名为123,密码为123,这是sha1加密后的值</span><br><span class="line"></span><br><span class="line">insert into userinfos </span><br><span class="line">values(1,&apos;123&apos;,&apos;40bd001563085fc35165329ea1ff5c5ecbdbbeef&apos;,0);</span><br></pre></td></tr></table></figure><h4 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from mysqlHelper import MysqlHelper</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    &apos;&apos;&apos;登录&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    #加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;select * from t_user where name=%s and pwd=%s&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    data = helper.fetchone(sql, params)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;登录成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;登录失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doPwd(pwd):</span><br><span class="line">    &apos;&apos;&apos;sha1编码&apos;&apos;&apos;</span><br><span class="line">    mysha1 = hashlib.sha1()</span><br><span class="line">    mysha1.update(pwd.encode(&apos;utf-8&apos;))</span><br><span class="line">    pwd = mysha1.hexdigest()</span><br><span class="line">    return pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    &apos;&apos;&apos;注册&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    # 加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd) values(%s,%s)&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    count = helper.insert(sql, params)</span><br><span class="line">    if count:</span><br><span class="line">        print(&apos;操作成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;操作失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #register()</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PyMySQL？&quot;&gt;&lt;a href=&quot;#什么是-PyMySQL？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PyMySQL？&quot;&gt;&lt;/a&gt;什么是 PyMySQL？&lt;/h2&gt;&lt;p&gt;PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。&lt;/p&gt;
&lt;p&gt;PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django笔记</title>
    <link href="https://www.policx.com/2018/04/18/django-bi-ji/"/>
    <id>https://www.policx.com/2018/04/18/django-bi-ji/</id>
    <published>2018-04-17T17:00:16.000Z</published>
    <updated>2019-07-12T10:07:09.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p><a id="more"></a><h2 id="一-版本选择"><a href="#一-版本选择" class="headerlink" title="一. 版本选择"></a>一. 版本选择</h2><p>Django 2.0.x 支持 Python 3.4, 3.5 和 3.6 （注意，不再支持 Python 2）   </p><h2 id="二-安装-Django"><a href="#二-安装-Django" class="headerlink" title="二. 安装 Django"></a><strong>二. 安装 Django</strong></h2><p><strong>2.1. 用 pip 来安装</strong></p><p><strong>2.1.1 需要先安装pip</strong></p><p>(1). Linux, Mac OSX, Windows 下都可用 get-pip.py 来安装<br>pip：<a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/installing.html</a>  </p><p>或者直接下载：<a href="https://bootstrap.pypa.io/get-pip.py" title="get-pip.py" target="_blank" rel="noopener">get-pip.py</a> 然后运行在终端运行 <strong>python get-pip.py 就可以安装 pip。</strong></p><p>Note: 也可以下载 pip 源码包，运行 <strong>python setup.py install</strong> 进行安装 </p><p><strong>2.1.2 利用 pip 安装 Django</strong></p><p><code>（sudo) pip install Django    或者(sudo) pip install Django==1.8.16 或者 pip install Django==1.11.8</code>    </p><p>如果想升级 pip 可以用： </p><pre><code>(sudo) pip install --upgrade pip</code></pre><p><strong>2.2. 下载源码安装</strong>  </p><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">https://www.djangoproject.com/download/</a></p><p>如果是源码包, 比如 django-1.11.8.tar.gz </p><p><strong>2.2.1 Linux 或 Mac 下</strong></p><pre><code>tar -xvf django-1.11.8.tar.gzcd django-1.11.8(sudo) python setup.py install</code></pre><h2 id="三-检查是否安装成功"><a href="#三-检查是否安装成功" class="headerlink" title="三. 检查是否安装成功"></a><strong>三. 检查是否安装成功</strong></h2><p>终端上输入 python ,点击 Enter，进行 python 环境</p><pre><code>&gt;&gt;&gt; import django&gt;&gt;&gt; django.VERSION(1, 11, 8, &apos;final&apos;, 0)&gt;&gt;&gt; &gt;&gt;&gt; django.get_version()&apos;1.11.8&apos;</code></pre><p>如果运行后看到版本号，就证明安装成功了！ </p><h2 id="四-搭建多个互不干扰的开发环境（可选）"><a href="#四-搭建多个互不干扰的开发环境（可选）" class="headerlink" title="四. 搭建多个互不干扰的开发环境（可选）"></a><strong>四. 搭建多个互不干扰的开发环境（可选）</strong></h2><p>我们有的时候会发现，一个电脑上有多个项目，一个依赖 Django 1.8，另一个比较旧的项目又要用 Django 1.5，这时候怎么办呢？ </p><p>我们需要一个依赖包管理的工具来处理不同的环境。 </p><h3 id="4-1-虚拟环境依赖安装"><a href="#4-1-虚拟环境依赖安装" class="headerlink" title="4.1 虚拟环境依赖安装"></a>4.1 虚拟环境依赖安装</h3><p>开发会用 virtualenv 来管理多个开发环境 </p><p><strong>Linux/MacOS 下</strong></p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了 </p><pre><code># 安装:(sudo) pip install virtualenv virtualenvwrapper</code></pre><p>修改~/.bash_profile或其它环境变量相关文件(如 .bashrc 或用 ZSH 之后的 .zshrc)，添加以下语句  </p><pre><code>export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/workspacesource /usr/local/bin/virtualenvwrapper.sh</code></pre><p>修改后使之立即生效(也可以重启终端使之生效)： </p><pre><code>source ~/.bash_profile</code></pre><h3 id="4-2-虚拟环境使用方法："><a href="#4-2-虚拟环境使用方法：" class="headerlink" title="4.2 虚拟环境使用方法："></a><strong>4.2 虚拟环境使用方法：</strong></h3><p><strong>mkvirtualenv zqxt：创建运行环境zqxt</strong></p><p><strong>workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境</strong></p><p><strong>deactivate</strong>: 退出终端环境</p><p><strong>其它的：</strong></p><p><strong>rmvirtualenv</strong> ENV：删除运行环境ENV </p><p><strong>mkproject</strong> mic：创建mic项目和运行环境mic </p><p><strong>mktmpenv</strong>：创建临时运行环境 </p><p><strong>lsvirtualenv</strong>: 列出可用的运行环境 </p><p><strong>lssitepackages</strong>: 列出当前环境安装了的包 </p><p>创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django部署——uwsgi+Nginx</title>
    <link href="https://www.policx.com/2018/04/17/django/"/>
    <id>https://www.policx.com/2018/04/17/django/</id>
    <published>2018-04-17T09:42:04.000Z</published>
    <updated>2019-07-13T08:10:51.809Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!</p><a id="more"></a><p><img src="/post-images/1560768371650.png" alt><br>环境：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3.6</span><br><span class="line">centos 7</span><br><span class="line">Django1.11</span><br></pre></td></tr></table></figure><h2 id="1、本地跑起来Django"><a href="#1、本地跑起来Django" class="headerlink" title="1、本地跑起来Django"></a>1、本地跑起来Django</h2><p>这里不讲Django项目实施过程，假设你已经写了一个Django项目，并且在本地127.0.0.1:8000能够跑起来。喏，给你个参考，项目大概长这样：<br><img src="/post-images/1560764670814.png" alt></p><ul><li>kindle目录为我创建的Django App</li></ul><h2 id="2、修改项目配置"><a href="#2、修改项目配置" class="headerlink" title="2、修改项目配置"></a>2、修改项目配置</h2><p>也就是项目目录下的settings.py文件，主要强调几个地方：</p><p>①关闭DEBUG模式：<br><img src="/post-images/1560764736238.png" alt><br>②修改ALLOWED_HOSTS：<br><img src="/post-images/1560764863424.png" alt><br>③配置静态文件存放路径：<br><img src="/post-images/1560764833026.png" alt></p><p>修改好配置之后执行:<br><code>python manage.py collectstatic</code><br>将项目用到的静态文件复制到项目根目录下的static文件中<br><img src="/post-images/1560764930146.png" alt></p><h2 id="3、安装uwsgi和Nginx"><a href="#3、安装uwsgi和Nginx" class="headerlink" title="3、安装uwsgi和Nginx"></a>3、安装uwsgi和Nginx</h2><p>这个没什么说的。。。在自己的云服务器上装好这两个工具<br>安装好uwsgi后最好验证一下，验证方法：<br>创建一个test.py文件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)])</span><br><span class="line">    return [b&apos;Hello world!&apos;]    #python3</span><br><span class="line">    # return [&apos;Hello world!&apos;]    #python2</span><br></pre></td></tr></table></figure><p>启动uwsgi服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --wsgi-file test.py</span><br></pre></td></tr></table></figure><p>如果可以正常启动而不报错那就应该没问题，不放心的话再在终端验证一下：<br><code>wget https://127.0.0.1:8000</code><br>看一下能否正确获取内容</p><h2 id="4、配置项目的uwsgi"><a href="#4、配置项目的uwsgi" class="headerlink" title="4、配置项目的uwsgi"></a>4、配置项目的uwsgi</h2><p>在项目所在文件夹下创建uwsgi.ini配置文件，也就是这里:<br><img src="/post-images/1560765049955.png" alt><br>在uwsgi.ini里进行如下配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># Django-related settings</span><br><span class="line"> </span><br><span class="line"># 这里的端口可以根据自己需要设定</span><br><span class="line">socket = 127.0.0.1:8001        </span><br><span class="line"> </span><br><span class="line"># the base directory (full path)</span><br><span class="line"># 这个是Django项目的根目录，也就是包含App的那个目录，仔细对照上图</span><br><span class="line">chdir           = /home/python/book2kindle</span><br><span class="line"> </span><br><span class="line"># Django s wsgi file</span><br><span class="line"># 这里是项目名(不是App名).wsgi</span><br><span class="line">module          = book2kindle.wsgi</span><br><span class="line"> </span><br><span class="line"># process-related settings</span><br><span class="line"># master</span><br><span class="line">master          = true</span><br><span class="line"> </span><br><span class="line"># maximum number of worker processes</span><br><span class="line">processes       = 32</span><br><span class="line"> </span><br><span class="line"># ... with appropriate permissions - may be needed</span><br><span class="line"># chmod-socket    = 664</span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum          = true</span><br><span class="line"> </span><br><span class="line">plugin python = true</span><br><span class="line"> </span><br><span class="line"># 这个是项目的虚拟python环境，如果没用虚拟环境，可以不设定</span><br><span class="line">home = /home/python/book2kindle_env</span><br></pre></td></tr></table></figure><h2 id="5、配置项目的nginx"><a href="#5、配置项目的nginx" class="headerlink" title="5、配置项目的nginx"></a>5、配置项目的nginx</h2><p>找到nginx的配置文件夹，centos7的nginx配置文件在/etc/nginx下，该路径下有一个nginx.conf总配置文件，还有两个文件夹./conf.d、./default.d，我们将nginx.conf复制一份到conf.d文件夹下，命名为nginx.conf（或者项目名.conf）进行如下修改（根据中文注释进行相应配置即可）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream django &#123;</span><br><span class="line">        # 注意这里的server要和uwsgi.ini配置文件中的socket保持一致</span><br><span class="line">        server 127.0.0.1:8002; # for a web port socket</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  xxx.com;  # 这里填自己的域名或者服务器的ip（决定你今后访问网站的方式）</span><br><span class="line">        charset      utf-8;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        location / &#123;</span><br><span class="line">        root        /home/python/book2kindle/kindle;  # 这是Django App的路径</span><br><span class="line">            uwsgi_pass  django;</span><br><span class="line">            include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">        &#125;</span><br><span class="line">        location /static &#123;</span><br><span class="line">            # Django项目静态文件的路径</span><br><span class="line">            alias /home/python/book2kindle/static; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、启动uwsgi和nginx"><a href="#6、启动uwsgi和nginx" class="headerlink" title="6、启动uwsgi和nginx"></a>6、启动uwsgi和nginx</h2><p>进入uwsgi.ini文件夹下执行：<br><code>uwsgi --ini uwsgi.ini</code><br>在终端执行：<br><code>service nginx restart</code><br>然后就可以根据域名（前提是要将域名解析到服务器ip地址）或者服务器ip来访问网站了！</p><p>OK，完事！就是这么简单！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>2018创业记：如何选择合伙人？</title>
    <link href="https://www.policx.com/2018/03/25/chuangye/"/>
    <id>https://www.policx.com/2018/03/25/chuangye/</id>
    <published>2018-03-25T13:02:42.000Z</published>
    <updated>2019-07-13T08:06:31.136Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><a id="more"></a><h2 id="创业路上危机四伏，如何破局？"><a href="#创业路上危机四伏，如何破局？" class="headerlink" title="创业路上危机四伏，如何破局？"></a>创业路上危机四伏，如何破局？</h2></li></ul><p>很多朋友在2018年做出了改变，迈出了新的一步。比如身边几位朋友正摩拳擦掌准备创业。然而，看别人创业和自己创业完全是两回事儿，见得再多，自己趟水时也难免有所顾虑。</p><p>在跟他们聊过之后，我们发现了他们普遍面临的一个课题：如何选择合伙人?这是身经百战的连续创业者也很难驾轻就熟的一个课题，今天我们就来一起聊聊。本文将从能不能和朋友一起创业、合伙人应该与我互补还是相似、如何判断双方是否志同道合、如何应对常见的分歧几个部分展开来说。</p><p>风物长宜放眼量，抱持开阔的胸襟、敏锐的判断、坚韧的意志，相信大家能够与志同道合的伙伴一起，越过山丘，携手站上梦想之巅。</p><h2 id="能不能和朋友一起创业？"><a href="#能不能和朋友一起创业？" class="headerlink" title="能不能和朋友一起创业？"></a>能不能和朋友一起创业？</h2><p>在创业初期，创业者选择合伙人往往会从身边的朋友“下手”。</p><p>一起创业可以说是认清一个朋友的最好方式。一篇名为《友谊的代价》的论文，考察了3510个风险投资者，以及他们在1975-2003年间11895个投资项目。</p><p>论文写道，有的人选择与自己能力相当的人合作，比如同是名校毕业；但更多的人选择与自己的熟人合作，比如曾经的同学或同事。结果表明，按能力搭档可以增加投资的成功概率，而找熟人搭档，则会明显降低成功的可能性。</p><p>所有人都喜欢强联系，但关系是关系，工作归工作。现在社会学已经有了足够多的证据说明：对工作来说，同乡会和校友录并不是扩展人脉的好地方。《中国合伙人》这部电影上映后，“千万别跟好朋友合伙开公司”也成了热议话题。电影的最后，三位合伙人分道扬镳，而剧本的原型——新东方的三位创始人也以“分家”收场。</p><p>当然，朋友合伙创业成功的案例也不在少数，况且，长期的伙伴关系更有助于共同面对创业过程中的艰难险阻，团队也更容易在创业初期获得投资人的青睐。如果在寻找合伙人的过程中，你觉得还是某个朋友更适合，那么一定要在合作之前约法三章，考虑到最坏的情况，提前用书面合同的方式确定双方的责权利，用规章制度来约束指导双方的行为，而不是靠人情关系。</p><p>中间一旦觉得发生了问题，你就必须考虑一下能否继续合作下去。其实，很多合作者走不到最后就是因为中间的小问题没有解决，一点一点积累最后爆发出来。</p><p>因此，能否和朋友一起创业这个问题，需要辩证思考。如果朋友间相互了解对方的个性和能力，工作中能做到分工明确，用规章制度来规范双方的行为，及时解决小矛盾，相互照顾，一起分担，共同奋斗，那么创业成功就会成为大概率事件。</p><h2 id="合伙人应该与我互补还是相似？"><a href="#合伙人应该与我互补还是相似？" class="headerlink" title="合伙人应该与我互补还是相似？"></a>合伙人应该与我互补还是相似？</h2><p>一个较为合理的答案是：理念和价值观上要相似，能力和经验上要互补。</p><p>理念和价值观上的相近，可以保证你们在重大原则问题上的判断是比较一致的，不至于出现根本性的冲突。这些重大的原则问题包括企业的战略方向、利益分配机制、做事的基本底线等等。</p><p>在这些问题上出现不同意见，通常很难取得共识。因为个性和价值观的形成，通常都不是一朝一夕的事情，也就是我们常说的“江山易改，本性难移”。如果在创业的艰难环境下，双方还要来磨合这个层面的东西，就会非常痛苦。</p><p>能力和经验上的互补相对更好理解。你擅长产品，他专于研发；你有丰富的运营经验，他则对于商业模式的建立更有心得；你对数字不敏感，他则是投资和财务领域的资深人士。这些都是很好的互补。</p><p>互补可以让你们在具体事情的推进中事半功倍，并建立起对于对方在专业领域的依靠和信任。人不可能是全能的，如果一切未知的领域都需要你自己来摸索，费时费力不说，风险还很大。</p><p>对于相似还是互补这个问题的解读，还可以反向进行。比如你们是能力经验上的相近，而在理念上互补，你可以想象一下是个什么局面，一定是你不会的他也不会，你觉得对的他觉得不对，那就真的很难合作下去了。</p><h2 id="如何判断双方是否志同道合？"><a href="#如何判断双方是否志同道合？" class="headerlink" title="如何判断双方是否志同道合？"></a>如何判断双方是否志同道合？</h2><p>对于这个问题，不同的人可能会给出非常不同的答案。雷军就曾说过，他找人有两个要素：“一要最专业，小米的合伙人都是各管一块，这样能保证整个决策非常快，把业务交给他，要能实打实做出成绩来；二要最合适，主要是指要有创业心态，对所做的事要极度喜欢，有共同的愿景，这样就会有很强的驱动力。”</p><p>雷军说，他在三个月的时间里见了超过100位做硬件的人选，终于找到了负责硬件的联合创始人周光平博士，两人第一次见面就谈了12个小时。</p><p>而周鸿祎表示，他会选择具备这四种素质的合伙人：首先应该有创业精神；其次要有很强的学习能力；第三，要有很好的开放合作心态；此外，还要能自我激励，自我驱动，同样一件事，用打工的心态和用创业的心态做，效果完全不一样。</p><p>虽然答案因人而异，但仍然可以总结出一些判断标准，以下几条可为你选择合伙人时提供参考。</p><h3 id="1、关系有一定的深度和广度，彼此信任"><a href="#1、关系有一定的深度和广度，彼此信任" class="headerlink" title="1、关系有一定的深度和广度，彼此信任"></a>1、关系有一定的深度和广度，彼此信任</h3><p>共事且维持朋友关系多年的创业团队关系更深，有可能经受住紧张和冲突的考验。合伙人未必需要成为最要好的朋友，但如果他们相互喜欢的话事情可能会更好办些。更重要的是，创始人之间应该尊重彼此以及他们给团队带来的不同能力。不信任合伙人的能力会导致手伸过头，还可能会导致控制权之争。在这种窝里斗的情况下大部分的合作关系都无法维系。</p><h3 id="2、了解彼此的优势和劣势，分工明确"><a href="#2、了解彼此的优势和劣势，分工明确" class="headerlink" title="2、了解彼此的优势和劣势，分工明确"></a>2、了解彼此的优势和劣势，分工明确</h3><p>尊重彼此的技能和优势并不意味着创始人就不需要审视合伙人的弱点了。友谊更久自然也会更了解某人的特长和技能。这些不同的技能有助于创始人团队自然地分清责任、角色，在某些情况下还可以分清头衔。根据每一位合伙人的技能明确划分职责，对创业的帮助很大。做事的时候每个人要有独立的角色，但同时永远要对其他合伙人的反馈持开放态度。</p><h3 id="3、确保所有合伙人对成功和失败的定义一致"><a href="#3、确保所有合伙人对成功和失败的定义一致" class="headerlink" title="3、确保所有合伙人对成功和失败的定义一致"></a>3、确保所有合伙人对成功和失败的定义一致</h3><p>韧性最强的创始人不会从财务的角度去衡量自己的初创企业是否成功，相反，他们会从使命的角度去衡量。他们的初创企业只是追求实现使命的手段。但是，并不是所有的创始人都这么看，甚至一开始关注使命的创始人有时候到后面也会转向考虑财务方面的事情。</p><p>有的创始人可能志存高远，为了尽快做大愿意烧很多钱，而有的人希望逐步打磨产品，限制人数规模和保留现金尺度。不仅对成功的认知会影响运营决策，对失败的认知同样会起作用。</p><p>在创业过程中，其中一位合伙人急着退出的故事屡见不鲜，因此这个教训值得一提再提。对于拥有成功企业的创始人来说，避免在这个问题上发生冲突的关键是定期讨论这件事。应该在公司早期就设定好目标，并且对这个话题进行定期复议。</p><h3 id="4、所有合伙人均应对股权分配满意"><a href="#4、所有合伙人均应对股权分配满意" class="headerlink" title="4、所有合伙人均应对股权分配满意"></a>4、所有合伙人均应对股权分配满意</h3><p>哈佛教授Wasserman发现，73%的联合创业团队一般在公司成立30天内就确定了如何进行股权分配。股权分配当然是任何共同创业的人都要首先考虑的事情之一，但事实上在那个时候，没人知道谁干活最卖力，谁对初创企业的贡献最有价值。过早确定股权分配会导致后面发生问题。如果可以的话，最好等到你有机会了解大家一起工作会是什么个情况后再正式分蛋糕。话虽如此，这件事情还是不要拖太久，围绕股权的分歧最好在公司早期就解决掉。</p><h3 id="5、永远要相互支持"><a href="#5、永远要相互支持" class="headerlink" title="5、永远要相互支持"></a>5、永远要相互支持</h3><p>这话听上去似乎太空泛，但是合伙人的关系也可能会反复无常，尤其是在受到不同观点、董事会成员等的影响下。合伙人之间的相互支持可带来信心，确保合伙人和员工都有共同的使命感。</p><p>团队应该早点理解一件事，任何情况下合伙人之间都应该背靠背相互支持，所以合伙人要尽量避免当着员工、董事会等人的面互相拆台，这样能够让公司其他人感觉到他们友情之牢固，让每一位合伙人都能保持镇定，因为他们知道对方一定会支持自己的。</p><h2 id="如何应对常见的分歧？"><a href="#如何应对常见的分歧？" class="headerlink" title="如何应对常见的分歧？"></a>如何应对常见的分歧？</h2><h3 id="1、公司走向的歧见"><a href="#1、公司走向的歧见" class="headerlink" title="1、公司走向的歧见"></a>1、公司走向的歧见</h3><p>在0到1的探索期，公司的走向往往是由合伙人一起决定的。但进入1到100的扩张期，一个年轻企业通常会开始有董事会以及重要的供应、通路伙伴。久而久之，合伙人对于公司未来走向的看法，常常会越来越变得分歧。</p><p>防范这个陷阱要从根源开始：每当CEO有了新的资讯、成长、学习、领悟，应该积极地与合伙人分享，协助他们获得与你类似的成长。同时，你应该把小范围的决策授权出去，让他们也能继续主导公司某一部分的走向。最后，你应该积极管理大家对决策的期望值，新创公司必须在“快”与“好”之间做出平衡，因此决策求的是多数对，而不是样样对。</p><h3 id="2、无法适应制度"><a href="#2、无法适应制度" class="headerlink" title="2、无法适应制度"></a>2、无法适应制度</h3><p>0到1的新创团队求快，因此不会有太多制度。进入1到100阶段，公司势必要开始建立一些管理系统，以在风险与发展中间取得平衡。</p><p>有些习惯了说干就干的合伙人，在此时会产生严重的不适应，时间一长甚至会觉得公司背离了创办的初衷。要解决这个问题，除了及早发现及早辅导外，请他们参与、主导制度的设计，也是协助合伙人适应新制度的方法。</p><h3 id="3、越权管理"><a href="#3、越权管理" class="headerlink" title="3、越权管理"></a>3、越权管理</h3><p>当公司开始有部门、部门主管，合伙人还是习惯看不顺眼就管，容易造成经理人的困扰。更有甚者，造成合伙人对经理人不信任，反而让经理人没有足够的时间、空间去适应、学习。这个问题通常是惯性使然，重点就是要打破它。所以，看到这样的行为要赶快提醒伙伴们注意。</p><h3 id="4、无法跟上公司成长的需要"><a href="#4、无法跟上公司成长的需要" class="headerlink" title="4、无法跟上公司成长的需要"></a>4、无法跟上公司成长的需要</h3><p>在公司快速扩张期，一个3人产品团队可能在一年内成长为30人，而两者之间管理上的不同，常常会让本来擅长技术、产品，但从来没有管理中大型团队经验的合伙人一时间跟不上公司发展的步伐。</p><p>回到扩张前，你应该早早找到好的CTO Mentor，在扩张中，经常鼓励他在管理知识与能力上精进。扩张后，如果他真的无法适应，也比较能够接受去寻找更有经验的CTO，而自己退居部门二把手、三把手。</p><h3 id="5、利益分配"><a href="#5、利益分配" class="headerlink" title="5、利益分配"></a>5、利益分配</h3><p>当公司越来越成功、越赚钱、离IPO越近，股权与利益的问题就会越容易产生。尤其当初的股权分配如果没有彰显每个合伙人的相对价值，那团队中可能酝酿出不良情绪。</p><p>比较好的方法当然是早期就把这个问题解决掉，因为到了后期，你的工具会越来越有限。但也不是没有机会修正，如果有合伙人离开，你可以收回他的股权来重新分配。如果有B、C、D轮增资，你可以跟投资人要求“期权池”(ESOP)，通过发放新的选择权来平衡。最后，如果真的过于集中，负责任的CEO，甚至会拿出自己的股权分配给伙伴们。</p><p>选择合伙人未必有一定之规，创业路上可能遇到的危机也远远不止上述这些，希望这篇文章能对你有所裨益，助你在创业路上少走弯路，也祝愿创业者们在2018年博得好彩头，大鹏一日同风起，扶摇直上九万里。</p><p>本文来源：<a href="https://www.sohu.com/a/225670991_100064845" target="_blank" rel="noopener">联想之星</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="life" scheme="https://www.policx.com/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown 的设计哲学</title>
    <link href="https://www.policx.com/2018/03/22/markdown/"/>
    <id>https://www.policx.com/2018/03/22/markdown/</id>
    <published>2018-03-22T11:32:01.000Z</published>
    <updated>2019-07-07T04:34:16.836Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 </p><a id="more"></a><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote><h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown<em>是什么</em>？</h4><h4 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h4><h4 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h4><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><em>怎么</em>使用？</h4><h4 id="谁在用？"><a href="#谁在用？" class="headerlink" title="谁在用？"></a><em>谁</em>在用？</h4><h4 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h4></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p><h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/" target="_blank" rel="noopener"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p><p>他有着足以让你跪拜的人生经历：    </p><ul><li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li><li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li><li><strong>2005</strong>年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。   </li><li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li><li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li><li><strong>2013</strong>年1月自杀身亡。    </li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz"></p><p>天才都有早逝的归途。</p><h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h3><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p><p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\</code></strong>，<strong>符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p><p>代码区块：</p><pre><code>void main(){    printf(&quot;Hello, Markdown.&quot;);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格<em>或</em>制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code>    </p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul><li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错   </li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。    </li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><hr><p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><hr><p>以上基本是所有traditonal markdown的语法。</p><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><hr><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p><video src="http://structr.learn-anything.cn/video/道理/陈铭：像我这种老好人，根本没什么真朋友！不jue亲戚的人，根本没什么真亲戚！.mp4" width="320" height="180" controls="controls"></video> </p><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="https://www.policx.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>数据类型和变量</title>
    <link href="https://www.policx.com/2018/03/01/python-type/"/>
    <id>https://www.policx.com/2018/03/01/python-type/</id>
    <published>2018-02-28T20:28:19.000Z</published>
    <updated>2019-07-07T04:35:56.433Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python 数据类型和变量</p><a id="more"></a> <h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：</p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</p><p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。如果’本身也是一个字符，那就可以用””括起来，比如”I’m OK”包含的字符是I，’，m，空格，O，K这6个字符。</p><p>如果字符串内部既包含’又包含”怎么办？可以用转义字符\来标识，比如：</p><p><code>&#39;I\&#39;m \&quot;OK\&quot;!&#39;</code><br>表示的字符串内容是：</p><p><code>I&#39;m &quot;OK&quot;!</code><br>转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\表示的字符就是\，可以在Python的交互式命令行用print()打印字符串看看：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;I\&apos;m ok.&apos;)</span><br><span class="line">I&apos;m ok.</span><br><span class="line">&gt;&gt;&gt; print(&apos;I\&apos;m learning\nPython.&apos;)</span><br><span class="line">I&apos;m learning</span><br><span class="line">Python.</span><br><span class="line">&gt;&gt;&gt; print(&apos;\\\n\\&apos;)</span><br><span class="line"></span><br><span class="line">\</span><br><span class="line">\</span><br></pre></td></tr></table></figure><p>如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义，可以自己试试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&apos;\\\t\\&apos;)</span><br><span class="line">\       \</span><br><span class="line">&gt;&gt;&gt; print(r&apos;\\\t\\&apos;)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure><p>如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，可以自己试试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;&apos;&apos;line1</span><br><span class="line">... line2</span><br><span class="line">... line3&apos;&apos;&apos;)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure><p>上面是在交互式命令行内输入，注意在输入多行内容时，提示符由&gt;&gt;&gt;变为…，提示你可以接着上一行输入，注意…是提示符，不是代码的一部分：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt - python                           _ □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│&gt;&gt;&gt; print(&apos;&apos;&apos;line1                                      │</span><br><span class="line">│... line2                                               │</span><br><span class="line">│... line3&apos;&apos;&apos;)                                           │</span><br><span class="line">│line1                                                   │</span><br><span class="line">│line2                                                   │</span><br><span class="line">│line3                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│&gt;&gt;&gt; _                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>当输入完结束符<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果写成程序并存为.py文件，就是：</span><br></pre></td></tr></table></figure></p><p>print(‘’’line1<br>line2<br>line3’’’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多行字符串&apos;&apos;&apos;...&apos;&apos;&apos;还可以在前面加上r使用，请自行测试：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>print(r’’’hello,\n<br>world’’’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">### 布尔值</span><br><span class="line">布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True<br>True<br>False<br>False<br>3 &gt; 2<br>True<br>3 &gt; 5<br>False</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">布尔值可以用and、or和not运算。</span><br><span class="line"></span><br><span class="line">#### and运算是与运算，只有所有都为True，and运算结果才是True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True and True<br>True<br>True and False<br>False<br>False and False<br>False<br>5 &gt; 3 and 3 &gt; 1<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### or运算是或运算，只要其中有一个为True，or运算结果就是True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True or True<br>True<br>True or False<br>True<br>False or False<br>False<br>5 &gt; 3 or 1 &gt; 3<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### not运算是非运算，它是一个单目运算符，把True变成False，False变成True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>not True<br>False<br>not False<br>True<br>not 1 &gt; 2<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">布尔值经常用在条件判断中，比如：</span><br></pre></td></tr></table></figure><p>if age &gt;= 18:<br>    print(‘adult’)<br>else:<br>    print(‘teenager’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">### 空值</span><br><span class="line">空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</span><br><span class="line"></span><br><span class="line">此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。</span><br><span class="line"></span><br><span class="line">### 变量</span><br><span class="line">变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</span><br><span class="line"></span><br><span class="line">变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头，比如：</span><br><span class="line"></span><br><span class="line">`a = 1`</span><br><span class="line">变量a是一个整数。</span><br><span class="line"></span><br><span class="line">`t_007 = &apos;T007&apos;`</span><br><span class="line">变量t_007是一个字符串。</span><br><span class="line"></span><br><span class="line">`Answer = True`</span><br><span class="line">变量Answer是一个布尔值True。</span><br><span class="line"></span><br><span class="line">在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>a = 123 # a是整数<br>print(a)<br>a = ‘ABC’ # a变为字符串<br>print(a)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</span><br></pre></td></tr></table></figure><p>int a = 123; // a是整数类型变量<br>a = “ABC”; // 错误：不能把字符串赋给整型变量</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">和静态语言相比，动态语言更灵活，就是这个原因。</span><br><span class="line"></span><br><span class="line">请不要把赋值语句的等号等同于数学的等号。比如下面的代码：</span><br></pre></td></tr></table></figure><p>x = 10<br>x = x + 2</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果从数学上理解x = x + 2那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。</span><br><span class="line"></span><br><span class="line">最后，理解变量在计算机内存中的表示也非常重要。当我们写：</span><br><span class="line"></span><br><span class="line">`a = &apos;ABC&apos;`</span><br><span class="line">时，Python解释器干了两件事情：</span><br><span class="line"></span><br><span class="line">在内存中创建了一个&apos;ABC&apos;的字符串；</span><br><span class="line"></span><br><span class="line">在内存中创建了一个名为a的变量，并把它指向&apos;ABC&apos;。</span><br><span class="line"></span><br><span class="line">也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据，例如下面的代码：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>a = ‘ABC’<br>b = a<br>a = ‘XYZ’<br>print(b)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">最后一行打印出变量b的内容到底是&apos;ABC&apos;呢还是&apos;XYZ&apos;？如果从数学意义上理解，就会错误地得出b和a相同，也应该是&apos;XYZ&apos;，但实际上b的值是&apos;ABC&apos;，让我们一行一行地执行代码，就可以看到到底发生了什么事：</span><br><span class="line"></span><br><span class="line">执行a = &apos;ABC&apos;，解释器创建了字符串&apos;ABC&apos;和变量a，并把a指向&apos;ABC&apos;：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923791878255456/0)</span><br><span class="line"></span><br><span class="line">执行b = a，解释器创建了变量b，并把b指向a指向的字符串&apos;ABC&apos;：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923792058613440/0)</span><br><span class="line"></span><br><span class="line">执行a = &apos;XYZ&apos;，解释器创建了字符串&apos;XYZ&apos;，并把a的指向改为&apos;XYZ&apos;，但b并没有更改：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923792191637760/0)</span><br><span class="line"></span><br><span class="line">所以，最后打印变量b的结果自然是&apos;ABC&apos;了。</span><br><span class="line"></span><br><span class="line">### 常量</span><br><span class="line">所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：</span><br><span class="line"></span><br><span class="line">`PI = 3.14159265359`</span><br><span class="line">但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。</span><br><span class="line"></span><br><span class="line">最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是/：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 / 3<br>3.3333333333333335</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>9 / 3<br>3.0</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还有一种除法是//，称为地板除，两个整数的除法仍然是整数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 // 3<br>3</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你没有看错，整数的地板除//永远是整数，即使除不尽。要做精确的除法，使用/就可以。</span><br><span class="line"></span><br><span class="line">因为//除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 % 3<br>1</p><pre><code>无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</code></pre></blockquote></blockquote></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。</p><p>对变量赋值x = y是把变量x指向真正的对象，该对象是变量y所指向的。随后对变量y的赋值不影响变量x的指向。</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在-2147483648-2147483647。<br>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 数据类型和变量&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
</feed>
