<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-07-21T08:40:14.360Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python导图</title>
    <link href="https://www.policx.com/mind/"/>
    <id>https://www.policx.com/mind/</id>
    <published>2019-07-21T06:03:24.000Z</published>
    <updated>2019-07-21T08:40:14.360Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>推荐：<strong>XMind</strong> 一个全功能的思维导图和头脑风暴软件。</p></blockquote><a id="more"></a><h2 id="Python-系列-一-核心知识"><a href="#Python-系列-一-核心知识" class="headerlink" title="Python 系列 (一)  核心知识"></a>Python 系列 (一)  核心知识</h2><p><img src="/mindImage/0%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80.png" alt><br><img src="/mindImage/2Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80.png" alt><br><img src="/mindImage/3%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%B8%80)%E6%95%B0%E5%80%BC%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88.png" alt><br><img src="/mindImage/4%E6%A0%87%E5%87%86%E7%B1%BB%E5%9E%8B%E8%A1%A5%E5%85%85.png" alt><br><img src="/mindImage/5%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%BA%8C)%E5%BA%8F%E5%88%97%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/6%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%B8%89)%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt><br><img src="/mindImage/7%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/8%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/9%E5%87%BD%E6%95%B0%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/10%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E5%87%BD%E6%95%B0.png" alt><br><img src="/mindImage/11%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/12%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/13%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/14%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/15%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/16%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt><br><img src="/mindImage/17%E6%B5%8B%E8%AF%95%E8%B0%83%E8%AF%95.png" alt></p><h2 id="Python系列-一-基础编程"><a href="#Python系列-一-基础编程" class="headerlink" title="Python系列 (一) 基础编程"></a>Python系列 (一) 基础编程</h2><p><img src="/mindImage/1Python%E7%B3%BB%E5%88%97(%E4%B8%80)%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861.png" alt><br><img src="/mindImage/3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862.png" alt><br><img src="/mindImage/4%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt><br><img src="/mindImage/5%E5%BA%8F%E5%88%97.png" alt><br><img src="/mindImage/6%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt><br><img src="/mindImage/7%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84.png" alt><br><img src="/mindImage/8%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88.png" alt><br><img src="/mindImage/9%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/10%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/11%E9%94%99%E8%AF%AF%EF%BC%86%E5%BC%82%E5%B8%B8.png" alt><br><img src="/mindImage/12%E5%87%BD%E6%95%B0%E4%B8%80.png" alt><br><img src="/mindImage/13%E5%87%BD%E6%95%B0%E4%BA%8C.png" alt><br><img src="/mindImage/14%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/15%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt></p><h2 id="Python系列-二-常用标准库及拓展知识"><a href="#Python系列-二-常用标准库及拓展知识" class="headerlink" title="Python系列(二)常用标准库及拓展知识"></a>Python系列(二)常用标准库及拓展知识</h2><p><img src="/mindImage/0%E3%80%90%E7%9B%AE%E5%BD%95%E3%80%91Python%E7%B3%BB%E5%88%97(%E4%BA%8C)%E5%B8%B8%E7%94%A8%E6%A0%87%E5%87%86%E5%BA%93%E5%8F%8A%E6%8B%93%E5%B1%95%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/1%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%BF%B0.png" alt><br><img src="/mindImage/2%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt><br><img src="/mindImage/3%E6%97%A5%E6%9C%9F&%E6%97%B6%E9%97%B4.png" alt><br><img src="/mindImage/4%E7%B3%BB%E7%BB%9F&%E6%96%87%E4%BB%B6.png" alt><br><img src="/mindImage/5%E8%BF%9B%E7%A8%8B&%E7%BA%BF%E7%A8%8B.png" alt><br><img src="/mindImage/6%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt><br><img src="/mindImage/7%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97&%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt></p><h2 id="Python应用领域和数据结构"><a href="#Python应用领域和数据结构" class="headerlink" title="Python应用领域和数据结构"></a>Python应用领域和数据结构</h2><p><a href="https://www.jianshu.com/p/66f6d9a434f9" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/21/5d3400422503e26621.jpg" alt="Python数据结构"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;推荐：&lt;strong&gt;XMind&lt;/strong&gt; 一个全功能的思维导图和头脑风暴软件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《Python札记》1_列表list</title>
    <link href="https://www.policx.com/python3-notes01/"/>
    <id>https://www.policx.com/python3-notes01/</id>
    <published>2019-07-18T14:55:41.000Z</published>
    <updated>2019-07-21T05:10:58.223Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="写于开始之前"><a href="#写于开始之前" class="headerlink" title="写于开始之前"></a>写于开始之前</h3><p>笔者即将开始写一个系列的《<code>Python</code>札记》。本系列的札记主要是自学<code>齐伟</code>老师《跟老齐学<code>Python</code>轻松入门》一书整理而来。书第一遍断断续续花了5个月，第二遍边看边整理，保守3个月。</p><a id="more"></a><p><strong>在此深深感谢齐伟老师带我入门<code>Python</code></strong>。<strong>工欲善其事，必先利其器</strong>，本札记的学习环境为：<code>Python3.7.2 + pycharm + jupyter notebook</code>： </p><ul><li><code>Python3</code>取代了<code>Python2</code>，成为主流</li><li>针对<code>Python</code>语言，<code>Pycharm</code>是最好的<code>IDE</code></li><li><code>Jupyter notebook</code>是利用<code>Python</code>进行机器学习的强大利器</li></ul><p><strong>本札记一定会在2个月之内完成</strong>，主要内容包含： </p><ul><li>学习笔记整理</li><li>代码实战练习</li><li>各种练习题</li><li>利用<code>Python</code>实现常用算法 <a href="https://www.jianshu.com/c/7287d92c5db4" target="_blank" rel="noopener">机器学习_Python算法</a></li></ul><p><strong>希望对<code>Python</code>感兴趣的朋友有所帮助，自己也在努力学习中，将来主要方向是：<code>机器学习+数据挖掘+量化投资</code></strong></p><h4 id="良好的开始是成功的一半！Let-s-go-go-go"><a href="#良好的开始是成功的一半！Let-s-go-go-go" class="headerlink" title="良好的开始是成功的一半！Let`s go go go!!!"></a>良好的开始是成功的一半！Let`s go go go!!!</h4><hr><blockquote><p>列表是<code>Python</code>中使用非常广泛的一种对象，用方括号<code>[ ]</code>来表示。括号里面可以是数字，字符串或者<code>True</code>，<code>False</code>的布尔值，或者是多种不同类型的对象，里面也可以嵌套列表。如果列表是空的，用<code>bool()</code>来进行判断，会返回 <code>False</code>。 </p></blockquote><hr><h3 id="一、索引、切片、反转"><a href="#一、索引、切片、反转" class="headerlink" title="一、索引、切片、反转"></a>一、索引、切片、反转</h3><p>列表和字符串一样，都是序列，里面的元素是有序的，也有索引和切片。索引<code>index</code>左边从<code>0</code>开始，右边从<code>-1</code>开始，<code>index()</code>函数可以查看某个元素的索引编号。 </p><p><strong>索引</strong></p><ul><li>左边0开始，右边-1开始</li><li>通过<code>index()</code>函数查看索引编号</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># lang = ['python', 'java', 'html']</span></span><br><span class="line"><span class="hljs-comment"># lang.index('python')</span></span><br><span class="line"><span class="hljs-number">0</span>  <span class="hljs-comment"># 索引从0开始</span></span><br><span class="line"><span class="hljs-comment"># lang.index('html')</span></span><br><span class="line"><span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><p><strong>切片</strong></p><ul><li>索引左边从0开始，右边-1开始</li><li>含头不含尾</li><li>步长可正可负</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">print(lst[:])     <span class="hljs-comment">#  相当于是复制 lst</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">print(lst[::<span class="hljs-number">2</span>])  <span class="hljs-comment">#  步长是2    [开始:结束:步长]</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(lst[<span class="hljs-number">-3</span>:<span class="hljs-number">-1</span>])</span><br><span class="line"></span><br><span class="line">lst = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]</span><br><span class="line">print(lst[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])     <span class="hljs-comment"># 常规用法</span></span><br><span class="line">print(lst[<span class="hljs-number">-5</span>:<span class="hljs-number">-2</span>:<span class="hljs-number">2</span>])   <span class="hljs-comment"># 标号-5代表的是元素2，标号-2代表的是5，步长为2</span></span><br><span class="line">print(lst[<span class="hljs-number">-5</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>])</span><br><span class="line">print(lst[<span class="hljs-number">1</span>:<span class="hljs-number">-2</span>:<span class="hljs-number">2</span>])</span><br><span class="line">[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]</span><br></pre></td></tr></table></figure><p><strong>反转</strong></p><ul><li>通过步长-1进行反转，[::-1]</li><li>通过<code>reversed()</code>进行反转，得到的是<strong>可迭代对象</strong>，并且将迭代对象转为为<code>列表显示</code></li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 反转1</span></span><br><span class="line">print(lst[::<span class="hljs-number">-1</span>])  <span class="hljs-comment"># 通过步长为-1进行反转</span></span><br><span class="line">print(lst)   <span class="hljs-comment"># 不影响原来对象</span></span><br><span class="line">[<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 反转2</span></span><br><span class="line">print(list(reversed(lst)))  <span class="hljs-comment"># 通过reversed函数进行反转</span></span><br><span class="line">[<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">print(list(reversed(<span class="hljs-string">'abcde'</span>)))    <span class="hljs-comment"># 对字符串进行反转，列表显示</span></span><br><span class="line">[<span class="hljs-string">'e'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'a'</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="二、操作列表"><a href="#二、操作列表" class="headerlink" title="二、操作列表"></a>二、操作列表</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>len()：求长度</li><li>+：连接两个序列</li><li>*：复制序列</li><li>in：判断元素是否在列表中</li><li>max()、min()：按照元素的字典顺序进行排序</li></ul><p><strong>1、修改元素</strong></p><blockquote><p><strong>列表</strong>中的元素可以进行<strong>修改</strong>，但是字符串中的不能进行修改。列表中修改的时候，直接通过索引号进行指定： </p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst[<span class="hljs-number">2</span>] = <span class="hljs-number">7</span>   <span class="hljs-comment"># 指定第三个元素为7</span></span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br></pre></td></tr></table></figure><p><strong>2、增加元素</strong><br>追加元素的方法有两种，都是追加在<strong>末尾</strong></p><ul><li>append()函数进行追加</li><li>切片的方式进行追加：a[len(a):] = [ x ]</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst.append(<span class="hljs-number">8</span>)  </span><br><span class="line">lst[len(lst):] = [<span class="hljs-number">8</span>]</span><br><span class="line">print(lst)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]   <span class="hljs-comment"># 例子承接上面，第三个元素为7，不是3</span></span><br></pre></td></tr></table></figure><p><strong>3、列表函数</strong></p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>append</td><td>将单个元素追加到列表的<strong>最右边</strong>，即末尾部分；<strong>list[len(list):] = [x]</strong>，x是待追加的元素；  <strong>没有返回值None</strong></td></tr><tr><td>extend</td><td>将<strong>两个列表进行合并</strong>，扩充列表的作用；  参数必须是<strong>可迭代对象</strong>；  <strong>list[len(list):] = L</strong>，L是待并入的列表；  完成追加过程，列表L不变，list发生变化；  <strong>没有返回值None</strong></td></tr><tr><td>insert</td><td>指定位置添加元素  格式：list.insert(i,x)，i是插入的位置，x是待追加元素 ；  i如果是0，相当于是插在首位；i如果是len(list)，相当于是插在最后面，则等价于append()函数</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># extend()函数</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</span><br><span class="line">print(id(lst))   <span class="hljs-comment"># 查看lst的内存地址</span></span><br><span class="line">lst1 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line">lst.extend(lst1)</span><br><span class="line">print(id(lst))   <span class="hljs-comment"># 查看追加列表之后的内存地址，与原来系相同的</span></span><br><span class="line">print(<span class="hljs-string">"lst:"</span>, lst)</span><br><span class="line">print(<span class="hljs-string">"lst1:"</span>, lst1)</span><br><span class="line"></span><br><span class="line"><span class="hljs-number">2435334264968</span></span><br><span class="line"><span class="hljs-number">2435334264968</span></span><br><span class="line">lst: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line">lst1: [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># append与extend区别</span></span><br><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst2 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]</span><br><span class="line">lst1.append(lst2)</span><br><span class="line">print(lst1)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]]   <span class="hljs-comment"># 整建制，将lst2当做一个整体</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst2 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]</span><br><span class="line">lst1.extend(lst2)</span><br><span class="line">print(lst1)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]   <span class="hljs-comment"># 个体化，将lst2的每个元素进行追加</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li>列表是可以进行<strong>修改</strong>的，原地修改</li><li>append是将一个元素加到列表的末尾，<strong>整建制追加</strong></li><li>extend将两个列表进行合并，<strong>个体化扩编</strong></li><li>extend方法执行之后，<strong>内存中id不变</strong>，只是在该id上的内容发生了变化</li><li>insert()函数中的i如果超过最大索引值，则自动追加到末尾，相当于是append()函数的作用</li><li>三种方法均是原地修改，无返回值</li></ul><hr><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>count</td><td>查看元素重复出现的次数  <strong>如果不存在，返回0</strong>，而不是报错</td></tr><tr><td>index</td><td>查看索引编号，不存在则报错  检索的是元素<strong>第一次</strong>出现的位置</td></tr><tr><td>remove</td><td>删除元素，原地修改，无返回值；  list.remove(x)：如果x不存在，则会报错；  如果x出现多次，<strong>删除第一个x，剩下不变</strong></td></tr><tr><td>pop</td><td>pop([i]):参数是可选的；  为空，<strong>默认删除最后一个</strong>，并且将该元素作为返回值；  如果不为空，<strong>可删除索引为i的元素</strong>，并且将该元素作为返回值</td></tr><tr><td>reverse</td><td>原地反转，没有生成新的列表，没有返回值</td></tr><tr><td>reversed</td><td>类似reverse，区别：生成的列表能够<strong>用于迭代</strong></td></tr></tbody></table><p><strong>remove和pop的区别</strong></p><ul><li>remove 没有返回值，pop有返回值</li><li>remove的参数是元素，pop的参数是索引</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">lst1.remove(<span class="hljs-number">2</span>)</span><br><span class="line">print(lst1)</span><br><span class="line"><span class="hljs-comment"># lst1.remove(7)</span></span><br><span class="line"><span class="hljs-comment"># print(lst1)   ValueError: list.remove(x): x not in list</span></span><br><span class="line">lst1.pop(<span class="hljs-number">2</span>)</span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]   <span class="hljs-comment"># 将元素2删除掉</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]      <span class="hljs-comment">#  将索引为2的元素3删除掉，本步骤是接在上面的执行，即在列表[1, 3, 4, 5, 6] 中删除4</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关于反转</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(lst[::<span class="hljs-number">-1</span>])   <span class="hljs-comment"># 反转实现1</span></span><br><span class="line">print(lst)          <span class="hljs-comment"># 原来的列表对象不改变</span></span><br><span class="line">lst.reverse()    <span class="hljs-comment"># 反转实现2</span></span><br><span class="line">print(lst)          <span class="hljs-comment"># 原来的列表变成反转之后的新列表</span></span><br><span class="line">lst1= reversed(lst)</span><br><span class="line">print(lst1)       <span class="hljs-comment"># lst1是一个列表反转迭代器对象：&lt;list_reverseiterator object at 0x00000233C677F320&gt;</span></span><br><span class="line">print(list(lst1))    <span class="hljs-comment"># 用list函数显示lst1的内容</span></span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>sort</td><td>排序函数，用于<code>列表list</code>中，<strong>原地修改没有返回值</strong>；  <strong>默认从小到大</strong>；将<strong>reverse=True</strong>则变成从大到小排序sort(self, /, *, key=None, reverse=False)</td></tr><tr><td>sorted</td><td>对<code>所有可迭代对象</code>进行操作，返回一个新的 <code>list</code>，不是在原来的list上进行操作  sorted(iterable[, cmp[, key[, reverse]]])</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># sort()</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst.sort()</span><br><span class="line">print(lst)</span><br><span class="line">lst1 = [<span class="hljs-string">'python'</span>, ‘Java’, <span class="hljs-string">'html'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'php'</span>]</span><br><span class="line">lst1.sort(key=len)  <span class="hljs-comment"># 列表中的字符串进行排序；如果长度相同，则按照出现的先后顺序</span></span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</span><br><span class="line">[<span class="hljs-string">'c'</span>, <span class="hljs-string">'php'</span>, <span class="hljs-string">'Java'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'python'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># sorted()</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst1 = sorted(lst)</span><br><span class="line">print(lst)  <span class="hljs-comment"># 原对象不变</span></span><br><span class="line">print(lst1) <span class="hljs-comment"># 新列表为排序后的对象</span></span><br><span class="line"></span><br><span class="line">lst2 =[(<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>),(<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>),(<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>),(<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>)]</span><br><span class="line">lst3 = sorted(lst2, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])   <span class="hljs-comment"># 由元组构成的复合列表，按照元组的第二个元素进行排序，通过匿名函数lamba()</span></span><br><span class="line">print(lst3)</span><br><span class="line">[(<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>)]</span><br><span class="line"></span><br><span class="line">lst4 = sorted(lst2, key=<span class="hljs-keyword">lambda</span> x: len(x[<span class="hljs-number">0</span>]))   <span class="hljs-comment"># 通过元组中第一个元素的长度进行排序</span></span><br><span class="line">print(lst4)</span><br><span class="line">[(<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>), (<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>)]</span><br></pre></td></tr></table></figure><h4 id="自定义类中的元素进行排序"><a href="#自定义类中的元素进行排序" class="headerlink" title="自定义类中的元素进行排序"></a>自定义类中的元素进行排序</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, age, grade)</span>:</span></span><br><span class="line">        self.name =  name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.grade = grade</span><br><span class="line">        </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span>  repr((self.name, self.grade, self.age))</span><br><span class="line">    </span><br><span class="line">students_objects = [</span><br><span class="line">    Student(<span class="hljs-string">'Tom'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-number">12</span>),</span><br><span class="line">    Student(<span class="hljs-string">'xiaoming'</span>,<span class="hljs-string">'A'</span>,<span class="hljs-number">17</span>),</span><br><span class="line">    Student(<span class="hljs-string">'xiaohong'</span>, <span class="hljs-string">'C'</span>, <span class="hljs-number">12</span>),</span><br><span class="line">    Student(<span class="hljs-string">'Peter'</span>, <span class="hljs-string">'D'</span>, <span class="hljs-number">8</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">lst5 = sorted(students_objects, key=<span class="hljs-keyword">lambda</span> t:t.age)   <span class="hljs-comment"># 自定义类中，按照年龄进行排序</span></span><br><span class="line">print(lst5)</span><br><span class="line">lst6 = sorted(students_objects, key=<span class="hljs-keyword">lambda</span> t:(t.age, t.grade))   <span class="hljs-comment"># 使用元组，先根据年龄排序，若年龄相同按照grade排序</span></span><br><span class="line">print(lst6)</span><br><span class="line"></span><br><span class="line">[(<span class="hljs-string">'xiaoming'</span>, <span class="hljs-number">17</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'Tom'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'xiaohong'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'Peter'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'D'</span>)]</span><br><span class="line">[(<span class="hljs-string">'xiaoming'</span>, <span class="hljs-number">17</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'Tom'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'xiaohong'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'Peter'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'D'</span>)]</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.jianshu.com/c/ab55c73e0037?utm_source=desktop&utm_medium=notes-included-collection" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/20/5d32f16d5b0bf92604.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写于开始之前&quot;&gt;&lt;a href=&quot;#写于开始之前&quot; class=&quot;headerlink&quot; title=&quot;写于开始之前&quot;&gt;&lt;/a&gt;写于开始之前&lt;/h3&gt;&lt;p&gt;笔者即将开始写一个系列的《&lt;code&gt;Python&lt;/code&gt;札记》。本系列的札记主要是自学&lt;code&gt;齐伟&lt;/code&gt;老师《跟老齐学&lt;code&gt;Python&lt;/code&gt;轻松入门》一书整理而来。书第一遍断断续续花了5个月，第二遍边看边整理，保守3个月。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>超时空从犯</title>
    <link href="https://www.policx.com/Accomplice/"/>
    <id>https://www.policx.com/Accomplice/</id>
    <published>2019-07-18T02:18:06.000Z</published>
    <updated>2019-07-18T06:24:43.588Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><input checked disabled type="checkbox"> 你回头看了我一眼</li></ul><a id="more"></a><ul><li><input disabled type="checkbox"> 我觉得那很久很久</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;input checked disabled type=&quot;checkbox&quot;&gt; 你回头看了我一眼&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="label" scheme="https://www.policx.com/categories/label/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter的环境配置 for Mac</title>
    <link href="https://www.policx.com/flutter/"/>
    <id>https://www.policx.com/flutter/</id>
    <published>2019-07-16T10:14:18.000Z</published>
    <updated>2019-07-18T06:22:40.943Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 </p><a id="more"></a><h2 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装Flutter</h2><p>首先我们可以在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fdocs%2Fget-started%2Finstall" target="_blank" rel="noopener">Flutter官网</a>上面看到一些配置环境的步骤。这里就直接开干了，走起。 </p><h3 id="1、配置HomeBrew"><a href="#1、配置HomeBrew" class="headerlink" title="1、配置HomeBrew"></a>1、配置HomeBrew</h3><p>我们在去配置Flutter的环境之前，需要先检查一下HomeBrew是不是最新的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br></pre></td></tr></table></figure><p>如果没有brew的话，可以去<a href="https://link.juejin.im?target=https%3A%2F%2Fbrew.sh%2F" target="_blank" rel="noopener">HomeBrew官网</a>自行下载。这里就不赘述了，这里如果重新下载的话，看到下面的打印信息就说明下载完毕了。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3aad595f24923.jpg" alt></p><h3 id="2、下载SDK"><a href="#2、下载SDK" class="headerlink" title="2、下载SDK"></a>2、下载SDK</h3><p>接下来就是去官网下载SDK了。注意，这里下载SDK有两种方法：</p><ul><li>一是直接<code>git clone -b beta https://github.com/flutter/flutter.git</code>下载</li><li>二是自己在官网下载下来，如下图<br><img src="https://i.loli.net/2019/07/16/5d2db40e0aecc50465.jpg" alt></li></ul><p>这里我两种方法都试过了一遍，第一种方法实在是太慢了，在经历了耗费一个半小时下载到94%，最后提示失败了的过程之后，我决定还是用第二种方法，整个过程只用了3分钟的样子，相当满意。下载完之后，是一个名字叫<code>flutter_macos_v1.5.4-hotfix.2-stable.zip</code>的压缩包。 然后我们解压这个zip包，把解压出来的<strong>flutter</strong>文件放到根目录下即可。 </p><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p>因为Flutter的SDK中包含了很多的命令行工具。我们就需要配置环境变量，所以我直接就安装到了根目录下了。</p><p><strong>配置镜像</strong></p><p>因为Flutter在运行的时候，就需要去官网下载一些需要的资源，但是因为天国特色的wall的原因，我们就需要镜像服务器，这个在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fcommunity%2Fchina" target="_blank" rel="noopener">官网</a>上面有写的很明白，而且这是一个临时的镜像，后面还要以官网的镜像地址为准。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3f2c1f4f64480.jpg" alt></p><p>我们跳转到根目录 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>就能找到这个<code>.bash_profile</code>隐藏文件，我们用vim打开这个文件 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后需要输入就把A键按一下进入编辑模式，把下面三个环境变量配置进去 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line">export PATH=/Users/xueliheng/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>注意下，第三个环境变量这里<code>/Users/xueliheng/</code>是我的根目录，然后<code>/flutter/</code>是我们刚刚解压的的zip包里面的<code>flutter</code>文件夹。上面两个环境变量是两个镜像地址，上文中也有说过。 接着<code>shift+：</code>然后输入<code>wq</code>保存并退出vim。输入如下命令： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>最后我们就可以验证一下flutter环境有没有配置成功了。输入： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure><p>看到如下如的打印信息就是配置成功了<br><img src="https://i.loli.net/2019/07/16/5d2db44407fa682753.jpg" alt></p><h3 id="4、配置Android-Studio"><a href="#4、配置Android-Studio" class="headerlink" title="4、配置Android Studio"></a>4、配置Android Studio</h3><p>如果没有下载<strong>Android Studio</strong>的话，就去<a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.android.google.cn%2Fstudio" target="_blank" rel="noopener">官网</a>去下载一下。 我们用<code>flutter doctor</code>命令去检查一下flutter的环境配置，我们可以看到如下打印 </p><p><img src="https://i.loli.net/2019/07/16/5d2db4676ec3a36838.jpg" alt></p><p>这里的每个<code>✗</code>都是我们要去解决的问题。不过他有告诉你应该怎么做。比如第一个提示： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices</span><br><span class="line">    ✗ Unable to locate Android SDK.</span><br></pre></td></tr></table></figure><p>这就是让你去下载Android Studio。我们在下载完成之后，打开AS让他去下载一些应该下载的东西。 如果这里有提示你 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices (Android SDK version 24.0.2)</span><br><span class="line">    ✗ Flutter requires Android SDK 28 and the Android BuildTools 28.0.3</span><br></pre></td></tr></table></figure><p>这就是在提示让你去升级一下SDK，然后命令如下 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;/Users/xueliheng/Library/Android/sdk/tools/bin/sdkmanager&quot; &quot;platforms;android-28&quot; &quot;build-tools;28.0.3&quot;</span><br></pre></td></tr></table></figure><p>注意一下，这个地方的升级是需要”科学上网“的，如果有的小伙伴没有这个条件的话，我这边百度云上面给大家准备了一个<a href="https://link.juejin.im?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F10yp8PuRXxk7YvcNR_dTy8Q" target="_blank" rel="noopener">链接</a>，提取码: e48c，大家可以下载下来。下载下来之后解压到<code>/Users/Library/Android/</code>这个文件夹。把原先的SDK直接覆盖就行了，就已经是最新的SDK了。 </p><p>接下来我们配置一下安卓的环境变量，还是在根目录下找到<code>.bash_profile</code>文件，并在其中添加四个环境变量 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=~/Library/Android/sdk</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/emulator</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br></pre></td></tr></table></figure><p>分别是： </p><ul><li>安卓sdk的路径</li><li>安卓的模拟器路径</li><li>安卓tools路径</li><li>安卓平台工具</li></ul><p>接下来我们再用<code>flutter doctor</code>检查的时候，显示的信息如下图<br><img src="https://i.loli.net/2019/07/16/5d2db4964a70b73490.jpg" alt></p><p>意思就是让我们去下载iOS的相关环境，我们先暂时放放，下面还有一个关于<strong>Android Studio</strong>的没有解决完</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">✗ Dart plugin not installed; this adds Dart specific functionality.</span><br></pre></td></tr></table></figure><p>这个就是缺少Flutter插件的意思，那么我们就去AS里面去配置一下好了。打开AS的<code>Preferences</code>，点击<code>Plugins</code>，在搜索栏中输入<code>flutter</code>，找到相应的插件，然后<code>Install</code>。当跳出安装Dart插件的提示界面时，记得点击Yes进行安装。安装完毕之后<code>restart IDE</code>重启AS。 重启之后就能看到多了一个这个东西<br><img src="https://i.loli.net/2019/07/16/5d2db4b731cbd14001.jpg" alt></p><p>我们再用<code>flutter doctor</code>检测一下<br><img src="https://i.loli.net/2019/07/16/5d2db4cdc6dd137908.jpg" alt></p><p>现在终于ok了。我们看到<code>[✓]Android Studio</code>说明，安卓的环境基本上配置成功，接下来我们就配置一下安卓的模拟器就好了。 </p><h3 id="5、安卓模拟器配置"><a href="#5、安卓模拟器配置" class="headerlink" title="5、安卓模拟器配置"></a>5、安卓模拟器配置</h3><p>在AS中找到模拟器配置如下图并选择<br><img src="https://i.loli.net/2019/07/16/5d2db4dacfde455330.jpg" alt></p><p>接着就创建设备，选择设备<br><img src="https://i.loli.net/2019/07/16/5d2db4e68a2ed68879.jpg" alt></p><p>选择系统<br><img src="https://i.loli.net/2019/07/16/5d2db4f6cdc5889902.jpg" alt></p><p>最后点击下载就完成了。 </p><h3 id="6、配置iOS环境"><a href="#6、配置iOS环境" class="headerlink" title="6、配置iOS环境"></a>6、配置iOS环境</h3><p>我们配置完了安卓的环境，再来<code>flutter doctor</code>检测一下。<br><img src="https://i.loli.net/2019/07/16/5d2db50ad75eb82331.jpg" alt></p><p>情况是这样的。目前1.5.4版本的Flutter需要匹配新版本的Xcode10.2.1。按照他提示的来试试，提示我Xcode版本太低了，需要升级Xcode<br><img src="https://i.loli.net/2019/07/16/5d2db5275c8f825074.jpg" alt></p><p>更新到最新的之后，继续走下面的步骤依旧会报错。那么我们可以试试下面的这个办法： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew link pkg-config</span><br><span class="line">$ brew install --HEAD usbmuxd</span><br><span class="line">$ brew unlink usbmuxd</span><br><span class="line">$ brew link usbmuxd</span><br><span class="line">$ brew install --HEAD libimobiledevice</span><br><span class="line">$ brew install ideviceinstaller</span><br></pre></td></tr></table></figure><p>这些执行完之后执行一下<code>flutter doctor</code><br><img src="https://i.loli.net/2019/07/16/5d2db5515858b19228.jpg" alt></p><p>最后还真是没错，全部配置完成了！那么我们就把iOS的也配置完毕了。</p><h3 id="7、VSCode的使用"><a href="#7、VSCode的使用" class="headerlink" title="7、VSCode的使用"></a>7、VSCode的使用</h3><p>VSCode上面使用的话，就简单多了，这里我就简答的赘述一下。 只需要将<code>Dart</code>和<code>Flutter</code>插件都下载下来<br><img src="https://i.loli.net/2019/07/16/5d2db5643b08597602.jpg" alt></p><p>然后<code>command+shift+p</code>输入<code>flutter</code>，选择<code>Flutter：New Project</code><br><img src="https://i.loli.net/2019/07/16/5d2db576e145096766.jpg" alt></p><p>输入要创建的项目的名称和存放项目的地址。如果提示需要指明flutter的SDK的路径，那就选择根目录那个经过解压得来的flutter的文件夹就好了。 接下来是这样一个界面<br><img src="https://i.loli.net/2019/07/16/5d2db588f1b5152482.jpg" alt></p><p>接下来我们选择<code>View-&gt;Start Debugging</code>来运行项目。<br><img src="https://i.loli.net/2019/07/16/5d2db59bb3b3338193.jpg" alt></p><p>当然这个过程需要你把Xcode的模拟器打开。运行完之后就能看到这个界面，也就是你的第一个Flutter工程啦！<br><img src="https://i.loli.net/2019/07/16/5d2db5ad5eaf434960.jpg" alt></p><h3 id="8、Hot-reload的使用"><a href="#8、Hot-reload的使用" class="headerlink" title="8、Hot reload的使用"></a>8、Hot reload的使用</h3><p>我们打开<code>lib/main.dart</code>文件，然后在其中找到 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have pushed the button this many times:</span><br></pre></td></tr></table></figure><p>并把这个改为 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have clicked the button this many times:</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2db5cc5b4f279074.jpg" alt><br>那么我们就能看到界面上多了一个小闪电<br><img src="https://i.loli.net/2019/07/16/5d2db5f044c0553935.jpg" alt></p><p>我们现在如果<code>command+s</code>保存一下更改的话，就能很快的在模拟器上面看到相应的更改，不需要再重新去编译一边。这一点简直是太棒了！解决了iOS开发者一个大痛点啊！！！ </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，flutter的环境搭建工作基本上就进行完毕了，整个过程大概耗时接近2个小时，这期间包括采坑、查资料、下载、科学上网…等等很蛋疼的事情。当然网速基本上是最大的障碍，浪费了很多的时间。所以也是需要一定的耐心来完成的。 后面的文章也会持续的更新，最近有点懈怠，OpenGL系列的文章有点拖更的节奏，这个后面会补起来。Flutter我也才刚刚接手，也是慢慢的来采坑，也会以此来记录自己的学习经历，也希望能多多跟大家交流。 再次我附上自己的邮箱<code>coderspr1nghall@gmail.com</code>欢迎讨论交流。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://juejin.im/post/5d0508d56fb9a07ec373eb9e" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2dbb03b8ef977558.jpg" alt></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 &lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://www.policx.com/spider/"/>
    <id>https://www.policx.com/spider/</id>
    <published>2019-07-15T02:06:04.000Z</published>
    <updated>2019-07-18T06:22:40.946Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。</p><a id="more"></a><p>其实爬虫这个概念很简单，基本可以分成以下几个步骤：</p><ul><li><p>发起网络请求</p></li><li><p>获取网页</p></li><li><p>解析网页获取数据</p></li></ul><p>发起网络请求这个步骤常用的类库有标准库urllib以及Python上常用的requests库。解析网页常用的类库有的BeautifulSoup。另外requests的作者还开发了另一个很好用的库requests-html，提供了发起请求和解析网页的二合一功能，开发小型爬虫非常方便。另外还有一些专业的爬虫类库，其中比较出名的就是scrapy。本文将会简单介绍一下这些类库，之后还会专门写一篇文章介绍scrapy的用法。</p><h2 id="标准库urllib"><a href="#标准库urllib" class="headerlink" title="标准库urllib"></a><strong>标准库urllib</strong></h2><p>首先先来看标准库urllib。标准库的优点是Python自带的，不需要安装任何第三方库，缺点就是urllib属于偏底层的库，使用起来比较麻烦。下面是urllib发起请求的一个简单例子，大家看看就好。可以看到为了发起一个简单的请求，我们需要创建opener、request、ProxyHandler等好几个对象，比较麻烦。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> urllib.request <span class="hljs-keyword">as</span> request</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="hljs-string">'https'</span>: <span class="hljs-string">'https://127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="hljs-string">'http'</span>: <span class="hljs-string">'http://127.0.0.1:1080'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'--------------使用urllib--------------'</span>)</span><br><span class="line">url = <span class="hljs-string">'http://www.google.com'</span></span><br><span class="line">opener = request.build_opener(request.ProxyHandler(proxies))</span><br><span class="line">request.install_opener(opener)</span><br><span class="line">req = request.Request(url, headers=headers)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a><strong>requests</strong></h2><p>requests是Kenneth Reitz大神的著名作品之一，优点就是极度简单和好用。首先来安装requests。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>下面是一个简单的例子，和上面urllib示例代码实现的功能相同，但是代码量少多了，也更易读。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="hljs-string">'--------------使用requests--------------'</span>)</span><br><span class="line">response = requests.get(<span class="hljs-string">'https://www.google.com'</span>, headers=headers, proxies=proxies)</span><br><span class="line">response.encoding = <span class="hljs-string">'utf8'</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>requests还可以方便的发送表单数据，模拟用户登录。返回的Response对象还包含了状态码、header、raw、cookies等很多有用的信息。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="hljs-string">'name'</span>: <span class="hljs-string">'yitian'</span>,</span><br><span class="line">    <span class="hljs-string">'age'</span>: <span class="hljs-number">22</span>,</span><br><span class="line">    <span class="hljs-string">'friends'</span>: [<span class="hljs-string">'zhang3'</span>, <span class="hljs-string">'li4'</span>]</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="hljs-string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">pprint(response.__dict__)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>关于requests我就不多做介绍了，因为它有中文文档，虽然比官方落后几个小版本号，不过无伤大雅，大家可以放心参阅。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://cn.python-requests.org/zh_CN/latest/</span><br></pre></td></tr></table></figure><h2 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a><strong>beautifulsoup</strong></h2><p>利用前面介绍的requests类库，我们可以轻易地获取HTML代码，但是为了从HTML中找到所需的数据，我们还需要HTML/XML解析库，BeautifulSoup就是这么一个常用的库。首先先来安装它：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>这次就用我简书主页作为例子，爬取一下我简书的文章列表。首先先用requests获取到网页内容。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"><span class="hljs-keyword">import</span> bs4</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><p>然后就是BeautifulSoup的代码了。在使用BeautifulSoup的时候首先需要创建一个HTML树，然后从树中查找节点。BeautifulSoup主要有两种查找节点的办法，第一种是使用find和find_all方法，第二种方法是使用select方法用css选择器。拿到节点之后，用contents去获取它的子节点，如果子节点是文本，就会拿到文本值，注意这个属性返回的是列表，所以要加[0]。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html = bs4.BeautifulSoup(response.text, features=<span class="hljs-string">'lxml'</span>)</span><br><span class="line">note_list = html.find_all(<span class="hljs-string">'ul'</span>, class_=<span class="hljs-string">'note-list'</span>, limit=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.select(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.contents[<span class="hljs-number">0</span>]</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>BeautifulSoup也有中文文档，同样也是稍微落后两个小版本，影响不大。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</span><br></pre></td></tr></table></figure><h2 id="requests-html"><a href="#requests-html" class="headerlink" title="requests-html"></a><strong>requests-html</strong></h2><p>这个类库是requests的兄弟，同样也是Kenneth Reitz大神的作品。它将请求网页和解析网页结合到了一起。本来如果你用requests的话只能请求网页，为了解析网页还得使用BeautifulSoup这样的解析库。现在只需要requests-html一个库就可以办到。<br>首先先来安装。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests-html</span><br></pre></td></tr></table></figure><p>然后我们来看看用requests-html如何重写上面这个例子。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line">note_list = r.html.find(<span class="hljs-string">'ul.note-list'</span>, first=<span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.find(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html除了可以使用css选择器来搜索以外，还可以使用xpath来查找。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html还有一个很有用的特性就是浏览器渲染。有些网页是异步加载的，直接用爬虫去爬只能得到一个空页面，因为数据是靠浏览器运行JS脚本异步加载的，这时候就需要浏览器渲染了。而浏览器渲染用requests-html做非常简单，只要多调用一个render函数即可。render函数有两个参数，分别指定页面下滑次数和暂停时间。render函数第一次运行的时候，requests-html会下载一个chromium浏览器，然后用它渲染页面。<br>简书的个人文章页面也是一个异步加载的例子，默认只会显示最近几篇文章，通过浏览器渲染模拟页面下滑，我们可以得到所有文章列表。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line"><span class="hljs-comment"># render函数指示requests-html用chromium浏览器渲染页面</span></span><br><span class="line">r.html.render(scrolldown=<span class="hljs-number">50</span>, sleep=<span class="hljs-number">0.2</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>类似的，今日头条的个人页面也是异步加载的，所以也得调用render函数。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">        <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(<span class="hljs-string">'https://www.toutiao.com/c/user/6662330738/#mid=1620400303194116'</span>, headers=headers)</span><br><span class="line">r.html.render()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r.html.find(<span class="hljs-string">'div.rbox-inner a'</span>):</span><br><span class="line">    title = i.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.toutiao.com<span class="hljs-subst">&#123;i.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》 <span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>最后是requests-html的官网地址以及中文文档。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://html.python-requests.org/</span><br><span class="line">https://cncert.github.io/requests-html-doc-cn/</span><br></pre></td></tr></table></figure><h2 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a><strong>scrapy</strong></h2><p>以上介绍的几个框架都是各自有各自的作用，把它们结合起来可以达到编写爬虫的目的，但是要说专业的爬虫框架，还是得谈谈scrapy。作为一个著名的爬虫框架，scrapy将爬虫模型框架化和模块化，利用scrapy，我们可以迅速生成功能强大的爬虫。<br>不过scrapy概念众多，要仔细说还得专门开篇文章，这里就只简单演示一下。首先安装scrapy，如果是Windows系统，还需要安装pypiwin32。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy  </span><br><span class="line">pip install pypiwin32</span><br></pre></td></tr></table></figure><p>然后创建scrapy项目并添加一个新爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject myproject</span><br><span class="line">cd myproject</span><br><span class="line">scrapy genspider my jianshu.com</span><br></pre></td></tr></table></figure><p>打开配置文件settings.py，设置用户代理，否则会遇到403错误。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br></pre></td></tr></table></figure><p>然后修改一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JianshuSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="hljs-string">'jianshu'</span></span><br><span class="line">    allowed_domains = [<span class="hljs-string">'jianshu.com'</span>]</span><br><span class="line">    start_urls = [<span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">'div.content'</span>):</span><br><span class="line">            <span class="hljs-keyword">yield</span> &#123;</span><br><span class="line">                <span class="hljs-string">'title'</span>: article.css(<span class="hljs-string">'a.title::text'</span>).get(),</span><br><span class="line">                <span class="hljs-string">'link'</span>: <span class="hljs-string">'https://www.jianshu.com'</span> + article.xpath(<span class="hljs-string">'a[@class="title"]/@href'</span>).get()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>最后运行一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl my</span><br></pre></td></tr></table></figure><br><table><thead><tr><th>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1563247765&ver=1731&signature=gm2iTUKE3itOZzvlz9SUtKCYNv*PqEYt2C7ReV7kd47e2ZAWPvG5GRXZUJsiRIde34Uh5FznBslw4hHhXmHQXyV3yz0tTdgds1RMCdai6Oyy98w2-iTBRWeJlpm3cWa8&new=1" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2d4c5ba835e96705.jpg" alt="Python"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>DDoS（分布式拒绝服务）攻击是无解的吗？</title>
    <link href="https://www.policx.com/ddos/"/>
    <id>https://www.policx.com/ddos/</id>
    <published>2019-07-14T07:26:43.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>“</strong></p><p>DDOS？ </p><p>一言难尽啊！ </p><p>”</p><a id="more"></a><p>先说结论，DDoS是近年来网络攻击中的一棵“常青树”，的确很难缠，但说它是无解的，那也有点太看得起它了。虽然DDoS在对很多大平台的攻击中出尽了风头，但在现在互联网的解决方案中，并不缺乏应对DDoS的解决方案。 </p><p>说起DDoS攻击，我脑海里能够想到的全都是中国民间俗语，什么“双拳难敌四手，好汉架不住人多”，什么“千斤拨四两”，什么“乱拳打死老师傅”等等等等。 </p><p>之前有朋友跑来问我DDoS是个什么东西，为什么这么多互联网巨头都被搞得没有脾气，我记得我当时我是这么举的例子： </p><p>我们这一代人小的时候，自助餐开始在中国内地风行，那会儿这个行业里为了打击竞争对手，对手最惯常使用的阴招是雇佣很多五大三粗的人，给他们钱去对方的店里一通猛吃，杯盘狼藉之下，用不了几天这家自助餐就能给吃黄了。 </p><p>而DDoS攻击比这种还阴损，如果你开了一家餐馆，你的对手如果想搞你，最好的办法就是找一堆地痞流氓到你的店里坐的满满一屋子，你如果上前问，他们就一直跟你扯淡找麻烦，导致真正想吃饭的顾客一看这个情形，掉头就走了。 </p><p>用不了多久，你的餐馆就会开不下去，而你的竞争对手就会趁机蚕食掉你的市场份额，而放在网络语境里，这就是DDoS攻击的最基本原理。 </p><p>而这件事之所以难缠在于，一两个无赖根本成不了气候，想要耍流氓必须要有很多个无赖集结在一起。<strong>所以和现实世界中的无赖一样，DDoS真正的杀手锏在于利用能够发动的汹涌的流量，可以瞬间冲垮被攻击网站的服务器。</strong></p><p>如果我们回溯一下历史的话，会发现黑客组织之所以会有组织有预谋的发起DDoS攻击，基本上都是基于以下几个原因： </p><ul><li><p>有些行业如果网站被恶意攻击，会造成很难估量的损失，这个时候黑客发动DDoS攻击的初衷一般是出于敲诈勒索，为了保证企业的正常运转，他们通常愿意向黑客付高额的赎金； </p></li><li><p>行业内血海一片，DDoS是恶意竞争的屠刀。这个现象从逻辑上，其实雇佣无赖去占领对手餐馆的原理是一毛一样的，而且DDOS攻击早已产业化，现在中国的DDOS黑市，出钱请黑客打1G的流量到一个网吧或网站，市场价只要不到50块钱，但对于一个创业公司或者干脆就是一个小网吧来说，这已经算是可以灭顶的无妄之灾了。 </p></li><li><p>DDoS攻击往往成为掩盖真实网络攻击的烟雾弹，在遭受DDoS攻击的企业中，部分企业还伴随数据丢失的现象，黑客利用DDoS攻击掩盖其窃取用户隐私的真实目的，这种攻击行为在社交网站、金融领域等用户隐私高价值的行业尤为高发。 </p></li></ul><p>比如说，去年年初的时候，荷兰第一大银行荷兰商业银行于2018年1月28日晚间遭到DDoS攻击；第二大银行荷兰合作银行的网银服务29日早晨遭到攻击；第三大银行荷兰银行在那一周内共遭到7次网络攻击，仅周末就有3次。 </p><p>不过这一次发生在荷兰的针对银行系统的攻击并没有造成用户隐私的泄露，原因在于这仅仅是一次来自俄罗斯一个网络间谍组织Cozy Bear对荷兰情报组织AIVD侵犯其计算机的“单纯”的报复行为。<strong>但并不是所有黑客组织发起的DDoS攻击都如此单纯。</strong></p><p>2018年年底时万豪酒店发布了一则公告，称其旗下喜达屋酒店的5亿人次的信息被泄露，共计3.27亿人，泄露信息包括姓名、邮寄地址、电话号码、电子邮件昂面地址、护照号码、出生日期、性别等等入住信息，更糟糕的是万豪无法确定，侵入酒店系统的第三方黑客，在窃取的信息中是否包含客人的银行卡号和密码。（此案例和DDOS攻击无关，建议采用其他案例，比如2011年4月20日至26日，索尼遭受DDoS攻击，目的是为了掩盖盗取索尼PS的用户数据。） </p><p>而游戏领域，则是DDoS攻击的另一个重灾区，不光是刚才前文中提到的暴雪，包括索尼、金山、网易在内的众多知名游戏公司都曾数次遭受攻击，可以说DDoS攻击是游戏企业的噩梦。 </p><p>许多刚创业的游戏公司，可能刚上线就被打死，而一些处在融资阶段的游戏公司，由于遭遇攻击而被迫停服，则很大程度上会调低投资人的预期，甚至导致融资失败。 </p><p>而这些因素，都是竞对打压或者敲诈勒索的绝对软肋。 </p><p>从以上的几个案例我们不难看出，和现实中的耍流氓和敲诈勒索相比，通过网络手段进行攻击的风险和成本更低，坏蛋的嘴脸也更穷凶极恶一点，无论是政府机构还是企业平台，无论你是巨头还是小蚂蚁，只要你身上有羊毛可以薅，你都时刻面临着被洗劫的风险 </p><p>不过刚在开头我也讲了，虽然DDoS很难缠很让人头痛，但本质上图并不是无解的。 </p><p>回到我最开始讲的那个例子。 </p><p>你是一个餐馆老板，过去三十年一直是个老老实实的厨子，突然面对五十个臭流氓到你店里耍无赖的时候，你最好的应对方法，应该是什么？ </p><p>自己组建一支人马，和这些臭流氓正面刚？这恐怕不行，因为你不是臭流氓，你没有相应的作战经验。 </p><p>报警请人民警察来帮忙处理？这恐怕也不行，人家在你店里没有打砸抢，只是“温和的”非暴力不合作，警察来了也只能当民事调解，并且人家马仔众多，明天再换一拨新面孔来，玩的你一点脾气都没有。 </p><p>这就是面对DDoS时，无论是巨头还是小蚂蚁，他们的实实在在的困境。 </p><p>但正所谓“道高一尺魔高一丈”，你在云上和我耍流氓，那我就在云上回击。 </p><p><strong>“云”的事儿，不如还交还给云来处理。</strong>我认为就目前DDoS的在攻击量级上的疯狂进击的前提下，云计算服务厂商或许是狙击它们的最有效手段。 </p><p>2018年年初，峰值1.35TB/秒的流量冲击了开发者平台 GitHub。这是第一次TB量级的DDoS攻击。GitHub 受到攻击后，服务器断断续续，无法访问。攻击发生 10 分钟后，GitHub 向CDN 服务商 Akamai 请求协助，访问 GitHub 的流量已经由后者接管并在15分钟之内完成了防御。 </p><p>Akamai的相关负责人在接受采访时说，我们是基于迄今为止最大规模 DDoS 攻击五倍的峰值而做的相应准备，所以 1.3T 对我们来说是小意思。 </p><p>在关于流量峰值这一点上，我认为饱受双11、双12、618等全民购物狂欢的电商巨头们更有发言权，就拿京东举例子好了。 </p><p>京东云在之前发布的高防版的DDoS服务中，展示出了非常明确的信心是，在多年的电商狂欢流量对抗中，京东云已经在实战中建立了一套完备的防御机制，无论是在流量峰值的建模上，还是在DDoS的防御算法上，它的部署都远远不是纸上谈兵，而是拳拳到肉的经受住了实战的洗礼。要知道，全世界每年有超过5成的DDoS攻击都来自中国，而我们的国家也是全世界超过美国的第一大“肉鸡”市场，由电商大数据加持演化而来的京东云，它在云安全的理解上可以说是非常深刻了。 </p><p>所以说，如果说一定要有一个结论，我想说“上帝的归上帝，而云上的归云上”，像京东云这样的基于电商大数据考验的云计算平台，或许才是对抗DDoS的最终答案。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f3adcbb2ed60428.png" alt="jd"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;“&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DDOS？ &lt;/p&gt;
&lt;p&gt;一言难尽啊！ &lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.policx.com/program/JavaScript/node/"/>
    <id>https://www.policx.com/program/JavaScript/node/</id>
    <published>2019-07-13T16:06:04.000Z</published>
    <updated>2019-07-18T06:22:40.943Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/15/5d2c47df96f5d45317.jpg" alt="Node.js"></p><p>能方便地搭建响应速度快、易于扩展的网络应用，Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>中文：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org</a>、<a href="https://nodejs.cn/" target="_blank" rel="noopener">https://nodejs.cn</a></p><p>简单说Node.js就是运行在服务器端的JavaScript，是现在流行的语言中能同时运行在前端与后台的程序语言，你可以把JavaScript想像成Java与C#。相关技术：</p><p>数据库：MongoDB，非关系型数据库，NoSQL（Not only SQL）</p><p>MVC框架：AngularJS</p><p>Web服务器：Express</p><p>模板引擎：jade、ejs、htmljs、swig、hogan.js</p><h1 id="二、搭建Node-js开发环境"><a href="#二、搭建Node-js开发环境" class="headerlink" title="二、搭建Node.js开发环境"></a>二、搭建Node.js开发环境</h1><h2 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h2><p>去官网下下载最新版本的Node.js一步一步按提示安装即可，如果安装失败就手动安装，将Node.js的安装位置配置到环境变量的path中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装完成后启动命令行，测试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="三、第一个Node-js程序"><a href="#三、第一个Node-js程序" class="headerlink" title="三、第一个Node.js程序"></a>三、第一个Node.js程序</h1><p>在上面的示例中，我们是通过IDE完成编译与运行的，其实手动运行也可以，比如编写一段代码如下：</p><blockquote><p>server.js</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//依赖一个http模块，相当于java中的import，与C#中的using</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">//创建一个服务器对象</span><br><span class="line">server = http.createServer(function (req, res) &#123;</span><br><span class="line">//设置请求成功时响应头部的MIME为纯文本</span><br><span class="line">res.writeHeader(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">//向客户端输出字符</span><br><span class="line">res.end(&quot;Hello World\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//让服务器监听本地8000端口开始运行</span><br><span class="line">server.listen(8000,&apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server is runing at 127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>在node环境下解释运行：<br><img src="https://i.loli.net/2019/07/14/5d2af984d2fae77488.jpg" alt></p><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2af89c2b5b226144.jpg" alt></p><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。<br>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。<br>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</p><h1 id="四、NPM（Node-js包管理器）"><a href="#四、NPM（Node-js包管理器）" class="headerlink" title="四、NPM（Node.js包管理器）"></a>四、NPM（Node.js包管理器）</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：  </p><ul><li>a)、允许用户从NPM服务器下载别人编写的第三方包到本地使用。  </li><li>b)、允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。  </li><li>c)、允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><h2 id="4-1、查看npm版本"><a href="#4-1、查看npm版本" class="headerlink" title="4.1、查看npm版本"></a>4.1、查看npm版本</h2><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p><h2 id="4-2、升级npm"><a href="#4-2、升级npm" class="headerlink" title="4.2、升级npm"></a>4.2、升级npm</h2><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="4-3、安装模块"><a href="#4-3、安装模块" class="headerlink" title="4.3、安装模块"></a>4.3、安装模块</h2><blockquote><p>npm install <module name> -参数</module></p></blockquote><p>如果带参数-g表示全局安装，否则只是安装到某个目录下。</p><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install express -g</span><br></pre></td></tr></table></figure><h2 id="4-4、卸载模块"><a href="#4-4、卸载模块" class="headerlink" title="4.4、卸载模块"></a>4.4、卸载模块</h2><p>我们可以使用以下命令来卸载 Node.js 模块。  </p><blockquote><p>sudo npm uninstall <module name></module></p></blockquote><p>如先使用安装指令安装bootstrap:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>再使用卸载指令删除模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall bootstrap</span><br></pre></td></tr></table></figure><p>可以到 /node_modules/ 目录下查看包是否还存在</p><h2 id="4-5、模块列表"><a href="#4-5、模块列表" class="headerlink" title="4.5、模块列表"></a>4.5、模块列表</h2><p>使用模块列表命令可以方便的看到当前项目中依赖的包：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h2 id="4-6、更新模块"><a href="#4-6、更新模块" class="headerlink" title="4.6、更新模块"></a>4.6、更新模块</h2><p>我们可以使用以下命令更新模块：<br><code>npm update</code>模块名称<br><code>npm up -g</code> 模块名称</p><h2 id="4-7、搜索模块"><a href="#4-7、搜索模块" class="headerlink" title="4.7、搜索模块"></a>4.7、搜索模块</h2><p><code>npm search</code>模块名称</p><h2 id="4-8、NPM-常用命令"><a href="#4-8、NPM-常用命令" class="headerlink" title="4.8、NPM 常用命令"></a>4.8、NPM 常用命令</h2><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。<br>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。<br>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。<br>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。<br>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。<br>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></package></package></p><h2 id="4-9、更换NPM-镜像"><a href="#4-9、更换NPM-镜像" class="headerlink" title="4.9、更换NPM 镜像"></a>4.9、更换NPM 镜像</h2><p>因为npm的服务器在国外，在网络状态不好的情况下引入一个模块会因为网络延迟而失败，可以更换成国内速度更快的镜像服务器，这里以使用淘宝 NPM 镜像（<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>）为例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/15/5d2c481d14f7270384.jpg" alt></p><p>这样就可以使用 cnpm 命令来安装模块了：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＄ cnpm install [name]</span><br></pre></td></tr></table></figure><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><p>如是安装失败，可以试试：</p><figure class="highlight zsh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">alias</span> cnpm=<span class="hljs-string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">--cache=<span class="hljs-variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">--userconfig=<span class="hljs-variable">$HOME</span>/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">  --userconfig=$HOME/.cnpmrc"'</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。使用Node.js作为AngularJS开发Web服务器的最佳方式是使用Express模块。</p><p>Express官网： <a href="https://expressjs.com/" target="_blank" rel="noopener">https://expressjs.com/</a></p><p>Express4.x API：<a href="https://expressjs.com/zh-cn/4x/api.html" target="_blank" rel="noopener">https://expressjs.com/zh-cn/4x/api.html</a></p><p><img src="https://i.loli.net/2019/07/15/5d2c484698cd427801.jpg" alt></p><h2 id="5-2、Express框架核心特性"><a href="#5-2、Express框架核心特性" class="headerlink" title="5.2、Express框架核心特性"></a><strong>5.2、Express框架核心特性</strong></h2><p>可以设置中间件来响应 HTTP 请求。</p><p>定义了路由表用于执行不同的 HTTP 请求动作。</p><p>可以通过向模板传递参数来动态渲染 HTML 页面。</p><p>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。</p><p>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p><h2 id="5-3、安装-Express"><a href="#5-3、安装-Express" class="headerlink" title="5.3、安装 Express"></a><strong>5.3、安装 Express</strong></h2><p>安装 Express 并将其保存到依赖列表中：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>以上命令全局安装express。也可安装时指定安装中间件。</p><p><em>body-parser</em> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</p><p><em>cookie-parser</em> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p><p><em>multer</em> - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">＄ npm install body-parser --save  </span><br><span class="line">＄ npm install cookie-parser --save  </span><br><span class="line">＄ npm install multer --save</span><br></pre></td></tr></table></figure><p>默认这些模块都已经添加。</p><h2 id="5-4、第一个Express框架实例"><a href="#5-4、第一个Express框架实例" class="headerlink" title="5.4、第一个Express框架实例"></a>5.4、第一个Express框架实例</h2><p>接下来我们使用 Express 框架来输出 “Hello World”。<br>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。</p><p>创建一个目录，如Project，进入命令行：</p><p>使用npm install express 导入express模块。</p><p>在目录下创建hello.js文件，如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//引入express模块</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">//创建一个app对象，类似一个web 应用（网站）</span><br><span class="line">var app = express();</span><br><span class="line">//接受指定路径的请求，指定回调函数</span><br><span class="line">app.get(&apos;/&apos;, function (req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//创建一个web服务器，可以认为就是web服务器对象</span><br><span class="line">//监听8081端口，当监听成功时回调</span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">   var host = server.address().address;  //地址</span><br><span class="line">   var port = server.address().port;  //端口</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-5、开发Express项目"><a href="#5-5、开发Express项目" class="headerlink" title="5.5、开发Express项目"></a>5.5、开发Express项目</h2><p><img src="https://i.loli.net/2019/07/14/5d2b00e97910997783.jpg" alt></p><p>创建好的项目如下：<br><img src="https://i.loli.net/2019/07/14/5d2b02dad205355700.jpg" alt></p><p>app.js是网站：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><p>bin\www是web服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">/**</span><br><span class="line"> * 依赖模块，导入</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;nodejsexpress:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从上下文环境中获得监听端口，如果空则3000</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Web服务器</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开始监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);  //指定发生错误时的事件</span><br><span class="line">server.on(&apos;listening&apos;, onListening);  //当监听成功时的回调</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 规范化端口</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *错误事件监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  //错误处理</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);  //结束程序</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当用户访问服务器成功时的回调</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/index.js路由，有点类似控制器或Servlet：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 获得首页 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>views/index.ejs首页视图：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在www上右键选择“运行方式”-&gt;Run ‘/bin/www’ 运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b034bcca6187136.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b044c2b12347829.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b041724d6091090.jpg" alt></p><h3 id="5-5-1、request对象"><a href="#5-5-1、request对象" class="headerlink" title="5.5.1、request对象"></a>5.5.1、request对象</h3><p>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ul><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ul><h3 id="5-5-2、response对象"><a href="#5-5-2、response对象" class="headerlink" title="5.5.2、response对象"></a>5.5.2、response对象</h3><p>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.app：同req.app一样</span><br><span class="line">res.append()：追加指定HTTP头</span><br><span class="line">res.set()在res.append()后将重置之前设置的头</span><br><span class="line">res.cookie(name，value [，option])：设置Cookie</span><br><span class="line">opition: domain / expires / httpOnly / maxAge / path / secure / signed</span><br><span class="line">res.clearCookie()：清除Cookie</span><br><span class="line">res.download()：传送指定路径的文件</span><br><span class="line">res.get()：返回指定的HTTP头</span><br><span class="line">res.json()：传送JSON响应</span><br><span class="line">res.jsonp()：传送JSONP响应</span><br><span class="line">res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</span><br><span class="line">res.redirect()：设置响应的Location HTTP头，并且设置状态码302</span><br><span class="line">res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</span><br><span class="line">res.send()：传送HTTP响应</span><br><span class="line">res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</span><br><span class="line">res.set()：设置HTTP头，传入object可以一次设置多个头</span><br><span class="line">res.status()：设置HTTP状态码</span><br><span class="line">res.type()：设置Content-Type的MIME类型</span><br></pre></td></tr></table></figure><h3 id="5-5-3、express获取参数有三种方法"><a href="#5-5-3、express获取参数有三种方法" class="headerlink" title="5.5.3、express获取参数有三种方法"></a>5.5.3、express获取参数有三种方法</h3><p>req.query 适合 <a href="https://localhost:3000/form?num=8888" target="_blank" rel="noopener">https://localhost:3000/form?num=8888</a><br>req.body 适合<a href="https://localhost:3000/form，Post请求中的参数" target="_blank" rel="noopener">https://localhost:3000/form，Post请求中的参数</a><br>req.params 适合获取form后的num：<a href="https://localhost:3000/form/num" target="_blank" rel="noopener">https://localhost:3000/form/num</a>  </p><p>（一）、GET</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = req.query.num;</span><br><span class="line">res.send(&quot;你获取的get数据为:&quot; + num);</span><br></pre></td></tr></table></figure><p>（二）、POST</p><p>解析post数据需要用到body-parser</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">//引入body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">//需要use的</span><br><span class="line">app.use(bodyParser.json()); // for parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">extended: true</span><br><span class="line">&#125;)); // for parsing application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.post(&apos;/form&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.body.num;</span><br><span class="line">res.send(&quot;你获取的post数据为:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>public/test.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"tinyphp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（三）、获取路径参数</p><p>app.js  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.get(&apos;/form/:num&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.params.num;</span><br><span class="line">res.send(&quot;你获取到form/后的参数:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="5-6-ejs基础"><a href="#5-6-ejs基础" class="headerlink" title="5.6 ejs基础"></a>5.6 ejs基础</h2><p>ejs是一个Express Web应用的模板引擎，在NodeJS开发中可以选择的模板引擎可能是所有Web应用开发中范围最广的，如jade、ejs、htmljs、swig、hogan.js，但ejs是最容易上手的，与jsp,asp,php的原始模板引擎风格很像。</p><p>官网：<a href="https://www.embeddedjs.com/" target="_blank" rel="noopener">https://www.embeddedjs.com/</a></p><p>添加一个<code>product.js</code>路由：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  var products=[];</span><br><span class="line">  products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">  //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">  res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>在views目录下添加<code>product.ejs</code>视图，这里是一个简单的MVC：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span> - 产品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"80%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%pdts.forEach(function(pdt,index)&#123;%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=index+1%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.name%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.price%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%&#125;);%</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">%=pdts[i].name%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改app，注册定义好的模块product：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> index = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/index'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/users'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> pdts = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/product'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//指定视图引擎为ejs</span></span><br><span class="line">app.set(<span class="hljs-string">'views'</span>, path.join(__dirname, <span class="hljs-string">'views'</span>));</span><br><span class="line">app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="hljs-comment">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class="line">app.use(logger(<span class="hljs-string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="hljs-string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/'</span>, index);</span><br><span class="line">app.use(<span class="hljs-string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="hljs-string">'/pdt'</span>, pdts);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b092ca2eb115835.jpg" alt></p><blockquote><p>原因：没有安装ejs模块<br>解决办法：进入到项目目录，安装ejs</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save ejs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b09efe80ba53992.jpg" alt></p></blockquote><p>重新运行：<br><img src="https://i.loli.net/2019/07/14/5d2b0a951a09231745.jpg" alt></p><h2 id="5-7、lodash"><a href="#5-7、lodash" class="headerlink" title="5.7、lodash"></a>5.7、lodash</h2><p>这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。可以非常方便的操作json。</p><p>官网：<a href="https://lodashjs.com/" target="_blank" rel="noopener">https://lodashjs.com/</a></p><p>安装：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash</span><br></pre></td></tr></table></figure><p>安装时先用cd切换到当前项目下。</p><p>如果浏览器使用可以直接引入：</p><script src="lodash.js"></script><p>添加lodash依赖：<br><img src="https://i.loli.net/2019/07/14/5d2b0c4c7c14a17367.jpg" alt></p><p>依赖成功后会在package.json中添加引用：<br><img src="https://i.loli.net/2019/07/14/5d2b0c9e03f1844597.jpg" alt></p><p>后台Node.js使用，可以引入模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//导入lodash模块</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var products=[];</span><br><span class="line">products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">//1、取出第一个元素</span><br><span class="line">var obj1=_.first(products);</span><br><span class="line">console.log(obj1.name);  //ZTE U880</span><br><span class="line"></span><br><span class="line">//2、取出最后一个元素</span><br><span class="line">var obj2=_.last(products);</span><br><span class="line">console.log(obj2.name);  //iPhone 7 Plus 128G</span><br><span class="line"></span><br><span class="line">//3、指定查找条件返回符合条件的索引</span><br><span class="line">var obj3=_.findIndex(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj3);  //2</span><br><span class="line"></span><br><span class="line">//4、指定查找条件返回查找到的对象</span><br><span class="line">var obj4=_.find(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj4);  //&#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;</span><br><span class="line"></span><br><span class="line">//5、排序</span><br><span class="line">var obj5=_.orderBy(products,[&quot;price&quot;,&quot;name&quot;],[&quot;desc&quot;,&quot;asc&quot;]);</span><br><span class="line">console.log(obj5);</span><br><span class="line"></span><br><span class="line">//[ &#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;HuWei 荣耀8&apos;, price: 1899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;ZTE U880&apos;, price: 899.8 &#125; ]</span><br><span class="line"></span><br><span class="line">//6、查找价格为1899.8的产品的key</span><br><span class="line">var obj6=_.findKey(products,&#123;price:1899.8&#125;);</span><br><span class="line">console.log(obj6);   //1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/14/5d2b0f023a83710965.jpg" alt></p><p>API的使用非常简单，但需要注意版本，可以现查现用，API地址：<a href="https://lodash.com/docs/4.17.2%20" target="_blank" rel="noopener">https://lodash.com/docs/4.17.2 </a></p><h2 id="5-8、参数"><a href="#5-8、参数" class="headerlink" title="5.8、参数"></a>5.8、参数</h2><h3 id="5-8-1、URL中的参数占位"><a href="#5-8-1、URL中的参数占位" class="headerlink" title="5.8.1、URL中的参数占位"></a>5.8.1、URL中的参数占位</h3><p>Checks route params (req.params), ex: /user/:id</p><p>127.0.0.1:3000/index，这种情况下，我们为了得到index，我们可以通过使用req.params得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式；</p><p><code>http://127.0.0.1:3000/pdt/9527/phone</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得产品根据Id</span><br><span class="line">router.get(&apos;/:id/:category&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(request.params.id+&quot;,&quot;+request.params.category);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b10e8e678f43145.jpg" alt></p><h3 id="5-8-2、URL中的QueryString"><a href="#5-8-2、URL中的QueryString" class="headerlink" title="5.8.2、URL中的QueryString"></a>5.8.2、URL中的QueryString</h3><p>Checks query string params (req.query), ex: ?id=12</p><p>127.0.0.1:3000/index?id=12，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用req.query.id就可以获得，类似于PHP的get方法；</p><p><code>http://127.0.0.1:3000/pdt/9527?name=jobs</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(&quot;name:&quot;+request.query.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b12be0371490358.jpg" alt></p><h3 id="5-8-3、HTTP正文中的参数"><a href="#5-8-3、HTTP正文中的参数" class="headerlink" title="5.8.3、HTTP正文中的参数"></a>5.8.3、HTTP正文中的参数</h3><p>在post请求中获得表单中的数据。</p><p>Checks urlencoded body params (req.body), ex: id=</p><p>127.0.0.1：300/index，然后post了一个id=2的值，这种方式是获取客户端post过来的数据，可以通过req.body.id获取，类似于PHP的post方法；</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222150412682-243382356.png" alt></p><p>页面：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &lt;%= title %&gt;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%pdts.forEach(function(pdt,index)&#123;%&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=index+1%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.name%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.price%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%&#125;);%&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=pdts[i].name%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            &lt;%if(typeof msg!=&quot;undefined&quot;)&#123;%&gt;</span><br><span class="line">                &lt;%=msg%&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">        &lt;form action=&quot;pdt/add&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                名称：&lt;input name=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                价格：&lt;input name=&quot;price&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/add&apos;,function(request,res,next)&#123;</span><br><span class="line">    var entity=&#123;name:request.body.name,price:request.body.price&#125;;</span><br><span class="line">    products.push(entity);</span><br><span class="line">      //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">      res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products,msg:&quot;添加成功&quot;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151340745-1374859267.png" alt></p><h2 id="5-9、JSON"><a href="#5-9、JSON" class="headerlink" title="5.9、JSON"></a>5.9、JSON</h2><p>如果需要Node.js向外提供返回JSON的接口，Express也是非常方便的，可以使用原来在浏览器中使用到的JSON对象，这是一个浏览器内置对象在服务可以直接使用：</p><p>将对象序列化成字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象</span><br><span class="line">var rose=&#123;&quot;name&quot;:&quot;Rose&quot;,&quot;weight&quot;:&quot;65&quot;&#125;;</span><br><span class="line">            //序列化成字符串</span><br><span class="line">            var str=JSON.stringify(rose);</span><br><span class="line">            alert(str);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151858839-27300214.png" alt></p><p>反序列化，将字符转换成对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成JavaScript对象</span><br><span class="line">var markStr=&apos;&#123;&quot;name&quot;:&quot;mark&quot;,&quot;weight&quot;:&quot;188&quot;&#125;&apos;;</span><br><span class="line">            var mark=JSON.parse(markStr);</span><br><span class="line">            alert(mark.name+&quot;，&quot;+mark.weight);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222152634417-1260078212.png" alt></p><p>Express已经封装了一个json方法，直接调用该方法就可以序列化对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/rest&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(products);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、RESTful（表述性状态转移）"><a href="#六、RESTful（表述性状态转移）" class="headerlink" title="六、RESTful（表述性状态转移）"></a>六、RESTful（表述性状态转移）</h1><p>REST是英文Representational State Transfer的缩写，中文称之为“表述性状态转移” 基于HTTP协议，是另一种服务架构，传递是JSON、POX（Plain Old XML）而不是SOAP格式的数据，充分利用HTTP谓词（Verb），侧重数据的传输，业务逻辑交给客户端自行处理</p><p>REST是一种分布式服务架构的风格约束，像Java、.Net（WCF、WebAPI）都有对该约束的实现，使URL变得更加有意义，更加简洁明了，如：</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>get请求 表示获得所有产品的第1个</p><p><a href="https://www.zhangguo.com/products/product" target="_blank" rel="noopener">https://www.zhangguo.com/products/product</a><br>post请求 表示添加一个产品</p><p><a href="https://www.zhangguo.com/products/1/price" target="_blank" rel="noopener">https://www.zhangguo.com/products/1/price</a><br>get请求 表示获得第1个产品的价格</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>delete请求 删除编号为1的产品</p><p>REST设计需要遵循的原则<br>网络上的所有事物都被抽象为资源（resource）；<br>每个资源对应一个唯一的资源标识符（resource identifier）；<br>通过通用的连接器接口（generic connector interface）对资源进行操作；<br>对资源的各种操作不会改变资源标识符；<br>所有的操作都是无状态的（stateless）</p><p>谓词<br><strong>GET</strong><br>表示查询操作，相当于Retrieve、Select操作<br><strong>POST</strong><br>表示插入操作，相当于Create，Insert操作<br><strong>PUT</strong><br>表示修改操作，相当于Update操作<br><strong>DELETE</strong><br>表示删除操作，相当于Delete操作</p><p>其它还有：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161223101344557-1727952968.png" alt></p><p>NodeJS+Express可以很容易的实现REST</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>application/json</li><li>res.setHeader(‘Content-Type’, ‘application/json;charset=utf-8’);</li></ul><p>示例代码cars.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var cars=[];</span><br><span class="line">cars.push(&#123;id:201701,name:&quot;BMW&quot;,price:190,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201702,name:&quot;BYD&quot;,price:25,speed:&quot;160km/h&quot;,color:&quot;红色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201703,name:&quot;Benz&quot;,price:300,speed:&quot;215km/h&quot;,color:&quot;蓝色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201704,name:&quot;Honda&quot;,price:190,speed:&quot;170km/h&quot;,color:&quot;黑色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201705,name:&quot;QQ&quot;,price:130,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line"></span><br><span class="line">/* Get */</span><br><span class="line">/*获得所有汽车*/</span><br><span class="line">/*url /cars/*/</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.json(cars);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Get*/</span><br><span class="line">/*获得汽车通过id*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">     //从路径中映射参数，转换成数字</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var car=_.find(cars,&#123;id:id&#125;);</span><br><span class="line">      res.json(car);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Post*/</span><br><span class="line">/*添加汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.post(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      car.id=_.last(cars).id+1;  //将编号修改为最后一辆车的编号+1</span><br><span class="line">      cars.push(car);  //将汽车对象添加到集合中</span><br><span class="line">      res.json(car);  //将添加成功的车以json的形式返回</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Put*/</span><br><span class="line">/*修改汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.put(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      console.log(req.body);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:parseInt(car.id)&#125;);  //根据id获得车在集合中的下标</span><br><span class="line"></span><br><span class="line">      cars[index]=car;  //替换原对象</span><br><span class="line">      //res.json(car);  //将修改后的车以json的形式返回</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;更新成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Delete*/</span><br><span class="line">/*删除汽车*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.delete(&apos;/id/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">      //获得url中的编号参数</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:id&#125;);  //根据id获得车在集合中的下标</span><br><span class="line">      cars.splice(index,1);   //在cars数组中删除下标从index开始的1条数据</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;删除成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>示例代码app.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line">var pdts = require(&apos;./routes/product&apos;);</span><br><span class="line">var task = require(&apos;./routes/task&apos;);</span><br><span class="line">var cars = require(&apos;./routes/cars&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line">app.use(&apos;/pdt&apos;, pdts);</span><br><span class="line">app.use(&quot;/task&quot;,task);</span><br><span class="line">app.use(&quot;/cars&quot;,cars);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得所有汽车  </li><li>url /cars/</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b27eb42dea22132.jpg" alt></p><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得汽车通过id</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b28e456cdf58111.jpg" alt></p><blockquote><p><strong>Post</strong></p></blockquote><ul><li>添加汽车  </li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b30e46f28836556.jpg" alt></p><p>参数中的json格式一定要使用标准格式，注意引号，注意Content-Type，默认的Content-Type类型是：application/x-www-form-urlencoded</p><blockquote><p><strong>Put</strong></p></blockquote><ul><li>修改汽车</li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3434410e778260.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b344cd080581595.jpg" alt></p><blockquote><p><strong>Delete</strong>  </p></blockquote><ul><li>删除汽车</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3526d5bff57574.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b35474e9c447189.jpg" alt></p><p><strong>node.js跨域</strong></p><p>修改app.js文件拦截所有的请求，修改头部</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">app.all(&apos;*&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">    res.header(&quot;X-Powered-By&quot;, &apos; 3.2.1&apos;);</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);</span><br><span class="line">    if(req.method == &quot;OPTIONS&quot;) &#123;</span><br><span class="line">        res.send(&quot;200&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2017.cnblogs.com/blog/63651/201801/63651-20180108142729785-1121920664.png" alt></p><h1 id="九、视频"><a href="#九、视频" class="headerlink" title="九、视频"></a>九、<a href="https://www.bilibili.com/video/av17977069" target="_blank" rel="noopener">视频</a></h1><p>From: <a href="https://www.cnblogs.com/best/p/6204116.html" target="_blank" rel="noopener">https://www.cnblogs.com/best/p/6204116.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Node.js" scheme="https://www.policx.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hexo front-matter 怎么写？</title>
    <link href="https://www.policx.com/front-matter/"/>
    <id>https://www.policx.com/front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-21T05:19:48.805Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr><tr><td>link</td><td>点击文章跳转地址</td><td></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/CSDNnews/"/>
    <id>https://www.policx.com/CSDNnews/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-18T06:25:40.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">hackernoon</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/news/BitTorrent/"/>
    <id>https://www.policx.com/news/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/notes/partner/"/>
    <id>https://www.policx.com/notes/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-18T06:23:38.164Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
      <category term="notes" scheme="https://www.policx.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/news/harddisk/"/>
    <id>https://www.policx.com/news/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/news/2019/"/>
    <id>https://www.policx.com/news/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-18T06:25:40.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/blog/netlify/"/>
    <id>https://www.policx.com/blog/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-18T06:25:47.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。<br><img src="https://githubpage-1255710107.cos.ap-shanghai.myqcloud.com/static/images/KNN/hexo.png" alt></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。<br>那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。<br>接下来我分步骤的跟大家来介绍我的部署方案。</p><h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/blog/hexo-theme-icarus/"/>
    <id>https://www.policx.com/blog/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-18T06:25:47.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f0332a3bdc91139.jpg" alt="easyhexo.com"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="https://www.policx.com/program/Git/git-del/"/>
    <id>https://www.policx.com/program/Git/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-18T06:22:40.943Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="git" scheme="https://www.policx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="https://www.policx.com/program/Python/python-excel/"/>
    <id>https://www.policx.com/program/Python/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-18T06:22:40.945Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="https://www.policx.com/program/Python/python-writer/"/>
    <id>https://www.policx.com/program/Python/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-18T06:22:40.945Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="https://www.policx.com/news/2018/"/>
    <id>https://www.policx.com/news/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-18T06:25:40.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="/post-images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="https://www.policx.com/program/Python/pymongo/"/>
    <id>https://www.policx.com/program/Python/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-18T06:22:40.944Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
</feed>
