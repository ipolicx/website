<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-07-12T09:30:58.040Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Front-matter</title>
    <link href="https://www.policx.com/2019/07/11/Front-matter/"/>
    <id>https://www.policx.com/2019/07/11/Front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-12T09:30:58.040Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/2019/07/11/20190711194445/"/>
    <id>https://www.policx.com/2019/07/11/20190711194445/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-11T04:28:06.224Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="http://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/%E8%8C%83%E5%BC%8F%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/%E8%8C%83%E5%BC%8F%E8%BD%AC%E6%8D%A2</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/2019/07/05/BitTorrent/"/>
    <id>https://www.policx.com/2019/07/05/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-08T15:20:42.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/2019/07/04/partner/"/>
    <id>https://www.policx.com/2019/07/04/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-12T09:50:03.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/2019/06/18/harddisk/"/>
    <id>https://www.policx.com/2019/06/18/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-08T15:20:35.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/2019/06/05/2019/"/>
    <id>https://www.policx.com/2019/06/05/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-12T09:40:14.384Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/2019/05/01/netlify/"/>
    <id>https://www.policx.com/2019/05/01/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-09T14:42:24.647Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。</p><div id="bushu"></div># 部署进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。接下来我分步骤的跟大家来介绍我的部署方案。<h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/2019/05/01/hexo-theme-icarus/"/>
    <id>https://www.policx.com/2019/05/01/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-09T14:25:12.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><ul><li>原文链接—&gt; <a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">easyhexo.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="https://www.policx.com/2018/09/17/git-del/"/>
    <id>https://www.policx.com/2018/09/17/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-07T04:27:26.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://www.policx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="https://www.policx.com/2018/06/19/python-excel/"/>
    <id>https://www.policx.com/2018/06/19/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-07T04:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="https://www.policx.com/2018/06/17/python-writer/"/>
    <id>https://www.policx.com/2018/06/17/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-07T04:36:07.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="https://www.policx.com/2018/06/05/2018/"/>
    <id>https://www.policx.com/2018/06/05/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-12T10:08:35.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="/post-images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymongo/"/>
    <id>https://www.policx.com/2018/05/02/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-07T04:35:29.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://www.policx.com/2018/05/02/mongodb/"/>
    <id>https://www.policx.com/2018/05/02/mongodb/</id>
    <published>2018-05-02T06:11:11.000Z</published>
    <updated>2019-07-12T09:59:16.906Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。</p><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库。</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。通常情况下，在一个集合中的所有文件都是类似或相关目的。</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。<br>下面给出的示例显示了一个博客网站，仅仅是一个逗号分隔的键值对的文档结构。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorial&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,20,2,15),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My second comments&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,25,7,45),</span><br><span class="line">         like: 5</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>MongoDB use DATABASE_NAME 用于创建数据库。该命令如果数据库不存在，将创建一个新的数据库， 否则将返回现有的数据库。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>use DATABASE语句的基本语法如下：<br><code>use DATABASE_NAME</code></p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">如果想创建一个数据库名称为 &lt;mydb&gt;, 那么 use DATABASE 语句应该如下：</span><br><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line"></span><br><span class="line">要检查当前选择的数据库使用命令 db</span><br><span class="line">&gt;db</span><br><span class="line">mydb</span><br><span class="line"></span><br><span class="line">如果想查询数据库列表，那么使用命令 show dbs.</span><br><span class="line">&gt;show dbs</span><br><span class="line">local     0.78125GB</span><br><span class="line">test      0.23012GB</span><br><span class="line"></span><br><span class="line">所创建的数据库（mydb）不存在于列表中。要显示的数据库，需要至少插入一个文档进去。</span><br><span class="line">&gt;db.movie.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;)</span><br><span class="line">&gt;show dbs</span><br><span class="line">local      0.78125GB</span><br><span class="line">mydb       0.23012GB</span><br><span class="line">test       0.23012GB</span><br></pre></td></tr></table></figure><p>MongoDB的默认数据库是test。 如果没有创建任何数据库，那么集合将被保存在测试数据库。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>MongoDB db.dropDatabase() 命令用于删除现有的数据库。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>dropDatabase()指令的基本语法如下：<br><code>db.dropDatabase()</code></p><p>这将删除选定的数据库。如果没有选择任何数据库，那么它会删除默认的“test”数据库</p><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>如果想删除新的数据库 <mydb>, 那么 dropDatabase() 命令将如下所示：</mydb></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;&#123; &quot;dropped&quot; : &quot;mydb&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>MongoDB 的 db.createCollection(name, options) 用于创建集合。 在命令中, name 是要创建集合的名称。 Options 是一个文档，用于指定集合的配置</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>String</td><td>要创建的集合的名称</td></tr><tr><td>Options</td><td>Document</td><td>（可选）指定有关内存大小和索引选项</td></tr></tbody></table><p>选项参数是可选的，所以需要指定集合的唯一名字。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>createCollection()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt;db.createCollection(&quot;mycollection&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以通过使用 show collections 命令来检查创建的集合</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;show collections</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><h3 id="选项列表"><a href="#选项列表" class="headerlink" title="选项列表"></a>选项列表</h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。</td></tr><tr><td>autoIndexID</td><td>Boolean</td><td>（可选）如果为true，自动创建索引_id字段。默认的值是 false.</td></tr><tr><td>size</td><td>number</td><td>（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。</td></tr><tr><td>max</td><td>number</td><td>（可选）指定上限集合允许的最大文件数。</td></tr></tbody></table><p>尽管插入文档，MongoDB首先检查字段集合的上限大小，那么它会检查最大字段。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法 :"></a>语法 :</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexID : true, size : 6142800, max : 10000 &#125; )</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.yiibai.insert(&#123;&quot;name&quot; : &quot;yiibai&quot;&#125;)</span><br><span class="line">&gt;show collections</span><br><span class="line">mycol</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br><span class="line">yiibai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>MongoDB 的 db.collection.drop() 用于从数据库中删除集合。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>drop() 命令的基本语法如下<br><code>db.COLLECTION_NAME.drop()</code></p><h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>下面给出的例子将删除给定名称的集合：mycollection</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.mycollection.drop()</span><br><span class="line">true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p>将数据插入到MongoDB集合，需要使用MongoDB 的 insert() 方法。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>insert()命令的基本语法如下：<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.insert(&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c),</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里 mycol 是我们的集合名称，它是在之前的教程中创建。如果集合不存在于数据库中，那么MongoDB创建此集合，然后插入文档进去。</p><p>在如果我们不指定_id参数插入的文档，那么 MongoDB 将为文档分配一个唯一的ObjectId。</p><p>_id 是12个字节十六进制数在一个集合的每个文档是唯一的。 12个字节被划分如下：<br>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</p><p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.post.insert([</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;NoSQL Database&apos;, </span><br><span class="line">   description: &apos;NoSQL database doesn&apos;t have tables&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 20, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p>要从集合查询MongoDB数据，需要使用MongoDB的 find()方法。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find()</code><br>find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p><code>&gt;db.mycol.find().pretty()</code></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>除了find()方法还有findOne()方法，仅返回一个文档。</p><h3 id="RDBMS-Where子句等效于MongoDB"><a href="#RDBMS-Where子句等效于MongoDB" class="headerlink" title="RDBMS Where子句等效于MongoDB"></a>RDBMS Where子句等效于MongoDB</h3><p>查询文档在一些条件的基础上，可以使用下面的操作</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>Equality</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td>db.mycol.find({“by”:”yiibai tutorials”}).pretty()</td><td>where by = ‘yiibai tutorials’</td></tr><tr><td>Less Than</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>Less Than Equals</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>Greater Than</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>Greater Than Equals</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>Not Equals</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="AND-在-MongoDB"><a href="#AND-在-MongoDB" class="headerlink" title="AND 在 MongoDB"></a>AND 在 MongoDB</h4><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>在 find()方法，如果您传递多个键通过”,”将它们分开，那么MongoDB对待它就如AND条件一样。基本语法如下所示：<br><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有教程含“yiibai tutorials”和其标题是“MongoDB Overview”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;yiibai tutorials&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>对于上面给出的例子相当于where子句：’ where by=’yiibai tutorials’ AND title=’MongoDB Overview’ ‘。可以传递任何数目的键-值对在find子句。</p><h4 id="OR-在-MongoDB"><a href="#OR-在-MongoDB" class="headerlink" title="OR 在 MongoDB"></a>OR 在 MongoDB</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><p>要查询基于OR条件的文件，需要使用$or关键字。OR的基本语法如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有撰写含有 ‘yiibai tutorials’ 或是标题为 ‘MongoDB Overview’ 的教程</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-AND-和-OR-在一起"><a href="#使用-AND-和-OR-在一起" class="headerlink" title="使用 AND 和 OR 在一起"></a>使用 AND 和 OR 在一起</h4><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子显示有喜欢数大于100 的文档，其标题要么是 ‘MongoDB Overview’ 或 ‘yiibai tutorials’. 等效于SQL的where子句：’where likes&gt;10 AND (by = ‘yiibai tutorials’ OR title = ‘MongoDB Overview’)’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai tutorials&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>MongoDB的update()和save()方法用于更新文档到一个集合。 update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。</p><h4 id="MongoDB-Update-方法"><a href="#MongoDB-Update-方法" class="headerlink" title="MongoDB Update() 方法"></a>MongoDB Update() 方法</h4><h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><p>update()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br></pre></td></tr></table></figure><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将设置其标题“MongoDB Overview”的文件为新标题为“New MongoDB Tutorial”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Tutorial Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 ‘multi’ 设置为 true。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="MongoDB-Save-方法"><a href="#MongoDB-Save-方法" class="headerlink" title="MongoDB Save() 方法"></a>MongoDB Save() 方法</h4><p>save() 方法取代，通过新文档到 save()方法</p><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><p>mongodb 的 save()方法如下所示的基本语法：<br><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><p>下面的例子将替换该文件_id ‘5983548781331adf45ec7’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.save(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>MongoDB 的 remove()方法用于从集合中删除文档。remove()方法接受两个参数。一个是标准缺失，第二是justOne标志<br>deletion criteria : 根据文件（可选）删除条件将被删除。<br>justOne : （可选）如果设置为true或1，然后取出只有一个文档。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>remove()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p><h6 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h6><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将删除所有的文件，其标题为 ‘MongoDB Overview’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Toturials Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="只删除一个"><a href="#只删除一个" class="headerlink" title="只删除一个"></a>只删除一个</h5><p>如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。<br><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p><h5 id="删除所有文件"><a href="#删除所有文件" class="headerlink" title="删除所有文件"></a>删除所有文件</h5><p>如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove()</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="MongoDB投影"><a href="#MongoDB投影" class="headerlink" title="MongoDB投影"></a>MongoDB投影</h4><p>mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。</p><p>MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。</p><p>语法</p><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find({},{KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示文档的标题，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意在执行find()方法时_id字段始终显示，如果不想要显示这个字段，那么需要将其设置为0</p><h5 id="限制文档"><a href="#限制文档" class="headerlink" title="限制文档"></a>限制文档</h5><p>MongoDB Limit() 方法</p><p>要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p>limit()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER)</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将只显示2个文档，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>如果不指定 limit()方法的参数数量，然后它会显示集合中的所有文档。</p><p>MongoDB Skip() 方法</p><p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。</p><p>语法</p><p>skip() 方法的基础语法如下所示：<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p><p>例子：</p><p>下面的例子将仅显示第二个文档。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，skip() 方法的默认值是 0</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p>要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。</p><p>语法</p><p>sort()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().sort({KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有如下数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示的文件排序按标题降序排序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;title&quot;:-1&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果不指定排序类型，那么 sort() 方法将以升序排列文档。</p><h4 id="MongoDB索引"><a href="#MongoDB索引" class="headerlink" title="MongoDB索引"></a>MongoDB索引</h4><p>索引支持查询高效率执行。如果没有索引，MongoDB必须扫描集合中的每一个文档，然后选择那些符合查询语句的文档。若需要 mongod 来处理大量数据，扫描是非常低效的。</p><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。</p><p>要创建索引，需要使用MongoDB的ensureIndex()方法。</p><p>语法</p><p>ensureIndex()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code></p><p>这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.</p><p>例子</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">在 ensureIndex()方法，可以通过多个字段，来创建多个字段索引。</span><br><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法还接受选项列表（这是可选），其列表如下：<br><img src="/post-images/1561132706992.png" alt></p><h4 id="MongoDB-聚合"><a href="#MongoDB-聚合" class="headerlink" title="MongoDB 聚合"></a>MongoDB 聚合</h4><p>聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。 在SQL中的count(*)，使用group by 与mongodb的聚合是等效的。 对于MongoDB的聚合，使用的是aggregate()方法。</p><p>语法</p><p>aggregate()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p><p>例子：</p><p>在集合中有以下数据：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai &apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;, </span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;, </span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;http://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在从上面的集合，如果想知道每一个用户编写的教程是多少，那么使用aggregate()方法，如下图所示的列表：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Yiibai Yiibai&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>用于上述用途将等效于sql查询： select by_user, count(*) from mycol group by by_user</code></pre><p>另外，在上述例子中，我们已经使用字段by_user进行分组并计算总和，也就是by_user 出现各个次数。一个列表中可用的聚集表达式。<br>    <img src="/post-images/1561132965786.png" alt></p><h4 id="MongoDB-复制"><a href="#MongoDB-复制" class="headerlink" title="MongoDB 复制"></a>MongoDB 复制</h4><p>复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。</p><h6 id="为什么要复制？"><a href="#为什么要复制？" class="headerlink" title="为什么要复制？"></a>为什么要复制？</h6><blockquote><pre><code>为了让数据安全数据的高（24*7）可用性灾难恢复无停机维护（如备份，索引重建，压缩）读取缩放（额外的副本来读取）副本集是透明的应用</code></pre></blockquote><h5 id="MongoDB复制的工作原理"><a href="#MongoDB复制的工作原理" class="headerlink" title="MongoDB复制的工作原理"></a>MongoDB复制的工作原理</h5><p>MongoDB通过使用副本集的复制来实现。副本集是一组承载同一个数据集的mongod实例。在副本的一个节点是接收所有的写操作主节点。所有的实例，次级，应用操作从主以便它们具有相同的数据集。副本集只能有一个主节点。</p><blockquote><pre><code>副本集是一组两个或更多个节点（通常至少3节点是必需的）。在副本集一个节点是主节点和其余的节点都是次要的。所有的数据复制是从主到次节点。在自动故障转移或维护时，选建立了主要和一个新的主节点被选择。故障节点的恢复后，再次加入副本集，并可以作为一个辅助节点。</code></pre></blockquote><p>mongodb复制的典型图如下图，其中客户端应用程序总是与主节点和主节点交互，然后将数据复制到辅助节点。<br><img src="/post-images/1561133216694.png" alt><br>副本集特征</p><ul><li>N个节点的集群</li><li>任何节点可为原发/主节点</li><li>所有的写操作进入到主节点</li><li>自动故障转移</li><li>自动恢复</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.policx.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MySQL 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymysql/"/>
    <id>https://www.policx.com/2018/05/02/pymysql/</id>
    <published>2018-05-02T03:14:27.000Z</published>
    <updated>2019-07-07T04:35:38.926Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是-PyMySQL？"><a href="#什么是-PyMySQL？" class="headerlink" title="什么是 PyMySQL？"></a>什么是 PyMySQL？</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><a id="more"></a> <h2 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h2><p>在文件中引入模块</p><p><code>import pymysql</code></p><h3 id="1-Connection对象"><a href="#1-Connection对象" class="headerlink" title="1.Connection对象"></a>1.Connection对象</h3><p>•  用于建立与数据库的连接<br>•  创建对象：调用connect()方法<br>conn=connect(参数列表)<br>•  参数host：连接的mysql主机，如果本机是’localhost’<br>•  参数port：连接的mysql主机的端口，默认是3306<br>•  参数db：数据库的名称<br>•  参数user：连接的用户名<br>•  参数password：连接的密码<br>•  参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</p><h3 id="2-对象的方法"><a href="#2-对象的方法" class="headerlink" title="2.对象的方法"></a>2.对象的方法</h3><p>•  close()关闭连接<br>•  commit()事务，所以需要提交才会生效<br>•  rollback()事务，放弃之前的操作<br>•  cursor()返回Cursor对象，用于执行sql语句并获得结果</p><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><p>•  执行sql语句<br>•  创建对象：调用Connection对象的cursor()方法<br>cursor1=conn.cursor()</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>•  close()关闭<br>•  execute(operation [, parameters ])执行语句，返回受影响的行数<br>•  fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组<br>•  next()执行查询语句时，获取当前行的下一行<br>•  fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回<br>•  scroll(value[,mode])将行指针移动到某个位置<br>•  mode表示移动的方式<br>•  mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动。相对的<br>•  mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0，绝对的。</p><h4 id="举个例子便于理解"><a href="#举个例子便于理解" class="headerlink" title="举个例子便于理解"></a>举个例子便于理解</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 导入python操作mysql的模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> pymysql</span><br><span class="line"><span class="hljs-comment"># 获取连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="hljs-string">'127.0.0.1'</span>, user=<span class="hljs-string">'root'</span>, password=<span class="hljs-string">'123456'</span>, database=<span class="hljs-string">'python01'</span>, port=<span class="hljs-number">3306</span>, charset=<span class="hljs-string">'utf8'</span>)</span><br><span class="line"><span class="hljs-comment"># 获取执行工具</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="hljs-comment"># sql语句,增删改</span></span><br><span class="line"><span class="hljs-comment">#sql = 'select birthday from t_user'</span></span><br><span class="line">sql = <span class="hljs-string">'select id,name,pwd,birthday from t_user'</span></span><br><span class="line"><span class="hljs-comment"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span></span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(<span class="hljs-string">'查询的结果有%s条数据'</span>%count)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取第一行</span></span><br><span class="line">dateOne = cur.fetchone()</span><br><span class="line">print(dateOne)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向上移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向下移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'absolute'</span>)   绝对的，这里指的是第一行</span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'relative'</span>)   相对的</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取所有行的数据</span></span><br><span class="line">dataAll = cur.fetchall()</span><br><span class="line">print(dataAll)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">     print(temp)</span><br><span class="line">     print(dataAll[<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])      <span class="hljs-comment">#dataAll[-1]得到的是一个用户所有的信息，dataAll[-1][2]获取最后一个人的密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> cur:</span><br><span class="line">     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-string">'id:%s,name:%s,pwd:%s,birthday:%s'</span></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">    print(s%(temp[<span class="hljs-number">0</span>],temp[<span class="hljs-number">1</span>],temp[<span class="hljs-number">2</span>],temp[<span class="hljs-number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-对象的属性"><a href="#3-对象的属性" class="headerlink" title="3.对象的属性"></a>3.对象的属性</h3><p>•  rowcount只读属性，表示最近一次execute()执行后受影响的行数<br>•  connection获得当前连接对象</p><h3 id="2-增删改查-CRUD"><a href="#2-增删改查-CRUD" class="headerlink" title="2.增删改查(CRUD)"></a>2.增删改查(CRUD)</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>•  创建testInsert.py文件，向学生表中插入一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;insert into students(sname) values(&apos;张良&apos;)&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p>•  创建testUpdate.py文件，修改学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;update students set sname=&apos;刘邦&apos; where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>•  创建testDelete.py文件，删除学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8 import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;delete from students where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>•  创建testSelectOne.py文件，查询一条学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Pymysql try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>•  创建testSelectMany.py文件，查询全部学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf8 import Pymysql</span><br><span class="line">try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="实例一：参数"><a href="#实例一：参数" class="headerlink" title="实例一：参数"></a>实例一：参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改，sql注入</span><br><span class="line">sql = &apos;insert into t_user(name,pwd,birthday) values(%s,%s,%s)&apos;</span><br><span class="line"># 参数列表</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = input(&apos;输入生日:&apos;)     # 2017年10月01日--&gt;日期struct_time(---&gt;2017-10-01)</span><br><span class="line">birthday = time.strptime(birthday,&apos;%Y年%m月%d日&apos;)      #这里我们就用到了时间与字符串的相互转换(详情见MySQL高级)</span><br><span class="line"></span><br><span class="line">params = [name,pwd,birthday]</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql,params)</span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">print(&apos;受影响的行数:%s&apos;%count)</span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例二：抛出异常"><a href="#实例二：抛出异常" class="headerlink" title="实例二：抛出异常"></a>实例二：抛出异常</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    conn = None</span><br><span class="line">    cur = None</span><br><span class="line">    # 获取连接对象</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">                           user=&apos;root&apos;,</span><br><span class="line">                           password=&apos;123456&apos;,</span><br><span class="line">                           database=&apos;python01&apos;,</span><br><span class="line">                           port=3306,</span><br><span class="line">                           charset=&apos;utf8&apos;)</span><br><span class="line">    # 模拟异常</span><br><span class="line">    # a = 1 / 0</span><br><span class="line">    # 获取执行工具</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    # sql语句,增删改</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd,birthday) values(&quot;小伊&quot;,&quot;123456&quot;,str_to_date(&quot;2017年10月20日&quot;,&quot;%Y年%m月%d日&quot;))&apos;</span><br><span class="line">    # 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">    count = cur.execute(sql)</span><br><span class="line">    # 提交</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(&apos;受影响的行数:%s&apos; % count)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    # 打印异常信息，测试时候使用，项目上线，去掉</span><br><span class="line">    print(str(ex))</span><br><span class="line">    # 将异常继续抛出</span><br><span class="line">    # raise</span><br><span class="line">finally:</span><br><span class="line">    if cur != None:</span><br><span class="line">        cur.close()</span><br><span class="line">    if conn != None:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例三："><a href="#实例三：" class="headerlink" title="实例三："></a>实例三：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改</span><br><span class="line">#sql = &apos;select birthday from t_user&apos;</span><br><span class="line">sql = &apos;select id,name,pwd,birthday from t_user&apos;</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(&apos;查询的结果有%s条数据&apos;%count)</span><br><span class="line"></span><br><span class="line">#获取第一行</span><br><span class="line"># dateOne = cur.fetchone()</span><br><span class="line"># print(dateOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for temp in cur:</span><br><span class="line">#     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;id:%s,name:%s,pwd:%s,birthday:%s&apos;</span><br><span class="line">for temp in dataAll:</span><br><span class="line">    print(s%(temp[0],temp[1],temp[2],temp[3]))</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h3><p>这个库的名字：mySqlHelper</p><p> python操作mysql进行增删改查的封装</p><pre><code>1、增删改，代码类似2、查询代码分析1、获取连接对象2、sql语句不同，参数不同3、获取执行对象    增删改    查询        1、fetchone        2、fetchall4、处理结果5、关闭</code></pre><h4 id="面向对象-建立类，封装属性和函数"><a href="#面向对象-建立类，封装属性和函数" class="headerlink" title="面向对象  建立类，封装属性和函数"></a>面向对象  建立类，封装属性和函数</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">class MysqlHelper:</span><br><span class="line">    &apos;&apos;&apos;python操作mysql的增删改查的封装&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, host, user, password, database, port=3306, charset=&apos;utf8&apos;):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化参数</span><br><span class="line">        :param host:        主机</span><br><span class="line">        :param user:        用户名</span><br><span class="line">        :param password:    密码</span><br><span class="line">        :param database:    数据库</span><br><span class="line">        :param port:        端口号，默认是3306</span><br><span class="line">        :param charset:     编码，默认是utf8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        获取连接对象和执行对象</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.conn = pymysql.connect(host=self.host,</span><br><span class="line">                                    user=self.user,</span><br><span class="line">                                    password=self.password,</span><br><span class="line">                                    database=self.database,</span><br><span class="line">                                    port=self.port,</span><br><span class="line">                                    charset=self.charset)</span><br><span class="line"></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    def fetchone(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数元组，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataOne = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataOne = self.cur.fetchone()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataOne</span><br><span class="line"></span><br><span class="line">    def fetchall(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数列表，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataall = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataall = self.cur.fetchall()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataall</span><br><span class="line"></span><br><span class="line">    def __item(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行增删改</span><br><span class="line">        :param sql:           sql语句</span><br><span class="line">        :param params:        sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:              受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        count = 0</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行修改</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def insert(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行新增</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def delete(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行删除</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        关闭执行工具和连接对象</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if self.cur != None:</span><br><span class="line">            self.cur.close()</span><br><span class="line">        if self.conn != None:</span><br><span class="line">            self.conn.close()</span><br></pre></td></tr></table></figure><h4 id="1-测试查询多条数据"><a href="#1-测试查询多条数据" class="headerlink" title="1.测试查询多条数据"></a>1.测试查询多条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where name = %s and id &gt; %s&apos;</span><br><span class="line"># params</span><br><span class="line">params = [&apos;小茗&apos;,1]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchall(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    for temp in data:</span><br><span class="line">        print(temp)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br><span class="line"></span><br><span class="line">helper.close()</span><br></pre></td></tr></table></figure><h4 id="2-测试查询一条数据"><a href="#2-测试查询一条数据" class="headerlink" title="2.测试查询一条数据"></a>2.测试查询一条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where id = %s&apos;</span><br><span class="line">#sql = &apos;select * from t_user where id = 1&apos;</span><br><span class="line"># params</span><br><span class="line">params = [2]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchone(sql, params)</span><br><span class="line">#data = helper.fetchone(sql)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    print(data)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br></pre></td></tr></table></figure><h4 id="3-测试增删改"><a href="#3-测试增删改" class="headerlink" title="3.测试增删改"></a>3.测试增删改</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;update t_user set name =%s,pwd=%s,birthday=%s where id=%s&apos;</span><br><span class="line"># params</span><br><span class="line">id = input(&apos;输入编号:&apos;)</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = time.strptime(input(&apos;输入生日:&apos;), &apos;%Y年%m月%d日&apos;)</span><br><span class="line">params = [name, pwd, birthday,id]</span><br><span class="line"># 执行</span><br><span class="line">count = helper.update(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if count:</span><br><span class="line">    print(&apos;操作成功.&apos;)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;操作失败.&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-登录和注册"><a href="#4-登录和注册" class="headerlink" title="4.登录和注册"></a>4.登录和注册</h4><p>登录和注册的时候需要对密码进行加密</p><p>注意：</p><p>•  需要对密码进行加密<br>•  如果使用md5加密，则密码包含32个字符<br>•  如果使用sha1加密，则密码包含40个字符，这里使用这种方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table userinfos(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    uname varchar(20),</span><br><span class="line">    upwd char(40),</span><br><span class="line">    isdelete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">ret = doPwd(&apos;123&apos;)</span><br><span class="line">print(ret)</span><br><span class="line">结果：40bd001563085fc35165329ea1ff5c5ecbdbbeef</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">-- 插入如下数据，用户名为123,密码为123,这是sha1加密后的值</span><br><span class="line"></span><br><span class="line">insert into userinfos </span><br><span class="line">values(1,&apos;123&apos;,&apos;40bd001563085fc35165329ea1ff5c5ecbdbbeef&apos;,0);</span><br></pre></td></tr></table></figure><h4 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from mysqlHelper import MysqlHelper</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    &apos;&apos;&apos;登录&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    #加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;select * from t_user where name=%s and pwd=%s&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    data = helper.fetchone(sql, params)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;登录成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;登录失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doPwd(pwd):</span><br><span class="line">    &apos;&apos;&apos;sha1编码&apos;&apos;&apos;</span><br><span class="line">    mysha1 = hashlib.sha1()</span><br><span class="line">    mysha1.update(pwd.encode(&apos;utf-8&apos;))</span><br><span class="line">    pwd = mysha1.hexdigest()</span><br><span class="line">    return pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    &apos;&apos;&apos;注册&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    # 加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd) values(%s,%s)&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    count = helper.insert(sql, params)</span><br><span class="line">    if count:</span><br><span class="line">        print(&apos;操作成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;操作失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #register()</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PyMySQL？&quot;&gt;&lt;a href=&quot;#什么是-PyMySQL？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PyMySQL？&quot;&gt;&lt;/a&gt;什么是 PyMySQL？&lt;/h2&gt;&lt;p&gt;PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。&lt;/p&gt;
&lt;p&gt;PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django笔记</title>
    <link href="https://www.policx.com/2018/04/18/django-bi-ji/"/>
    <id>https://www.policx.com/2018/04/18/django-bi-ji/</id>
    <published>2018-04-17T17:00:16.000Z</published>
    <updated>2019-07-12T10:07:09.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p><a id="more"></a><h2 id="一-版本选择"><a href="#一-版本选择" class="headerlink" title="一. 版本选择"></a>一. 版本选择</h2><p>Django 2.0.x 支持 Python 3.4, 3.5 和 3.6 （注意，不再支持 Python 2）   </p><h2 id="二-安装-Django"><a href="#二-安装-Django" class="headerlink" title="二. 安装 Django"></a><strong>二. 安装 Django</strong></h2><p><strong>2.1. 用 pip 来安装</strong></p><p><strong>2.1.1 需要先安装pip</strong></p><p>(1). Linux, Mac OSX, Windows 下都可用 get-pip.py 来安装<br>pip：<a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/installing.html</a>  </p><p>或者直接下载：<a href="https://bootstrap.pypa.io/get-pip.py" title="get-pip.py" target="_blank" rel="noopener">get-pip.py</a> 然后运行在终端运行 <strong>python get-pip.py 就可以安装 pip。</strong></p><p>Note: 也可以下载 pip 源码包，运行 <strong>python setup.py install</strong> 进行安装 </p><p><strong>2.1.2 利用 pip 安装 Django</strong></p><p><code>（sudo) pip install Django    或者(sudo) pip install Django==1.8.16 或者 pip install Django==1.11.8</code>    </p><p>如果想升级 pip 可以用： </p><pre><code>(sudo) pip install --upgrade pip</code></pre><p><strong>2.2. 下载源码安装</strong>  </p><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">https://www.djangoproject.com/download/</a></p><p>如果是源码包, 比如 django-1.11.8.tar.gz </p><p><strong>2.2.1 Linux 或 Mac 下</strong></p><pre><code>tar -xvf django-1.11.8.tar.gzcd django-1.11.8(sudo) python setup.py install</code></pre><h2 id="三-检查是否安装成功"><a href="#三-检查是否安装成功" class="headerlink" title="三. 检查是否安装成功"></a><strong>三. 检查是否安装成功</strong></h2><p>终端上输入 python ,点击 Enter，进行 python 环境</p><pre><code>&gt;&gt;&gt; import django&gt;&gt;&gt; django.VERSION(1, 11, 8, &apos;final&apos;, 0)&gt;&gt;&gt; &gt;&gt;&gt; django.get_version()&apos;1.11.8&apos;</code></pre><p>如果运行后看到版本号，就证明安装成功了！ </p><h2 id="四-搭建多个互不干扰的开发环境（可选）"><a href="#四-搭建多个互不干扰的开发环境（可选）" class="headerlink" title="四. 搭建多个互不干扰的开发环境（可选）"></a><strong>四. 搭建多个互不干扰的开发环境（可选）</strong></h2><p>我们有的时候会发现，一个电脑上有多个项目，一个依赖 Django 1.8，另一个比较旧的项目又要用 Django 1.5，这时候怎么办呢？ </p><p>我们需要一个依赖包管理的工具来处理不同的环境。 </p><h3 id="4-1-虚拟环境依赖安装"><a href="#4-1-虚拟环境依赖安装" class="headerlink" title="4.1 虚拟环境依赖安装"></a>4.1 虚拟环境依赖安装</h3><p>开发会用 virtualenv 来管理多个开发环境 </p><p><strong>Linux/MacOS 下</strong></p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了 </p><pre><code># 安装:(sudo) pip install virtualenv virtualenvwrapper</code></pre><p>修改~/.bash_profile或其它环境变量相关文件(如 .bashrc 或用 ZSH 之后的 .zshrc)，添加以下语句  </p><pre><code>export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/workspacesource /usr/local/bin/virtualenvwrapper.sh</code></pre><p>修改后使之立即生效(也可以重启终端使之生效)： </p><pre><code>source ~/.bash_profile</code></pre><h3 id="4-2-虚拟环境使用方法："><a href="#4-2-虚拟环境使用方法：" class="headerlink" title="4.2 虚拟环境使用方法："></a><strong>4.2 虚拟环境使用方法：</strong></h3><p><strong>mkvirtualenv zqxt：创建运行环境zqxt</strong></p><p><strong>workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境</strong></p><p><strong>deactivate</strong>: 退出终端环境</p><p><strong>其它的：</strong></p><p><strong>rmvirtualenv</strong> ENV：删除运行环境ENV </p><p><strong>mkproject</strong> mic：创建mic项目和运行环境mic </p><p><strong>mktmpenv</strong>：创建临时运行环境 </p><p><strong>lsvirtualenv</strong>: 列出可用的运行环境 </p><p><strong>lssitepackages</strong>: 列出当前环境安装了的包 </p><p>创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django部署——uwsgi+Nginx</title>
    <link href="https://www.policx.com/2018/04/17/django/"/>
    <id>https://www.policx.com/2018/04/17/django/</id>
    <published>2018-04-17T09:42:04.000Z</published>
    <updated>2019-07-12T10:06:56.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!</p><a id="more"></a><p><img src="/post-images/1560768371650.png" alt><br>环境：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3.6</span><br><span class="line">centos 7</span><br><span class="line">Django1.11</span><br></pre></td></tr></table></figure><h2 id="1、本地跑起来Django"><a href="#1、本地跑起来Django" class="headerlink" title="1、本地跑起来Django"></a>1、本地跑起来Django</h2><p>这里不讲Django项目实施过程，假设你已经写了一个Django项目，并且在本地127.0.0.1:8000能够跑起来。喏，给你个参考，项目大概长这样：<br><img src="/post-images/1560764670814.png" alt></p><ul><li>kindle目录为我创建的Django App</li></ul><h2 id="2、修改项目配置"><a href="#2、修改项目配置" class="headerlink" title="2、修改项目配置"></a>2、修改项目配置</h2><p>也就是项目目录下的settings.py文件，主要强调几个地方：</p><p>①关闭DEBUG模式：<br><img src="/post-images/1560764736238.png" alt><br>②修改ALLOWED_HOSTS：<br><img src="/post-images/1560764863424.png" alt><br>③配置静态文件存放路径：<br><img src="/post-images/1560764833026.png" alt></p><p>修改好配置之后执行:<br><code>python manage.py collectstatic</code><br>将项目用到的静态文件复制到项目根目录下的static文件中<br><img src="/post-images/1560764930146.png" alt></p><h2 id="3、安装uwsgi和Nginx"><a href="#3、安装uwsgi和Nginx" class="headerlink" title="3、安装uwsgi和Nginx"></a>3、安装uwsgi和Nginx</h2><p>这个没什么说的。。。在自己的云服务器上装好这两个工具<br>安装好uwsgi后最好验证一下，验证方法：<br>创建一个test.py文件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)])</span><br><span class="line">    return [b&apos;Hello world!&apos;]    #python3</span><br><span class="line">    # return [&apos;Hello world!&apos;]    #python2</span><br></pre></td></tr></table></figure><p>启动uwsgi服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --wsgi-file test.py</span><br></pre></td></tr></table></figure><p>如果可以正常启动而不报错那就应该没问题，不放心的话再在终端验证一下：<br><code>wget http://127.0.0.1:8000</code><br>看一下能否正确获取内容</p><h2 id="4、配置项目的uwsgi"><a href="#4、配置项目的uwsgi" class="headerlink" title="4、配置项目的uwsgi"></a>4、配置项目的uwsgi</h2><p>在项目所在文件夹下创建uwsgi.ini配置文件，也就是这里:<br><img src="/post-images/1560765049955.png" alt><br>在uwsgi.ini里进行如下配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># Django-related settings</span><br><span class="line"> </span><br><span class="line"># 这里的端口可以根据自己需要设定</span><br><span class="line">socket = 127.0.0.1:8001        </span><br><span class="line"> </span><br><span class="line"># the base directory (full path)</span><br><span class="line"># 这个是Django项目的根目录，也就是包含App的那个目录，仔细对照上图</span><br><span class="line">chdir           = /home/python/book2kindle</span><br><span class="line"> </span><br><span class="line"># Django s wsgi file</span><br><span class="line"># 这里是项目名(不是App名).wsgi</span><br><span class="line">module          = book2kindle.wsgi</span><br><span class="line"> </span><br><span class="line"># process-related settings</span><br><span class="line"># master</span><br><span class="line">master          = true</span><br><span class="line"> </span><br><span class="line"># maximum number of worker processes</span><br><span class="line">processes       = 32</span><br><span class="line"> </span><br><span class="line"># ... with appropriate permissions - may be needed</span><br><span class="line"># chmod-socket    = 664</span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum          = true</span><br><span class="line"> </span><br><span class="line">plugin python = true</span><br><span class="line"> </span><br><span class="line"># 这个是项目的虚拟python环境，如果没用虚拟环境，可以不设定</span><br><span class="line">home = /home/python/book2kindle_env</span><br></pre></td></tr></table></figure><h2 id="5、配置项目的nginx"><a href="#5、配置项目的nginx" class="headerlink" title="5、配置项目的nginx"></a>5、配置项目的nginx</h2><p>找到nginx的配置文件夹，centos7的nginx配置文件在/etc/nginx下，该路径下有一个nginx.conf总配置文件，还有两个文件夹./conf.d、./default.d，我们将nginx.conf复制一份到conf.d文件夹下，命名为nginx.conf（或者项目名.conf）进行如下修改（根据中文注释进行相应配置即可）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream django &#123;</span><br><span class="line">        # 注意这里的server要和uwsgi.ini配置文件中的socket保持一致</span><br><span class="line">        server 127.0.0.1:8002; # for a web port socket</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  xxx.com;  # 这里填自己的域名或者服务器的ip（决定你今后访问网站的方式）</span><br><span class="line">        charset      utf-8;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        location / &#123;</span><br><span class="line">        root        /home/python/book2kindle/kindle;  # 这是Django App的路径</span><br><span class="line">            uwsgi_pass  django;</span><br><span class="line">            include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">        &#125;</span><br><span class="line">        location /static &#123;</span><br><span class="line">            # Django项目静态文件的路径</span><br><span class="line">            alias /home/python/book2kindle/static; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、启动uwsgi和nginx"><a href="#6、启动uwsgi和nginx" class="headerlink" title="6、启动uwsgi和nginx"></a>6、启动uwsgi和nginx</h2><p>进入uwsgi.ini文件夹下执行：<br><code>uwsgi --ini uwsgi.ini</code><br>在终端执行：<br><code>service nginx restart</code><br>然后就可以根据域名（前提是要将域名解析到服务器ip地址）或者服务器ip来访问网站了！</p><p>OK，完事！就是这么简单！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>2018创业记：如何选择合伙人？</title>
    <link href="https://www.policx.com/2018/03/25/chuangye/"/>
    <id>https://www.policx.com/2018/03/25/chuangye/</id>
    <published>2018-03-25T13:02:42.000Z</published>
    <updated>2019-07-07T04:22:05.224Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><a id="more"></a><h2 id="创业路上危机四伏，如何破局？"><a href="#创业路上危机四伏，如何破局？" class="headerlink" title="创业路上危机四伏，如何破局？"></a>创业路上危机四伏，如何破局？</h2></li></ul><p>很多朋友在2018年做出了改变，迈出了新的一步。比如身边几位朋友正摩拳擦掌准备创业。然而，看别人创业和自己创业完全是两回事儿，见得再多，自己趟水时也难免有所顾虑。</p><p>在跟他们聊过之后，我们发现了他们普遍面临的一个课题：如何选择合伙人?这是身经百战的连续创业者也很难驾轻就熟的一个课题，今天我们就来一起聊聊。本文将从能不能和朋友一起创业、合伙人应该与我互补还是相似、如何判断双方是否志同道合、如何应对常见的分歧几个部分展开来说。</p><p>风物长宜放眼量，抱持开阔的胸襟、敏锐的判断、坚韧的意志，相信大家能够与志同道合的伙伴一起，越过山丘，携手站上梦想之巅。</p><h2 id="能不能和朋友一起创业？"><a href="#能不能和朋友一起创业？" class="headerlink" title="能不能和朋友一起创业？"></a>能不能和朋友一起创业？</h2><p>在创业初期，创业者选择合伙人往往会从身边的朋友“下手”。</p><p>一起创业可以说是认清一个朋友的最好方式。一篇名为《友谊的代价》的论文，考察了3510个风险投资者，以及他们在1975-2003年间11895个投资项目。</p><p>论文写道，有的人选择与自己能力相当的人合作，比如同是名校毕业；但更多的人选择与自己的熟人合作，比如曾经的同学或同事。结果表明，按能力搭档可以增加投资的成功概率，而找熟人搭档，则会明显降低成功的可能性。</p><p>所有人都喜欢强联系，但关系是关系，工作归工作。现在社会学已经有了足够多的证据说明：对工作来说，同乡会和校友录并不是扩展人脉的好地方。《中国合伙人》这部电影上映后，“千万别跟好朋友合伙开公司”也成了热议话题。电影的最后，三位合伙人分道扬镳，而剧本的原型——新东方的三位创始人也以“分家”收场。</p><p>当然，朋友合伙创业成功的案例也不在少数，况且，长期的伙伴关系更有助于共同面对创业过程中的艰难险阻，团队也更容易在创业初期获得投资人的青睐。如果在寻找合伙人的过程中，你觉得还是某个朋友更适合，那么一定要在合作之前约法三章，考虑到最坏的情况，提前用书面合同的方式确定双方的责权利，用规章制度来约束指导双方的行为，而不是靠人情关系。</p><p>中间一旦觉得发生了问题，你就必须考虑一下能否继续合作下去。其实，很多合作者走不到最后就是因为中间的小问题没有解决，一点一点积累最后爆发出来。</p><p>因此，能否和朋友一起创业这个问题，需要辩证思考。如果朋友间相互了解对方的个性和能力，工作中能做到分工明确，用规章制度来规范双方的行为，及时解决小矛盾，相互照顾，一起分担，共同奋斗，那么创业成功就会成为大概率事件。</p><h2 id="合伙人应该与我互补还是相似？"><a href="#合伙人应该与我互补还是相似？" class="headerlink" title="合伙人应该与我互补还是相似？"></a>合伙人应该与我互补还是相似？</h2><p>一个较为合理的答案是：理念和价值观上要相似，能力和经验上要互补。</p><p>理念和价值观上的相近，可以保证你们在重大原则问题上的判断是比较一致的，不至于出现根本性的冲突。这些重大的原则问题包括企业的战略方向、利益分配机制、做事的基本底线等等。</p><p>在这些问题上出现不同意见，通常很难取得共识。因为个性和价值观的形成，通常都不是一朝一夕的事情，也就是我们常说的“江山易改，本性难移”。如果在创业的艰难环境下，双方还要来磨合这个层面的东西，就会非常痛苦。</p><p>能力和经验上的互补相对更好理解。你擅长产品，他专于研发；你有丰富的运营经验，他则对于商业模式的建立更有心得；你对数字不敏感，他则是投资和财务领域的资深人士。这些都是很好的互补。</p><p>互补可以让你们在具体事情的推进中事半功倍，并建立起对于对方在专业领域的依靠和信任。人不可能是全能的，如果一切未知的领域都需要你自己来摸索，费时费力不说，风险还很大。</p><p>对于相似还是互补这个问题的解读，还可以反向进行。比如你们是能力经验上的相近，而在理念上互补，你可以想象一下是个什么局面，一定是你不会的他也不会，你觉得对的他觉得不对，那就真的很难合作下去了。</p><h2 id="如何判断双方是否志同道合？"><a href="#如何判断双方是否志同道合？" class="headerlink" title="如何判断双方是否志同道合？"></a>如何判断双方是否志同道合？</h2><p>对于这个问题，不同的人可能会给出非常不同的答案。雷军就曾说过，他找人有两个要素：“一要最专业，小米的合伙人都是各管一块，这样能保证整个决策非常快，把业务交给他，要能实打实做出成绩来；二要最合适，主要是指要有创业心态，对所做的事要极度喜欢，有共同的愿景，这样就会有很强的驱动力。”</p><p>雷军说，他在三个月的时间里见了超过100位做硬件的人选，终于找到了负责硬件的联合创始人周光平博士，两人第一次见面就谈了12个小时。</p><p>而周鸿祎表示，他会选择具备这四种素质的合伙人：首先应该有创业精神；其次要有很强的学习能力；第三，要有很好的开放合作心态；此外，还要能自我激励，自我驱动，同样一件事，用打工的心态和用创业的心态做，效果完全不一样。</p><p>虽然答案因人而异，但仍然可以总结出一些判断标准，以下几条可为你选择合伙人时提供参考。</p><h3 id="1、关系有一定的深度和广度，彼此信任"><a href="#1、关系有一定的深度和广度，彼此信任" class="headerlink" title="1、关系有一定的深度和广度，彼此信任"></a>1、关系有一定的深度和广度，彼此信任</h3><p>共事且维持朋友关系多年的创业团队关系更深，有可能经受住紧张和冲突的考验。合伙人未必需要成为最要好的朋友，但如果他们相互喜欢的话事情可能会更好办些。更重要的是，创始人之间应该尊重彼此以及他们给团队带来的不同能力。不信任合伙人的能力会导致手伸过头，还可能会导致控制权之争。在这种窝里斗的情况下大部分的合作关系都无法维系。</p><h3 id="2、了解彼此的优势和劣势，分工明确"><a href="#2、了解彼此的优势和劣势，分工明确" class="headerlink" title="2、了解彼此的优势和劣势，分工明确"></a>2、了解彼此的优势和劣势，分工明确</h3><p>尊重彼此的技能和优势并不意味着创始人就不需要审视合伙人的弱点了。友谊更久自然也会更了解某人的特长和技能。这些不同的技能有助于创始人团队自然地分清责任、角色，在某些情况下还可以分清头衔。根据每一位合伙人的技能明确划分职责，对创业的帮助很大。做事的时候每个人要有独立的角色，但同时永远要对其他合伙人的反馈持开放态度。</p><h3 id="3、确保所有合伙人对成功和失败的定义一致"><a href="#3、确保所有合伙人对成功和失败的定义一致" class="headerlink" title="3、确保所有合伙人对成功和失败的定义一致"></a>3、确保所有合伙人对成功和失败的定义一致</h3><p>韧性最强的创始人不会从财务的角度去衡量自己的初创企业是否成功，相反，他们会从使命的角度去衡量。他们的初创企业只是追求实现使命的手段。但是，并不是所有的创始人都这么看，甚至一开始关注使命的创始人有时候到后面也会转向考虑财务方面的事情。</p><p>有的创始人可能志存高远，为了尽快做大愿意烧很多钱，而有的人希望逐步打磨产品，限制人数规模和保留现金尺度。不仅对成功的认知会影响运营决策，对失败的认知同样会起作用。</p><p>在创业过程中，其中一位合伙人急着退出的故事屡见不鲜，因此这个教训值得一提再提。对于拥有成功企业的创始人来说，避免在这个问题上发生冲突的关键是定期讨论这件事。应该在公司早期就设定好目标，并且对这个话题进行定期复议。</p><h3 id="4、所有合伙人均应对股权分配满意"><a href="#4、所有合伙人均应对股权分配满意" class="headerlink" title="4、所有合伙人均应对股权分配满意"></a>4、所有合伙人均应对股权分配满意</h3><p>哈佛教授Wasserman发现，73%的联合创业团队一般在公司成立30天内就确定了如何进行股权分配。股权分配当然是任何共同创业的人都要首先考虑的事情之一，但事实上在那个时候，没人知道谁干活最卖力，谁对初创企业的贡献最有价值。过早确定股权分配会导致后面发生问题。如果可以的话，最好等到你有机会了解大家一起工作会是什么个情况后再正式分蛋糕。话虽如此，这件事情还是不要拖太久，围绕股权的分歧最好在公司早期就解决掉。</p><h3 id="5、永远要相互支持"><a href="#5、永远要相互支持" class="headerlink" title="5、永远要相互支持"></a>5、永远要相互支持</h3><p>这话听上去似乎太空泛，但是合伙人的关系也可能会反复无常，尤其是在受到不同观点、董事会成员等的影响下。合伙人之间的相互支持可带来信心，确保合伙人和员工都有共同的使命感。</p><p>团队应该早点理解一件事，任何情况下合伙人之间都应该背靠背相互支持，所以合伙人要尽量避免当着员工、董事会等人的面互相拆台，这样能够让公司其他人感觉到他们友情之牢固，让每一位合伙人都能保持镇定，因为他们知道对方一定会支持自己的。</p><h2 id="如何应对常见的分歧？"><a href="#如何应对常见的分歧？" class="headerlink" title="如何应对常见的分歧？"></a>如何应对常见的分歧？</h2><h3 id="1、公司走向的歧见"><a href="#1、公司走向的歧见" class="headerlink" title="1、公司走向的歧见"></a>1、公司走向的歧见</h3><p>在0到1的探索期，公司的走向往往是由合伙人一起决定的。但进入1到100的扩张期，一个年轻企业通常会开始有董事会以及重要的供应、通路伙伴。久而久之，合伙人对于公司未来走向的看法，常常会越来越变得分歧。</p><p>防范这个陷阱要从根源开始：每当CEO有了新的资讯、成长、学习、领悟，应该积极地与合伙人分享，协助他们获得与你类似的成长。同时，你应该把小范围的决策授权出去，让他们也能继续主导公司某一部分的走向。最后，你应该积极管理大家对决策的期望值，新创公司必须在“快”与“好”之间做出平衡，因此决策求的是多数对，而不是样样对。</p><h3 id="2、无法适应制度"><a href="#2、无法适应制度" class="headerlink" title="2、无法适应制度"></a>2、无法适应制度</h3><p>0到1的新创团队求快，因此不会有太多制度。进入1到100阶段，公司势必要开始建立一些管理系统，以在风险与发展中间取得平衡。</p><p>有些习惯了说干就干的合伙人，在此时会产生严重的不适应，时间一长甚至会觉得公司背离了创办的初衷。要解决这个问题，除了及早发现及早辅导外，请他们参与、主导制度的设计，也是协助合伙人适应新制度的方法。</p><h3 id="3、越权管理"><a href="#3、越权管理" class="headerlink" title="3、越权管理"></a>3、越权管理</h3><p>当公司开始有部门、部门主管，合伙人还是习惯看不顺眼就管，容易造成经理人的困扰。更有甚者，造成合伙人对经理人不信任，反而让经理人没有足够的时间、空间去适应、学习。这个问题通常是惯性使然，重点就是要打破它。所以，看到这样的行为要赶快提醒伙伴们注意。</p><h3 id="4、无法跟上公司成长的需要"><a href="#4、无法跟上公司成长的需要" class="headerlink" title="4、无法跟上公司成长的需要"></a>4、无法跟上公司成长的需要</h3><p>在公司快速扩张期，一个3人产品团队可能在一年内成长为30人，而两者之间管理上的不同，常常会让本来擅长技术、产品，但从来没有管理中大型团队经验的合伙人一时间跟不上公司发展的步伐。</p><p>回到扩张前，你应该早早找到好的CTO Mentor，在扩张中，经常鼓励他在管理知识与能力上精进。扩张后，如果他真的无法适应，也比较能够接受去寻找更有经验的CTO，而自己退居部门二把手、三把手。</p><h3 id="5、利益分配"><a href="#5、利益分配" class="headerlink" title="5、利益分配"></a>5、利益分配</h3><p>当公司越来越成功、越赚钱、离IPO越近，股权与利益的问题就会越容易产生。尤其当初的股权分配如果没有彰显每个合伙人的相对价值，那团队中可能酝酿出不良情绪。</p><p>比较好的方法当然是早期就把这个问题解决掉，因为到了后期，你的工具会越来越有限。但也不是没有机会修正，如果有合伙人离开，你可以收回他的股权来重新分配。如果有B、C、D轮增资，你可以跟投资人要求“期权池”(ESOP)，通过发放新的选择权来平衡。最后，如果真的过于集中，负责任的CEO，甚至会拿出自己的股权分配给伙伴们。</p><p>选择合伙人未必有一定之规，创业路上可能遇到的危机也远远不止上述这些，希望这篇文章能对你有所裨益，助你在创业路上少走弯路，也祝愿创业者们在2018年博得好彩头，大鹏一日同风起，扶摇直上九万里。</p><p>本文来源：<a href="http://www.sohu.com/a/225670991_100064845" target="_blank" rel="noopener">联想之星</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="life" scheme="https://www.policx.com/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown 的设计哲学</title>
    <link href="https://www.policx.com/2018/03/22/markdown/"/>
    <id>https://www.policx.com/2018/03/22/markdown/</id>
    <published>2018-03-22T11:32:01.000Z</published>
    <updated>2019-07-07T04:34:16.836Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 </p><a id="more"></a><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote><h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown<em>是什么</em>？</h4><h4 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h4><h4 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h4><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><em>怎么</em>使用？</h4><h4 id="谁在用？"><a href="#谁在用？" class="headerlink" title="谁在用？"></a><em>谁</em>在用？</h4><h4 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h4></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p><h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/" target="_blank" rel="noopener"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p><p>他有着足以让你跪拜的人生经历：    </p><ul><li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li><li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li><li><strong>2005</strong>年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。   </li><li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li><li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li><li><strong>2013</strong>年1月自杀身亡。    </li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz"></p><p>天才都有早逝的归途。</p><h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h3><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p><p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\</code></strong>，<strong>符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p><p>代码区块：</p><pre><code>void main(){    printf(&quot;Hello, Markdown.&quot;);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格<em>或</em>制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code>    </p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul><li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错   </li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。    </li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><hr><p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><hr><p>以上基本是所有traditonal markdown的语法。</p><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><hr><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p><video src="http://structr.learn-anything.cn/video/道理/陈铭：像我这种老好人，根本没什么真朋友！不jue亲戚的人，根本没什么真亲戚！.mp4" width="320" height="180" controls="controls"></video> </p><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="https://www.policx.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>数据类型和变量</title>
    <link href="https://www.policx.com/2018/03/01/python-type/"/>
    <id>https://www.policx.com/2018/03/01/python-type/</id>
    <published>2018-02-28T20:28:19.000Z</published>
    <updated>2019-07-07T04:35:56.433Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python 数据类型和变量</p><a id="more"></a> <h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：</p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</p><p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。如果’本身也是一个字符，那就可以用””括起来，比如”I’m OK”包含的字符是I，’，m，空格，O，K这6个字符。</p><p>如果字符串内部既包含’又包含”怎么办？可以用转义字符\来标识，比如：</p><p><code>&#39;I\&#39;m \&quot;OK\&quot;!&#39;</code><br>表示的字符串内容是：</p><p><code>I&#39;m &quot;OK&quot;!</code><br>转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\表示的字符就是\，可以在Python的交互式命令行用print()打印字符串看看：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;I\&apos;m ok.&apos;)</span><br><span class="line">I&apos;m ok.</span><br><span class="line">&gt;&gt;&gt; print(&apos;I\&apos;m learning\nPython.&apos;)</span><br><span class="line">I&apos;m learning</span><br><span class="line">Python.</span><br><span class="line">&gt;&gt;&gt; print(&apos;\\\n\\&apos;)</span><br><span class="line"></span><br><span class="line">\</span><br><span class="line">\</span><br></pre></td></tr></table></figure><p>如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义，可以自己试试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&apos;\\\t\\&apos;)</span><br><span class="line">\       \</span><br><span class="line">&gt;&gt;&gt; print(r&apos;\\\t\\&apos;)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure><p>如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，可以自己试试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;&apos;&apos;line1</span><br><span class="line">... line2</span><br><span class="line">... line3&apos;&apos;&apos;)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure><p>上面是在交互式命令行内输入，注意在输入多行内容时，提示符由&gt;&gt;&gt;变为…，提示你可以接着上一行输入，注意…是提示符，不是代码的一部分：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt - python                           _ □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│&gt;&gt;&gt; print(&apos;&apos;&apos;line1                                      │</span><br><span class="line">│... line2                                               │</span><br><span class="line">│... line3&apos;&apos;&apos;)                                           │</span><br><span class="line">│line1                                                   │</span><br><span class="line">│line2                                                   │</span><br><span class="line">│line3                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│&gt;&gt;&gt; _                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>当输入完结束符<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果写成程序并存为.py文件，就是：</span><br></pre></td></tr></table></figure></p><p>print(‘’’line1<br>line2<br>line3’’’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多行字符串&apos;&apos;&apos;...&apos;&apos;&apos;还可以在前面加上r使用，请自行测试：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>print(r’’’hello,\n<br>world’’’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">### 布尔值</span><br><span class="line">布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True<br>True<br>False<br>False<br>3 &gt; 2<br>True<br>3 &gt; 5<br>False</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">布尔值可以用and、or和not运算。</span><br><span class="line"></span><br><span class="line">#### and运算是与运算，只有所有都为True，and运算结果才是True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True and True<br>True<br>True and False<br>False<br>False and False<br>False<br>5 &gt; 3 and 3 &gt; 1<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### or运算是或运算，只要其中有一个为True，or运算结果就是True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True or True<br>True<br>True or False<br>True<br>False or False<br>False<br>5 &gt; 3 or 1 &gt; 3<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### not运算是非运算，它是一个单目运算符，把True变成False，False变成True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>not True<br>False<br>not False<br>True<br>not 1 &gt; 2<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">布尔值经常用在条件判断中，比如：</span><br></pre></td></tr></table></figure><p>if age &gt;= 18:<br>    print(‘adult’)<br>else:<br>    print(‘teenager’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">### 空值</span><br><span class="line">空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</span><br><span class="line"></span><br><span class="line">此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。</span><br><span class="line"></span><br><span class="line">### 变量</span><br><span class="line">变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</span><br><span class="line"></span><br><span class="line">变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头，比如：</span><br><span class="line"></span><br><span class="line">`a = 1`</span><br><span class="line">变量a是一个整数。</span><br><span class="line"></span><br><span class="line">`t_007 = &apos;T007&apos;`</span><br><span class="line">变量t_007是一个字符串。</span><br><span class="line"></span><br><span class="line">`Answer = True`</span><br><span class="line">变量Answer是一个布尔值True。</span><br><span class="line"></span><br><span class="line">在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>a = 123 # a是整数<br>print(a)<br>a = ‘ABC’ # a变为字符串<br>print(a)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</span><br></pre></td></tr></table></figure><p>int a = 123; // a是整数类型变量<br>a = “ABC”; // 错误：不能把字符串赋给整型变量</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">和静态语言相比，动态语言更灵活，就是这个原因。</span><br><span class="line"></span><br><span class="line">请不要把赋值语句的等号等同于数学的等号。比如下面的代码：</span><br></pre></td></tr></table></figure><p>x = 10<br>x = x + 2</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果从数学上理解x = x + 2那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。</span><br><span class="line"></span><br><span class="line">最后，理解变量在计算机内存中的表示也非常重要。当我们写：</span><br><span class="line"></span><br><span class="line">`a = &apos;ABC&apos;`</span><br><span class="line">时，Python解释器干了两件事情：</span><br><span class="line"></span><br><span class="line">在内存中创建了一个&apos;ABC&apos;的字符串；</span><br><span class="line"></span><br><span class="line">在内存中创建了一个名为a的变量，并把它指向&apos;ABC&apos;。</span><br><span class="line"></span><br><span class="line">也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据，例如下面的代码：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>a = ‘ABC’<br>b = a<br>a = ‘XYZ’<br>print(b)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">最后一行打印出变量b的内容到底是&apos;ABC&apos;呢还是&apos;XYZ&apos;？如果从数学意义上理解，就会错误地得出b和a相同，也应该是&apos;XYZ&apos;，但实际上b的值是&apos;ABC&apos;，让我们一行一行地执行代码，就可以看到到底发生了什么事：</span><br><span class="line"></span><br><span class="line">执行a = &apos;ABC&apos;，解释器创建了字符串&apos;ABC&apos;和变量a，并把a指向&apos;ABC&apos;：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923791878255456/0)</span><br><span class="line"></span><br><span class="line">执行b = a，解释器创建了变量b，并把b指向a指向的字符串&apos;ABC&apos;：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923792058613440/0)</span><br><span class="line"></span><br><span class="line">执行a = &apos;XYZ&apos;，解释器创建了字符串&apos;XYZ&apos;，并把a的指向改为&apos;XYZ&apos;，但b并没有更改：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923792191637760/0)</span><br><span class="line"></span><br><span class="line">所以，最后打印变量b的结果自然是&apos;ABC&apos;了。</span><br><span class="line"></span><br><span class="line">### 常量</span><br><span class="line">所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：</span><br><span class="line"></span><br><span class="line">`PI = 3.14159265359`</span><br><span class="line">但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。</span><br><span class="line"></span><br><span class="line">最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是/：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 / 3<br>3.3333333333333335</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>9 / 3<br>3.0</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还有一种除法是//，称为地板除，两个整数的除法仍然是整数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 // 3<br>3</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你没有看错，整数的地板除//永远是整数，即使除不尽。要做精确的除法，使用/就可以。</span><br><span class="line"></span><br><span class="line">因为//除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 % 3<br>1</p><pre><code>无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</code></pre></blockquote></blockquote></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。</p><p>对变量赋值x = y是把变量x指向真正的对象，该对象是变量y所指向的。随后对变量y的赋值不影响变量x的指向。</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在-2147483648-2147483647。<br>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 数据类型和变量&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
</feed>
