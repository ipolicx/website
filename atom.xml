<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-07-14T08:41:14.777Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DDoS（分布式拒绝服务）攻击是无解的吗？</title>
    <link href="https://www.policx.com/2019/07/14/ddos/"/>
    <id>https://www.policx.com/2019/07/14/ddos/</id>
    <published>2019-07-14T07:26:43.000Z</published>
    <updated>2019-07-14T08:41:14.777Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>“</p><p>DDOS？ </p><p>一言难尽啊！ </p><p>”</p><a id="more"></a><p>先说结论，DDoS是近年来网络攻击中的一棵“常青树”，的确很难缠，但说它是无解的，那也有点太看得起它了。虽然DDoS在对很多大平台的攻击中出尽了风头，但在现在互联网的解决方案中，并不缺乏应对DDoS的解决方案。 </p><p>说起DDoS攻击，我脑海里能够想到的全都是中国民间俗语，什么“双拳难敌四手，好汉架不住人多”，什么“千斤拨四两”，什么“乱拳打死老师傅”等等等等。 </p><p>之前有朋友跑来问我DDoS是个什么东西，为什么这么多互联网巨头都被搞得没有脾气，我记得我当时我是这么举的例子： </p><p>我们这一代人小的时候，自助餐开始在中国内地风行，那会儿这个行业里为了打击竞争对手，对手最惯常使用的阴招是雇佣很多五大三粗的人，给他们钱去对方的店里一通猛吃，杯盘狼藉之下，用不了几天这家自助餐就能给吃黄了。 </p><p>而DDoS攻击比这种还阴损，如果你开了一家餐馆，你的对手如果想搞你，最好的办法就是找一堆地痞流氓到你的店里坐的满满一屋子，你如果上前问，他们就一直跟你扯淡找麻烦，导致真正想吃饭的顾客一看这个情形，掉头就走了。 </p><p>用不了多久，你的餐馆就会开不下去，而你的竞争对手就会趁机蚕食掉你的市场份额，而放在网络语境里，这就是DDoS攻击的最基本原理。 </p><p>而这件事之所以难缠在于，一两个无赖根本成不了气候，想要耍流氓必须要有很多个无赖集结在一起。<strong>所以和现实世界中的无赖一样，DDoS真正的杀手锏在于利用能够发动的汹涌的流量，可以瞬间冲垮被攻击网站的服务器。</strong></p><p>如果我们回溯一下历史的话，会发现黑客组织之所以会有组织有预谋的发起DDoS攻击，基本上都是基于以下几个原因： </p><ul><li><p>有些行业如果网站被恶意攻击，会造成很难估量的损失，这个时候黑客发动DDoS攻击的初衷一般是出于敲诈勒索，为了保证企业的正常运转，他们通常愿意向黑客付高额的赎金； </p></li><li><p>行业内血海一片，DDoS是恶意竞争的屠刀。这个现象从逻辑上，其实雇佣无赖去占领对手餐馆的原理是一毛一样的，而且DDOS攻击早已产业化，现在中国的DDOS黑市，出钱请黑客打1G的流量到一个网吧或网站，市场价只要不到50块钱，但对于一个创业公司或者干脆就是一个小网吧来说，这已经算是可以灭顶的无妄之灾了。 </p></li><li><p>DDoS攻击往往成为掩盖真实网络攻击的烟雾弹，在遭受DDoS攻击的企业中，部分企业还伴随数据丢失的现象，黑客利用DDoS攻击掩盖其窃取用户隐私的真实目的，这种攻击行为在社交网站、金融领域等用户隐私高价值的行业尤为高发。 </p></li></ul><p>比如说，去年年初的时候，荷兰第一大银行荷兰商业银行于2018年1月28日晚间遭到DDoS攻击；第二大银行荷兰合作银行的网银服务29日早晨遭到攻击；第三大银行荷兰银行在那一周内共遭到7次网络攻击，仅周末就有3次。 </p><p>不过这一次发生在荷兰的针对银行系统的攻击并没有造成用户隐私的泄露，原因在于这仅仅是一次来自俄罗斯一个网络间谍组织Cozy Bear对荷兰情报组织AIVD侵犯其计算机的“单纯”的报复行为。<strong>但并不是所有黑客组织发起的DDoS攻击都如此单纯。</strong></p><p>2018年年底时万豪酒店发布了一则公告，称其旗下喜达屋酒店的5亿人次的信息被泄露，共计3.27亿人，泄露信息包括姓名、邮寄地址、电话号码、电子邮件昂面地址、护照号码、出生日期、性别等等入住信息，更糟糕的是万豪无法确定，侵入酒店系统的第三方黑客，在窃取的信息中是否包含客人的银行卡号和密码。（此案例和DDOS攻击无关，建议采用其他案例，比如2011年4月20日至26日，索尼遭受DDoS攻击，目的是为了掩盖盗取索尼PS的用户数据。） </p><p>而游戏领域，则是DDoS攻击的另一个重灾区，不光是刚才前文中提到的暴雪，包括索尼、金山、网易在内的众多知名游戏公司都曾数次遭受攻击，可以说DDoS攻击是游戏企业的噩梦。 </p><p>许多刚创业的游戏公司，可能刚上线就被打死，而一些处在融资阶段的游戏公司，由于遭遇攻击而被迫停服，则很大程度上会调低投资人的预期，甚至导致融资失败。 </p><p>而这些因素，都是竞对打压或者敲诈勒索的绝对软肋。 </p><p>从以上的几个案例我们不难看出，和现实中的耍流氓和敲诈勒索相比，通过网络手段进行攻击的风险和成本更低，坏蛋的嘴脸也更穷凶极恶一点，无论是政府机构还是企业平台，无论你是巨头还是小蚂蚁，只要你身上有羊毛可以薅，你都时刻面临着被洗劫的风险 </p><p>不过刚在开头我也讲了，虽然DDoS很难缠很让人头痛，但本质上图并不是无解的。 </p><p>回到我最开始讲的那个例子。 </p><p>你是一个餐馆老板，过去三十年一直是个老老实实的厨子，突然面对五十个臭流氓到你店里耍无赖的时候，你最好的应对方法，应该是什么？ </p><p>自己组建一支人马，和这些臭流氓正面刚？这恐怕不行，因为你不是臭流氓，你没有相应的作战经验。 </p><p>报警请人民警察来帮忙处理？这恐怕也不行，人家在你店里没有打砸抢，只是“温和的”非暴力不合作，警察来了也只能当民事调解，并且人家马仔众多，明天再换一拨新面孔来，玩的你一点脾气都没有。 </p><p>这就是面对DDoS时，无论是巨头还是小蚂蚁，他们的实实在在的困境。 </p><p>但正所谓“道高一尺魔高一丈”，你在云上和我耍流氓，那我就在云上回击。 </p><p><strong>“云”的事儿，不如还交还给云来处理。</strong>我认为就目前DDoS的在攻击量级上的疯狂进击的前提下，云计算服务厂商或许是狙击它们的最有效手段。 </p><p>2018年年初，峰值1.35TB/秒的流量冲击了开发者平台 GitHub。这是第一次TB量级的DDoS攻击。GitHub 受到攻击后，服务器断断续续，无法访问。攻击发生 10 分钟后，GitHub 向CDN 服务商 Akamai 请求协助，访问 GitHub 的流量已经由后者接管并在15分钟之内完成了防御。 </p><p>Akamai的相关负责人在接受采访时说，我们是基于迄今为止最大规模 DDoS 攻击五倍的峰值而做的相应准备，所以 1.3T 对我们来说是小意思。 </p><p>在关于流量峰值这一点上，我认为饱受双11、双12、618等全民购物狂欢的电商巨头们更有发言权，就拿京东举例子好了。 </p><p>京东云在之前发布的高防版的DDoS服务中，展示出了非常明确的信心是，在多年的电商狂欢流量对抗中，京东云已经在实战中建立了一套完备的防御机制，无论是在流量峰值的建模上，还是在DDoS的防御算法上，它的部署都远远不是纸上谈兵，而是拳拳到肉的经受住了实战的洗礼。要知道，全世界每年有超过5成的DDoS攻击都来自中国，而我们的国家也是全世界超过美国的第一大“肉鸡”市场，由电商大数据加持演化而来的京东云，它在云安全的理解上可以说是非常深刻了。 </p><p>所以说，如果说一定要有一个结论，我想说“上帝的归上帝，而云上的归云上”，像京东云这样的基于电商大数据考验的云计算平台，或许才是对抗DDoS的最终答案。 </p><p>From: <a href="https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA</a></p><p><strong>内容整理自：知乎@例不虚发探花郎</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“&lt;/p&gt;
&lt;p&gt;DDOS？ &lt;/p&gt;
&lt;p&gt;一言难尽啊！ &lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.policx.com/2019/07/14/Node.js/"/>
    <id>https://www.policx.com/2019/07/14/Node.js/</id>
    <published>2019-07-13T16:06:04.000Z</published>
    <updated>2019-07-14T15:34:19.970Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><a id="more"></a><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161221143342354-835289664.png" alt></p><p>能方便地搭建响应速度快、易于扩展的网络应用，Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>中文：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org</a>、<a href="https://nodejs.cn/" target="_blank" rel="noopener">https://nodejs.cn</a></p><p>简单说Node.js就是运行在服务器端的JavaScript，是现在流行的语言中能同时运行在前端与后台的程序语言，你可以把JavaScript想像成Java与C#。相关技术：</p><p>数据库：MongoDB，非关系型数据库，NoSQL（Not only SQL）</p><p>MVC框架：AngularJS</p><p>Web服务器：Express</p><p>模板引擎：jade、ejs、htmljs、swig、hogan.js</p><h1 id="二、搭建Node-js开发环境"><a href="#二、搭建Node-js开发环境" class="headerlink" title="二、搭建Node.js开发环境"></a>二、搭建Node.js开发环境</h1><h2 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h2><p>去官网下下载最新版本的Node.js一步一步按提示安装即可，如果安装失败就手动安装，将Node.js的安装位置配置到环境变量的path中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装完成后启动命令行，测试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="三、第一个Node-js程序"><a href="#三、第一个Node-js程序" class="headerlink" title="三、第一个Node.js程序"></a>三、第一个Node.js程序</h1><p>在上面的示例中，我们是通过IDE完成编译与运行的，其实手动运行也可以，比如编写一段代码如下：</p><blockquote><p>server.js</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//依赖一个http模块，相当于java中的import，与C#中的using</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">//创建一个服务器对象</span><br><span class="line">server = http.createServer(function (req, res) &#123;</span><br><span class="line">//设置请求成功时响应头部的MIME为纯文本</span><br><span class="line">res.writeHeader(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">//向客户端输出字符</span><br><span class="line">res.end(&quot;Hello World\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//让服务器监听本地8000端口开始运行</span><br><span class="line">server.listen(8000,&apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server is runing at 127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>在node环境下解释运行：<br><img src="https://i.loli.net/2019/07/14/5d2af984d2fae77488.jpg" alt></p><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2af89c2b5b226144.jpg" alt></p><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。<br>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。 </p><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。<br>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。 </p><h1 id="四、NPM（Node-js包管理器）"><a href="#四、NPM（Node-js包管理器）" class="headerlink" title="四、NPM（Node.js包管理器）"></a>四、NPM（Node.js包管理器）</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：  </p><ul><li>a)、允许用户从NPM服务器下载别人编写的第三方包到本地使用。  </li><li>b)、允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。  </li><li>c)、允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。 </li></ul><p>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><h2 id="4-1、查看npm版本"><a href="#4-1、查看npm版本" class="headerlink" title="4.1、查看npm版本"></a>4.1、查看npm版本</h2><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p><h2 id="4-2、升级npm"><a href="#4-2、升级npm" class="headerlink" title="4.2、升级npm"></a>4.2、升级npm</h2><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="4-3、安装模块"><a href="#4-3、安装模块" class="headerlink" title="4.3、安装模块"></a>4.3、安装模块</h2><blockquote><p>npm install <module name> -参数 </module></p></blockquote><p>如果带参数-g表示全局安装，否则只是安装到某个目录下。 </p><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install express -g</span><br></pre></td></tr></table></figure><h2 id="4-4、卸载模块"><a href="#4-4、卸载模块" class="headerlink" title="4.4、卸载模块"></a>4.4、卸载模块</h2><p>我们可以使用以下命令来卸载 Node.js 模块。  </p><blockquote><p>sudo npm uninstall <module name></module></p></blockquote><p>如先使用安装指令安装bootstrap: </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>再使用卸载指令删除模块： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall bootstrap</span><br></pre></td></tr></table></figure><p>可以到 /node_modules/ 目录下查看包是否还存在 </p><h2 id="4-5、模块列表"><a href="#4-5、模块列表" class="headerlink" title="4.5、模块列表"></a>4.5、模块列表</h2><p>使用模块列表命令可以方便的看到当前项目中依赖的包：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h2 id="4-6、更新模块"><a href="#4-6、更新模块" class="headerlink" title="4.6、更新模块"></a>4.6、更新模块</h2><p>我们可以使用以下命令更新模块：<br><code>npm update</code>模块名称<br><code>npm up -g</code> 模块名称 </p><h2 id="4-7、搜索模块"><a href="#4-7、搜索模块" class="headerlink" title="4.7、搜索模块"></a>4.7、搜索模块</h2><p><code>npm search</code>模块名称 </p><h2 id="4-8、NPM-常用命令"><a href="#4-8、NPM-常用命令" class="headerlink" title="4.8、NPM 常用命令"></a>4.8、NPM 常用命令</h2><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。<br>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。<br>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。<br>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。<br>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。<br>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。 </version></package></package></package></p><h2 id="4-9、更换NPM-镜像"><a href="#4-9、更换NPM-镜像" class="headerlink" title="4.9、更换NPM 镜像"></a>4.9、更换NPM 镜像</h2><p>因为npm的服务器在国外，在网络状态不好的情况下引入一个模块会因为网络延迟而失败，可以更换成国内速度更快的镜像服务器，这里以使用淘宝 NPM 镜像（<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>）为例： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://zos.alipayobjects.com/rmsportal/UQvFKvLLWPPmxTM.png" alt></p><p>这样就可以使用 cnpm 命令来安装模块了：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＄ cnpm install [name]</span><br></pre></td></tr></table></figure><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。 </p><p>如是安装失败，可以试试： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \</span><br><span class="line">--cache=$HOME/.npm/.cache/cnpm \</span><br><span class="line">--disturl=https://npm.taobao.org/dist \</span><br><span class="line">--userconfig=$HOME/.cnpmrc&quot;</span><br><span class="line"></span><br><span class="line"># Or alias it in .bashrc or .zshrc</span><br><span class="line">$ echo &apos;\n#alias for cnpm\nalias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \</span><br><span class="line">  --cache=$HOME/.npm/.cache/cnpm \</span><br><span class="line">  --disturl=https://npm.taobao.org/dist \</span><br><span class="line">  --userconfig=$HOME/.cnpmrc&quot;&apos; &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。使用Node.js作为AngularJS开发Web服务器的最佳方式是使用Express模块。 </p><p>Express官网： <a href="https://expressjs.com/" target="_blank" rel="noopener">https://expressjs.com/</a></p><p>Express4.x API：<a href="https://expressjs.com/zh-cn/4x/api.html" target="_blank" rel="noopener">https://expressjs.com/zh-cn/4x/api.html</a></p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222113905667-121619780.png" alt></p><h2 id="5-2、Express框架核心特性"><a href="#5-2、Express框架核心特性" class="headerlink" title="5.2、Express框架核心特性"></a><strong>5.2、Express框架核心特性</strong></h2><p>可以设置中间件来响应 HTTP 请求。 </p><p>定义了路由表用于执行不同的 HTTP 请求动作。 </p><p>可以通过向模板传递参数来动态渲染 HTML 页面。 </p><p>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。 </p><p>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。 </p><h2 id="5-3、安装-Express"><a href="#5-3、安装-Express" class="headerlink" title="5.3、安装 Express"></a><strong>5.3、安装 Express</strong></h2><p>安装 Express 并将其保存到依赖列表中： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>以上命令全局安装express。也可安装时指定安装中间件。 </p><p><em>body-parser</em> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。 </p><p><em>cookie-parser</em> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。 </p><p><em>multer</em> - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">＄ npm install body-parser --save  </span><br><span class="line">＄ npm install cookie-parser --save  </span><br><span class="line">＄ npm install multer --save</span><br></pre></td></tr></table></figure><p>默认这些模块都已经添加。 </p><h2 id="5-4、第一个Express框架实例"><a href="#5-4、第一个Express框架实例" class="headerlink" title="5.4、第一个Express框架实例"></a>5.4、第一个Express框架实例</h2><p>接下来我们使用 Express 框架来输出 “Hello World”。<br>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。 </p><p>创建一个目录，如Project，进入命令行： </p><p>使用npm install express 导入express模块。 </p><p>在目录下创建hello.js文件，如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//引入express模块</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">//创建一个app对象，类似一个web 应用（网站）</span><br><span class="line">var app = express();</span><br><span class="line">//接受指定路径的请求，指定回调函数</span><br><span class="line">app.get(&apos;/&apos;, function (req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//创建一个web服务器，可以认为就是web服务器对象</span><br><span class="line">//监听8081端口，当监听成功时回调</span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">   var host = server.address().address;  //地址</span><br><span class="line">   var port = server.address().port;  //端口</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-5、开发Express项目"><a href="#5-5、开发Express项目" class="headerlink" title="5.5、开发Express项目"></a>5.5、开发Express项目</h2><p><img src="https://i.loli.net/2019/07/14/5d2b00e97910997783.jpg" alt><br>创建好的项目如下：<br><img src="https://i.loli.net/2019/07/14/5d2b02dad205355700.jpg" alt></p><p>app.js是网站：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><p>bin\www是web服务器： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 依赖模块，导入</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;nodejsexpress:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从上下文环境中获得监听端口，如果空则3000</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Web服务器</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开始监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);  //指定发生错误时的事件</span><br><span class="line">server.on(&apos;listening&apos;, onListening);  //当监听成功时的回调</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 规范化端口</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *错误事件监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  //错误处理</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);  //结束程序</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当用户访问服务器成功时的回调</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">routers/index.js路由，有点类似控制器或Servlet：</span><br></pre></td></tr></table></figure><p>var express = require(‘express’);<br>var router = express.Router();</p><p>/* 获得首页 */<br>router.get(‘/‘, function(req, res, next) {<br>  res.render(‘index’, { title: ‘Express’ });<br>});</p><p>module.exports = router;</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">views/index.ejs首页视图：</span><br></pre></td></tr></table></figure><!DOCTYPE html><html>  <head><meta name="generator" content="Hexo 3.9.0">    <title><%= title %></%=></title>    <link rel="stylesheet" href="/stylesheets/style.css">  </head>  <body>    <h1><%= title %></%=></h1>    <p>Welcome to <%= title %></%=></p>  </body></html><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在www上右键选择“运行方式”-&gt;Run &apos;/bin/www&apos; 运行结果： </span><br><span class="line">![](https://i.loli.net/2019/07/14/5d2b034bcca6187136.jpg)</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2019/07/14/5d2b044c2b12347829.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2019/07/14/5d2b041724d6091090.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 5.5.1、request对象 </span><br><span class="line"></span><br><span class="line">Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</span><br></pre></td></tr></table></figure><p>req.app：当callback为外部文件时，用req.app访问express的实例<br>req.baseUrl：获取路由当前安装的URL路径<br>req.body / req.cookies：获得「请求主体」/ Cookies<br>req.fresh / req.stale：判断请求是否还「新鲜」<br>req.hostname / req.ip：获取主机名和IP地址<br>req.originalUrl：获取原始请求URL<br>req.params：获取路由的parameters<br>req.path：获取请求路径<br>req.protocol：获取协议类型<br>req.query：获取URL的查询参数串<br>req.route：获取当前匹配的路由<br>req.subdomains：获取子域名<br>req.accepts()：检查可接受的请求的文档类型<br>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码<br>req.get()：获取指定的HTTP请求头<br>req.is()：判断请求头Content-Type的MIME类型</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 5.5.2、response对象 </span><br><span class="line"></span><br><span class="line">Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</span><br></pre></td></tr></table></figure><p>res.app：同req.app一样<br>res.append()：追加指定HTTP头<br>res.set()在res.append()后将重置之前设置的头<br>res.cookie(name，value [，option])：设置Cookie<br>opition: domain / expires / httpOnly / maxAge / path / secure / signed<br>res.clearCookie()：清除Cookie<br>res.download()：传送指定路径的文件<br>res.get()：返回指定的HTTP头<br>res.json()：传送JSON响应<br>res.jsonp()：传送JSONP响应<br>res.location()：只设置响应的Location HTTP头，不设置状态码或者close response<br>res.redirect()：设置响应的Location HTTP头，并且设置状态码302<br>res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。<br>res.send()：传送HTTP响应<br>res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type<br>res.set()：设置HTTP头，传入object可以一次设置多个头<br>res.status()：设置HTTP状态码<br>res.type()：设置Content-Type的MIME类型</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">###  5.5.3、express获取参数有三种方法 </span><br><span class="line"></span><br><span class="line">req.query 适合 https://localhost:3000/form?num=8888  </span><br><span class="line">req.body 适合https://localhost:3000/form，Post请求中的参数  </span><br><span class="line">req.params 适合获取form后的num：https://localhost:3000/form/num  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（一）、GET</span><br></pre></td></tr></table></figure><p>var num = req.query.num;<br>res.send(“你获取的get数据为:” + num); </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（二）、POST </span><br><span class="line"></span><br><span class="line">解析post数据需要用到body-parser </span><br><span class="line"></span><br><span class="line">```    </span><br><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>app.js </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">//引入body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">//需要use的</span><br><span class="line">app.use(bodyParser.json()); // for parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">extended: true</span><br><span class="line">&#125;)); // for parsing application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.post(&apos;/form&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.body.num;</span><br><span class="line">res.send(&quot;你获取的post数据为:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>public/test.html </p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"tinyphp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（三）、获取路径参数 </p><p><code>app.js</code>  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.get(&apos;/form/:num&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.params.num;</span><br><span class="line">res.send(&quot;你获取到form/后的参数:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">## 5.6、ejs基础 </span><br><span class="line"></span><br><span class="line">ejs是一个Express Web应用的模板引擎，在NodeJS开发中可以选择的模板引擎可能是所有Web应用开发中范围最广的，如jade、ejs、htmljs、swig、hogan.js，但ejs是最容易上手的，与jsp,asp,php的原始模板引擎风格很像。 </span><br><span class="line"></span><br><span class="line">官网：[https://www.embeddedjs.com/][19]</span><br><span class="line"></span><br><span class="line">   [19]: https://www.embeddedjs.com/</span><br><span class="line"></span><br><span class="line">添加一个`product.js`路由：</span><br></pre></td></tr></table></figure><p>var express = require(‘express’);<br>var router = express.Router();</p><p>/* 产品 */<br>router.get(‘/‘, function(req, res, next) {</p><p>  var products=[];<br>  products.push({name:”ZTE U880”,price:899.8});<br>  products.push({name:”HuWei 荣耀8”,price:1899.8});<br>  products.push({name:”iPhone 7 Plus 128G”,price:5899.8});</p><p>  //将product视图与指定的对象渲染后输出到客户端<br>  res.render(‘product’, { title: ‘天狗商城’, pdts:products});<br>});</p><p>module.exports = router;</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在views目录下添加`product.ejs`视图，这里是一个简单的MVC：</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><pre><code>&lt;head&gt;    &lt;title&gt;        &lt;%= title %&gt;    &lt;/title&gt;    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;    &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;        &lt;tr&gt;            &lt;th&gt;序号&lt;/th&gt;            &lt;th&gt;名称&lt;/th&gt;            &lt;th&gt;价格&lt;/th&gt;        &lt;/tr&gt;        &lt;%pdts.forEach(function(pdt,index){%>            <tr>                <td>                    <%=index+1%>                </%=index+1%></td>                <td>                    <%=pdt.name%>                </%=pdt.name%></td>                <td>                    <%=pdt.price%>                </%=pdt.price%></td>            </tr>            <%});%&gt; &lt; table&gt; &lt;ul&gt; &lt;% for(var i="0;" i&lt;pdts.length; i++) {%&gt; &lt;li&gt; li&gt; } %&gt; body&gt;< code></%});%&gt;></code></pre></html><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改app，注册定义好的模块product：</span><br></pre></td></tr></table></figure><p>var index = require(‘./routes/index’);<br>var users = require(‘./routes/users’);<br>var pdts = require(‘./routes/product’);</p><p>var app = express();</p><p>//指定视图引擎为ejs<br>app.set(‘views’, path.join(__dirname, ‘views’));<br>app.set(‘view engine’, ‘ejs’);</p><p>// uncomment after placing your favicon in /public<br>//app.use(favicon(path.join(<strong>dirname, ‘public’, ‘favicon.ico’)));<br>app.use(logger(‘dev’));<br>app.use(bodyParser.json());<br>app.use(bodyParser.urlencoded({ extended: false }));<br>app.use(cookieParser());<br>app.use(express.static(path.join(</strong>dirname, ‘public’)));</p><p>app.use(‘/‘, index);<br>app.use(‘/users’, users);<br>app.use(‘/pdt’, pdts);</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">运行结果： </span><br><span class="line">![](https://i.loli.net/2019/07/14/5d2b092ca2eb115835.jpg)</span><br><span class="line">&gt; 原因：没有安装ejs模块</span><br><span class="line">&gt; 解决办法：进入到项目目录，安装ejs</span><br></pre></td></tr></table></figure><p>npm install –save ejs</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">![](https://i.loli.net/2019/07/14/5d2b09efe80ba53992.jpg)</span><br><span class="line"></span><br><span class="line">重新运行：</span><br><span class="line">![](https://i.loli.net/2019/07/14/5d2b0a951a09231745.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 5.7、lodash </span><br><span class="line"></span><br><span class="line">这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。可以非常方便的操作json。 </span><br><span class="line"></span><br><span class="line">官网：[https://lodashjs.com/][21]</span><br><span class="line"></span><br><span class="line">   [21]: https://lodashjs.com/</span><br><span class="line"></span><br><span class="line">安装：</span><br></pre></td></tr></table></figure><p>npm i -g npm </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">npm i --save lodash</span><br></pre></td></tr></table></figure><p>安装时先用cd切换到当前项目下。 </p><p>如果浏览器使用可以直接引入： </p><script src="lodash.js"></script><p>添加lodash依赖：<br><img src="https://i.loli.net/2019/07/14/5d2b0c4c7c14a17367.jpg" alt></p><p>依赖成功后会在package.json中添加引用：<br><img src="https://i.loli.net/2019/07/14/5d2b0c9e03f1844597.jpg" alt></p><p>后台Node.js使用，可以引入模块： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//导入lodash模块</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var products=[];</span><br><span class="line">products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">//1、取出第一个元素</span><br><span class="line">var obj1=_.first(products);</span><br><span class="line">console.log(obj1.name);  //ZTE U880</span><br><span class="line"></span><br><span class="line">//2、取出最后一个元素</span><br><span class="line">var obj2=_.last(products);</span><br><span class="line">console.log(obj2.name);  //iPhone 7 Plus 128G</span><br><span class="line"></span><br><span class="line">//3、指定查找条件返回符合条件的索引</span><br><span class="line">var obj3=_.findIndex(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj3);  //2</span><br><span class="line"></span><br><span class="line">//4、指定查找条件返回查找到的对象</span><br><span class="line">var obj4=_.find(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj4);  //&#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;</span><br><span class="line"></span><br><span class="line">//5、排序</span><br><span class="line">var obj5=_.orderBy(products,[&quot;price&quot;,&quot;name&quot;],[&quot;desc&quot;,&quot;asc&quot;]);</span><br><span class="line">console.log(obj5); </span><br><span class="line"></span><br><span class="line">//[ &#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;HuWei 荣耀8&apos;, price: 1899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;ZTE U880&apos;, price: 899.8 &#125; ]</span><br><span class="line"></span><br><span class="line">//6、查找价格为1899.8的产品的key</span><br><span class="line">var obj6=_.findKey(products,&#123;price:1899.8&#125;);</span><br><span class="line">console.log(obj6);   //1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/14/5d2b0f023a83710965.jpg" alt></p><p>API的使用非常简单，但需要注意版本，可以现查现用，API地址：<a href="https://lodash.com/docs/4.17.2%20" target="_blank" rel="noopener">https://lodash.com/docs/4.17.2 </a></p><h2 id="5-8、参数"><a href="#5-8、参数" class="headerlink" title="5.8、参数"></a>5.8、参数</h2><h3 id="5-8-1、URL中的参数占位"><a href="#5-8-1、URL中的参数占位" class="headerlink" title="5.8.1、URL中的参数占位"></a>5.8.1、URL中的参数占位</h3><p>Checks route params (req.params), ex: /user/:id </p><p>127.0.0.1:3000/index，这种情况下，我们为了得到index，我们可以通过使用req.params得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式； </p><p><code>http://127.0.0.1:3000/pdt/9527/phone</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得产品根据Id</span><br><span class="line">router.get(&apos;/:id/:category&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(request.params.id+&quot;,&quot;+request.params.category);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b10e8e678f43145.jpg" alt></p><h3 id="5-8-2、URL中的QueryString"><a href="#5-8-2、URL中的QueryString" class="headerlink" title="5.8.2、URL中的QueryString"></a>5.8.2、URL中的QueryString</h3><p>Checks query string params (req.query), ex: ?id=12 </p><p>127.0.0.1:3000/index?id=12，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用req.query.id就可以获得，类似于PHP的get方法； </p><p><code>http://127.0.0.1:3000/pdt/9527?name=jobs</code> </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(&quot;name:&quot;+request.query.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b12be0371490358.jpg" alt></p><h3 id="5-8-3、HTTP正文中的参数"><a href="#5-8-3、HTTP正文中的参数" class="headerlink" title="5.8.3、HTTP正文中的参数"></a>5.8.3、HTTP正文中的参数</h3><p>在post请求中获得表单中的数据。 </p><p>Checks urlencoded body params (req.body), ex: id= </p><p>127.0.0.1：300/index，然后post了一个id=2的值，这种方式是获取客户端post过来的数据，可以通过req.body.id获取，类似于PHP的post方法； </p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222150412682-243382356.png" alt></p><p>页面：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &lt;%= title %&gt;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%pdts.forEach(function(pdt,index)&#123;%&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=index+1%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.name%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.price%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%&#125;);%&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=pdts[i].name%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            &lt;%if(typeof msg!=&quot;undefined&quot;)&#123;%&gt;</span><br><span class="line">                &lt;%=msg%&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">        &lt;form action=&quot;pdt/add&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                名称：&lt;input name=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                价格：&lt;input name=&quot;price&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/add&apos;,function(request,res,next)&#123;</span><br><span class="line">    var entity=&#123;name:request.body.name,price:request.body.price&#125;;</span><br><span class="line">    products.push(entity);</span><br><span class="line">      //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">      res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products,msg:&quot;添加成功&quot;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151340745-1374859267.png" alt></p><h2 id="5-9、JSON"><a href="#5-9、JSON" class="headerlink" title="5.9、JSON"></a>5.9、JSON</h2><p>如果需要Node.js向外提供返回JSON的接口，Express也是非常方便的，可以使用原来在浏览器中使用到的JSON对象，这是一个浏览器内置对象在服务可以直接使用： </p><p>将对象序列化成字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象</span><br><span class="line">var rose=&#123;&quot;name&quot;:&quot;Rose&quot;,&quot;weight&quot;:&quot;65&quot;&#125;;</span><br><span class="line">            //序列化成字符串</span><br><span class="line">            var str=JSON.stringify(rose);</span><br><span class="line">            alert(str);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151858839-27300214.png" alt></p><p>反序列化，将字符转换成对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成JavaScript对象</span><br><span class="line">var markStr=&apos;&#123;&quot;name&quot;:&quot;mark&quot;,&quot;weight&quot;:&quot;188&quot;&#125;&apos;;</span><br><span class="line">            var mark=JSON.parse(markStr);</span><br><span class="line">            alert(mark.name+&quot;，&quot;+mark.weight);</span><br></pre></td></tr></table></figure><p>结果： </p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222152634417-1260078212.png" alt></p><p>Express已经封装了一个json方法，直接调用该方法就可以序列化对象： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/rest&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(products);</span><br><span class="line">&#125;);</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">运行结果： </span><br><span class="line">![](https://i.loli.net/2019/07/14/5d2b1a1e6c48328184.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 六、RESTful（表述性状态转移）</span><br><span class="line">REST是英文Representational State Transfer的缩写，中文称之为“表述性状态转移” 基于HTTP协议，是另一种服务架构，传递是JSON、POX（Plain Old XML）而不是SOAP格式的数据，充分利用HTTP谓词（Verb），侧重数据的传输，业务逻辑交给客户端自行处理 </span><br><span class="line"></span><br><span class="line">REST是一种分布式服务架构的风格约束，像Java、.Net（WCF、WebAPI）都有对该约束的实现，使URL变得更加有意义，更加简洁明了，如： </span><br><span class="line"></span><br><span class="line">https://www.zhangguo.com/products/1 </span><br><span class="line">get请求 表示获得所有产品的第1个 </span><br><span class="line"></span><br><span class="line">https://www.zhangguo.com/products/product</span><br><span class="line">post请求 表示添加一个产品 </span><br><span class="line"></span><br><span class="line">https://www.zhangguo.com/products/1/price </span><br><span class="line">get请求 表示获得第1个产品的价格 </span><br><span class="line"></span><br><span class="line">https://www.zhangguo.com/products/1 </span><br><span class="line">delete请求 删除编号为1的产品 </span><br><span class="line"></span><br><span class="line">REST设计需要遵循的原则  </span><br><span class="line">网络上的所有事物都被抽象为资源（resource）；  </span><br><span class="line">每个资源对应一个唯一的资源标识符（resource identifier）；  </span><br><span class="line">通过通用的连接器接口（generic connector interface）对资源进行操作；  </span><br><span class="line">对资源的各种操作不会改变资源标识符；  </span><br><span class="line">所有的操作都是无状态的（stateless） </span><br><span class="line"></span><br><span class="line">谓词  </span><br><span class="line">**GET**</span><br><span class="line">表示查询操作，相当于Retrieve、Select操作</span><br><span class="line">**POST**</span><br><span class="line">表示插入操作，相当于Create，Insert操作</span><br><span class="line">**PUT** </span><br><span class="line">表示修改操作，相当于Update操作</span><br><span class="line">**DELETE**</span><br><span class="line">表示删除操作，相当于Delete操作 </span><br><span class="line"></span><br><span class="line">其它还有： </span><br><span class="line">![](https://images2015.cnblogs.com/blog/63651/201612/63651-20161223101344557-1727952968.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NodeJS+Express可以很容易的实现REST</span><br><span class="line">* application/x-www-form-urlencoded</span><br><span class="line">* multipart/form-data</span><br><span class="line">* application/json</span><br><span class="line">* res.setHeader(&apos;Content-Type&apos;, &apos;application/json;charset=utf-8&apos;); </span><br><span class="line"></span><br><span class="line">示例代码cars.js：</span><br></pre></td></tr></table></figure><p>var express = require(‘express’);<br>var router = express.Router();<br>var _= require(‘lodash’);</p><p>var cars=[];<br>cars.push({id:201701,name:”BMW”,price:190,speed:”210km/h”,color:”白色”});<br>cars.push({id:201702,name:”BYD”,price:25,speed:”160km/h”,color:”红色”});<br>cars.push({id:201703,name:”Benz”,price:300,speed:”215km/h”,color:”蓝色”});<br>cars.push({id:201704,name:”Honda”,price:190,speed:”170km/h”,color:”黑色”});<br>cars.push({id:201705,name:”QQ”,price:130,speed:”210km/h”,color:”白色”});</p><p>/* Get <em>/<br>/*获得所有汽车</em>/<br>/<em>url /cars/</em>/<br>router.get(‘/‘, function(req, res, next) {<br>    res.json(cars);<br>});</p><p>/<em>Get</em>/<br>/<em>获得汽车通过id</em>/<br>/*url：/cars/:id  */<br>router.get(‘/:id’, function(req, res, next) {<br>     //从路径中映射参数，转换成数字<br>      var id=parseInt(req.params.id);<br>      var car=_.find(cars,{id:id});<br>      res.json(car);<br>});</p><p>/<em>Post</em>/<br>/<em>添加汽车</em>/<br>/*url：/cars/car  */<br>router.post(‘/car’, function(req, res, next) {<br>      var car=req.body;  //从请求正文中获得json对象<br>      car.id=_.last(cars).id+1;  //将编号修改为最后一辆车的编号+1<br>      cars.push(car);  //将汽车对象添加到集合中<br>      res.json(car);  //将添加成功的车以json的形式返回<br>});</p><p>/<em>Put</em>/<br>/<em>修改汽车</em>/<br>/*url：/cars/car  */<br>router.put(‘/car’, function(req, res, next) {<br>      var car=req.body;  //从请求正文中获得json对象<br>      console.log(req.body);<br>      var index=_.findIndex(cars,{id:parseInt(car.id)});  //根据id获得车在集合中的下标</p><pre><code>cars[index]=car;  //替换原对象//res.json(car);  //将修改后的车以json的形式返回res.send({status:&quot;success&quot;, message:&quot;更新成功!&quot;});  </code></pre><p>});</p><p>/<em>Delete</em>/<br>/<em>删除汽车</em>/<br>/*url：/cars/:id  */<br>router.delete(‘/id/:id’, function(req, res, next) {<br>      //获得url中的编号参数<br>      var id=parseInt(req.params.id);<br>      var index=_.findIndex(cars,{id:id});  //根据id获得车在集合中的下标<br>      cars.splice(index,1);   //在cars数组中删除下标从index开始的1条数据<br>      res.send({status:”success”, message:”删除成功!”});<br>});</p><p>module.exports = router;</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">示例代码app.js： </span><br><span class="line">```    </span><br><span class="line">    var express = require(&apos;express&apos;);</span><br><span class="line">    var path = require(&apos;path&apos;);</span><br><span class="line">    var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">    var logger = require(&apos;morgan&apos;);</span><br><span class="line">    var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">    var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">    </span><br><span class="line">    var index = require(&apos;./routes/index&apos;);</span><br><span class="line">    var users = require(&apos;./routes/users&apos;);</span><br><span class="line">    var pdts = require(&apos;./routes/product&apos;);</span><br><span class="line">    var task = require(&apos;./routes/task&apos;);</span><br><span class="line">    var cars = require(&apos;./routes/cars&apos;);</span><br><span class="line">    </span><br><span class="line">    var app = express();</span><br><span class="line">    </span><br><span class="line">    //指定视图引擎为ejs</span><br><span class="line">    app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">    app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line">    </span><br><span class="line">    // uncomment after placing your favicon in /public</span><br><span class="line">    //app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">    app.use(logger(&apos;dev&apos;));</span><br><span class="line">    app.use(bodyParser.json());</span><br><span class="line">    app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">    app.use(cookieParser());</span><br><span class="line">    app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">    </span><br><span class="line">    app.use(&apos;/&apos;, index);</span><br><span class="line">    app.use(&apos;/users&apos;, users);</span><br><span class="line">    app.use(&apos;/pdt&apos;, pdts);</span><br><span class="line">    app.use(&quot;/task&quot;,task);</span><br><span class="line">    app.use(&quot;/cars&quot;,cars);</span><br><span class="line">    </span><br><span class="line">    // catch 404 and forward to error handler</span><br><span class="line">    app.use(function(req, res, next) &#123;</span><br><span class="line">      var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">      err.status = 404;</span><br><span class="line">      next(err);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    // error handler</span><br><span class="line">    app.use(function(err, req, res, next) &#123;</span><br><span class="line">      // set locals, only providing error in development</span><br><span class="line">      res.locals.message = err.message;</span><br><span class="line">      res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">      // render the error page</span><br><span class="line">      res.status(err.status || 500);</span><br><span class="line">      res.render(&apos;error&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    module.exports = app;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">&gt; **Get**</span><br><span class="line">  </span><br><span class="line">* 获得所有汽车  </span><br><span class="line">* url /cars/</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2019/07/14/5d2b27eb42dea22132.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; **Get**</span><br><span class="line"></span><br><span class="line">* 获得汽车通过id </span><br><span class="line">* url：/cars/:id</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2019/07/14/5d2b28e456cdf58111.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; **Post** </span><br><span class="line"></span><br><span class="line">* 添加汽车  </span><br><span class="line">* url：/cars/car</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2019/07/14/5d2b30e46f28836556.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">参数中的json格式一定要使用标准格式，注意引号，注意Content-Type，默认的Content-Type类型是：application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; **Put**</span><br><span class="line"></span><br><span class="line">* 修改汽车</span><br><span class="line">* url：/cars/car</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2019/07/14/5d2b3434410e778260.jpg)</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2019/07/14/5d2b344cd080581595.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; **Delete**  </span><br><span class="line"></span><br><span class="line">* 删除汽车 </span><br><span class="line">* url：/cars/:id</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2019/07/14/5d2b3526d5bff57574.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2019/07/14/5d2b35474e9c447189.jpg)</span><br><span class="line"></span><br><span class="line">**node.js跨域**</span><br><span class="line"></span><br><span class="line">修改app.js文件拦截所有的请求，修改头部</span><br></pre></td></tr></table></figure><p>app.use(logger(‘dev’));<br>app.use(bodyParser.json());<br>app.use(bodyParser.urlencoded({ extended: false }));<br>app.use(cookieParser());<br>app.use(express.static(path.join(__dirname, ‘public’)));<br>app.all(‘<em>‘, function(req, res, next) {<br>    res.header(“Access-Control-Allow-Origin”, “</em>“);<br>    res.header(“Access-Control-Allow-Headers”, “content-type”);<br>    res.header(“Access-Control-Allow-Methods”, “PUT,POST,GET,DELETE,OPTIONS”);<br>    res.header(“X-Powered-By”, ‘ 3.2.1’);<br>    res.header(“Content-Type”, “application/json;charset=utf-8”);<br>    if(req.method == “OPTIONS”) {<br>        res.send(“200”);<br>    } else {<br>        next();<br>    }<br>});</p><pre><code>结果： ![][43]   [43]: https://images2017.cnblogs.com/blog/63651/201801/63651-20180108142729785-1121920664.png# 九、[视频](https://www.bilibili.com/video/av17977069)From: &lt;https://www.cnblogs.com/best/p/6204116.html&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Node.js" scheme="https://www.policx.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>front-matter</title>
    <link href="https://www.policx.com/2019/07/11/Front-matter/"/>
    <id>https://www.policx.com/2019/07/11/Front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-14T08:55:47.989Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/2019/07/11/CSDNnews/"/>
    <id>https://www.policx.com/2019/07/11/CSDNnews/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-14T15:15:37.845Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/2019/07/05/BitTorrent/"/>
    <id>https://www.policx.com/2019/07/05/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-08T15:20:42.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/2019/07/04/partner/"/>
    <id>https://www.policx.com/2019/07/04/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-12T09:50:03.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/2019/06/18/harddisk/"/>
    <id>https://www.policx.com/2019/06/18/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-08T15:20:35.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/2019/06/05/2019/"/>
    <id>https://www.policx.com/2019/06/05/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-12T09:40:14.384Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/2019/05/01/netlify/"/>
    <id>https://www.policx.com/2019/05/01/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-13T15:48:09.150Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。<br><img src="https://githubpage-1255710107.cos.ap-shanghai.myqcloud.com/static/images/KNN/hexo.png" alt></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。<br>那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。<br>接下来我分步骤的跟大家来介绍我的部署方案。</p><h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/2019/05/01/hexo-theme-icarus/"/>
    <id>https://www.policx.com/2019/05/01/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-09T14:25:12.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><ul><li>原文链接—&gt; <a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">easyhexo.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="https://www.policx.com/2018/09/17/git-del/"/>
    <id>https://www.policx.com/2018/09/17/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-13T08:10:24.253Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://www.policx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="https://www.policx.com/2018/06/19/python-excel/"/>
    <id>https://www.policx.com/2018/06/19/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-07T04:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="https://www.policx.com/2018/06/17/python-writer/"/>
    <id>https://www.policx.com/2018/06/17/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-07T04:36:07.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="https://www.policx.com/2018/06/05/2018/"/>
    <id>https://www.policx.com/2018/06/05/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-12T10:08:35.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="/post-images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymongo/"/>
    <id>https://www.policx.com/2018/05/02/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-07T04:35:29.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://www.policx.com/2018/05/02/mongodb/"/>
    <id>https://www.policx.com/2018/05/02/mongodb/</id>
    <published>2018-05-02T06:11:11.000Z</published>
    <updated>2019-07-13T08:11:55.980Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。</p><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库。</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。通常情况下，在一个集合中的所有文件都是类似或相关目的。</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。<br>下面给出的示例显示了一个博客网站，仅仅是一个逗号分隔的键值对的文档结构。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorial&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,20,2,15),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My second comments&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,25,7,45),</span><br><span class="line">         like: 5</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>MongoDB use DATABASE_NAME 用于创建数据库。该命令如果数据库不存在，将创建一个新的数据库， 否则将返回现有的数据库。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>use DATABASE语句的基本语法如下：<br><code>use DATABASE_NAME</code></p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">如果想创建一个数据库名称为 &lt;mydb&gt;, 那么 use DATABASE 语句应该如下：</span><br><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line"></span><br><span class="line">要检查当前选择的数据库使用命令 db</span><br><span class="line">&gt;db</span><br><span class="line">mydb</span><br><span class="line"></span><br><span class="line">如果想查询数据库列表，那么使用命令 show dbs.</span><br><span class="line">&gt;show dbs</span><br><span class="line">local     0.78125GB</span><br><span class="line">test      0.23012GB</span><br><span class="line"></span><br><span class="line">所创建的数据库（mydb）不存在于列表中。要显示的数据库，需要至少插入一个文档进去。</span><br><span class="line">&gt;db.movie.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;)</span><br><span class="line">&gt;show dbs</span><br><span class="line">local      0.78125GB</span><br><span class="line">mydb       0.23012GB</span><br><span class="line">test       0.23012GB</span><br></pre></td></tr></table></figure><p>MongoDB的默认数据库是test。 如果没有创建任何数据库，那么集合将被保存在测试数据库。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>MongoDB db.dropDatabase() 命令用于删除现有的数据库。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>dropDatabase()指令的基本语法如下：<br><code>db.dropDatabase()</code></p><p>这将删除选定的数据库。如果没有选择任何数据库，那么它会删除默认的“test”数据库</p><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>如果想删除新的数据库 <mydb>, 那么 dropDatabase() 命令将如下所示：</mydb></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;&#123; &quot;dropped&quot; : &quot;mydb&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>MongoDB 的 db.createCollection(name, options) 用于创建集合。 在命令中, name 是要创建集合的名称。 Options 是一个文档，用于指定集合的配置</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>String</td><td>要创建的集合的名称</td></tr><tr><td>Options</td><td>Document</td><td>（可选）指定有关内存大小和索引选项</td></tr></tbody></table><p>选项参数是可选的，所以需要指定集合的唯一名字。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>createCollection()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt;db.createCollection(&quot;mycollection&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以通过使用 show collections 命令来检查创建的集合</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;show collections</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><h3 id="选项列表"><a href="#选项列表" class="headerlink" title="选项列表"></a>选项列表</h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。</td></tr><tr><td>autoIndexID</td><td>Boolean</td><td>（可选）如果为true，自动创建索引_id字段。默认的值是 false.</td></tr><tr><td>size</td><td>number</td><td>（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。</td></tr><tr><td>max</td><td>number</td><td>（可选）指定上限集合允许的最大文件数。</td></tr></tbody></table><p>尽管插入文档，MongoDB首先检查字段集合的上限大小，那么它会检查最大字段。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法 :"></a>语法 :</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexID : true, size : 6142800, max : 10000 &#125; )</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.yiibai.insert(&#123;&quot;name&quot; : &quot;yiibai&quot;&#125;)</span><br><span class="line">&gt;show collections</span><br><span class="line">mycol</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br><span class="line">yiibai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>MongoDB 的 db.collection.drop() 用于从数据库中删除集合。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>drop() 命令的基本语法如下<br><code>db.COLLECTION_NAME.drop()</code></p><h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>下面给出的例子将删除给定名称的集合：mycollection</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.mycollection.drop()</span><br><span class="line">true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p>将数据插入到MongoDB集合，需要使用MongoDB 的 insert() 方法。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>insert()命令的基本语法如下：<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.insert(&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c),</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里 mycol 是我们的集合名称，它是在之前的教程中创建。如果集合不存在于数据库中，那么MongoDB创建此集合，然后插入文档进去。</p><p>在如果我们不指定_id参数插入的文档，那么 MongoDB 将为文档分配一个唯一的ObjectId。</p><p>_id 是12个字节十六进制数在一个集合的每个文档是唯一的。 12个字节被划分如下：<br>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</p><p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.post.insert([</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;NoSQL Database&apos;, </span><br><span class="line">   description: &apos;NoSQL database doesn&apos;t have tables&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 20, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p>要从集合查询MongoDB数据，需要使用MongoDB的 find()方法。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find()</code><br>find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p><code>&gt;db.mycol.find().pretty()</code></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>除了find()方法还有findOne()方法，仅返回一个文档。</p><h3 id="RDBMS-Where子句等效于MongoDB"><a href="#RDBMS-Where子句等效于MongoDB" class="headerlink" title="RDBMS Where子句等效于MongoDB"></a>RDBMS Where子句等效于MongoDB</h3><p>查询文档在一些条件的基础上，可以使用下面的操作</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>Equality</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td>db.mycol.find({“by”:”yiibai tutorials”}).pretty()</td><td>where by = ‘yiibai tutorials’</td></tr><tr><td>Less Than</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>Less Than Equals</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>Greater Than</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>Greater Than Equals</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>Not Equals</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="AND-在-MongoDB"><a href="#AND-在-MongoDB" class="headerlink" title="AND 在 MongoDB"></a>AND 在 MongoDB</h4><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>在 find()方法，如果您传递多个键通过”,”将它们分开，那么MongoDB对待它就如AND条件一样。基本语法如下所示：<br><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有教程含“yiibai tutorials”和其标题是“MongoDB Overview”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;yiibai tutorials&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>对于上面给出的例子相当于where子句：’ where by=’yiibai tutorials’ AND title=’MongoDB Overview’ ‘。可以传递任何数目的键-值对在find子句。</p><h4 id="OR-在-MongoDB"><a href="#OR-在-MongoDB" class="headerlink" title="OR 在 MongoDB"></a>OR 在 MongoDB</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><p>要查询基于OR条件的文件，需要使用$or关键字。OR的基本语法如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有撰写含有 ‘yiibai tutorials’ 或是标题为 ‘MongoDB Overview’ 的教程</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-AND-和-OR-在一起"><a href="#使用-AND-和-OR-在一起" class="headerlink" title="使用 AND 和 OR 在一起"></a>使用 AND 和 OR 在一起</h4><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子显示有喜欢数大于100 的文档，其标题要么是 ‘MongoDB Overview’ 或 ‘yiibai tutorials’. 等效于SQL的where子句：’where likes&gt;10 AND (by = ‘yiibai tutorials’ OR title = ‘MongoDB Overview’)’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai tutorials&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>MongoDB的update()和save()方法用于更新文档到一个集合。 update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。</p><h4 id="MongoDB-Update-方法"><a href="#MongoDB-Update-方法" class="headerlink" title="MongoDB Update() 方法"></a>MongoDB Update() 方法</h4><h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><p>update()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br></pre></td></tr></table></figure><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将设置其标题“MongoDB Overview”的文件为新标题为“New MongoDB Tutorial”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Tutorial Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 ‘multi’ 设置为 true。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="MongoDB-Save-方法"><a href="#MongoDB-Save-方法" class="headerlink" title="MongoDB Save() 方法"></a>MongoDB Save() 方法</h4><p>save() 方法取代，通过新文档到 save()方法</p><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><p>mongodb 的 save()方法如下所示的基本语法：<br><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><p>下面的例子将替换该文件_id ‘5983548781331adf45ec7’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.save(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>MongoDB 的 remove()方法用于从集合中删除文档。remove()方法接受两个参数。一个是标准缺失，第二是justOne标志<br>deletion criteria : 根据文件（可选）删除条件将被删除。<br>justOne : （可选）如果设置为true或1，然后取出只有一个文档。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>remove()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p><h6 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h6><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将删除所有的文件，其标题为 ‘MongoDB Overview’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Toturials Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="只删除一个"><a href="#只删除一个" class="headerlink" title="只删除一个"></a>只删除一个</h5><p>如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。<br><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p><h5 id="删除所有文件"><a href="#删除所有文件" class="headerlink" title="删除所有文件"></a>删除所有文件</h5><p>如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove()</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="MongoDB投影"><a href="#MongoDB投影" class="headerlink" title="MongoDB投影"></a>MongoDB投影</h4><p>mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。</p><p>MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。</p><p>语法</p><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find({},{KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示文档的标题，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意在执行find()方法时_id字段始终显示，如果不想要显示这个字段，那么需要将其设置为0</p><h5 id="限制文档"><a href="#限制文档" class="headerlink" title="限制文档"></a>限制文档</h5><p>MongoDB Limit() 方法</p><p>要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p>limit()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER)</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将只显示2个文档，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>如果不指定 limit()方法的参数数量，然后它会显示集合中的所有文档。</p><p>MongoDB Skip() 方法</p><p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。</p><p>语法</p><p>skip() 方法的基础语法如下所示：<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p><p>例子：</p><p>下面的例子将仅显示第二个文档。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，skip() 方法的默认值是 0</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p>要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。</p><p>语法</p><p>sort()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().sort({KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有如下数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示的文件排序按标题降序排序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;title&quot;:-1&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果不指定排序类型，那么 sort() 方法将以升序排列文档。</p><h4 id="MongoDB索引"><a href="#MongoDB索引" class="headerlink" title="MongoDB索引"></a>MongoDB索引</h4><p>索引支持查询高效率执行。如果没有索引，MongoDB必须扫描集合中的每一个文档，然后选择那些符合查询语句的文档。若需要 mongod 来处理大量数据，扫描是非常低效的。</p><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。</p><p>要创建索引，需要使用MongoDB的ensureIndex()方法。</p><p>语法</p><p>ensureIndex()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code></p><p>这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.</p><p>例子</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">在 ensureIndex()方法，可以通过多个字段，来创建多个字段索引。</span><br><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法还接受选项列表（这是可选），其列表如下：<br><img src="/post-images/1561132706992.png" alt></p><h4 id="MongoDB-聚合"><a href="#MongoDB-聚合" class="headerlink" title="MongoDB 聚合"></a>MongoDB 聚合</h4><p>聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。 在SQL中的count(*)，使用group by 与mongodb的聚合是等效的。 对于MongoDB的聚合，使用的是aggregate()方法。</p><p>语法</p><p>aggregate()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p><p>例子：</p><p>在集合中有以下数据：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai &apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;, </span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;, </span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;https://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在从上面的集合，如果想知道每一个用户编写的教程是多少，那么使用aggregate()方法，如下图所示的列表：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Yiibai Yiibai&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>用于上述用途将等效于sql查询： select by_user, count(*) from mycol group by by_user</code></pre><p>另外，在上述例子中，我们已经使用字段by_user进行分组并计算总和，也就是by_user 出现各个次数。一个列表中可用的聚集表达式。<br>    <img src="/post-images/1561132965786.png" alt></p><h4 id="MongoDB-复制"><a href="#MongoDB-复制" class="headerlink" title="MongoDB 复制"></a>MongoDB 复制</h4><p>复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。</p><h6 id="为什么要复制？"><a href="#为什么要复制？" class="headerlink" title="为什么要复制？"></a>为什么要复制？</h6><blockquote><pre><code>为了让数据安全数据的高（24*7）可用性灾难恢复无停机维护（如备份，索引重建，压缩）读取缩放（额外的副本来读取）副本集是透明的应用</code></pre></blockquote><h5 id="MongoDB复制的工作原理"><a href="#MongoDB复制的工作原理" class="headerlink" title="MongoDB复制的工作原理"></a>MongoDB复制的工作原理</h5><p>MongoDB通过使用副本集的复制来实现。副本集是一组承载同一个数据集的mongod实例。在副本的一个节点是接收所有的写操作主节点。所有的实例，次级，应用操作从主以便它们具有相同的数据集。副本集只能有一个主节点。</p><blockquote><pre><code>副本集是一组两个或更多个节点（通常至少3节点是必需的）。在副本集一个节点是主节点和其余的节点都是次要的。所有的数据复制是从主到次节点。在自动故障转移或维护时，选建立了主要和一个新的主节点被选择。故障节点的恢复后，再次加入副本集，并可以作为一个辅助节点。</code></pre></blockquote><p>mongodb复制的典型图如下图，其中客户端应用程序总是与主节点和主节点交互，然后将数据复制到辅助节点。<br><img src="/post-images/1561133216694.png" alt><br>副本集特征</p><ul><li>N个节点的集群</li><li>任何节点可为原发/主节点</li><li>所有的写操作进入到主节点</li><li>自动故障转移</li><li>自动恢复</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.policx.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MySQL 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymysql/"/>
    <id>https://www.policx.com/2018/05/02/pymysql/</id>
    <published>2018-05-02T03:14:27.000Z</published>
    <updated>2019-07-13T08:15:01.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是-PyMySQL？"><a href="#什么是-PyMySQL？" class="headerlink" title="什么是 PyMySQL？"></a>什么是 PyMySQL？</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><a id="more"></a> <h2 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h2><p>在文件中引入模块</p><p><code>import pymysql</code></p><h3 id="1-Connection对象"><a href="#1-Connection对象" class="headerlink" title="1.Connection对象"></a>1.Connection对象</h3><p>•  用于建立与数据库的连接<br>•  创建对象：调用connect()方法<br>conn=connect(参数列表)<br>•  参数host：连接的mysql主机，如果本机是’localhost’<br>•  参数port：连接的mysql主机的端口，默认是3306<br>•  参数db：数据库的名称<br>•  参数user：连接的用户名<br>•  参数password：连接的密码<br>•  参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</p><h3 id="2-对象的方法"><a href="#2-对象的方法" class="headerlink" title="2.对象的方法"></a>2.对象的方法</h3><p>•  close()关闭连接<br>•  commit()事务，所以需要提交才会生效<br>•  rollback()事务，放弃之前的操作<br>•  cursor()返回Cursor对象，用于执行sql语句并获得结果</p><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><p>•  执行sql语句<br>•  创建对象：调用Connection对象的cursor()方法<br>cursor1=conn.cursor()</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>•  close()关闭<br>•  execute(operation [, parameters ])执行语句，返回受影响的行数<br>•  fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组<br>•  next()执行查询语句时，获取当前行的下一行<br>•  fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回<br>•  scroll(value[,mode])将行指针移动到某个位置<br>•  mode表示移动的方式<br>•  mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动。相对的<br>•  mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0，绝对的。</p><h4 id="举个例子便于理解"><a href="#举个例子便于理解" class="headerlink" title="举个例子便于理解"></a>举个例子便于理解</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 导入python操作mysql的模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> pymysql</span><br><span class="line"><span class="hljs-comment"># 获取连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="hljs-string">'127.0.0.1'</span>, user=<span class="hljs-string">'root'</span>, password=<span class="hljs-string">'123456'</span>, database=<span class="hljs-string">'python01'</span>, port=<span class="hljs-number">3306</span>, charset=<span class="hljs-string">'utf8'</span>)</span><br><span class="line"><span class="hljs-comment"># 获取执行工具</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="hljs-comment"># sql语句,增删改</span></span><br><span class="line"><span class="hljs-comment">#sql = 'select birthday from t_user'</span></span><br><span class="line">sql = <span class="hljs-string">'select id,name,pwd,birthday from t_user'</span></span><br><span class="line"><span class="hljs-comment"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span></span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(<span class="hljs-string">'查询的结果有%s条数据'</span>%count)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取第一行</span></span><br><span class="line">dateOne = cur.fetchone()</span><br><span class="line">print(dateOne)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向上移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向下移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'absolute'</span>)   绝对的，这里指的是第一行</span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'relative'</span>)   相对的</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取所有行的数据</span></span><br><span class="line">dataAll = cur.fetchall()</span><br><span class="line">print(dataAll)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">     print(temp)</span><br><span class="line">     print(dataAll[<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])      <span class="hljs-comment">#dataAll[-1]得到的是一个用户所有的信息，dataAll[-1][2]获取最后一个人的密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> cur:</span><br><span class="line">     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-string">'id:%s,name:%s,pwd:%s,birthday:%s'</span></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">    print(s%(temp[<span class="hljs-number">0</span>],temp[<span class="hljs-number">1</span>],temp[<span class="hljs-number">2</span>],temp[<span class="hljs-number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-对象的属性"><a href="#3-对象的属性" class="headerlink" title="3.对象的属性"></a>3.对象的属性</h3><p>•  rowcount只读属性，表示最近一次execute()执行后受影响的行数<br>•  connection获得当前连接对象</p><h3 id="2-增删改查-CRUD"><a href="#2-增删改查-CRUD" class="headerlink" title="2.增删改查(CRUD)"></a>2.增删改查(CRUD)</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>•  创建testInsert.py文件，向学生表中插入一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;insert into students(sname) values(&apos;张良&apos;)&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p>•  创建testUpdate.py文件，修改学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;update students set sname=&apos;刘邦&apos; where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>•  创建testDelete.py文件，删除学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8 import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;delete from students where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>•  创建testSelectOne.py文件，查询一条学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Pymysql try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>•  创建testSelectMany.py文件，查询全部学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf8 import Pymysql</span><br><span class="line">try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="实例一：参数"><a href="#实例一：参数" class="headerlink" title="实例一：参数"></a>实例一：参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改，sql注入</span><br><span class="line">sql = &apos;insert into t_user(name,pwd,birthday) values(%s,%s,%s)&apos;</span><br><span class="line"># 参数列表</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = input(&apos;输入生日:&apos;)     # 2017年10月01日--&gt;日期struct_time(---&gt;2017-10-01)</span><br><span class="line">birthday = time.strptime(birthday,&apos;%Y年%m月%d日&apos;)      #这里我们就用到了时间与字符串的相互转换(详情见MySQL高级)</span><br><span class="line"></span><br><span class="line">params = [name,pwd,birthday]</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql,params)</span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">print(&apos;受影响的行数:%s&apos;%count)</span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例二：抛出异常"><a href="#实例二：抛出异常" class="headerlink" title="实例二：抛出异常"></a>实例二：抛出异常</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    conn = None</span><br><span class="line">    cur = None</span><br><span class="line">    # 获取连接对象</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">                           user=&apos;root&apos;,</span><br><span class="line">                           password=&apos;123456&apos;,</span><br><span class="line">                           database=&apos;python01&apos;,</span><br><span class="line">                           port=3306,</span><br><span class="line">                           charset=&apos;utf8&apos;)</span><br><span class="line">    # 模拟异常</span><br><span class="line">    # a = 1 / 0</span><br><span class="line">    # 获取执行工具</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    # sql语句,增删改</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd,birthday) values(&quot;小伊&quot;,&quot;123456&quot;,str_to_date(&quot;2017年10月20日&quot;,&quot;%Y年%m月%d日&quot;))&apos;</span><br><span class="line">    # 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">    count = cur.execute(sql)</span><br><span class="line">    # 提交</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(&apos;受影响的行数:%s&apos; % count)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    # 打印异常信息，测试时候使用，项目上线，去掉</span><br><span class="line">    print(str(ex))</span><br><span class="line">    # 将异常继续抛出</span><br><span class="line">    # raise</span><br><span class="line">finally:</span><br><span class="line">    if cur != None:</span><br><span class="line">        cur.close()</span><br><span class="line">    if conn != None:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例三："><a href="#实例三：" class="headerlink" title="实例三："></a>实例三：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改</span><br><span class="line">#sql = &apos;select birthday from t_user&apos;</span><br><span class="line">sql = &apos;select id,name,pwd,birthday from t_user&apos;</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(&apos;查询的结果有%s条数据&apos;%count)</span><br><span class="line"></span><br><span class="line">#获取第一行</span><br><span class="line"># dateOne = cur.fetchone()</span><br><span class="line"># print(dateOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for temp in cur:</span><br><span class="line">#     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;id:%s,name:%s,pwd:%s,birthday:%s&apos;</span><br><span class="line">for temp in dataAll:</span><br><span class="line">    print(s%(temp[0],temp[1],temp[2],temp[3]))</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h3><p>这个库的名字：mySqlHelper</p><p> python操作mysql进行增删改查的封装</p><pre><code>1、增删改，代码类似2、查询代码分析1、获取连接对象2、sql语句不同，参数不同3、获取执行对象    增删改    查询        1、fetchone        2、fetchall4、处理结果5、关闭</code></pre><h4 id="面向对象-建立类，封装属性和函数"><a href="#面向对象-建立类，封装属性和函数" class="headerlink" title="面向对象  建立类，封装属性和函数"></a>面向对象  建立类，封装属性和函数</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">class MysqlHelper:</span><br><span class="line">    &apos;&apos;&apos;python操作mysql的增删改查的封装&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, host, user, password, database, port=3306, charset=&apos;utf8&apos;):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化参数</span><br><span class="line">        :param host:        主机</span><br><span class="line">        :param user:        用户名</span><br><span class="line">        :param password:    密码</span><br><span class="line">        :param database:    数据库</span><br><span class="line">        :param port:        端口号，默认是3306</span><br><span class="line">        :param charset:     编码，默认是utf8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        获取连接对象和执行对象</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.conn = pymysql.connect(host=self.host,</span><br><span class="line">                                    user=self.user,</span><br><span class="line">                                    password=self.password,</span><br><span class="line">                                    database=self.database,</span><br><span class="line">                                    port=self.port,</span><br><span class="line">                                    charset=self.charset)</span><br><span class="line"></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    def fetchone(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数元组，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataOne = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataOne = self.cur.fetchone()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataOne</span><br><span class="line"></span><br><span class="line">    def fetchall(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数列表，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataall = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataall = self.cur.fetchall()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataall</span><br><span class="line"></span><br><span class="line">    def __item(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行增删改</span><br><span class="line">        :param sql:           sql语句</span><br><span class="line">        :param params:        sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:              受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        count = 0</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行修改</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def insert(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行新增</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def delete(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行删除</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        关闭执行工具和连接对象</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if self.cur != None:</span><br><span class="line">            self.cur.close()</span><br><span class="line">        if self.conn != None:</span><br><span class="line">            self.conn.close()</span><br></pre></td></tr></table></figure><h4 id="1-测试查询多条数据"><a href="#1-测试查询多条数据" class="headerlink" title="1.测试查询多条数据"></a>1.测试查询多条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where name = %s and id &gt; %s&apos;</span><br><span class="line"># params</span><br><span class="line">params = [&apos;小茗&apos;,1]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchall(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    for temp in data:</span><br><span class="line">        print(temp)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br><span class="line"></span><br><span class="line">helper.close()</span><br></pre></td></tr></table></figure><h4 id="2-测试查询一条数据"><a href="#2-测试查询一条数据" class="headerlink" title="2.测试查询一条数据"></a>2.测试查询一条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where id = %s&apos;</span><br><span class="line">#sql = &apos;select * from t_user where id = 1&apos;</span><br><span class="line"># params</span><br><span class="line">params = [2]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchone(sql, params)</span><br><span class="line">#data = helper.fetchone(sql)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    print(data)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br></pre></td></tr></table></figure><h4 id="3-测试增删改"><a href="#3-测试增删改" class="headerlink" title="3.测试增删改"></a>3.测试增删改</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;update t_user set name =%s,pwd=%s,birthday=%s where id=%s&apos;</span><br><span class="line"># params</span><br><span class="line">id = input(&apos;输入编号:&apos;)</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = time.strptime(input(&apos;输入生日:&apos;), &apos;%Y年%m月%d日&apos;)</span><br><span class="line">params = [name, pwd, birthday,id]</span><br><span class="line"># 执行</span><br><span class="line">count = helper.update(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if count:</span><br><span class="line">    print(&apos;操作成功.&apos;)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;操作失败.&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-登录和注册"><a href="#4-登录和注册" class="headerlink" title="4.登录和注册"></a>4.登录和注册</h4><p>登录和注册的时候需要对密码进行加密</p><p>注意：</p><p>•  需要对密码进行加密<br>•  如果使用md5加密，则密码包含32个字符<br>•  如果使用sha1加密，则密码包含40个字符，这里使用这种方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table userinfos(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    uname varchar(20),</span><br><span class="line">    upwd char(40),</span><br><span class="line">    isdelete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">ret = doPwd(&apos;123&apos;)</span><br><span class="line">print(ret)</span><br><span class="line">结果：40bd001563085fc35165329ea1ff5c5ecbdbbeef</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">-- 插入如下数据，用户名为123,密码为123,这是sha1加密后的值</span><br><span class="line"></span><br><span class="line">insert into userinfos </span><br><span class="line">values(1,&apos;123&apos;,&apos;40bd001563085fc35165329ea1ff5c5ecbdbbeef&apos;,0);</span><br></pre></td></tr></table></figure><h4 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from mysqlHelper import MysqlHelper</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    &apos;&apos;&apos;登录&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    #加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;select * from t_user where name=%s and pwd=%s&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    data = helper.fetchone(sql, params)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;登录成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;登录失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doPwd(pwd):</span><br><span class="line">    &apos;&apos;&apos;sha1编码&apos;&apos;&apos;</span><br><span class="line">    mysha1 = hashlib.sha1()</span><br><span class="line">    mysha1.update(pwd.encode(&apos;utf-8&apos;))</span><br><span class="line">    pwd = mysha1.hexdigest()</span><br><span class="line">    return pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    &apos;&apos;&apos;注册&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    # 加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd) values(%s,%s)&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    count = helper.insert(sql, params)</span><br><span class="line">    if count:</span><br><span class="line">        print(&apos;操作成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;操作失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #register()</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PyMySQL？&quot;&gt;&lt;a href=&quot;#什么是-PyMySQL？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PyMySQL？&quot;&gt;&lt;/a&gt;什么是 PyMySQL？&lt;/h2&gt;&lt;p&gt;PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。&lt;/p&gt;
&lt;p&gt;PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django笔记</title>
    <link href="https://www.policx.com/2018/04/18/django-bi-ji/"/>
    <id>https://www.policx.com/2018/04/18/django-bi-ji/</id>
    <published>2018-04-17T17:00:16.000Z</published>
    <updated>2019-07-12T10:07:09.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p><a id="more"></a><h2 id="一-版本选择"><a href="#一-版本选择" class="headerlink" title="一. 版本选择"></a>一. 版本选择</h2><p>Django 2.0.x 支持 Python 3.4, 3.5 和 3.6 （注意，不再支持 Python 2）   </p><h2 id="二-安装-Django"><a href="#二-安装-Django" class="headerlink" title="二. 安装 Django"></a><strong>二. 安装 Django</strong></h2><p><strong>2.1. 用 pip 来安装</strong></p><p><strong>2.1.1 需要先安装pip</strong></p><p>(1). Linux, Mac OSX, Windows 下都可用 get-pip.py 来安装<br>pip：<a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/installing.html</a>  </p><p>或者直接下载：<a href="https://bootstrap.pypa.io/get-pip.py" title="get-pip.py" target="_blank" rel="noopener">get-pip.py</a> 然后运行在终端运行 <strong>python get-pip.py 就可以安装 pip。</strong></p><p>Note: 也可以下载 pip 源码包，运行 <strong>python setup.py install</strong> 进行安装 </p><p><strong>2.1.2 利用 pip 安装 Django</strong></p><p><code>（sudo) pip install Django    或者(sudo) pip install Django==1.8.16 或者 pip install Django==1.11.8</code>    </p><p>如果想升级 pip 可以用： </p><pre><code>(sudo) pip install --upgrade pip</code></pre><p><strong>2.2. 下载源码安装</strong>  </p><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">https://www.djangoproject.com/download/</a></p><p>如果是源码包, 比如 django-1.11.8.tar.gz </p><p><strong>2.2.1 Linux 或 Mac 下</strong></p><pre><code>tar -xvf django-1.11.8.tar.gzcd django-1.11.8(sudo) python setup.py install</code></pre><h2 id="三-检查是否安装成功"><a href="#三-检查是否安装成功" class="headerlink" title="三. 检查是否安装成功"></a><strong>三. 检查是否安装成功</strong></h2><p>终端上输入 python ,点击 Enter，进行 python 环境</p><pre><code>&gt;&gt;&gt; import django&gt;&gt;&gt; django.VERSION(1, 11, 8, &apos;final&apos;, 0)&gt;&gt;&gt; &gt;&gt;&gt; django.get_version()&apos;1.11.8&apos;</code></pre><p>如果运行后看到版本号，就证明安装成功了！ </p><h2 id="四-搭建多个互不干扰的开发环境（可选）"><a href="#四-搭建多个互不干扰的开发环境（可选）" class="headerlink" title="四. 搭建多个互不干扰的开发环境（可选）"></a><strong>四. 搭建多个互不干扰的开发环境（可选）</strong></h2><p>我们有的时候会发现，一个电脑上有多个项目，一个依赖 Django 1.8，另一个比较旧的项目又要用 Django 1.5，这时候怎么办呢？ </p><p>我们需要一个依赖包管理的工具来处理不同的环境。 </p><h3 id="4-1-虚拟环境依赖安装"><a href="#4-1-虚拟环境依赖安装" class="headerlink" title="4.1 虚拟环境依赖安装"></a>4.1 虚拟环境依赖安装</h3><p>开发会用 virtualenv 来管理多个开发环境 </p><p><strong>Linux/MacOS 下</strong></p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了 </p><pre><code># 安装:(sudo) pip install virtualenv virtualenvwrapper</code></pre><p>修改~/.bash_profile或其它环境变量相关文件(如 .bashrc 或用 ZSH 之后的 .zshrc)，添加以下语句  </p><pre><code>export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/workspacesource /usr/local/bin/virtualenvwrapper.sh</code></pre><p>修改后使之立即生效(也可以重启终端使之生效)： </p><pre><code>source ~/.bash_profile</code></pre><h3 id="4-2-虚拟环境使用方法："><a href="#4-2-虚拟环境使用方法：" class="headerlink" title="4.2 虚拟环境使用方法："></a><strong>4.2 虚拟环境使用方法：</strong></h3><p><strong>mkvirtualenv zqxt：创建运行环境zqxt</strong></p><p><strong>workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境</strong></p><p><strong>deactivate</strong>: 退出终端环境</p><p><strong>其它的：</strong></p><p><strong>rmvirtualenv</strong> ENV：删除运行环境ENV </p><p><strong>mkproject</strong> mic：创建mic项目和运行环境mic </p><p><strong>mktmpenv</strong>：创建临时运行环境 </p><p><strong>lsvirtualenv</strong>: 列出可用的运行环境 </p><p><strong>lssitepackages</strong>: 列出当前环境安装了的包 </p><p>创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django部署——uwsgi+Nginx</title>
    <link href="https://www.policx.com/2018/04/17/django/"/>
    <id>https://www.policx.com/2018/04/17/django/</id>
    <published>2018-04-17T09:42:04.000Z</published>
    <updated>2019-07-13T08:10:51.809Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!</p><a id="more"></a><p><img src="/post-images/1560768371650.png" alt><br>环境：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3.6</span><br><span class="line">centos 7</span><br><span class="line">Django1.11</span><br></pre></td></tr></table></figure><h2 id="1、本地跑起来Django"><a href="#1、本地跑起来Django" class="headerlink" title="1、本地跑起来Django"></a>1、本地跑起来Django</h2><p>这里不讲Django项目实施过程，假设你已经写了一个Django项目，并且在本地127.0.0.1:8000能够跑起来。喏，给你个参考，项目大概长这样：<br><img src="/post-images/1560764670814.png" alt></p><ul><li>kindle目录为我创建的Django App</li></ul><h2 id="2、修改项目配置"><a href="#2、修改项目配置" class="headerlink" title="2、修改项目配置"></a>2、修改项目配置</h2><p>也就是项目目录下的settings.py文件，主要强调几个地方：</p><p>①关闭DEBUG模式：<br><img src="/post-images/1560764736238.png" alt><br>②修改ALLOWED_HOSTS：<br><img src="/post-images/1560764863424.png" alt><br>③配置静态文件存放路径：<br><img src="/post-images/1560764833026.png" alt></p><p>修改好配置之后执行:<br><code>python manage.py collectstatic</code><br>将项目用到的静态文件复制到项目根目录下的static文件中<br><img src="/post-images/1560764930146.png" alt></p><h2 id="3、安装uwsgi和Nginx"><a href="#3、安装uwsgi和Nginx" class="headerlink" title="3、安装uwsgi和Nginx"></a>3、安装uwsgi和Nginx</h2><p>这个没什么说的。。。在自己的云服务器上装好这两个工具<br>安装好uwsgi后最好验证一下，验证方法：<br>创建一个test.py文件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)])</span><br><span class="line">    return [b&apos;Hello world!&apos;]    #python3</span><br><span class="line">    # return [&apos;Hello world!&apos;]    #python2</span><br></pre></td></tr></table></figure><p>启动uwsgi服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --wsgi-file test.py</span><br></pre></td></tr></table></figure><p>如果可以正常启动而不报错那就应该没问题，不放心的话再在终端验证一下：<br><code>wget https://127.0.0.1:8000</code><br>看一下能否正确获取内容</p><h2 id="4、配置项目的uwsgi"><a href="#4、配置项目的uwsgi" class="headerlink" title="4、配置项目的uwsgi"></a>4、配置项目的uwsgi</h2><p>在项目所在文件夹下创建uwsgi.ini配置文件，也就是这里:<br><img src="/post-images/1560765049955.png" alt><br>在uwsgi.ini里进行如下配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># Django-related settings</span><br><span class="line"> </span><br><span class="line"># 这里的端口可以根据自己需要设定</span><br><span class="line">socket = 127.0.0.1:8001        </span><br><span class="line"> </span><br><span class="line"># the base directory (full path)</span><br><span class="line"># 这个是Django项目的根目录，也就是包含App的那个目录，仔细对照上图</span><br><span class="line">chdir           = /home/python/book2kindle</span><br><span class="line"> </span><br><span class="line"># Django s wsgi file</span><br><span class="line"># 这里是项目名(不是App名).wsgi</span><br><span class="line">module          = book2kindle.wsgi</span><br><span class="line"> </span><br><span class="line"># process-related settings</span><br><span class="line"># master</span><br><span class="line">master          = true</span><br><span class="line"> </span><br><span class="line"># maximum number of worker processes</span><br><span class="line">processes       = 32</span><br><span class="line"> </span><br><span class="line"># ... with appropriate permissions - may be needed</span><br><span class="line"># chmod-socket    = 664</span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum          = true</span><br><span class="line"> </span><br><span class="line">plugin python = true</span><br><span class="line"> </span><br><span class="line"># 这个是项目的虚拟python环境，如果没用虚拟环境，可以不设定</span><br><span class="line">home = /home/python/book2kindle_env</span><br></pre></td></tr></table></figure><h2 id="5、配置项目的nginx"><a href="#5、配置项目的nginx" class="headerlink" title="5、配置项目的nginx"></a>5、配置项目的nginx</h2><p>找到nginx的配置文件夹，centos7的nginx配置文件在/etc/nginx下，该路径下有一个nginx.conf总配置文件，还有两个文件夹./conf.d、./default.d，我们将nginx.conf复制一份到conf.d文件夹下，命名为nginx.conf（或者项目名.conf）进行如下修改（根据中文注释进行相应配置即可）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream django &#123;</span><br><span class="line">        # 注意这里的server要和uwsgi.ini配置文件中的socket保持一致</span><br><span class="line">        server 127.0.0.1:8002; # for a web port socket</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  xxx.com;  # 这里填自己的域名或者服务器的ip（决定你今后访问网站的方式）</span><br><span class="line">        charset      utf-8;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        location / &#123;</span><br><span class="line">        root        /home/python/book2kindle/kindle;  # 这是Django App的路径</span><br><span class="line">            uwsgi_pass  django;</span><br><span class="line">            include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">        &#125;</span><br><span class="line">        location /static &#123;</span><br><span class="line">            # Django项目静态文件的路径</span><br><span class="line">            alias /home/python/book2kindle/static; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、启动uwsgi和nginx"><a href="#6、启动uwsgi和nginx" class="headerlink" title="6、启动uwsgi和nginx"></a>6、启动uwsgi和nginx</h2><p>进入uwsgi.ini文件夹下执行：<br><code>uwsgi --ini uwsgi.ini</code><br>在终端执行：<br><code>service nginx restart</code><br>然后就可以根据域名（前提是要将域名解析到服务器ip地址）或者服务器ip来访问网站了！</p><p>OK，完事！就是这么简单！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>2018创业记：如何选择合伙人？</title>
    <link href="https://www.policx.com/2018/03/25/chuangye/"/>
    <id>https://www.policx.com/2018/03/25/chuangye/</id>
    <published>2018-03-25T13:02:42.000Z</published>
    <updated>2019-07-13T08:06:31.136Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><a id="more"></a><h2 id="创业路上危机四伏，如何破局？"><a href="#创业路上危机四伏，如何破局？" class="headerlink" title="创业路上危机四伏，如何破局？"></a>创业路上危机四伏，如何破局？</h2></li></ul><p>很多朋友在2018年做出了改变，迈出了新的一步。比如身边几位朋友正摩拳擦掌准备创业。然而，看别人创业和自己创业完全是两回事儿，见得再多，自己趟水时也难免有所顾虑。</p><p>在跟他们聊过之后，我们发现了他们普遍面临的一个课题：如何选择合伙人?这是身经百战的连续创业者也很难驾轻就熟的一个课题，今天我们就来一起聊聊。本文将从能不能和朋友一起创业、合伙人应该与我互补还是相似、如何判断双方是否志同道合、如何应对常见的分歧几个部分展开来说。</p><p>风物长宜放眼量，抱持开阔的胸襟、敏锐的判断、坚韧的意志，相信大家能够与志同道合的伙伴一起，越过山丘，携手站上梦想之巅。</p><h2 id="能不能和朋友一起创业？"><a href="#能不能和朋友一起创业？" class="headerlink" title="能不能和朋友一起创业？"></a>能不能和朋友一起创业？</h2><p>在创业初期，创业者选择合伙人往往会从身边的朋友“下手”。</p><p>一起创业可以说是认清一个朋友的最好方式。一篇名为《友谊的代价》的论文，考察了3510个风险投资者，以及他们在1975-2003年间11895个投资项目。</p><p>论文写道，有的人选择与自己能力相当的人合作，比如同是名校毕业；但更多的人选择与自己的熟人合作，比如曾经的同学或同事。结果表明，按能力搭档可以增加投资的成功概率，而找熟人搭档，则会明显降低成功的可能性。</p><p>所有人都喜欢强联系，但关系是关系，工作归工作。现在社会学已经有了足够多的证据说明：对工作来说，同乡会和校友录并不是扩展人脉的好地方。《中国合伙人》这部电影上映后，“千万别跟好朋友合伙开公司”也成了热议话题。电影的最后，三位合伙人分道扬镳，而剧本的原型——新东方的三位创始人也以“分家”收场。</p><p>当然，朋友合伙创业成功的案例也不在少数，况且，长期的伙伴关系更有助于共同面对创业过程中的艰难险阻，团队也更容易在创业初期获得投资人的青睐。如果在寻找合伙人的过程中，你觉得还是某个朋友更适合，那么一定要在合作之前约法三章，考虑到最坏的情况，提前用书面合同的方式确定双方的责权利，用规章制度来约束指导双方的行为，而不是靠人情关系。</p><p>中间一旦觉得发生了问题，你就必须考虑一下能否继续合作下去。其实，很多合作者走不到最后就是因为中间的小问题没有解决，一点一点积累最后爆发出来。</p><p>因此，能否和朋友一起创业这个问题，需要辩证思考。如果朋友间相互了解对方的个性和能力，工作中能做到分工明确，用规章制度来规范双方的行为，及时解决小矛盾，相互照顾，一起分担，共同奋斗，那么创业成功就会成为大概率事件。</p><h2 id="合伙人应该与我互补还是相似？"><a href="#合伙人应该与我互补还是相似？" class="headerlink" title="合伙人应该与我互补还是相似？"></a>合伙人应该与我互补还是相似？</h2><p>一个较为合理的答案是：理念和价值观上要相似，能力和经验上要互补。</p><p>理念和价值观上的相近，可以保证你们在重大原则问题上的判断是比较一致的，不至于出现根本性的冲突。这些重大的原则问题包括企业的战略方向、利益分配机制、做事的基本底线等等。</p><p>在这些问题上出现不同意见，通常很难取得共识。因为个性和价值观的形成，通常都不是一朝一夕的事情，也就是我们常说的“江山易改，本性难移”。如果在创业的艰难环境下，双方还要来磨合这个层面的东西，就会非常痛苦。</p><p>能力和经验上的互补相对更好理解。你擅长产品，他专于研发；你有丰富的运营经验，他则对于商业模式的建立更有心得；你对数字不敏感，他则是投资和财务领域的资深人士。这些都是很好的互补。</p><p>互补可以让你们在具体事情的推进中事半功倍，并建立起对于对方在专业领域的依靠和信任。人不可能是全能的，如果一切未知的领域都需要你自己来摸索，费时费力不说，风险还很大。</p><p>对于相似还是互补这个问题的解读，还可以反向进行。比如你们是能力经验上的相近，而在理念上互补，你可以想象一下是个什么局面，一定是你不会的他也不会，你觉得对的他觉得不对，那就真的很难合作下去了。</p><h2 id="如何判断双方是否志同道合？"><a href="#如何判断双方是否志同道合？" class="headerlink" title="如何判断双方是否志同道合？"></a>如何判断双方是否志同道合？</h2><p>对于这个问题，不同的人可能会给出非常不同的答案。雷军就曾说过，他找人有两个要素：“一要最专业，小米的合伙人都是各管一块，这样能保证整个决策非常快，把业务交给他，要能实打实做出成绩来；二要最合适，主要是指要有创业心态，对所做的事要极度喜欢，有共同的愿景，这样就会有很强的驱动力。”</p><p>雷军说，他在三个月的时间里见了超过100位做硬件的人选，终于找到了负责硬件的联合创始人周光平博士，两人第一次见面就谈了12个小时。</p><p>而周鸿祎表示，他会选择具备这四种素质的合伙人：首先应该有创业精神；其次要有很强的学习能力；第三，要有很好的开放合作心态；此外，还要能自我激励，自我驱动，同样一件事，用打工的心态和用创业的心态做，效果完全不一样。</p><p>虽然答案因人而异，但仍然可以总结出一些判断标准，以下几条可为你选择合伙人时提供参考。</p><h3 id="1、关系有一定的深度和广度，彼此信任"><a href="#1、关系有一定的深度和广度，彼此信任" class="headerlink" title="1、关系有一定的深度和广度，彼此信任"></a>1、关系有一定的深度和广度，彼此信任</h3><p>共事且维持朋友关系多年的创业团队关系更深，有可能经受住紧张和冲突的考验。合伙人未必需要成为最要好的朋友，但如果他们相互喜欢的话事情可能会更好办些。更重要的是，创始人之间应该尊重彼此以及他们给团队带来的不同能力。不信任合伙人的能力会导致手伸过头，还可能会导致控制权之争。在这种窝里斗的情况下大部分的合作关系都无法维系。</p><h3 id="2、了解彼此的优势和劣势，分工明确"><a href="#2、了解彼此的优势和劣势，分工明确" class="headerlink" title="2、了解彼此的优势和劣势，分工明确"></a>2、了解彼此的优势和劣势，分工明确</h3><p>尊重彼此的技能和优势并不意味着创始人就不需要审视合伙人的弱点了。友谊更久自然也会更了解某人的特长和技能。这些不同的技能有助于创始人团队自然地分清责任、角色，在某些情况下还可以分清头衔。根据每一位合伙人的技能明确划分职责，对创业的帮助很大。做事的时候每个人要有独立的角色，但同时永远要对其他合伙人的反馈持开放态度。</p><h3 id="3、确保所有合伙人对成功和失败的定义一致"><a href="#3、确保所有合伙人对成功和失败的定义一致" class="headerlink" title="3、确保所有合伙人对成功和失败的定义一致"></a>3、确保所有合伙人对成功和失败的定义一致</h3><p>韧性最强的创始人不会从财务的角度去衡量自己的初创企业是否成功，相反，他们会从使命的角度去衡量。他们的初创企业只是追求实现使命的手段。但是，并不是所有的创始人都这么看，甚至一开始关注使命的创始人有时候到后面也会转向考虑财务方面的事情。</p><p>有的创始人可能志存高远，为了尽快做大愿意烧很多钱，而有的人希望逐步打磨产品，限制人数规模和保留现金尺度。不仅对成功的认知会影响运营决策，对失败的认知同样会起作用。</p><p>在创业过程中，其中一位合伙人急着退出的故事屡见不鲜，因此这个教训值得一提再提。对于拥有成功企业的创始人来说，避免在这个问题上发生冲突的关键是定期讨论这件事。应该在公司早期就设定好目标，并且对这个话题进行定期复议。</p><h3 id="4、所有合伙人均应对股权分配满意"><a href="#4、所有合伙人均应对股权分配满意" class="headerlink" title="4、所有合伙人均应对股权分配满意"></a>4、所有合伙人均应对股权分配满意</h3><p>哈佛教授Wasserman发现，73%的联合创业团队一般在公司成立30天内就确定了如何进行股权分配。股权分配当然是任何共同创业的人都要首先考虑的事情之一，但事实上在那个时候，没人知道谁干活最卖力，谁对初创企业的贡献最有价值。过早确定股权分配会导致后面发生问题。如果可以的话，最好等到你有机会了解大家一起工作会是什么个情况后再正式分蛋糕。话虽如此，这件事情还是不要拖太久，围绕股权的分歧最好在公司早期就解决掉。</p><h3 id="5、永远要相互支持"><a href="#5、永远要相互支持" class="headerlink" title="5、永远要相互支持"></a>5、永远要相互支持</h3><p>这话听上去似乎太空泛，但是合伙人的关系也可能会反复无常，尤其是在受到不同观点、董事会成员等的影响下。合伙人之间的相互支持可带来信心，确保合伙人和员工都有共同的使命感。</p><p>团队应该早点理解一件事，任何情况下合伙人之间都应该背靠背相互支持，所以合伙人要尽量避免当着员工、董事会等人的面互相拆台，这样能够让公司其他人感觉到他们友情之牢固，让每一位合伙人都能保持镇定，因为他们知道对方一定会支持自己的。</p><h2 id="如何应对常见的分歧？"><a href="#如何应对常见的分歧？" class="headerlink" title="如何应对常见的分歧？"></a>如何应对常见的分歧？</h2><h3 id="1、公司走向的歧见"><a href="#1、公司走向的歧见" class="headerlink" title="1、公司走向的歧见"></a>1、公司走向的歧见</h3><p>在0到1的探索期，公司的走向往往是由合伙人一起决定的。但进入1到100的扩张期，一个年轻企业通常会开始有董事会以及重要的供应、通路伙伴。久而久之，合伙人对于公司未来走向的看法，常常会越来越变得分歧。</p><p>防范这个陷阱要从根源开始：每当CEO有了新的资讯、成长、学习、领悟，应该积极地与合伙人分享，协助他们获得与你类似的成长。同时，你应该把小范围的决策授权出去，让他们也能继续主导公司某一部分的走向。最后，你应该积极管理大家对决策的期望值，新创公司必须在“快”与“好”之间做出平衡，因此决策求的是多数对，而不是样样对。</p><h3 id="2、无法适应制度"><a href="#2、无法适应制度" class="headerlink" title="2、无法适应制度"></a>2、无法适应制度</h3><p>0到1的新创团队求快，因此不会有太多制度。进入1到100阶段，公司势必要开始建立一些管理系统，以在风险与发展中间取得平衡。</p><p>有些习惯了说干就干的合伙人，在此时会产生严重的不适应，时间一长甚至会觉得公司背离了创办的初衷。要解决这个问题，除了及早发现及早辅导外，请他们参与、主导制度的设计，也是协助合伙人适应新制度的方法。</p><h3 id="3、越权管理"><a href="#3、越权管理" class="headerlink" title="3、越权管理"></a>3、越权管理</h3><p>当公司开始有部门、部门主管，合伙人还是习惯看不顺眼就管，容易造成经理人的困扰。更有甚者，造成合伙人对经理人不信任，反而让经理人没有足够的时间、空间去适应、学习。这个问题通常是惯性使然，重点就是要打破它。所以，看到这样的行为要赶快提醒伙伴们注意。</p><h3 id="4、无法跟上公司成长的需要"><a href="#4、无法跟上公司成长的需要" class="headerlink" title="4、无法跟上公司成长的需要"></a>4、无法跟上公司成长的需要</h3><p>在公司快速扩张期，一个3人产品团队可能在一年内成长为30人，而两者之间管理上的不同，常常会让本来擅长技术、产品，但从来没有管理中大型团队经验的合伙人一时间跟不上公司发展的步伐。</p><p>回到扩张前，你应该早早找到好的CTO Mentor，在扩张中，经常鼓励他在管理知识与能力上精进。扩张后，如果他真的无法适应，也比较能够接受去寻找更有经验的CTO，而自己退居部门二把手、三把手。</p><h3 id="5、利益分配"><a href="#5、利益分配" class="headerlink" title="5、利益分配"></a>5、利益分配</h3><p>当公司越来越成功、越赚钱、离IPO越近，股权与利益的问题就会越容易产生。尤其当初的股权分配如果没有彰显每个合伙人的相对价值，那团队中可能酝酿出不良情绪。</p><p>比较好的方法当然是早期就把这个问题解决掉，因为到了后期，你的工具会越来越有限。但也不是没有机会修正，如果有合伙人离开，你可以收回他的股权来重新分配。如果有B、C、D轮增资，你可以跟投资人要求“期权池”(ESOP)，通过发放新的选择权来平衡。最后，如果真的过于集中，负责任的CEO，甚至会拿出自己的股权分配给伙伴们。</p><p>选择合伙人未必有一定之规，创业路上可能遇到的危机也远远不止上述这些，希望这篇文章能对你有所裨益，助你在创业路上少走弯路，也祝愿创业者们在2018年博得好彩头，大鹏一日同风起，扶摇直上九万里。</p><p>本文来源：<a href="https://www.sohu.com/a/225670991_100064845" target="_blank" rel="noopener">联想之星</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="life" scheme="https://www.policx.com/categories/life/"/>
    
    
  </entry>
  
</feed>
