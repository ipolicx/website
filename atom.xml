<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南一道街</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-08-05T09:42:24.815Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>appleCard</title>
    <link href="https://www.policx.com/appleCard/"/>
    <id>https://www.policx.com/appleCard/</id>
    <published>2019-08-05T09:42:00.000Z</published>
    <updated>2019-08-05T09:42:24.815Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a id="more"></a><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://policx.com/" target="_blank" rel="noopener"><img src="https://policx.com/images/avatar.png" alt="policx"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>善用佳软 uPic</title>
    <link href="https://www.policx.com/uPic/"/>
    <id>https://www.policx.com/uPic/</id>
    <published>2019-07-27T04:11:04.000Z</published>
    <updated>2019-07-27T16:32:08.603Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>对于markdown重度用户而言，一款好用的图床工具能够有效提升效率。从Windows到Mac，笔者也算是辗转用过多款图床客户端，包括iPic、PicGo等等。而自从更换新的工作环境之后，笔者对于图床客户端又有了新的需求——自定义图床。</p><a id="more"></a><p>幸好，一次机缘巧合让笔者遇到了uPic，除了支持微博、SM.MS、七牛云、腾讯云等图床之外，还可以自定义配置图床。 </p><blockquote><p>uPic下载地址：<a href="https://github.com/gee1k/uPic/releases" target="_blank" rel="noopener">https://github.com/gee1k/uPic/releases</a> </p></blockquote><p>笔者目前工作所用的编辑器，既不支持外链，也不支持图片粘贴后自动上传，一旦涉及多图文章，光上传图片就浪费不少时间。因此，笔者萌生了构建自定义图床的想法，更幸运的是，笔者公司对于图片上传服务并没有做太多的限制，也让这种想法成为可能。 </p><p>uPic是一款开源简洁的图床客户端，方便用户直接上传图片到指定的存储空间，并获取有效的markdown图片地址，其默认图床为SM.MS，当然也支持配置腾讯云、七牛云、又拍云等常见的对象存储。最关键的是支持图床自定义配置，也让我毅然抛弃了一直以来付费使用的iPic。<br><img src="https://i.loli.net/2019/07/27/5d3bd2c197d8592897.jpg" alt></p><p>其实起初并不顺利，刚上手的uPic（大概是v0.7.0版本），自定义图床配置并不适用于笔者常用的编辑器环境。好在软件开发者@svend足够热心，在了解了笔者的需求及编辑环境之后，重构了自定义图床，使得笔者的想法得以实现，包括大家在反馈群里提出的一些建议，也都及时采纳并更新。 </p><p>直到最新发布的v0.8.0版本，uPic已经成为一款非常成熟且强大的图床客户端，且安装包大小也不过才10.5M。 </p><p>好了，啰嗦了这么多，也该进入正题了。 </p><p>uPic目前仅支持Mac端，默认上传到SM.MS匿名图床，除此之外还支持微博、码云、Github以及腾讯云、阿里云、又拍云、七牛云总共八个图床。其中，由于微博近期已经陆续开启防盗链，笔者不建议在个人博客中使用。<br><img src="https://i.loli.net/2019/07/27/5d3bd288ac38618894.jpg" alt><br>在上传方式上，uPic支持本地选择/复制文件上传、截图上传，甚至可直接拖动文件到菜单栏uPic图标上完成上传动作。<br><img src="https://i.loli.net/2019/07/27/5d3bd3727bf6963617.gif" alt="640"></p><p>在最新更新v0.8.0版本之后，uPic新增支持直接从浏览器中复制或者拖动在线图片上传到指定图床，这样就不用下载到本地再进行上传。<br><img src="https://gitee.com/policx/im/raw/master/images/GoRrBa.gif" alt></p><p>不过需要注意的是，GIF动图不大一样，直接从浏览器中复制或者拖动GIF上传至uPic图床，可能最终上传的只是GIF图中一帧的画面，所以对于GIF最好还是先下载到本地，然后使用uPic上传到图床。 </p><p>在“设置——拓展——访达拓展”中勾选uPic一项，即可开启本地文件右键菜单中“使用uPic上传”的功能，也算是比较方便的一种本地文件上传方式。<br><img src="https://i.loli.net/2019/07/27/5d3bdbd03d58f62506.jpg" alt><br><img src="https://gitee.com/policx/im/raw/master/images/mOO863.jpg" alt></p><p>一旦完成上传动作，所输出的文件链接会自动复制到剪切板，直接在文档中粘贴即可，在输出链接格式上可根据需求选择URL、HTML、Markdown三种。<br><img src="https://gitee.com/policx/im/raw/master/images/Y0lYcO.jpg" alt></p><p>点击菜单栏uPic图标，还可以查看最近十条上传记录，同时可以预览上传内容缩略图，以便选择重新复制。<br><img src="https://gitee.com/policx/im/raw/master/images/Ze9ScG.jpg" alt><br>熟练使用快捷键操作，可以进一步提升使用效率。uPic支持三种上传方式的自定义快捷键。基本不用点击菜单了去选择，即可完成上传动作。<br><img src="https://gitee.com/policx/im/raw/master/images/MqUOQy.jpg" alt><br>例如，通过设定好的快捷键完成截图上传操作，按住鼠标框选所需区域，松开鼠标之后即完成截图并直接上传到图床（注意没有确认截图的过程哦～）。<br><img src="https://gitee.com/policx/im/raw/master/images/k0GikB.gif" alt><br>使用这段时间，笔者感觉uPic已经足够成为一款高效、简洁的图床客户端，支持强大的自定义图床配置，支持复制/拖动上传以及快捷键操作。不过在部分体验上iPic依然值得uPic借鉴，例如复制图片后点击菜单栏的iPic，能够比较直观地看到已复制图片及近期上传图片的预览，体验更加直观。<br><img src="https://gitee.com/policx/im/raw/master/images/dLyZLX.jpg" alt="a"><br>不得不提的是，开发者@svend虽然只利用业余时间更新维护，同样保持了较高的更新频率，发现bug或者其他不稳定的因素更是会连夜修复，并且会及时反馈用户的意见。作为一款免费的Mac图床客户端，uPic已经赢得了越来越多的用户亲睐。 </p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/WcchsHp007SswWr2qHGxTQ" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/27/5d3bcf474c70088570.jpg" alt="wechat"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于markdown重度用户而言，一款好用的图床工具能够有效提升效率。从Windows到Mac，笔者也算是辗转用过多款图床客户端，包括iPic、PicGo等等。而自从更换新的工作环境之后，笔者对于图床客户端又有了新的需求——自定义图床。&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>「拖放」Mac 的底层能力，也是效率神技</title>
    <link href="https://www.policx.com/DragAndDrop/"/>
    <id>https://www.policx.com/DragAndDrop/</id>
    <published>2019-07-26T14:19:21.000Z</published>
    <updated>2019-07-27T15:16:49.565Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>个人惯用 Mac 拖放，但每每身边同事看我的操作习惯，都大惊失色，感叹 Mac 还有这种操作，所以决定单独讲一篇 Mac 拖放。</p><a id="more"></a><p>Mac的拖放几乎是全局的，比如你可以将图片文件从应用拖到 Finder，同样可以将文件从 Finder 拖至应用内，甚至从应用A拖拽至应用B。</p><p>总之，基于 Finder 的文件拖拽，让系统和应用、应用和应用协同起来，大大提速。以下是一些示例。</p><blockquote><p>应用-&gt;Finder</p></blockquote><p>1.微信-&gt;Finder<br><img src="https://i.loli.net/2019/07/27/5d3c5f3ea1d9e89990.gif" alt></p><p>2.浏览器-&gt;Finder<br><img src="https://gitee.com/policx/im/raw/master/images/Xfj58J.gif" alt></p><p>出于版权安全的考虑，以及前端技术的极速革新，部分网站已不再支持将图片拖拽至 Finder，但多数网站仍然支持。</p><p>3.PDF-&gt;Finder<br><img src="https://gitee.com/policx/im/raw/master/images/wEnYQa.gif" alt="pic"></p><p>如果你只需要 PDF 20P中的1P，可以单独拖拽至Finder。</p><blockquote><p>Finder-&gt;应用</p></blockquote><p>1.Finder-&gt;微信<br><img src="https://gitee.com/policx/im/raw/master/images/H2aKxW.gif" alt="pic"></p><p>2.Finder-&gt;办公套件<br><img src="https://gitee.com/policx/im/raw/master/images/Pc9jOK.gif" alt="pic"></p><p>3.Finder-&gt;PDF<br><img src="https://gitee.com/policx/im/raw/master/images/Hi56sE.gif" alt="pic"></p><blockquote><p>应用-&gt;应用</p></blockquote><p>1.浏览器-&gt;微信<br><img src="https://gitee.com/policx/im/raw/master/images/6whkO3.gif" alt="pic"></p><p>2.微信-&gt;办公套件<br><img src="https://gitee.com/policx/im/raw/master/images/37ryoD.gif" alt="pic"></p><p>除了以上”应用-&gt;Finder，Finder-&gt;应用，应用-&gt;应用”几种拖放，Mac 还有其他很多地方支持此操作，比如文件拖拽至垃圾桶、应用拖拽至Docker、文件拖拽至 Docker 上应用图标即可打开……  </p><p>使用拖拽，还是复制粘贴，或是通过各个应用的菜单完成操作，都没什么问题，如果你知道了 MacOS 的一项新能力，不妨试试。</p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/DPhrXF5qfPEMrEGimslh1w" target="_blank" rel="noopener"><img src="https://gitee.com/policx/im/raw/master/images/Z2gkII.png" alt="pic"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人惯用 Mac 拖放，但每每身边同事看我的操作习惯，都大惊失色，感叹 Mac 还有这种操作，所以决定单独讲一篇 Mac 拖放。&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>Python导图</title>
    <link href="https://www.policx.com/mind/"/>
    <id>https://www.policx.com/mind/</id>
    <published>2019-07-21T06:03:24.000Z</published>
    <updated>2019-07-21T08:40:14.360Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>推荐：<strong>XMind</strong> 一个全功能的思维导图和头脑风暴软件。</p></blockquote><a id="more"></a><h2 id="Python-系列-一-核心知识"><a href="#Python-系列-一-核心知识" class="headerlink" title="Python 系列 (一)  核心知识"></a>Python 系列 (一)  核心知识</h2><p><img src="/mindImage/0%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80.png" alt><br><img src="/mindImage/2Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80.png" alt><br><img src="/mindImage/3%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%B8%80)%E6%95%B0%E5%80%BC%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88.png" alt><br><img src="/mindImage/4%E6%A0%87%E5%87%86%E7%B1%BB%E5%9E%8B%E8%A1%A5%E5%85%85.png" alt><br><img src="/mindImage/5%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%BA%8C)%E5%BA%8F%E5%88%97%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/6%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%B8%89)%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt><br><img src="/mindImage/7%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/8%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/9%E5%87%BD%E6%95%B0%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/10%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E5%87%BD%E6%95%B0.png" alt><br><img src="/mindImage/11%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/12%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/13%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/14%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/15%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/16%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt><br><img src="/mindImage/17%E6%B5%8B%E8%AF%95%E8%B0%83%E8%AF%95.png" alt></p><h2 id="Python系列-一-基础编程"><a href="#Python系列-一-基础编程" class="headerlink" title="Python系列 (一) 基础编程"></a>Python系列 (一) 基础编程</h2><p><img src="/mindImage/1Python%E7%B3%BB%E5%88%97(%E4%B8%80)%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861.png" alt><br><img src="/mindImage/3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862.png" alt><br><img src="/mindImage/4%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt><br><img src="/mindImage/5%E5%BA%8F%E5%88%97.png" alt><br><img src="/mindImage/6%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt><br><img src="/mindImage/7%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84.png" alt><br><img src="/mindImage/8%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88.png" alt><br><img src="/mindImage/9%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/10%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/11%E9%94%99%E8%AF%AF%EF%BC%86%E5%BC%82%E5%B8%B8.png" alt><br><img src="/mindImage/12%E5%87%BD%E6%95%B0%E4%B8%80.png" alt><br><img src="/mindImage/13%E5%87%BD%E6%95%B0%E4%BA%8C.png" alt><br><img src="/mindImage/14%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/15%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt></p><h2 id="Python系列-二-常用标准库及拓展知识"><a href="#Python系列-二-常用标准库及拓展知识" class="headerlink" title="Python系列(二)常用标准库及拓展知识"></a>Python系列(二)常用标准库及拓展知识</h2><p><img src="/mindImage/0%E3%80%90%E7%9B%AE%E5%BD%95%E3%80%91Python%E7%B3%BB%E5%88%97(%E4%BA%8C)%E5%B8%B8%E7%94%A8%E6%A0%87%E5%87%86%E5%BA%93%E5%8F%8A%E6%8B%93%E5%B1%95%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/1%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%BF%B0.png" alt><br><img src="/mindImage/2%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt><br><img src="/mindImage/3%E6%97%A5%E6%9C%9F&%E6%97%B6%E9%97%B4.png" alt><br><img src="/mindImage/4%E7%B3%BB%E7%BB%9F&%E6%96%87%E4%BB%B6.png" alt><br><img src="/mindImage/5%E8%BF%9B%E7%A8%8B&%E7%BA%BF%E7%A8%8B.png" alt><br><img src="/mindImage/6%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt><br><img src="/mindImage/7%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97&%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt></p><h2 id="Python应用领域和数据结构"><a href="#Python应用领域和数据结构" class="headerlink" title="Python应用领域和数据结构"></a>Python应用领域和数据结构</h2><p><a href="https://www.jianshu.com/p/66f6d9a434f9" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/21/5d3400422503e26621.jpg" alt="Python数据结构"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;推荐：&lt;strong&gt;XMind&lt;/strong&gt; 一个全功能的思维导图和头脑风暴软件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《Python札记》1_列表list</title>
    <link href="https://www.policx.com/python3-notes01/"/>
    <id>https://www.policx.com/python3-notes01/</id>
    <published>2019-07-18T14:55:41.000Z</published>
    <updated>2019-07-21T05:10:58.223Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="写于开始之前"><a href="#写于开始之前" class="headerlink" title="写于开始之前"></a>写于开始之前</h3><p>笔者即将开始写一个系列的《<code>Python</code>札记》。本系列的札记主要是自学<code>齐伟</code>老师《跟老齐学<code>Python</code>轻松入门》一书整理而来。书第一遍断断续续花了5个月，第二遍边看边整理，保守3个月。</p><a id="more"></a><p><strong>在此深深感谢齐伟老师带我入门<code>Python</code></strong>。<strong>工欲善其事，必先利其器</strong>，本札记的学习环境为：<code>Python3.7.2 + pycharm + jupyter notebook</code>： </p><ul><li><code>Python3</code>取代了<code>Python2</code>，成为主流</li><li>针对<code>Python</code>语言，<code>Pycharm</code>是最好的<code>IDE</code></li><li><code>Jupyter notebook</code>是利用<code>Python</code>进行机器学习的强大利器</li></ul><p><strong>本札记一定会在2个月之内完成</strong>，主要内容包含： </p><ul><li>学习笔记整理</li><li>代码实战练习</li><li>各种练习题</li><li>利用<code>Python</code>实现常用算法 <a href="https://www.jianshu.com/c/7287d92c5db4" target="_blank" rel="noopener">机器学习_Python算法</a></li></ul><p><strong>希望对<code>Python</code>感兴趣的朋友有所帮助，自己也在努力学习中，将来主要方向是：<code>机器学习+数据挖掘+量化投资</code></strong></p><h4 id="良好的开始是成功的一半！Let-s-go-go-go"><a href="#良好的开始是成功的一半！Let-s-go-go-go" class="headerlink" title="良好的开始是成功的一半！Let`s go go go!!!"></a>良好的开始是成功的一半！Let`s go go go!!!</h4><hr><blockquote><p>列表是<code>Python</code>中使用非常广泛的一种对象，用方括号<code>[ ]</code>来表示。括号里面可以是数字，字符串或者<code>True</code>，<code>False</code>的布尔值，或者是多种不同类型的对象，里面也可以嵌套列表。如果列表是空的，用<code>bool()</code>来进行判断，会返回 <code>False</code>。 </p></blockquote><hr><h3 id="一、索引、切片、反转"><a href="#一、索引、切片、反转" class="headerlink" title="一、索引、切片、反转"></a>一、索引、切片、反转</h3><p>列表和字符串一样，都是序列，里面的元素是有序的，也有索引和切片。索引<code>index</code>左边从<code>0</code>开始，右边从<code>-1</code>开始，<code>index()</code>函数可以查看某个元素的索引编号。 </p><p><strong>索引</strong></p><ul><li>左边0开始，右边-1开始</li><li>通过<code>index()</code>函数查看索引编号</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># lang = ['python', 'java', 'html']</span></span><br><span class="line"><span class="hljs-comment"># lang.index('python')</span></span><br><span class="line"><span class="hljs-number">0</span>  <span class="hljs-comment"># 索引从0开始</span></span><br><span class="line"><span class="hljs-comment"># lang.index('html')</span></span><br><span class="line"><span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><p><strong>切片</strong></p><ul><li>索引左边从0开始，右边-1开始</li><li>含头不含尾</li><li>步长可正可负</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">print(lst[:])     <span class="hljs-comment">#  相当于是复制 lst</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">print(lst[::<span class="hljs-number">2</span>])  <span class="hljs-comment">#  步长是2    [开始:结束:步长]</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(lst[<span class="hljs-number">-3</span>:<span class="hljs-number">-1</span>])</span><br><span class="line"></span><br><span class="line">lst = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]</span><br><span class="line">print(lst[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])     <span class="hljs-comment"># 常规用法</span></span><br><span class="line">print(lst[<span class="hljs-number">-5</span>:<span class="hljs-number">-2</span>:<span class="hljs-number">2</span>])   <span class="hljs-comment"># 标号-5代表的是元素2，标号-2代表的是5，步长为2</span></span><br><span class="line">print(lst[<span class="hljs-number">-5</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>])</span><br><span class="line">print(lst[<span class="hljs-number">1</span>:<span class="hljs-number">-2</span>:<span class="hljs-number">2</span>])</span><br><span class="line">[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]</span><br></pre></td></tr></table></figure><p><strong>反转</strong></p><ul><li>通过步长-1进行反转，[::-1]</li><li>通过<code>reversed()</code>进行反转，得到的是<strong>可迭代对象</strong>，并且将迭代对象转为为<code>列表显示</code></li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 反转1</span></span><br><span class="line">print(lst[::<span class="hljs-number">-1</span>])  <span class="hljs-comment"># 通过步长为-1进行反转</span></span><br><span class="line">print(lst)   <span class="hljs-comment"># 不影响原来对象</span></span><br><span class="line">[<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 反转2</span></span><br><span class="line">print(list(reversed(lst)))  <span class="hljs-comment"># 通过reversed函数进行反转</span></span><br><span class="line">[<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">print(list(reversed(<span class="hljs-string">'abcde'</span>)))    <span class="hljs-comment"># 对字符串进行反转，列表显示</span></span><br><span class="line">[<span class="hljs-string">'e'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'a'</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="二、操作列表"><a href="#二、操作列表" class="headerlink" title="二、操作列表"></a>二、操作列表</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>len()：求长度</li><li>+：连接两个序列</li><li>*：复制序列</li><li>in：判断元素是否在列表中</li><li>max()、min()：按照元素的字典顺序进行排序</li></ul><p><strong>1、修改元素</strong></p><blockquote><p><strong>列表</strong>中的元素可以进行<strong>修改</strong>，但是字符串中的不能进行修改。列表中修改的时候，直接通过索引号进行指定： </p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst[<span class="hljs-number">2</span>] = <span class="hljs-number">7</span>   <span class="hljs-comment"># 指定第三个元素为7</span></span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br></pre></td></tr></table></figure><p><strong>2、增加元素</strong><br>追加元素的方法有两种，都是追加在<strong>末尾</strong></p><ul><li>append()函数进行追加</li><li>切片的方式进行追加：a[len(a):] = [ x ]</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst.append(<span class="hljs-number">8</span>)  </span><br><span class="line">lst[len(lst):] = [<span class="hljs-number">8</span>]</span><br><span class="line">print(lst)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]   <span class="hljs-comment"># 例子承接上面，第三个元素为7，不是3</span></span><br></pre></td></tr></table></figure><p><strong>3、列表函数</strong></p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>append</td><td>将单个元素追加到列表的<strong>最右边</strong>，即末尾部分；<strong>list[len(list):] = [x]</strong>，x是待追加的元素；  <strong>没有返回值None</strong></td></tr><tr><td>extend</td><td>将<strong>两个列表进行合并</strong>，扩充列表的作用；  参数必须是<strong>可迭代对象</strong>；  <strong>list[len(list):] = L</strong>，L是待并入的列表；  完成追加过程，列表L不变，list发生变化；  <strong>没有返回值None</strong></td></tr><tr><td>insert</td><td>指定位置添加元素  格式：list.insert(i,x)，i是插入的位置，x是待追加元素 ；  i如果是0，相当于是插在首位；i如果是len(list)，相当于是插在最后面，则等价于append()函数</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># extend()函数</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</span><br><span class="line">print(id(lst))   <span class="hljs-comment"># 查看lst的内存地址</span></span><br><span class="line">lst1 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line">lst.extend(lst1)</span><br><span class="line">print(id(lst))   <span class="hljs-comment"># 查看追加列表之后的内存地址，与原来系相同的</span></span><br><span class="line">print(<span class="hljs-string">"lst:"</span>, lst)</span><br><span class="line">print(<span class="hljs-string">"lst1:"</span>, lst1)</span><br><span class="line"></span><br><span class="line"><span class="hljs-number">2435334264968</span></span><br><span class="line"><span class="hljs-number">2435334264968</span></span><br><span class="line">lst: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line">lst1: [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># append与extend区别</span></span><br><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst2 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]</span><br><span class="line">lst1.append(lst2)</span><br><span class="line">print(lst1)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]]   <span class="hljs-comment"># 整建制，将lst2当做一个整体</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst2 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]</span><br><span class="line">lst1.extend(lst2)</span><br><span class="line">print(lst1)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]   <span class="hljs-comment"># 个体化，将lst2的每个元素进行追加</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li>列表是可以进行<strong>修改</strong>的，原地修改</li><li>append是将一个元素加到列表的末尾，<strong>整建制追加</strong></li><li>extend将两个列表进行合并，<strong>个体化扩编</strong></li><li>extend方法执行之后，<strong>内存中id不变</strong>，只是在该id上的内容发生了变化</li><li>insert()函数中的i如果超过最大索引值，则自动追加到末尾，相当于是append()函数的作用</li><li>三种方法均是原地修改，无返回值</li></ul><hr><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>count</td><td>查看元素重复出现的次数  <strong>如果不存在，返回0</strong>，而不是报错</td></tr><tr><td>index</td><td>查看索引编号，不存在则报错  检索的是元素<strong>第一次</strong>出现的位置</td></tr><tr><td>remove</td><td>删除元素，原地修改，无返回值；  list.remove(x)：如果x不存在，则会报错；  如果x出现多次，<strong>删除第一个x，剩下不变</strong></td></tr><tr><td>pop</td><td>pop([i]):参数是可选的；  为空，<strong>默认删除最后一个</strong>，并且将该元素作为返回值；  如果不为空，<strong>可删除索引为i的元素</strong>，并且将该元素作为返回值</td></tr><tr><td>reverse</td><td>原地反转，没有生成新的列表，没有返回值</td></tr><tr><td>reversed</td><td>类似reverse，区别：生成的列表能够<strong>用于迭代</strong></td></tr></tbody></table><p><strong>remove和pop的区别</strong></p><ul><li>remove 没有返回值，pop有返回值</li><li>remove的参数是元素，pop的参数是索引</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">lst1.remove(<span class="hljs-number">2</span>)</span><br><span class="line">print(lst1)</span><br><span class="line"><span class="hljs-comment"># lst1.remove(7)</span></span><br><span class="line"><span class="hljs-comment"># print(lst1)   ValueError: list.remove(x): x not in list</span></span><br><span class="line">lst1.pop(<span class="hljs-number">2</span>)</span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]   <span class="hljs-comment"># 将元素2删除掉</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]      <span class="hljs-comment">#  将索引为2的元素3删除掉，本步骤是接在上面的执行，即在列表[1, 3, 4, 5, 6] 中删除4</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关于反转</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(lst[::<span class="hljs-number">-1</span>])   <span class="hljs-comment"># 反转实现1</span></span><br><span class="line">print(lst)          <span class="hljs-comment"># 原来的列表对象不改变</span></span><br><span class="line">lst.reverse()    <span class="hljs-comment"># 反转实现2</span></span><br><span class="line">print(lst)          <span class="hljs-comment"># 原来的列表变成反转之后的新列表</span></span><br><span class="line">lst1= reversed(lst)</span><br><span class="line">print(lst1)       <span class="hljs-comment"># lst1是一个列表反转迭代器对象：&lt;list_reverseiterator object at 0x00000233C677F320&gt;</span></span><br><span class="line">print(list(lst1))    <span class="hljs-comment"># 用list函数显示lst1的内容</span></span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>sort</td><td>排序函数，用于<code>列表list</code>中，<strong>原地修改没有返回值</strong>；  <strong>默认从小到大</strong>；将<strong>reverse=True</strong>则变成从大到小排序sort(self, /, *, key=None, reverse=False)</td></tr><tr><td>sorted</td><td>对<code>所有可迭代对象</code>进行操作，返回一个新的 <code>list</code>，不是在原来的list上进行操作  sorted(iterable[, cmp[, key[, reverse]]])</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># sort()</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst.sort()</span><br><span class="line">print(lst)</span><br><span class="line">lst1 = [<span class="hljs-string">'python'</span>, ‘Java’, <span class="hljs-string">'html'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'php'</span>]</span><br><span class="line">lst1.sort(key=len)  <span class="hljs-comment"># 列表中的字符串进行排序；如果长度相同，则按照出现的先后顺序</span></span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</span><br><span class="line">[<span class="hljs-string">'c'</span>, <span class="hljs-string">'php'</span>, <span class="hljs-string">'Java'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'python'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># sorted()</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst1 = sorted(lst)</span><br><span class="line">print(lst)  <span class="hljs-comment"># 原对象不变</span></span><br><span class="line">print(lst1) <span class="hljs-comment"># 新列表为排序后的对象</span></span><br><span class="line"></span><br><span class="line">lst2 =[(<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>),(<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>),(<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>),(<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>)]</span><br><span class="line">lst3 = sorted(lst2, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])   <span class="hljs-comment"># 由元组构成的复合列表，按照元组的第二个元素进行排序，通过匿名函数lamba()</span></span><br><span class="line">print(lst3)</span><br><span class="line">[(<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>)]</span><br><span class="line"></span><br><span class="line">lst4 = sorted(lst2, key=<span class="hljs-keyword">lambda</span> x: len(x[<span class="hljs-number">0</span>]))   <span class="hljs-comment"># 通过元组中第一个元素的长度进行排序</span></span><br><span class="line">print(lst4)</span><br><span class="line">[(<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>), (<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>)]</span><br></pre></td></tr></table></figure><h4 id="自定义类中的元素进行排序"><a href="#自定义类中的元素进行排序" class="headerlink" title="自定义类中的元素进行排序"></a>自定义类中的元素进行排序</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, age, grade)</span>:</span></span><br><span class="line">        self.name =  name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.grade = grade</span><br><span class="line">        </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span>  repr((self.name, self.grade, self.age))</span><br><span class="line">    </span><br><span class="line">students_objects = [</span><br><span class="line">    Student(<span class="hljs-string">'Tom'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-number">12</span>),</span><br><span class="line">    Student(<span class="hljs-string">'xiaoming'</span>,<span class="hljs-string">'A'</span>,<span class="hljs-number">17</span>),</span><br><span class="line">    Student(<span class="hljs-string">'xiaohong'</span>, <span class="hljs-string">'C'</span>, <span class="hljs-number">12</span>),</span><br><span class="line">    Student(<span class="hljs-string">'Peter'</span>, <span class="hljs-string">'D'</span>, <span class="hljs-number">8</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">lst5 = sorted(students_objects, key=<span class="hljs-keyword">lambda</span> t:t.age)   <span class="hljs-comment"># 自定义类中，按照年龄进行排序</span></span><br><span class="line">print(lst5)</span><br><span class="line">lst6 = sorted(students_objects, key=<span class="hljs-keyword">lambda</span> t:(t.age, t.grade))   <span class="hljs-comment"># 使用元组，先根据年龄排序，若年龄相同按照grade排序</span></span><br><span class="line">print(lst6)</span><br><span class="line"></span><br><span class="line">[(<span class="hljs-string">'xiaoming'</span>, <span class="hljs-number">17</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'Tom'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'xiaohong'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'Peter'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'D'</span>)]</span><br><span class="line">[(<span class="hljs-string">'xiaoming'</span>, <span class="hljs-number">17</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'Tom'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'xiaohong'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'Peter'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'D'</span>)]</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.jianshu.com/c/ab55c73e0037?utm_source=desktop&utm_medium=notes-included-collection" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/20/5d32f16d5b0bf92604.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写于开始之前&quot;&gt;&lt;a href=&quot;#写于开始之前&quot; class=&quot;headerlink&quot; title=&quot;写于开始之前&quot;&gt;&lt;/a&gt;写于开始之前&lt;/h3&gt;&lt;p&gt;笔者即将开始写一个系列的《&lt;code&gt;Python&lt;/code&gt;札记》。本系列的札记主要是自学&lt;code&gt;齐伟&lt;/code&gt;老师《跟老齐学&lt;code&gt;Python&lt;/code&gt;轻松入门》一书整理而来。书第一遍断断续续花了5个月，第二遍边看边整理，保守3个月。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>超时空从犯</title>
    <link href="https://www.policx.com/Accomplice/"/>
    <id>https://www.policx.com/Accomplice/</id>
    <published>2019-07-18T02:18:06.000Z</published>
    <updated>2019-07-27T15:14:02.285Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><input checked disabled type="checkbox"> 你回头看了我一眼</li></ul><a id="more"></a><ul><li><input disabled type="checkbox"> 我觉得那很久很久</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;input checked disabled type=&quot;checkbox&quot;&gt; 你回头看了我一眼&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="label" scheme="https://www.policx.com/categories/label/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter的环境配置 for Mac</title>
    <link href="https://www.policx.com/flutter/"/>
    <id>https://www.policx.com/flutter/</id>
    <published>2019-07-16T10:14:18.000Z</published>
    <updated>2019-07-18T06:22:40.943Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 </p><a id="more"></a><h2 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装Flutter</h2><p>首先我们可以在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fdocs%2Fget-started%2Finstall" target="_blank" rel="noopener">Flutter官网</a>上面看到一些配置环境的步骤。这里就直接开干了，走起。 </p><h3 id="1、配置HomeBrew"><a href="#1、配置HomeBrew" class="headerlink" title="1、配置HomeBrew"></a>1、配置HomeBrew</h3><p>我们在去配置Flutter的环境之前，需要先检查一下HomeBrew是不是最新的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br></pre></td></tr></table></figure><p>如果没有brew的话，可以去<a href="https://link.juejin.im?target=https%3A%2F%2Fbrew.sh%2F" target="_blank" rel="noopener">HomeBrew官网</a>自行下载。这里就不赘述了，这里如果重新下载的话，看到下面的打印信息就说明下载完毕了。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3aad595f24923.jpg" alt></p><h3 id="2、下载SDK"><a href="#2、下载SDK" class="headerlink" title="2、下载SDK"></a>2、下载SDK</h3><p>接下来就是去官网下载SDK了。注意，这里下载SDK有两种方法：</p><ul><li>一是直接<code>git clone -b beta https://github.com/flutter/flutter.git</code>下载</li><li>二是自己在官网下载下来，如下图<br><img src="https://i.loli.net/2019/07/16/5d2db40e0aecc50465.jpg" alt></li></ul><p>这里我两种方法都试过了一遍，第一种方法实在是太慢了，在经历了耗费一个半小时下载到94%，最后提示失败了的过程之后，我决定还是用第二种方法，整个过程只用了3分钟的样子，相当满意。下载完之后，是一个名字叫<code>flutter_macos_v1.5.4-hotfix.2-stable.zip</code>的压缩包。 然后我们解压这个zip包，把解压出来的<strong>flutter</strong>文件放到根目录下即可。 </p><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p>因为Flutter的SDK中包含了很多的命令行工具。我们就需要配置环境变量，所以我直接就安装到了根目录下了。</p><p><strong>配置镜像</strong></p><p>因为Flutter在运行的时候，就需要去官网下载一些需要的资源，但是因为天国特色的wall的原因，我们就需要镜像服务器，这个在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fcommunity%2Fchina" target="_blank" rel="noopener">官网</a>上面有写的很明白，而且这是一个临时的镜像，后面还要以官网的镜像地址为准。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3f2c1f4f64480.jpg" alt></p><p>我们跳转到根目录 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>就能找到这个<code>.bash_profile</code>隐藏文件，我们用vim打开这个文件 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后需要输入就把A键按一下进入编辑模式，把下面三个环境变量配置进去 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line">export PATH=/Users/xueliheng/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>注意下，第三个环境变量这里<code>/Users/xueliheng/</code>是我的根目录，然后<code>/flutter/</code>是我们刚刚解压的的zip包里面的<code>flutter</code>文件夹。上面两个环境变量是两个镜像地址，上文中也有说过。 接着<code>shift+：</code>然后输入<code>wq</code>保存并退出vim。输入如下命令： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>最后我们就可以验证一下flutter环境有没有配置成功了。输入： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure><p>看到如下如的打印信息就是配置成功了<br><img src="https://i.loli.net/2019/07/16/5d2db44407fa682753.jpg" alt></p><h3 id="4、配置Android-Studio"><a href="#4、配置Android-Studio" class="headerlink" title="4、配置Android Studio"></a>4、配置Android Studio</h3><p>如果没有下载<strong>Android Studio</strong>的话，就去<a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.android.google.cn%2Fstudio" target="_blank" rel="noopener">官网</a>去下载一下。 我们用<code>flutter doctor</code>命令去检查一下flutter的环境配置，我们可以看到如下打印 </p><p><img src="https://i.loli.net/2019/07/16/5d2db4676ec3a36838.jpg" alt></p><p>这里的每个<code>✗</code>都是我们要去解决的问题。不过他有告诉你应该怎么做。比如第一个提示： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices</span><br><span class="line">    ✗ Unable to locate Android SDK.</span><br></pre></td></tr></table></figure><p>这就是让你去下载Android Studio。我们在下载完成之后，打开AS让他去下载一些应该下载的东西。 如果这里有提示你 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices (Android SDK version 24.0.2)</span><br><span class="line">    ✗ Flutter requires Android SDK 28 and the Android BuildTools 28.0.3</span><br></pre></td></tr></table></figure><p>这就是在提示让你去升级一下SDK，然后命令如下 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;/Users/xueliheng/Library/Android/sdk/tools/bin/sdkmanager&quot; &quot;platforms;android-28&quot; &quot;build-tools;28.0.3&quot;</span><br></pre></td></tr></table></figure><p>注意一下，这个地方的升级是需要”科学上网“的，如果有的小伙伴没有这个条件的话，我这边百度云上面给大家准备了一个<a href="https://link.juejin.im?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F10yp8PuRXxk7YvcNR_dTy8Q" target="_blank" rel="noopener">链接</a>，提取码: e48c，大家可以下载下来。下载下来之后解压到<code>/Users/Library/Android/</code>这个文件夹。把原先的SDK直接覆盖就行了，就已经是最新的SDK了。 </p><p>接下来我们配置一下安卓的环境变量，还是在根目录下找到<code>.bash_profile</code>文件，并在其中添加四个环境变量 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=~/Library/Android/sdk</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/emulator</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br></pre></td></tr></table></figure><p>分别是： </p><ul><li>安卓sdk的路径</li><li>安卓的模拟器路径</li><li>安卓tools路径</li><li>安卓平台工具</li></ul><p>接下来我们再用<code>flutter doctor</code>检查的时候，显示的信息如下图<br><img src="https://i.loli.net/2019/07/16/5d2db4964a70b73490.jpg" alt></p><p>意思就是让我们去下载iOS的相关环境，我们先暂时放放，下面还有一个关于<strong>Android Studio</strong>的没有解决完</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">✗ Dart plugin not installed; this adds Dart specific functionality.</span><br></pre></td></tr></table></figure><p>这个就是缺少Flutter插件的意思，那么我们就去AS里面去配置一下好了。打开AS的<code>Preferences</code>，点击<code>Plugins</code>，在搜索栏中输入<code>flutter</code>，找到相应的插件，然后<code>Install</code>。当跳出安装Dart插件的提示界面时，记得点击Yes进行安装。安装完毕之后<code>restart IDE</code>重启AS。 重启之后就能看到多了一个这个东西<br><img src="https://i.loli.net/2019/07/16/5d2db4b731cbd14001.jpg" alt></p><p>我们再用<code>flutter doctor</code>检测一下<br><img src="https://i.loli.net/2019/07/16/5d2db4cdc6dd137908.jpg" alt></p><p>现在终于ok了。我们看到<code>[✓]Android Studio</code>说明，安卓的环境基本上配置成功，接下来我们就配置一下安卓的模拟器就好了。 </p><h3 id="5、安卓模拟器配置"><a href="#5、安卓模拟器配置" class="headerlink" title="5、安卓模拟器配置"></a>5、安卓模拟器配置</h3><p>在AS中找到模拟器配置如下图并选择<br><img src="https://i.loli.net/2019/07/16/5d2db4dacfde455330.jpg" alt></p><p>接着就创建设备，选择设备<br><img src="https://i.loli.net/2019/07/16/5d2db4e68a2ed68879.jpg" alt></p><p>选择系统<br><img src="https://i.loli.net/2019/07/16/5d2db4f6cdc5889902.jpg" alt></p><p>最后点击下载就完成了。 </p><h3 id="6、配置iOS环境"><a href="#6、配置iOS环境" class="headerlink" title="6、配置iOS环境"></a>6、配置iOS环境</h3><p>我们配置完了安卓的环境，再来<code>flutter doctor</code>检测一下。<br><img src="https://i.loli.net/2019/07/16/5d2db50ad75eb82331.jpg" alt></p><p>情况是这样的。目前1.5.4版本的Flutter需要匹配新版本的Xcode10.2.1。按照他提示的来试试，提示我Xcode版本太低了，需要升级Xcode<br><img src="https://i.loli.net/2019/07/16/5d2db5275c8f825074.jpg" alt></p><p>更新到最新的之后，继续走下面的步骤依旧会报错。那么我们可以试试下面的这个办法： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew link pkg-config</span><br><span class="line">$ brew install --HEAD usbmuxd</span><br><span class="line">$ brew unlink usbmuxd</span><br><span class="line">$ brew link usbmuxd</span><br><span class="line">$ brew install --HEAD libimobiledevice</span><br><span class="line">$ brew install ideviceinstaller</span><br></pre></td></tr></table></figure><p>这些执行完之后执行一下<code>flutter doctor</code><br><img src="https://i.loli.net/2019/07/16/5d2db5515858b19228.jpg" alt></p><p>最后还真是没错，全部配置完成了！那么我们就把iOS的也配置完毕了。</p><h3 id="7、VSCode的使用"><a href="#7、VSCode的使用" class="headerlink" title="7、VSCode的使用"></a>7、VSCode的使用</h3><p>VSCode上面使用的话，就简单多了，这里我就简答的赘述一下。 只需要将<code>Dart</code>和<code>Flutter</code>插件都下载下来<br><img src="https://i.loli.net/2019/07/16/5d2db5643b08597602.jpg" alt></p><p>然后<code>command+shift+p</code>输入<code>flutter</code>，选择<code>Flutter：New Project</code><br><img src="https://i.loli.net/2019/07/16/5d2db576e145096766.jpg" alt></p><p>输入要创建的项目的名称和存放项目的地址。如果提示需要指明flutter的SDK的路径，那就选择根目录那个经过解压得来的flutter的文件夹就好了。 接下来是这样一个界面<br><img src="https://i.loli.net/2019/07/16/5d2db588f1b5152482.jpg" alt></p><p>接下来我们选择<code>View-&gt;Start Debugging</code>来运行项目。<br><img src="https://i.loli.net/2019/07/16/5d2db59bb3b3338193.jpg" alt></p><p>当然这个过程需要你把Xcode的模拟器打开。运行完之后就能看到这个界面，也就是你的第一个Flutter工程啦！<br><img src="https://i.loli.net/2019/07/16/5d2db5ad5eaf434960.jpg" alt></p><h3 id="8、Hot-reload的使用"><a href="#8、Hot-reload的使用" class="headerlink" title="8、Hot reload的使用"></a>8、Hot reload的使用</h3><p>我们打开<code>lib/main.dart</code>文件，然后在其中找到 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have pushed the button this many times:</span><br></pre></td></tr></table></figure><p>并把这个改为 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have clicked the button this many times:</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2db5cc5b4f279074.jpg" alt><br>那么我们就能看到界面上多了一个小闪电<br><img src="https://i.loli.net/2019/07/16/5d2db5f044c0553935.jpg" alt></p><p>我们现在如果<code>command+s</code>保存一下更改的话，就能很快的在模拟器上面看到相应的更改，不需要再重新去编译一边。这一点简直是太棒了！解决了iOS开发者一个大痛点啊！！！ </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，flutter的环境搭建工作基本上就进行完毕了，整个过程大概耗时接近2个小时，这期间包括采坑、查资料、下载、科学上网…等等很蛋疼的事情。当然网速基本上是最大的障碍，浪费了很多的时间。所以也是需要一定的耐心来完成的。 后面的文章也会持续的更新，最近有点懈怠，OpenGL系列的文章有点拖更的节奏，这个后面会补起来。Flutter我也才刚刚接手，也是慢慢的来采坑，也会以此来记录自己的学习经历，也希望能多多跟大家交流。 再次我附上自己的邮箱<code>coderspr1nghall@gmail.com</code>欢迎讨论交流。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://juejin.im/post/5d0508d56fb9a07ec373eb9e" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2dbb03b8ef977558.jpg" alt></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 &lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://www.policx.com/spider/"/>
    <id>https://www.policx.com/spider/</id>
    <published>2019-07-15T02:06:04.000Z</published>
    <updated>2019-07-18T06:22:40.946Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。</p><a id="more"></a><p>其实爬虫这个概念很简单，基本可以分成以下几个步骤：</p><ul><li><p>发起网络请求</p></li><li><p>获取网页</p></li><li><p>解析网页获取数据</p></li></ul><p>发起网络请求这个步骤常用的类库有标准库urllib以及Python上常用的requests库。解析网页常用的类库有的BeautifulSoup。另外requests的作者还开发了另一个很好用的库requests-html，提供了发起请求和解析网页的二合一功能，开发小型爬虫非常方便。另外还有一些专业的爬虫类库，其中比较出名的就是scrapy。本文将会简单介绍一下这些类库，之后还会专门写一篇文章介绍scrapy的用法。</p><h2 id="标准库urllib"><a href="#标准库urllib" class="headerlink" title="标准库urllib"></a><strong>标准库urllib</strong></h2><p>首先先来看标准库urllib。标准库的优点是Python自带的，不需要安装任何第三方库，缺点就是urllib属于偏底层的库，使用起来比较麻烦。下面是urllib发起请求的一个简单例子，大家看看就好。可以看到为了发起一个简单的请求，我们需要创建opener、request、ProxyHandler等好几个对象，比较麻烦。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> urllib.request <span class="hljs-keyword">as</span> request</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="hljs-string">'https'</span>: <span class="hljs-string">'https://127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="hljs-string">'http'</span>: <span class="hljs-string">'http://127.0.0.1:1080'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'--------------使用urllib--------------'</span>)</span><br><span class="line">url = <span class="hljs-string">'http://www.google.com'</span></span><br><span class="line">opener = request.build_opener(request.ProxyHandler(proxies))</span><br><span class="line">request.install_opener(opener)</span><br><span class="line">req = request.Request(url, headers=headers)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a><strong>requests</strong></h2><p>requests是Kenneth Reitz大神的著名作品之一，优点就是极度简单和好用。首先来安装requests。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>下面是一个简单的例子，和上面urllib示例代码实现的功能相同，但是代码量少多了，也更易读。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="hljs-string">'--------------使用requests--------------'</span>)</span><br><span class="line">response = requests.get(<span class="hljs-string">'https://www.google.com'</span>, headers=headers, proxies=proxies)</span><br><span class="line">response.encoding = <span class="hljs-string">'utf8'</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>requests还可以方便的发送表单数据，模拟用户登录。返回的Response对象还包含了状态码、header、raw、cookies等很多有用的信息。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="hljs-string">'name'</span>: <span class="hljs-string">'yitian'</span>,</span><br><span class="line">    <span class="hljs-string">'age'</span>: <span class="hljs-number">22</span>,</span><br><span class="line">    <span class="hljs-string">'friends'</span>: [<span class="hljs-string">'zhang3'</span>, <span class="hljs-string">'li4'</span>]</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="hljs-string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">pprint(response.__dict__)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>关于requests我就不多做介绍了，因为它有中文文档，虽然比官方落后几个小版本号，不过无伤大雅，大家可以放心参阅。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://cn.python-requests.org/zh_CN/latest/</span><br></pre></td></tr></table></figure><h2 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a><strong>beautifulsoup</strong></h2><p>利用前面介绍的requests类库，我们可以轻易地获取HTML代码，但是为了从HTML中找到所需的数据，我们还需要HTML/XML解析库，BeautifulSoup就是这么一个常用的库。首先先来安装它：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>这次就用我简书主页作为例子，爬取一下我简书的文章列表。首先先用requests获取到网页内容。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"><span class="hljs-keyword">import</span> bs4</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><p>然后就是BeautifulSoup的代码了。在使用BeautifulSoup的时候首先需要创建一个HTML树，然后从树中查找节点。BeautifulSoup主要有两种查找节点的办法，第一种是使用find和find_all方法，第二种方法是使用select方法用css选择器。拿到节点之后，用contents去获取它的子节点，如果子节点是文本，就会拿到文本值，注意这个属性返回的是列表，所以要加[0]。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html = bs4.BeautifulSoup(response.text, features=<span class="hljs-string">'lxml'</span>)</span><br><span class="line">note_list = html.find_all(<span class="hljs-string">'ul'</span>, class_=<span class="hljs-string">'note-list'</span>, limit=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.select(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.contents[<span class="hljs-number">0</span>]</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>BeautifulSoup也有中文文档，同样也是稍微落后两个小版本，影响不大。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</span><br></pre></td></tr></table></figure><h2 id="requests-html"><a href="#requests-html" class="headerlink" title="requests-html"></a><strong>requests-html</strong></h2><p>这个类库是requests的兄弟，同样也是Kenneth Reitz大神的作品。它将请求网页和解析网页结合到了一起。本来如果你用requests的话只能请求网页，为了解析网页还得使用BeautifulSoup这样的解析库。现在只需要requests-html一个库就可以办到。<br>首先先来安装。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests-html</span><br></pre></td></tr></table></figure><p>然后我们来看看用requests-html如何重写上面这个例子。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line">note_list = r.html.find(<span class="hljs-string">'ul.note-list'</span>, first=<span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.find(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html除了可以使用css选择器来搜索以外，还可以使用xpath来查找。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html还有一个很有用的特性就是浏览器渲染。有些网页是异步加载的，直接用爬虫去爬只能得到一个空页面，因为数据是靠浏览器运行JS脚本异步加载的，这时候就需要浏览器渲染了。而浏览器渲染用requests-html做非常简单，只要多调用一个render函数即可。render函数有两个参数，分别指定页面下滑次数和暂停时间。render函数第一次运行的时候，requests-html会下载一个chromium浏览器，然后用它渲染页面。<br>简书的个人文章页面也是一个异步加载的例子，默认只会显示最近几篇文章，通过浏览器渲染模拟页面下滑，我们可以得到所有文章列表。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line"><span class="hljs-comment"># render函数指示requests-html用chromium浏览器渲染页面</span></span><br><span class="line">r.html.render(scrolldown=<span class="hljs-number">50</span>, sleep=<span class="hljs-number">0.2</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>类似的，今日头条的个人页面也是异步加载的，所以也得调用render函数。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">        <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(<span class="hljs-string">'https://www.toutiao.com/c/user/6662330738/#mid=1620400303194116'</span>, headers=headers)</span><br><span class="line">r.html.render()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r.html.find(<span class="hljs-string">'div.rbox-inner a'</span>):</span><br><span class="line">    title = i.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.toutiao.com<span class="hljs-subst">&#123;i.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》 <span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>最后是requests-html的官网地址以及中文文档。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://html.python-requests.org/</span><br><span class="line">https://cncert.github.io/requests-html-doc-cn/</span><br></pre></td></tr></table></figure><h2 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a><strong>scrapy</strong></h2><p>以上介绍的几个框架都是各自有各自的作用，把它们结合起来可以达到编写爬虫的目的，但是要说专业的爬虫框架，还是得谈谈scrapy。作为一个著名的爬虫框架，scrapy将爬虫模型框架化和模块化，利用scrapy，我们可以迅速生成功能强大的爬虫。<br>不过scrapy概念众多，要仔细说还得专门开篇文章，这里就只简单演示一下。首先安装scrapy，如果是Windows系统，还需要安装pypiwin32。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy  </span><br><span class="line">pip install pypiwin32</span><br></pre></td></tr></table></figure><p>然后创建scrapy项目并添加一个新爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject myproject</span><br><span class="line">cd myproject</span><br><span class="line">scrapy genspider my jianshu.com</span><br></pre></td></tr></table></figure><p>打开配置文件settings.py，设置用户代理，否则会遇到403错误。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br></pre></td></tr></table></figure><p>然后修改一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JianshuSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="hljs-string">'jianshu'</span></span><br><span class="line">    allowed_domains = [<span class="hljs-string">'jianshu.com'</span>]</span><br><span class="line">    start_urls = [<span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">'div.content'</span>):</span><br><span class="line">            <span class="hljs-keyword">yield</span> &#123;</span><br><span class="line">                <span class="hljs-string">'title'</span>: article.css(<span class="hljs-string">'a.title::text'</span>).get(),</span><br><span class="line">                <span class="hljs-string">'link'</span>: <span class="hljs-string">'https://www.jianshu.com'</span> + article.xpath(<span class="hljs-string">'a[@class="title"]/@href'</span>).get()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>最后运行一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl my</span><br></pre></td></tr></table></figure><br><table><thead><tr><th>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1563247765&ver=1731&signature=gm2iTUKE3itOZzvlz9SUtKCYNv*PqEYt2C7ReV7kd47e2ZAWPvG5GRXZUJsiRIde34Uh5FznBslw4hHhXmHQXyV3yz0tTdgds1RMCdai6Oyy98w2-iTBRWeJlpm3cWa8&new=1" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2d4c5ba835e96705.jpg" alt="Python"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>DDoS（分布式拒绝服务）攻击是无解的吗？</title>
    <link href="https://www.policx.com/ddos/"/>
    <id>https://www.policx.com/ddos/</id>
    <published>2019-07-14T07:26:43.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>“</strong></p><p>DDOS？ </p><p>一言难尽啊！ </p><p>”</p><a id="more"></a><p>先说结论，DDoS是近年来网络攻击中的一棵“常青树”，的确很难缠，但说它是无解的，那也有点太看得起它了。虽然DDoS在对很多大平台的攻击中出尽了风头，但在现在互联网的解决方案中，并不缺乏应对DDoS的解决方案。 </p><p>说起DDoS攻击，我脑海里能够想到的全都是中国民间俗语，什么“双拳难敌四手，好汉架不住人多”，什么“千斤拨四两”，什么“乱拳打死老师傅”等等等等。 </p><p>之前有朋友跑来问我DDoS是个什么东西，为什么这么多互联网巨头都被搞得没有脾气，我记得我当时我是这么举的例子： </p><p>我们这一代人小的时候，自助餐开始在中国内地风行，那会儿这个行业里为了打击竞争对手，对手最惯常使用的阴招是雇佣很多五大三粗的人，给他们钱去对方的店里一通猛吃，杯盘狼藉之下，用不了几天这家自助餐就能给吃黄了。 </p><p>而DDoS攻击比这种还阴损，如果你开了一家餐馆，你的对手如果想搞你，最好的办法就是找一堆地痞流氓到你的店里坐的满满一屋子，你如果上前问，他们就一直跟你扯淡找麻烦，导致真正想吃饭的顾客一看这个情形，掉头就走了。 </p><p>用不了多久，你的餐馆就会开不下去，而你的竞争对手就会趁机蚕食掉你的市场份额，而放在网络语境里，这就是DDoS攻击的最基本原理。 </p><p>而这件事之所以难缠在于，一两个无赖根本成不了气候，想要耍流氓必须要有很多个无赖集结在一起。<strong>所以和现实世界中的无赖一样，DDoS真正的杀手锏在于利用能够发动的汹涌的流量，可以瞬间冲垮被攻击网站的服务器。</strong></p><p>如果我们回溯一下历史的话，会发现黑客组织之所以会有组织有预谋的发起DDoS攻击，基本上都是基于以下几个原因： </p><ul><li><p>有些行业如果网站被恶意攻击，会造成很难估量的损失，这个时候黑客发动DDoS攻击的初衷一般是出于敲诈勒索，为了保证企业的正常运转，他们通常愿意向黑客付高额的赎金； </p></li><li><p>行业内血海一片，DDoS是恶意竞争的屠刀。这个现象从逻辑上，其实雇佣无赖去占领对手餐馆的原理是一毛一样的，而且DDOS攻击早已产业化，现在中国的DDOS黑市，出钱请黑客打1G的流量到一个网吧或网站，市场价只要不到50块钱，但对于一个创业公司或者干脆就是一个小网吧来说，这已经算是可以灭顶的无妄之灾了。 </p></li><li><p>DDoS攻击往往成为掩盖真实网络攻击的烟雾弹，在遭受DDoS攻击的企业中，部分企业还伴随数据丢失的现象，黑客利用DDoS攻击掩盖其窃取用户隐私的真实目的，这种攻击行为在社交网站、金融领域等用户隐私高价值的行业尤为高发。 </p></li></ul><p>比如说，去年年初的时候，荷兰第一大银行荷兰商业银行于2018年1月28日晚间遭到DDoS攻击；第二大银行荷兰合作银行的网银服务29日早晨遭到攻击；第三大银行荷兰银行在那一周内共遭到7次网络攻击，仅周末就有3次。 </p><p>不过这一次发生在荷兰的针对银行系统的攻击并没有造成用户隐私的泄露，原因在于这仅仅是一次来自俄罗斯一个网络间谍组织Cozy Bear对荷兰情报组织AIVD侵犯其计算机的“单纯”的报复行为。<strong>但并不是所有黑客组织发起的DDoS攻击都如此单纯。</strong></p><p>2018年年底时万豪酒店发布了一则公告，称其旗下喜达屋酒店的5亿人次的信息被泄露，共计3.27亿人，泄露信息包括姓名、邮寄地址、电话号码、电子邮件昂面地址、护照号码、出生日期、性别等等入住信息，更糟糕的是万豪无法确定，侵入酒店系统的第三方黑客，在窃取的信息中是否包含客人的银行卡号和密码。（此案例和DDOS攻击无关，建议采用其他案例，比如2011年4月20日至26日，索尼遭受DDoS攻击，目的是为了掩盖盗取索尼PS的用户数据。） </p><p>而游戏领域，则是DDoS攻击的另一个重灾区，不光是刚才前文中提到的暴雪，包括索尼、金山、网易在内的众多知名游戏公司都曾数次遭受攻击，可以说DDoS攻击是游戏企业的噩梦。 </p><p>许多刚创业的游戏公司，可能刚上线就被打死，而一些处在融资阶段的游戏公司，由于遭遇攻击而被迫停服，则很大程度上会调低投资人的预期，甚至导致融资失败。 </p><p>而这些因素，都是竞对打压或者敲诈勒索的绝对软肋。 </p><p>从以上的几个案例我们不难看出，和现实中的耍流氓和敲诈勒索相比，通过网络手段进行攻击的风险和成本更低，坏蛋的嘴脸也更穷凶极恶一点，无论是政府机构还是企业平台，无论你是巨头还是小蚂蚁，只要你身上有羊毛可以薅，你都时刻面临着被洗劫的风险 </p><p>不过刚在开头我也讲了，虽然DDoS很难缠很让人头痛，但本质上图并不是无解的。 </p><p>回到我最开始讲的那个例子。 </p><p>你是一个餐馆老板，过去三十年一直是个老老实实的厨子，突然面对五十个臭流氓到你店里耍无赖的时候，你最好的应对方法，应该是什么？ </p><p>自己组建一支人马，和这些臭流氓正面刚？这恐怕不行，因为你不是臭流氓，你没有相应的作战经验。 </p><p>报警请人民警察来帮忙处理？这恐怕也不行，人家在你店里没有打砸抢，只是“温和的”非暴力不合作，警察来了也只能当民事调解，并且人家马仔众多，明天再换一拨新面孔来，玩的你一点脾气都没有。 </p><p>这就是面对DDoS时，无论是巨头还是小蚂蚁，他们的实实在在的困境。 </p><p>但正所谓“道高一尺魔高一丈”，你在云上和我耍流氓，那我就在云上回击。 </p><p><strong>“云”的事儿，不如还交还给云来处理。</strong>我认为就目前DDoS的在攻击量级上的疯狂进击的前提下，云计算服务厂商或许是狙击它们的最有效手段。 </p><p>2018年年初，峰值1.35TB/秒的流量冲击了开发者平台 GitHub。这是第一次TB量级的DDoS攻击。GitHub 受到攻击后，服务器断断续续，无法访问。攻击发生 10 分钟后，GitHub 向CDN 服务商 Akamai 请求协助，访问 GitHub 的流量已经由后者接管并在15分钟之内完成了防御。 </p><p>Akamai的相关负责人在接受采访时说，我们是基于迄今为止最大规模 DDoS 攻击五倍的峰值而做的相应准备，所以 1.3T 对我们来说是小意思。 </p><p>在关于流量峰值这一点上，我认为饱受双11、双12、618等全民购物狂欢的电商巨头们更有发言权，就拿京东举例子好了。 </p><p>京东云在之前发布的高防版的DDoS服务中，展示出了非常明确的信心是，在多年的电商狂欢流量对抗中，京东云已经在实战中建立了一套完备的防御机制，无论是在流量峰值的建模上，还是在DDoS的防御算法上，它的部署都远远不是纸上谈兵，而是拳拳到肉的经受住了实战的洗礼。要知道，全世界每年有超过5成的DDoS攻击都来自中国，而我们的国家也是全世界超过美国的第一大“肉鸡”市场，由电商大数据加持演化而来的京东云，它在云安全的理解上可以说是非常深刻了。 </p><p>所以说，如果说一定要有一个结论，我想说“上帝的归上帝，而云上的归云上”，像京东云这样的基于电商大数据考验的云计算平台，或许才是对抗DDoS的最终答案。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f3adcbb2ed60428.png" alt="jd"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;“&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DDOS？ &lt;/p&gt;
&lt;p&gt;一言难尽啊！ &lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.policx.com/program/JavaScript/node/"/>
    <id>https://www.policx.com/program/JavaScript/node/</id>
    <published>2019-07-13T16:06:04.000Z</published>
    <updated>2019-07-18T06:22:40.943Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/15/5d2c47df96f5d45317.jpg" alt="Node.js"></p><p>能方便地搭建响应速度快、易于扩展的网络应用，Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>中文：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org</a>、<a href="https://nodejs.cn/" target="_blank" rel="noopener">https://nodejs.cn</a></p><p>简单说Node.js就是运行在服务器端的JavaScript，是现在流行的语言中能同时运行在前端与后台的程序语言，你可以把JavaScript想像成Java与C#。相关技术：</p><p>数据库：MongoDB，非关系型数据库，NoSQL（Not only SQL）</p><p>MVC框架：AngularJS</p><p>Web服务器：Express</p><p>模板引擎：jade、ejs、htmljs、swig、hogan.js</p><h1 id="二、搭建Node-js开发环境"><a href="#二、搭建Node-js开发环境" class="headerlink" title="二、搭建Node.js开发环境"></a>二、搭建Node.js开发环境</h1><h2 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h2><p>去官网下下载最新版本的Node.js一步一步按提示安装即可，如果安装失败就手动安装，将Node.js的安装位置配置到环境变量的path中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装完成后启动命令行，测试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="三、第一个Node-js程序"><a href="#三、第一个Node-js程序" class="headerlink" title="三、第一个Node.js程序"></a>三、第一个Node.js程序</h1><p>在上面的示例中，我们是通过IDE完成编译与运行的，其实手动运行也可以，比如编写一段代码如下：</p><blockquote><p>server.js</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//依赖一个http模块，相当于java中的import，与C#中的using</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">//创建一个服务器对象</span><br><span class="line">server = http.createServer(function (req, res) &#123;</span><br><span class="line">//设置请求成功时响应头部的MIME为纯文本</span><br><span class="line">res.writeHeader(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">//向客户端输出字符</span><br><span class="line">res.end(&quot;Hello World\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//让服务器监听本地8000端口开始运行</span><br><span class="line">server.listen(8000,&apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server is runing at 127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>在node环境下解释运行：<br><img src="https://i.loli.net/2019/07/14/5d2af984d2fae77488.jpg" alt></p><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2af89c2b5b226144.jpg" alt></p><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。<br>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。<br>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</p><h1 id="四、NPM（Node-js包管理器）"><a href="#四、NPM（Node-js包管理器）" class="headerlink" title="四、NPM（Node.js包管理器）"></a>四、NPM（Node.js包管理器）</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：  </p><ul><li>a)、允许用户从NPM服务器下载别人编写的第三方包到本地使用。  </li><li>b)、允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。  </li><li>c)、允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><h2 id="4-1、查看npm版本"><a href="#4-1、查看npm版本" class="headerlink" title="4.1、查看npm版本"></a>4.1、查看npm版本</h2><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p><h2 id="4-2、升级npm"><a href="#4-2、升级npm" class="headerlink" title="4.2、升级npm"></a>4.2、升级npm</h2><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="4-3、安装模块"><a href="#4-3、安装模块" class="headerlink" title="4.3、安装模块"></a>4.3、安装模块</h2><blockquote><p>npm install <module name> -参数</module></p></blockquote><p>如果带参数-g表示全局安装，否则只是安装到某个目录下。</p><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install express -g</span><br></pre></td></tr></table></figure><h2 id="4-4、卸载模块"><a href="#4-4、卸载模块" class="headerlink" title="4.4、卸载模块"></a>4.4、卸载模块</h2><p>我们可以使用以下命令来卸载 Node.js 模块。  </p><blockquote><p>sudo npm uninstall <module name></module></p></blockquote><p>如先使用安装指令安装bootstrap:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>再使用卸载指令删除模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall bootstrap</span><br></pre></td></tr></table></figure><p>可以到 /node_modules/ 目录下查看包是否还存在</p><h2 id="4-5、模块列表"><a href="#4-5、模块列表" class="headerlink" title="4.5、模块列表"></a>4.5、模块列表</h2><p>使用模块列表命令可以方便的看到当前项目中依赖的包：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h2 id="4-6、更新模块"><a href="#4-6、更新模块" class="headerlink" title="4.6、更新模块"></a>4.6、更新模块</h2><p>我们可以使用以下命令更新模块：<br><code>npm update</code>模块名称<br><code>npm up -g</code> 模块名称</p><h2 id="4-7、搜索模块"><a href="#4-7、搜索模块" class="headerlink" title="4.7、搜索模块"></a>4.7、搜索模块</h2><p><code>npm search</code>模块名称</p><h2 id="4-8、NPM-常用命令"><a href="#4-8、NPM-常用命令" class="headerlink" title="4.8、NPM 常用命令"></a>4.8、NPM 常用命令</h2><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。<br>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。<br>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。<br>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。<br>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。<br>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></package></package></p><h2 id="4-9、更换NPM-镜像"><a href="#4-9、更换NPM-镜像" class="headerlink" title="4.9、更换NPM 镜像"></a>4.9、更换NPM 镜像</h2><p>因为npm的服务器在国外，在网络状态不好的情况下引入一个模块会因为网络延迟而失败，可以更换成国内速度更快的镜像服务器，这里以使用淘宝 NPM 镜像（<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>）为例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/15/5d2c481d14f7270384.jpg" alt></p><p>这样就可以使用 cnpm 命令来安装模块了：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＄ cnpm install [name]</span><br></pre></td></tr></table></figure><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><p>如是安装失败，可以试试：</p><figure class="highlight zsh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">alias</span> cnpm=<span class="hljs-string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">--cache=<span class="hljs-variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">--userconfig=<span class="hljs-variable">$HOME</span>/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">  --userconfig=$HOME/.cnpmrc"'</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。使用Node.js作为AngularJS开发Web服务器的最佳方式是使用Express模块。</p><p>Express官网： <a href="https://expressjs.com/" target="_blank" rel="noopener">https://expressjs.com/</a></p><p>Express4.x API：<a href="https://expressjs.com/zh-cn/4x/api.html" target="_blank" rel="noopener">https://expressjs.com/zh-cn/4x/api.html</a></p><p><img src="https://i.loli.net/2019/07/15/5d2c484698cd427801.jpg" alt></p><h2 id="5-2、Express框架核心特性"><a href="#5-2、Express框架核心特性" class="headerlink" title="5.2、Express框架核心特性"></a><strong>5.2、Express框架核心特性</strong></h2><p>可以设置中间件来响应 HTTP 请求。</p><p>定义了路由表用于执行不同的 HTTP 请求动作。</p><p>可以通过向模板传递参数来动态渲染 HTML 页面。</p><p>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。</p><p>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p><h2 id="5-3、安装-Express"><a href="#5-3、安装-Express" class="headerlink" title="5.3、安装 Express"></a><strong>5.3、安装 Express</strong></h2><p>安装 Express 并将其保存到依赖列表中：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>以上命令全局安装express。也可安装时指定安装中间件。</p><p><em>body-parser</em> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</p><p><em>cookie-parser</em> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p><p><em>multer</em> - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">＄ npm install body-parser --save  </span><br><span class="line">＄ npm install cookie-parser --save  </span><br><span class="line">＄ npm install multer --save</span><br></pre></td></tr></table></figure><p>默认这些模块都已经添加。</p><h2 id="5-4、第一个Express框架实例"><a href="#5-4、第一个Express框架实例" class="headerlink" title="5.4、第一个Express框架实例"></a>5.4、第一个Express框架实例</h2><p>接下来我们使用 Express 框架来输出 “Hello World”。<br>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。</p><p>创建一个目录，如Project，进入命令行：</p><p>使用npm install express 导入express模块。</p><p>在目录下创建hello.js文件，如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//引入express模块</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">//创建一个app对象，类似一个web 应用（网站）</span><br><span class="line">var app = express();</span><br><span class="line">//接受指定路径的请求，指定回调函数</span><br><span class="line">app.get(&apos;/&apos;, function (req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//创建一个web服务器，可以认为就是web服务器对象</span><br><span class="line">//监听8081端口，当监听成功时回调</span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">   var host = server.address().address;  //地址</span><br><span class="line">   var port = server.address().port;  //端口</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-5、开发Express项目"><a href="#5-5、开发Express项目" class="headerlink" title="5.5、开发Express项目"></a>5.5、开发Express项目</h2><p><img src="https://i.loli.net/2019/07/14/5d2b00e97910997783.jpg" alt></p><p>创建好的项目如下：<br><img src="https://i.loli.net/2019/07/14/5d2b02dad205355700.jpg" alt></p><p>app.js是网站：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><p>bin\www是web服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">/**</span><br><span class="line"> * 依赖模块，导入</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;nodejsexpress:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从上下文环境中获得监听端口，如果空则3000</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Web服务器</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开始监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);  //指定发生错误时的事件</span><br><span class="line">server.on(&apos;listening&apos;, onListening);  //当监听成功时的回调</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 规范化端口</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *错误事件监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  //错误处理</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);  //结束程序</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当用户访问服务器成功时的回调</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/index.js路由，有点类似控制器或Servlet：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 获得首页 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>views/index.ejs首页视图：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在www上右键选择“运行方式”-&gt;Run ‘/bin/www’ 运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b034bcca6187136.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b044c2b12347829.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b041724d6091090.jpg" alt></p><h3 id="5-5-1、request对象"><a href="#5-5-1、request对象" class="headerlink" title="5.5.1、request对象"></a>5.5.1、request对象</h3><p>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ul><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ul><h3 id="5-5-2、response对象"><a href="#5-5-2、response对象" class="headerlink" title="5.5.2、response对象"></a>5.5.2、response对象</h3><p>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.app：同req.app一样</span><br><span class="line">res.append()：追加指定HTTP头</span><br><span class="line">res.set()在res.append()后将重置之前设置的头</span><br><span class="line">res.cookie(name，value [，option])：设置Cookie</span><br><span class="line">opition: domain / expires / httpOnly / maxAge / path / secure / signed</span><br><span class="line">res.clearCookie()：清除Cookie</span><br><span class="line">res.download()：传送指定路径的文件</span><br><span class="line">res.get()：返回指定的HTTP头</span><br><span class="line">res.json()：传送JSON响应</span><br><span class="line">res.jsonp()：传送JSONP响应</span><br><span class="line">res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</span><br><span class="line">res.redirect()：设置响应的Location HTTP头，并且设置状态码302</span><br><span class="line">res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</span><br><span class="line">res.send()：传送HTTP响应</span><br><span class="line">res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</span><br><span class="line">res.set()：设置HTTP头，传入object可以一次设置多个头</span><br><span class="line">res.status()：设置HTTP状态码</span><br><span class="line">res.type()：设置Content-Type的MIME类型</span><br></pre></td></tr></table></figure><h3 id="5-5-3、express获取参数有三种方法"><a href="#5-5-3、express获取参数有三种方法" class="headerlink" title="5.5.3、express获取参数有三种方法"></a>5.5.3、express获取参数有三种方法</h3><p>req.query 适合 <a href="https://localhost:3000/form?num=8888" target="_blank" rel="noopener">https://localhost:3000/form?num=8888</a><br>req.body 适合<a href="https://localhost:3000/form，Post请求中的参数" target="_blank" rel="noopener">https://localhost:3000/form，Post请求中的参数</a><br>req.params 适合获取form后的num：<a href="https://localhost:3000/form/num" target="_blank" rel="noopener">https://localhost:3000/form/num</a>  </p><p>（一）、GET</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = req.query.num;</span><br><span class="line">res.send(&quot;你获取的get数据为:&quot; + num);</span><br></pre></td></tr></table></figure><p>（二）、POST</p><p>解析post数据需要用到body-parser</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">//引入body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">//需要use的</span><br><span class="line">app.use(bodyParser.json()); // for parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">extended: true</span><br><span class="line">&#125;)); // for parsing application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.post(&apos;/form&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.body.num;</span><br><span class="line">res.send(&quot;你获取的post数据为:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>public/test.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"tinyphp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（三）、获取路径参数</p><p>app.js  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.get(&apos;/form/:num&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.params.num;</span><br><span class="line">res.send(&quot;你获取到form/后的参数:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="5-6-ejs基础"><a href="#5-6-ejs基础" class="headerlink" title="5.6 ejs基础"></a>5.6 ejs基础</h2><p>ejs是一个Express Web应用的模板引擎，在NodeJS开发中可以选择的模板引擎可能是所有Web应用开发中范围最广的，如jade、ejs、htmljs、swig、hogan.js，但ejs是最容易上手的，与jsp,asp,php的原始模板引擎风格很像。</p><p>官网：<a href="https://www.embeddedjs.com/" target="_blank" rel="noopener">https://www.embeddedjs.com/</a></p><p>添加一个<code>product.js</code>路由：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  var products=[];</span><br><span class="line">  products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">  //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">  res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>在views目录下添加<code>product.ejs</code>视图，这里是一个简单的MVC：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span> - 产品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"80%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%pdts.forEach(function(pdt,index)&#123;%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=index+1%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.name%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.price%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%&#125;);%</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">%=pdts[i].name%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改app，注册定义好的模块product：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> index = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/index'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/users'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> pdts = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/product'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//指定视图引擎为ejs</span></span><br><span class="line">app.set(<span class="hljs-string">'views'</span>, path.join(__dirname, <span class="hljs-string">'views'</span>));</span><br><span class="line">app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="hljs-comment">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class="line">app.use(logger(<span class="hljs-string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="hljs-string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/'</span>, index);</span><br><span class="line">app.use(<span class="hljs-string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="hljs-string">'/pdt'</span>, pdts);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b092ca2eb115835.jpg" alt></p><blockquote><p>原因：没有安装ejs模块<br>解决办法：进入到项目目录，安装ejs</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save ejs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b09efe80ba53992.jpg" alt></p></blockquote><p>重新运行：<br><img src="https://i.loli.net/2019/07/14/5d2b0a951a09231745.jpg" alt></p><h2 id="5-7、lodash"><a href="#5-7、lodash" class="headerlink" title="5.7、lodash"></a>5.7、lodash</h2><p>这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。可以非常方便的操作json。</p><p>官网：<a href="https://lodashjs.com/" target="_blank" rel="noopener">https://lodashjs.com/</a></p><p>安装：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash</span><br></pre></td></tr></table></figure><p>安装时先用cd切换到当前项目下。</p><p>如果浏览器使用可以直接引入：</p><script src="lodash.js"></script><p>添加lodash依赖：<br><img src="https://i.loli.net/2019/07/14/5d2b0c4c7c14a17367.jpg" alt></p><p>依赖成功后会在package.json中添加引用：<br><img src="https://i.loli.net/2019/07/14/5d2b0c9e03f1844597.jpg" alt></p><p>后台Node.js使用，可以引入模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//导入lodash模块</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var products=[];</span><br><span class="line">products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">//1、取出第一个元素</span><br><span class="line">var obj1=_.first(products);</span><br><span class="line">console.log(obj1.name);  //ZTE U880</span><br><span class="line"></span><br><span class="line">//2、取出最后一个元素</span><br><span class="line">var obj2=_.last(products);</span><br><span class="line">console.log(obj2.name);  //iPhone 7 Plus 128G</span><br><span class="line"></span><br><span class="line">//3、指定查找条件返回符合条件的索引</span><br><span class="line">var obj3=_.findIndex(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj3);  //2</span><br><span class="line"></span><br><span class="line">//4、指定查找条件返回查找到的对象</span><br><span class="line">var obj4=_.find(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj4);  //&#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;</span><br><span class="line"></span><br><span class="line">//5、排序</span><br><span class="line">var obj5=_.orderBy(products,[&quot;price&quot;,&quot;name&quot;],[&quot;desc&quot;,&quot;asc&quot;]);</span><br><span class="line">console.log(obj5);</span><br><span class="line"></span><br><span class="line">//[ &#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;HuWei 荣耀8&apos;, price: 1899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;ZTE U880&apos;, price: 899.8 &#125; ]</span><br><span class="line"></span><br><span class="line">//6、查找价格为1899.8的产品的key</span><br><span class="line">var obj6=_.findKey(products,&#123;price:1899.8&#125;);</span><br><span class="line">console.log(obj6);   //1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/14/5d2b0f023a83710965.jpg" alt></p><p>API的使用非常简单，但需要注意版本，可以现查现用，API地址：<a href="https://lodash.com/docs/4.17.2%20" target="_blank" rel="noopener">https://lodash.com/docs/4.17.2 </a></p><h2 id="5-8、参数"><a href="#5-8、参数" class="headerlink" title="5.8、参数"></a>5.8、参数</h2><h3 id="5-8-1、URL中的参数占位"><a href="#5-8-1、URL中的参数占位" class="headerlink" title="5.8.1、URL中的参数占位"></a>5.8.1、URL中的参数占位</h3><p>Checks route params (req.params), ex: /user/:id</p><p>127.0.0.1:3000/index，这种情况下，我们为了得到index，我们可以通过使用req.params得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式；</p><p><code>http://127.0.0.1:3000/pdt/9527/phone</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得产品根据Id</span><br><span class="line">router.get(&apos;/:id/:category&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(request.params.id+&quot;,&quot;+request.params.category);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b10e8e678f43145.jpg" alt></p><h3 id="5-8-2、URL中的QueryString"><a href="#5-8-2、URL中的QueryString" class="headerlink" title="5.8.2、URL中的QueryString"></a>5.8.2、URL中的QueryString</h3><p>Checks query string params (req.query), ex: ?id=12</p><p>127.0.0.1:3000/index?id=12，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用req.query.id就可以获得，类似于PHP的get方法；</p><p><code>http://127.0.0.1:3000/pdt/9527?name=jobs</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(&quot;name:&quot;+request.query.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b12be0371490358.jpg" alt></p><h3 id="5-8-3、HTTP正文中的参数"><a href="#5-8-3、HTTP正文中的参数" class="headerlink" title="5.8.3、HTTP正文中的参数"></a>5.8.3、HTTP正文中的参数</h3><p>在post请求中获得表单中的数据。</p><p>Checks urlencoded body params (req.body), ex: id=</p><p>127.0.0.1：300/index，然后post了一个id=2的值，这种方式是获取客户端post过来的数据，可以通过req.body.id获取，类似于PHP的post方法；</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222150412682-243382356.png" alt></p><p>页面：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &lt;%= title %&gt;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%pdts.forEach(function(pdt,index)&#123;%&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=index+1%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.name%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.price%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%&#125;);%&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=pdts[i].name%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            &lt;%if(typeof msg!=&quot;undefined&quot;)&#123;%&gt;</span><br><span class="line">                &lt;%=msg%&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">        &lt;form action=&quot;pdt/add&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                名称：&lt;input name=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                价格：&lt;input name=&quot;price&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/add&apos;,function(request,res,next)&#123;</span><br><span class="line">    var entity=&#123;name:request.body.name,price:request.body.price&#125;;</span><br><span class="line">    products.push(entity);</span><br><span class="line">      //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">      res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products,msg:&quot;添加成功&quot;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151340745-1374859267.png" alt></p><h2 id="5-9、JSON"><a href="#5-9、JSON" class="headerlink" title="5.9、JSON"></a>5.9、JSON</h2><p>如果需要Node.js向外提供返回JSON的接口，Express也是非常方便的，可以使用原来在浏览器中使用到的JSON对象，这是一个浏览器内置对象在服务可以直接使用：</p><p>将对象序列化成字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象</span><br><span class="line">var rose=&#123;&quot;name&quot;:&quot;Rose&quot;,&quot;weight&quot;:&quot;65&quot;&#125;;</span><br><span class="line">            //序列化成字符串</span><br><span class="line">            var str=JSON.stringify(rose);</span><br><span class="line">            alert(str);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151858839-27300214.png" alt></p><p>反序列化，将字符转换成对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成JavaScript对象</span><br><span class="line">var markStr=&apos;&#123;&quot;name&quot;:&quot;mark&quot;,&quot;weight&quot;:&quot;188&quot;&#125;&apos;;</span><br><span class="line">            var mark=JSON.parse(markStr);</span><br><span class="line">            alert(mark.name+&quot;，&quot;+mark.weight);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222152634417-1260078212.png" alt></p><p>Express已经封装了一个json方法，直接调用该方法就可以序列化对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/rest&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(products);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、RESTful（表述性状态转移）"><a href="#六、RESTful（表述性状态转移）" class="headerlink" title="六、RESTful（表述性状态转移）"></a>六、RESTful（表述性状态转移）</h1><p>REST是英文Representational State Transfer的缩写，中文称之为“表述性状态转移” 基于HTTP协议，是另一种服务架构，传递是JSON、POX（Plain Old XML）而不是SOAP格式的数据，充分利用HTTP谓词（Verb），侧重数据的传输，业务逻辑交给客户端自行处理</p><p>REST是一种分布式服务架构的风格约束，像Java、.Net（WCF、WebAPI）都有对该约束的实现，使URL变得更加有意义，更加简洁明了，如：</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>get请求 表示获得所有产品的第1个</p><p><a href="https://www.zhangguo.com/products/product" target="_blank" rel="noopener">https://www.zhangguo.com/products/product</a><br>post请求 表示添加一个产品</p><p><a href="https://www.zhangguo.com/products/1/price" target="_blank" rel="noopener">https://www.zhangguo.com/products/1/price</a><br>get请求 表示获得第1个产品的价格</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>delete请求 删除编号为1的产品</p><p>REST设计需要遵循的原则<br>网络上的所有事物都被抽象为资源（resource）；<br>每个资源对应一个唯一的资源标识符（resource identifier）；<br>通过通用的连接器接口（generic connector interface）对资源进行操作；<br>对资源的各种操作不会改变资源标识符；<br>所有的操作都是无状态的（stateless）</p><p>谓词<br><strong>GET</strong><br>表示查询操作，相当于Retrieve、Select操作<br><strong>POST</strong><br>表示插入操作，相当于Create，Insert操作<br><strong>PUT</strong><br>表示修改操作，相当于Update操作<br><strong>DELETE</strong><br>表示删除操作，相当于Delete操作</p><p>其它还有：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161223101344557-1727952968.png" alt></p><p>NodeJS+Express可以很容易的实现REST</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>application/json</li><li>res.setHeader(‘Content-Type’, ‘application/json;charset=utf-8’);</li></ul><p>示例代码cars.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var cars=[];</span><br><span class="line">cars.push(&#123;id:201701,name:&quot;BMW&quot;,price:190,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201702,name:&quot;BYD&quot;,price:25,speed:&quot;160km/h&quot;,color:&quot;红色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201703,name:&quot;Benz&quot;,price:300,speed:&quot;215km/h&quot;,color:&quot;蓝色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201704,name:&quot;Honda&quot;,price:190,speed:&quot;170km/h&quot;,color:&quot;黑色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201705,name:&quot;QQ&quot;,price:130,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line"></span><br><span class="line">/* Get */</span><br><span class="line">/*获得所有汽车*/</span><br><span class="line">/*url /cars/*/</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.json(cars);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Get*/</span><br><span class="line">/*获得汽车通过id*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">     //从路径中映射参数，转换成数字</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var car=_.find(cars,&#123;id:id&#125;);</span><br><span class="line">      res.json(car);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Post*/</span><br><span class="line">/*添加汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.post(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      car.id=_.last(cars).id+1;  //将编号修改为最后一辆车的编号+1</span><br><span class="line">      cars.push(car);  //将汽车对象添加到集合中</span><br><span class="line">      res.json(car);  //将添加成功的车以json的形式返回</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Put*/</span><br><span class="line">/*修改汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.put(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      console.log(req.body);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:parseInt(car.id)&#125;);  //根据id获得车在集合中的下标</span><br><span class="line"></span><br><span class="line">      cars[index]=car;  //替换原对象</span><br><span class="line">      //res.json(car);  //将修改后的车以json的形式返回</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;更新成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Delete*/</span><br><span class="line">/*删除汽车*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.delete(&apos;/id/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">      //获得url中的编号参数</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:id&#125;);  //根据id获得车在集合中的下标</span><br><span class="line">      cars.splice(index,1);   //在cars数组中删除下标从index开始的1条数据</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;删除成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>示例代码app.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line">var pdts = require(&apos;./routes/product&apos;);</span><br><span class="line">var task = require(&apos;./routes/task&apos;);</span><br><span class="line">var cars = require(&apos;./routes/cars&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line">app.use(&apos;/pdt&apos;, pdts);</span><br><span class="line">app.use(&quot;/task&quot;,task);</span><br><span class="line">app.use(&quot;/cars&quot;,cars);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得所有汽车  </li><li>url /cars/</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b27eb42dea22132.jpg" alt></p><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得汽车通过id</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b28e456cdf58111.jpg" alt></p><blockquote><p><strong>Post</strong></p></blockquote><ul><li>添加汽车  </li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b30e46f28836556.jpg" alt></p><p>参数中的json格式一定要使用标准格式，注意引号，注意Content-Type，默认的Content-Type类型是：application/x-www-form-urlencoded</p><blockquote><p><strong>Put</strong></p></blockquote><ul><li>修改汽车</li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3434410e778260.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b344cd080581595.jpg" alt></p><blockquote><p><strong>Delete</strong>  </p></blockquote><ul><li>删除汽车</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3526d5bff57574.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b35474e9c447189.jpg" alt></p><p><strong>node.js跨域</strong></p><p>修改app.js文件拦截所有的请求，修改头部</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">app.all(&apos;*&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">    res.header(&quot;X-Powered-By&quot;, &apos; 3.2.1&apos;);</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);</span><br><span class="line">    if(req.method == &quot;OPTIONS&quot;) &#123;</span><br><span class="line">        res.send(&quot;200&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2017.cnblogs.com/blog/63651/201801/63651-20180108142729785-1121920664.png" alt></p><h1 id="九、视频"><a href="#九、视频" class="headerlink" title="九、视频"></a>九、<a href="https://www.bilibili.com/video/av17977069" target="_blank" rel="noopener">视频</a></h1><p>From: <a href="https://www.cnblogs.com/best/p/6204116.html" target="_blank" rel="noopener">https://www.cnblogs.com/best/p/6204116.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Node.js" scheme="https://www.policx.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hexo front-matter 怎么写？</title>
    <link href="https://www.policx.com/front-matter/"/>
    <id>https://www.policx.com/front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-21T05:19:48.805Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr><tr><td>link</td><td>点击文章跳转地址</td><td></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/CSDNnews/"/>
    <id>https://www.policx.com/CSDNnews/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-18T06:25:40.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">hackernoon</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/news/BitTorrent/"/>
    <id>https://www.policx.com/news/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/notes/partner/"/>
    <id>https://www.policx.com/notes/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-28T03:30:14.778Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
      <category term="notes" scheme="https://www.policx.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/news/harddisk/"/>
    <id>https://www.policx.com/news/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/news/2019/"/>
    <id>https://www.policx.com/news/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-18T06:25:40.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/blog/netlify/"/>
    <id>https://www.policx.com/blog/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-18T06:25:47.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。<br><img src="https://githubpage-1255710107.cos.ap-shanghai.myqcloud.com/static/images/KNN/hexo.png" alt></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。<br>那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。<br>接下来我分步骤的跟大家来介绍我的部署方案。</p><h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/blog/hexo-theme-icarus/"/>
    <id>https://www.policx.com/blog/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-18T06:25:47.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f0332a3bdc91139.jpg" alt="easyhexo.com"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>善用佳软 Blinks</title>
    <link href="https://www.policx.com/Blinks/"/>
    <id>https://www.policx.com/Blinks/</id>
    <published>2019-04-30T04:11:04.000Z</published>
    <updated>2019-07-27T14:56:24.752Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>我们已经离不开电子屏幕了！</p><a id="more"></a><p>不管是家用的电视机，办公用的电脑，还是无时无刻把玩的手机，大部分时间和我们共处的设备，都有显示屏。</p><p>高亮、蓝光、屏闪都会对眼睛造成损害，「护眼」变成了用户的强需求，也是设备厂商需要为用户考虑的问题。</p><p>在 MacOS 增加「夜览」功能之前，多年的护眼功能空缺是由诸如「f.lux」这类软件来填补的， 就算到现在，「f.lux」仍然不过时，除了减少蓝光，「f.lux」还能随时间变换屏幕颜色。</p><p>过滤蓝光、调整色温，是一种护眼思路，还有另外一种思路。</p><p>研究显示，盯着电脑屏幕工作的人眨眼频次大概是正常水平的 1/4，而正常眨眼可保持眼睛表面湿润，减少干燥和刺激。</p><p><img src="https://i.loli.net/2019/07/27/5d3c5c67b08d727186.png" alt="眨眼"></p><p>「Blinks」是一款 Mac 眨眼提醒软件，它并不会提醒你原理电脑，这也不显示，而是提醒你该更密集地眨眨眼了。看看它都有哪些功能和自定义项：</p><p>1.两种提醒模式：动画和非动画</p><p>2.可随系统启动</p><p>3.可设置时间间隔</p><p>4.可设置全屏下禁用，不打扰沉浸工作</p><p>5.通知窗口不会影响在用的应用、键盘和鼠标动作</p><p>6.可设置背景透明度</p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/NveP1sif_IqFGalS2BxOkg" target="_blank" rel="noopener"><img src="https://gitee.com/policx/im/raw/master/images/Z2gkII.png" alt="pic"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们已经离不开电子屏幕了！&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>善用佳软-Moom</title>
    <link href="https://www.policx.com/Software/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF-Moom/"/>
    <id>https://www.policx.com/Software/善用佳软-Moom/</id>
    <published>2019-04-09T14:40:35.000Z</published>
    <updated>2019-07-27T14:52:21.582Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>「Moom」是一款 Mac 窗口整理软件，功能和「Magnet」类似，软件提供了几个预置的窗口位置供你选择，使窗口排列不会杂乱无章，不管是单项事务还是协同任务都能井井有条。</p><a id="more"></a><p>首先要说，个人更喜欢「Magnet」，因为其存在感低，只需要记住几个快捷键便能随心所欲地使用并获得极好的体验。</p><p>「Moom」在热键的效率上并不如「Magnet」，因为他的热键逻辑是需要两步才能完成，即第一步呼出「Moom」，第二部选择预设动作。但它给了用户其他可能更好的选择。<br><img src="https://gitee.com/policx/im/raw/master/images/ojYfRU.jpg" alt="pic"></p><p>只需要将鼠标指针悬停在任意窗口的绿色最大化按钮上，「Moom」的弹出菜单就会出现，选择其中的预设即可将该窗口变换到想要的位置和尺寸比例。</p><p>这更符合使用直觉，并被很多更倾向使用鼠标的用户接受。<br><img src="https://gitee.com/policx/im/raw/master/images/jRFNDR.jpg" alt="pic"></p><p>还有，当你将鼠标指针悬停在任意窗口的绿色最大化按钮上，并按住 Option 键，「Moom」会给你更多的选择，主要是 1/4 窗口的扩展。</p><p>「Moom」还支持”边缘和角落吸附”，拖拽窗口到屏幕边缘或一角，便能触发相应的窗口变换。</p><p>「Moom」还提供了诸多自定义项，比如尺寸比例、保存当前窗口位置比例为预设、响应时间等，如果你更喜欢其和窗口的融合性，不妨试试。</p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s?__biz=MjM5MjY0OTUzMw==&mid=2449442057&idx=1&sn=5eb650c241a2de4928ad4230a1b5d772&chksm=b2a83d5b85dfb44d7c1d277863589caed2eb0955bc4d2e4de28b661dfb1f6c72a4d3fa980e2b&scene=21#wechat_redirect" target="_blank" rel="noopener"><img src="https://gitee.com/policx/im/raw/master/images/Z2gkII.png" alt="pic"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「Moom」是一款 Mac 窗口整理软件，功能和「Magnet」类似，软件提供了几个预置的窗口位置供你选择，使窗口排列不会杂乱无章，不管是单项事务还是协同任务都能井井有条。&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
</feed>
