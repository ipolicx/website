<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-07-14T08:41:14.777Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DDoS（分布式拒绝服务）攻击是无解的吗？</title>
    <link href="https://www.policx.com/2019/07/14/ddos/"/>
    <id>https://www.policx.com/2019/07/14/ddos/</id>
    <published>2019-07-14T07:26:43.000Z</published>
    <updated>2019-07-14T08:41:14.777Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>“</p><p>DDOS？ </p><p>一言难尽啊！ </p><p>”</p><a id="more"></a><p>先说结论，DDoS是近年来网络攻击中的一棵“常青树”，的确很难缠，但说它是无解的，那也有点太看得起它了。虽然DDoS在对很多大平台的攻击中出尽了风头，但在现在互联网的解决方案中，并不缺乏应对DDoS的解决方案。 </p><p>说起DDoS攻击，我脑海里能够想到的全都是中国民间俗语，什么“双拳难敌四手，好汉架不住人多”，什么“千斤拨四两”，什么“乱拳打死老师傅”等等等等。 </p><p>之前有朋友跑来问我DDoS是个什么东西，为什么这么多互联网巨头都被搞得没有脾气，我记得我当时我是这么举的例子： </p><p>我们这一代人小的时候，自助餐开始在中国内地风行，那会儿这个行业里为了打击竞争对手，对手最惯常使用的阴招是雇佣很多五大三粗的人，给他们钱去对方的店里一通猛吃，杯盘狼藉之下，用不了几天这家自助餐就能给吃黄了。 </p><p>而DDoS攻击比这种还阴损，如果你开了一家餐馆，你的对手如果想搞你，最好的办法就是找一堆地痞流氓到你的店里坐的满满一屋子，你如果上前问，他们就一直跟你扯淡找麻烦，导致真正想吃饭的顾客一看这个情形，掉头就走了。 </p><p>用不了多久，你的餐馆就会开不下去，而你的竞争对手就会趁机蚕食掉你的市场份额，而放在网络语境里，这就是DDoS攻击的最基本原理。 </p><p>而这件事之所以难缠在于，一两个无赖根本成不了气候，想要耍流氓必须要有很多个无赖集结在一起。<strong>所以和现实世界中的无赖一样，DDoS真正的杀手锏在于利用能够发动的汹涌的流量，可以瞬间冲垮被攻击网站的服务器。</strong></p><p>如果我们回溯一下历史的话，会发现黑客组织之所以会有组织有预谋的发起DDoS攻击，基本上都是基于以下几个原因： </p><ul><li><p>有些行业如果网站被恶意攻击，会造成很难估量的损失，这个时候黑客发动DDoS攻击的初衷一般是出于敲诈勒索，为了保证企业的正常运转，他们通常愿意向黑客付高额的赎金； </p></li><li><p>行业内血海一片，DDoS是恶意竞争的屠刀。这个现象从逻辑上，其实雇佣无赖去占领对手餐馆的原理是一毛一样的，而且DDOS攻击早已产业化，现在中国的DDOS黑市，出钱请黑客打1G的流量到一个网吧或网站，市场价只要不到50块钱，但对于一个创业公司或者干脆就是一个小网吧来说，这已经算是可以灭顶的无妄之灾了。 </p></li><li><p>DDoS攻击往往成为掩盖真实网络攻击的烟雾弹，在遭受DDoS攻击的企业中，部分企业还伴随数据丢失的现象，黑客利用DDoS攻击掩盖其窃取用户隐私的真实目的，这种攻击行为在社交网站、金融领域等用户隐私高价值的行业尤为高发。 </p></li></ul><p>比如说，去年年初的时候，荷兰第一大银行荷兰商业银行于2018年1月28日晚间遭到DDoS攻击；第二大银行荷兰合作银行的网银服务29日早晨遭到攻击；第三大银行荷兰银行在那一周内共遭到7次网络攻击，仅周末就有3次。 </p><p>不过这一次发生在荷兰的针对银行系统的攻击并没有造成用户隐私的泄露，原因在于这仅仅是一次来自俄罗斯一个网络间谍组织Cozy Bear对荷兰情报组织AIVD侵犯其计算机的“单纯”的报复行为。<strong>但并不是所有黑客组织发起的DDoS攻击都如此单纯。</strong></p><p>2018年年底时万豪酒店发布了一则公告，称其旗下喜达屋酒店的5亿人次的信息被泄露，共计3.27亿人，泄露信息包括姓名、邮寄地址、电话号码、电子邮件昂面地址、护照号码、出生日期、性别等等入住信息，更糟糕的是万豪无法确定，侵入酒店系统的第三方黑客，在窃取的信息中是否包含客人的银行卡号和密码。（此案例和DDOS攻击无关，建议采用其他案例，比如2011年4月20日至26日，索尼遭受DDoS攻击，目的是为了掩盖盗取索尼PS的用户数据。） </p><p>而游戏领域，则是DDoS攻击的另一个重灾区，不光是刚才前文中提到的暴雪，包括索尼、金山、网易在内的众多知名游戏公司都曾数次遭受攻击，可以说DDoS攻击是游戏企业的噩梦。 </p><p>许多刚创业的游戏公司，可能刚上线就被打死，而一些处在融资阶段的游戏公司，由于遭遇攻击而被迫停服，则很大程度上会调低投资人的预期，甚至导致融资失败。 </p><p>而这些因素，都是竞对打压或者敲诈勒索的绝对软肋。 </p><p>从以上的几个案例我们不难看出，和现实中的耍流氓和敲诈勒索相比，通过网络手段进行攻击的风险和成本更低，坏蛋的嘴脸也更穷凶极恶一点，无论是政府机构还是企业平台，无论你是巨头还是小蚂蚁，只要你身上有羊毛可以薅，你都时刻面临着被洗劫的风险 </p><p>不过刚在开头我也讲了，虽然DDoS很难缠很让人头痛，但本质上图并不是无解的。 </p><p>回到我最开始讲的那个例子。 </p><p>你是一个餐馆老板，过去三十年一直是个老老实实的厨子，突然面对五十个臭流氓到你店里耍无赖的时候，你最好的应对方法，应该是什么？ </p><p>自己组建一支人马，和这些臭流氓正面刚？这恐怕不行，因为你不是臭流氓，你没有相应的作战经验。 </p><p>报警请人民警察来帮忙处理？这恐怕也不行，人家在你店里没有打砸抢，只是“温和的”非暴力不合作，警察来了也只能当民事调解，并且人家马仔众多，明天再换一拨新面孔来，玩的你一点脾气都没有。 </p><p>这就是面对DDoS时，无论是巨头还是小蚂蚁，他们的实实在在的困境。 </p><p>但正所谓“道高一尺魔高一丈”，你在云上和我耍流氓，那我就在云上回击。 </p><p><strong>“云”的事儿，不如还交还给云来处理。</strong>我认为就目前DDoS的在攻击量级上的疯狂进击的前提下，云计算服务厂商或许是狙击它们的最有效手段。 </p><p>2018年年初，峰值1.35TB/秒的流量冲击了开发者平台 GitHub。这是第一次TB量级的DDoS攻击。GitHub 受到攻击后，服务器断断续续，无法访问。攻击发生 10 分钟后，GitHub 向CDN 服务商 Akamai 请求协助，访问 GitHub 的流量已经由后者接管并在15分钟之内完成了防御。 </p><p>Akamai的相关负责人在接受采访时说，我们是基于迄今为止最大规模 DDoS 攻击五倍的峰值而做的相应准备，所以 1.3T 对我们来说是小意思。 </p><p>在关于流量峰值这一点上，我认为饱受双11、双12、618等全民购物狂欢的电商巨头们更有发言权，就拿京东举例子好了。 </p><p>京东云在之前发布的高防版的DDoS服务中，展示出了非常明确的信心是，在多年的电商狂欢流量对抗中，京东云已经在实战中建立了一套完备的防御机制，无论是在流量峰值的建模上，还是在DDoS的防御算法上，它的部署都远远不是纸上谈兵，而是拳拳到肉的经受住了实战的洗礼。要知道，全世界每年有超过5成的DDoS攻击都来自中国，而我们的国家也是全世界超过美国的第一大“肉鸡”市场，由电商大数据加持演化而来的京东云，它在云安全的理解上可以说是非常深刻了。 </p><p>所以说，如果说一定要有一个结论，我想说“上帝的归上帝，而云上的归云上”，像京东云这样的基于电商大数据考验的云计算平台，或许才是对抗DDoS的最终答案。 </p><p>From: <a href="https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA</a></p><p><strong>内容整理自：知乎@例不虚发探花郎</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“&lt;/p&gt;
&lt;p&gt;DDOS？ &lt;/p&gt;
&lt;p&gt;一言难尽啊！ &lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.policx.com/2019/07/14/node/"/>
    <id>https://www.policx.com/2019/07/14/node/</id>
    <published>2019-07-13T16:06:04.000Z</published>
    <updated>2019-07-15T09:40:32.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/15/5d2c47df96f5d45317.jpg" alt="Node.js"></p><p>能方便地搭建响应速度快、易于扩展的网络应用，Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>中文：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org</a>、<a href="https://nodejs.cn/" target="_blank" rel="noopener">https://nodejs.cn</a></p><p>简单说Node.js就是运行在服务器端的JavaScript，是现在流行的语言中能同时运行在前端与后台的程序语言，你可以把JavaScript想像成Java与C#。相关技术：</p><p>数据库：MongoDB，非关系型数据库，NoSQL（Not only SQL）</p><p>MVC框架：AngularJS</p><p>Web服务器：Express</p><p>模板引擎：jade、ejs、htmljs、swig、hogan.js</p><h1 id="二、搭建Node-js开发环境"><a href="#二、搭建Node-js开发环境" class="headerlink" title="二、搭建Node.js开发环境"></a>二、搭建Node.js开发环境</h1><h2 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h2><p>去官网下下载最新版本的Node.js一步一步按提示安装即可，如果安装失败就手动安装，将Node.js的安装位置配置到环境变量的path中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装完成后启动命令行，测试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="三、第一个Node-js程序"><a href="#三、第一个Node-js程序" class="headerlink" title="三、第一个Node.js程序"></a>三、第一个Node.js程序</h1><p>在上面的示例中，我们是通过IDE完成编译与运行的，其实手动运行也可以，比如编写一段代码如下：</p><blockquote><p>server.js</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//依赖一个http模块，相当于java中的import，与C#中的using</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">//创建一个服务器对象</span><br><span class="line">server = http.createServer(function (req, res) &#123;</span><br><span class="line">//设置请求成功时响应头部的MIME为纯文本</span><br><span class="line">res.writeHeader(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">//向客户端输出字符</span><br><span class="line">res.end(&quot;Hello World\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//让服务器监听本地8000端口开始运行</span><br><span class="line">server.listen(8000,&apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server is runing at 127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>在node环境下解释运行：<br><img src="https://i.loli.net/2019/07/14/5d2af984d2fae77488.jpg" alt></p><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2af89c2b5b226144.jpg" alt></p><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。<br>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。<br>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</p><h1 id="四、NPM（Node-js包管理器）"><a href="#四、NPM（Node-js包管理器）" class="headerlink" title="四、NPM（Node.js包管理器）"></a>四、NPM（Node.js包管理器）</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：  </p><ul><li>a)、允许用户从NPM服务器下载别人编写的第三方包到本地使用。  </li><li>b)、允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。  </li><li>c)、允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><h2 id="4-1、查看npm版本"><a href="#4-1、查看npm版本" class="headerlink" title="4.1、查看npm版本"></a>4.1、查看npm版本</h2><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p><h2 id="4-2、升级npm"><a href="#4-2、升级npm" class="headerlink" title="4.2、升级npm"></a>4.2、升级npm</h2><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="4-3、安装模块"><a href="#4-3、安装模块" class="headerlink" title="4.3、安装模块"></a>4.3、安装模块</h2><blockquote><p>npm install <module name> -参数</module></p></blockquote><p>如果带参数-g表示全局安装，否则只是安装到某个目录下。</p><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install express -g</span><br></pre></td></tr></table></figure><h2 id="4-4、卸载模块"><a href="#4-4、卸载模块" class="headerlink" title="4.4、卸载模块"></a>4.4、卸载模块</h2><p>我们可以使用以下命令来卸载 Node.js 模块。  </p><blockquote><p>sudo npm uninstall <module name></module></p></blockquote><p>如先使用安装指令安装bootstrap:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>再使用卸载指令删除模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall bootstrap</span><br></pre></td></tr></table></figure><p>可以到 /node_modules/ 目录下查看包是否还存在</p><h2 id="4-5、模块列表"><a href="#4-5、模块列表" class="headerlink" title="4.5、模块列表"></a>4.5、模块列表</h2><p>使用模块列表命令可以方便的看到当前项目中依赖的包：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h2 id="4-6、更新模块"><a href="#4-6、更新模块" class="headerlink" title="4.6、更新模块"></a>4.6、更新模块</h2><p>我们可以使用以下命令更新模块：<br><code>npm update</code>模块名称<br><code>npm up -g</code> 模块名称</p><h2 id="4-7、搜索模块"><a href="#4-7、搜索模块" class="headerlink" title="4.7、搜索模块"></a>4.7、搜索模块</h2><p><code>npm search</code>模块名称</p><h2 id="4-8、NPM-常用命令"><a href="#4-8、NPM-常用命令" class="headerlink" title="4.8、NPM 常用命令"></a>4.8、NPM 常用命令</h2><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。<br>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。<br>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。<br>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。<br>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。<br>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></package></package></p><h2 id="4-9、更换NPM-镜像"><a href="#4-9、更换NPM-镜像" class="headerlink" title="4.9、更换NPM 镜像"></a>4.9、更换NPM 镜像</h2><p>因为npm的服务器在国外，在网络状态不好的情况下引入一个模块会因为网络延迟而失败，可以更换成国内速度更快的镜像服务器，这里以使用淘宝 NPM 镜像（<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>）为例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/15/5d2c481d14f7270384.jpg" alt></p><p>这样就可以使用 cnpm 命令来安装模块了：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＄ cnpm install [name]</span><br></pre></td></tr></table></figure><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><p>如是安装失败，可以试试：</p><figure class="highlight zsh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">alias</span> cnpm=<span class="hljs-string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">--cache=<span class="hljs-variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">--userconfig=<span class="hljs-variable">$HOME</span>/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">  --userconfig=$HOME/.cnpmrc"'</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。使用Node.js作为AngularJS开发Web服务器的最佳方式是使用Express模块。</p><p>Express官网： <a href="https://expressjs.com/" target="_blank" rel="noopener">https://expressjs.com/</a></p><p>Express4.x API：<a href="https://expressjs.com/zh-cn/4x/api.html" target="_blank" rel="noopener">https://expressjs.com/zh-cn/4x/api.html</a></p><p><img src="https://i.loli.net/2019/07/15/5d2c484698cd427801.jpg" alt></p><h2 id="5-2、Express框架核心特性"><a href="#5-2、Express框架核心特性" class="headerlink" title="5.2、Express框架核心特性"></a><strong>5.2、Express框架核心特性</strong></h2><p>可以设置中间件来响应 HTTP 请求。</p><p>定义了路由表用于执行不同的 HTTP 请求动作。</p><p>可以通过向模板传递参数来动态渲染 HTML 页面。</p><p>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。</p><p>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p><h2 id="5-3、安装-Express"><a href="#5-3、安装-Express" class="headerlink" title="5.3、安装 Express"></a><strong>5.3、安装 Express</strong></h2><p>安装 Express 并将其保存到依赖列表中：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>以上命令全局安装express。也可安装时指定安装中间件。</p><p><em>body-parser</em> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</p><p><em>cookie-parser</em> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p><p><em>multer</em> - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">＄ npm install body-parser --save  </span><br><span class="line">＄ npm install cookie-parser --save  </span><br><span class="line">＄ npm install multer --save</span><br></pre></td></tr></table></figure><p>默认这些模块都已经添加。</p><h2 id="5-4、第一个Express框架实例"><a href="#5-4、第一个Express框架实例" class="headerlink" title="5.4、第一个Express框架实例"></a>5.4、第一个Express框架实例</h2><p>接下来我们使用 Express 框架来输出 “Hello World”。<br>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。</p><p>创建一个目录，如Project，进入命令行：</p><p>使用npm install express 导入express模块。</p><p>在目录下创建hello.js文件，如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//引入express模块</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">//创建一个app对象，类似一个web 应用（网站）</span><br><span class="line">var app = express();</span><br><span class="line">//接受指定路径的请求，指定回调函数</span><br><span class="line">app.get(&apos;/&apos;, function (req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//创建一个web服务器，可以认为就是web服务器对象</span><br><span class="line">//监听8081端口，当监听成功时回调</span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">   var host = server.address().address;  //地址</span><br><span class="line">   var port = server.address().port;  //端口</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-5、开发Express项目"><a href="#5-5、开发Express项目" class="headerlink" title="5.5、开发Express项目"></a>5.5、开发Express项目</h2><p><img src="https://i.loli.net/2019/07/14/5d2b00e97910997783.jpg" alt></p><p>创建好的项目如下：<br><img src="https://i.loli.net/2019/07/14/5d2b02dad205355700.jpg" alt></p><p>app.js是网站：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><p>bin\www是web服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">/**</span><br><span class="line"> * 依赖模块，导入</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;nodejsexpress:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从上下文环境中获得监听端口，如果空则3000</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Web服务器</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开始监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);  //指定发生错误时的事件</span><br><span class="line">server.on(&apos;listening&apos;, onListening);  //当监听成功时的回调</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 规范化端口</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *错误事件监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  //错误处理</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);  //结束程序</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当用户访问服务器成功时的回调</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/index.js路由，有点类似控制器或Servlet：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 获得首页 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>views/index.ejs首页视图：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在www上右键选择“运行方式”-&gt;Run ‘/bin/www’ 运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b034bcca6187136.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b044c2b12347829.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b041724d6091090.jpg" alt></p><h3 id="5-5-1、request对象"><a href="#5-5-1、request对象" class="headerlink" title="5.5.1、request对象"></a>5.5.1、request对象</h3><p>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ul><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ul><h3 id="5-5-2、response对象"><a href="#5-5-2、response对象" class="headerlink" title="5.5.2、response对象"></a>5.5.2、response对象</h3><p>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.app：同req.app一样</span><br><span class="line">res.append()：追加指定HTTP头</span><br><span class="line">res.set()在res.append()后将重置之前设置的头</span><br><span class="line">res.cookie(name，value [，option])：设置Cookie</span><br><span class="line">opition: domain / expires / httpOnly / maxAge / path / secure / signed</span><br><span class="line">res.clearCookie()：清除Cookie</span><br><span class="line">res.download()：传送指定路径的文件</span><br><span class="line">res.get()：返回指定的HTTP头</span><br><span class="line">res.json()：传送JSON响应</span><br><span class="line">res.jsonp()：传送JSONP响应</span><br><span class="line">res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</span><br><span class="line">res.redirect()：设置响应的Location HTTP头，并且设置状态码302</span><br><span class="line">res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</span><br><span class="line">res.send()：传送HTTP响应</span><br><span class="line">res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</span><br><span class="line">res.set()：设置HTTP头，传入object可以一次设置多个头</span><br><span class="line">res.status()：设置HTTP状态码</span><br><span class="line">res.type()：设置Content-Type的MIME类型</span><br></pre></td></tr></table></figure><h3 id="5-5-3、express获取参数有三种方法"><a href="#5-5-3、express获取参数有三种方法" class="headerlink" title="5.5.3、express获取参数有三种方法"></a>5.5.3、express获取参数有三种方法</h3><p>req.query 适合 <a href="https://localhost:3000/form?num=8888" target="_blank" rel="noopener">https://localhost:3000/form?num=8888</a><br>req.body 适合<a href="https://localhost:3000/form，Post请求中的参数" target="_blank" rel="noopener">https://localhost:3000/form，Post请求中的参数</a><br>req.params 适合获取form后的num：<a href="https://localhost:3000/form/num" target="_blank" rel="noopener">https://localhost:3000/form/num</a>  </p><p>（一）、GET</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = req.query.num;</span><br><span class="line">res.send(&quot;你获取的get数据为:&quot; + num);</span><br></pre></td></tr></table></figure><p>（二）、POST</p><p>解析post数据需要用到body-parser</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">//引入body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">//需要use的</span><br><span class="line">app.use(bodyParser.json()); // for parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">extended: true</span><br><span class="line">&#125;)); // for parsing application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.post(&apos;/form&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.body.num;</span><br><span class="line">res.send(&quot;你获取的post数据为:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>public/test.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"tinyphp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（三）、获取路径参数</p><p>app.js  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.get(&apos;/form/:num&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.params.num;</span><br><span class="line">res.send(&quot;你获取到form/后的参数:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="5-6-ejs基础"><a href="#5-6-ejs基础" class="headerlink" title="5.6 ejs基础"></a>5.6 ejs基础</h2><p>ejs是一个Express Web应用的模板引擎，在NodeJS开发中可以选择的模板引擎可能是所有Web应用开发中范围最广的，如jade、ejs、htmljs、swig、hogan.js，但ejs是最容易上手的，与jsp,asp,php的原始模板引擎风格很像。</p><p>官网：<a href="https://www.embeddedjs.com/" target="_blank" rel="noopener">https://www.embeddedjs.com/</a></p><p>添加一个<code>product.js</code>路由：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  var products=[];</span><br><span class="line">  products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">  //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">  res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>在views目录下添加<code>product.ejs</code>视图，这里是一个简单的MVC：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span> - 产品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"80%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%pdts.forEach(function(pdt,index)&#123;%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=index+1%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.name%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.price%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%&#125;);%</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">%=pdts[i].name%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改app，注册定义好的模块product：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> index = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/index'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/users'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> pdts = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/product'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//指定视图引擎为ejs</span></span><br><span class="line">app.set(<span class="hljs-string">'views'</span>, path.join(__dirname, <span class="hljs-string">'views'</span>));</span><br><span class="line">app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="hljs-comment">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class="line">app.use(logger(<span class="hljs-string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="hljs-string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/'</span>, index);</span><br><span class="line">app.use(<span class="hljs-string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="hljs-string">'/pdt'</span>, pdts);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b092ca2eb115835.jpg" alt></p><blockquote><p>原因：没有安装ejs模块<br>解决办法：进入到项目目录，安装ejs</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save ejs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b09efe80ba53992.jpg" alt></p></blockquote><p>重新运行：<br><img src="https://i.loli.net/2019/07/14/5d2b0a951a09231745.jpg" alt></p><h2 id="5-7、lodash"><a href="#5-7、lodash" class="headerlink" title="5.7、lodash"></a>5.7、lodash</h2><p>这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。可以非常方便的操作json。</p><p>官网：<a href="https://lodashjs.com/" target="_blank" rel="noopener">https://lodashjs.com/</a></p><p>安装：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash</span><br></pre></td></tr></table></figure><p>安装时先用cd切换到当前项目下。</p><p>如果浏览器使用可以直接引入：</p><script src="lodash.js"></script><p>添加lodash依赖：<br><img src="https://i.loli.net/2019/07/14/5d2b0c4c7c14a17367.jpg" alt></p><p>依赖成功后会在package.json中添加引用：<br><img src="https://i.loli.net/2019/07/14/5d2b0c9e03f1844597.jpg" alt></p><p>后台Node.js使用，可以引入模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//导入lodash模块</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var products=[];</span><br><span class="line">products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">//1、取出第一个元素</span><br><span class="line">var obj1=_.first(products);</span><br><span class="line">console.log(obj1.name);  //ZTE U880</span><br><span class="line"></span><br><span class="line">//2、取出最后一个元素</span><br><span class="line">var obj2=_.last(products);</span><br><span class="line">console.log(obj2.name);  //iPhone 7 Plus 128G</span><br><span class="line"></span><br><span class="line">//3、指定查找条件返回符合条件的索引</span><br><span class="line">var obj3=_.findIndex(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj3);  //2</span><br><span class="line"></span><br><span class="line">//4、指定查找条件返回查找到的对象</span><br><span class="line">var obj4=_.find(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj4);  //&#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;</span><br><span class="line"></span><br><span class="line">//5、排序</span><br><span class="line">var obj5=_.orderBy(products,[&quot;price&quot;,&quot;name&quot;],[&quot;desc&quot;,&quot;asc&quot;]);</span><br><span class="line">console.log(obj5);</span><br><span class="line"></span><br><span class="line">//[ &#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;HuWei 荣耀8&apos;, price: 1899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;ZTE U880&apos;, price: 899.8 &#125; ]</span><br><span class="line"></span><br><span class="line">//6、查找价格为1899.8的产品的key</span><br><span class="line">var obj6=_.findKey(products,&#123;price:1899.8&#125;);</span><br><span class="line">console.log(obj6);   //1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/14/5d2b0f023a83710965.jpg" alt></p><p>API的使用非常简单，但需要注意版本，可以现查现用，API地址：<a href="https://lodash.com/docs/4.17.2%20" target="_blank" rel="noopener">https://lodash.com/docs/4.17.2 </a></p><h2 id="5-8、参数"><a href="#5-8、参数" class="headerlink" title="5.8、参数"></a>5.8、参数</h2><h3 id="5-8-1、URL中的参数占位"><a href="#5-8-1、URL中的参数占位" class="headerlink" title="5.8.1、URL中的参数占位"></a>5.8.1、URL中的参数占位</h3><p>Checks route params (req.params), ex: /user/:id</p><p>127.0.0.1:3000/index，这种情况下，我们为了得到index，我们可以通过使用req.params得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式；</p><p><code>http://127.0.0.1:3000/pdt/9527/phone</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得产品根据Id</span><br><span class="line">router.get(&apos;/:id/:category&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(request.params.id+&quot;,&quot;+request.params.category);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b10e8e678f43145.jpg" alt></p><h3 id="5-8-2、URL中的QueryString"><a href="#5-8-2、URL中的QueryString" class="headerlink" title="5.8.2、URL中的QueryString"></a>5.8.2、URL中的QueryString</h3><p>Checks query string params (req.query), ex: ?id=12</p><p>127.0.0.1:3000/index?id=12，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用req.query.id就可以获得，类似于PHP的get方法；</p><p><code>http://127.0.0.1:3000/pdt/9527?name=jobs</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(&quot;name:&quot;+request.query.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b12be0371490358.jpg" alt></p><h3 id="5-8-3、HTTP正文中的参数"><a href="#5-8-3、HTTP正文中的参数" class="headerlink" title="5.8.3、HTTP正文中的参数"></a>5.8.3、HTTP正文中的参数</h3><p>在post请求中获得表单中的数据。</p><p>Checks urlencoded body params (req.body), ex: id=</p><p>127.0.0.1：300/index，然后post了一个id=2的值，这种方式是获取客户端post过来的数据，可以通过req.body.id获取，类似于PHP的post方法；</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222150412682-243382356.png" alt></p><p>页面：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &lt;%= title %&gt;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%pdts.forEach(function(pdt,index)&#123;%&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=index+1%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.name%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.price%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%&#125;);%&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=pdts[i].name%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            &lt;%if(typeof msg!=&quot;undefined&quot;)&#123;%&gt;</span><br><span class="line">                &lt;%=msg%&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">        &lt;form action=&quot;pdt/add&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                名称：&lt;input name=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                价格：&lt;input name=&quot;price&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/add&apos;,function(request,res,next)&#123;</span><br><span class="line">    var entity=&#123;name:request.body.name,price:request.body.price&#125;;</span><br><span class="line">    products.push(entity);</span><br><span class="line">      //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">      res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products,msg:&quot;添加成功&quot;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151340745-1374859267.png" alt></p><h2 id="5-9、JSON"><a href="#5-9、JSON" class="headerlink" title="5.9、JSON"></a>5.9、JSON</h2><p>如果需要Node.js向外提供返回JSON的接口，Express也是非常方便的，可以使用原来在浏览器中使用到的JSON对象，这是一个浏览器内置对象在服务可以直接使用：</p><p>将对象序列化成字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象</span><br><span class="line">var rose=&#123;&quot;name&quot;:&quot;Rose&quot;,&quot;weight&quot;:&quot;65&quot;&#125;;</span><br><span class="line">            //序列化成字符串</span><br><span class="line">            var str=JSON.stringify(rose);</span><br><span class="line">            alert(str);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151858839-27300214.png" alt></p><p>反序列化，将字符转换成对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成JavaScript对象</span><br><span class="line">var markStr=&apos;&#123;&quot;name&quot;:&quot;mark&quot;,&quot;weight&quot;:&quot;188&quot;&#125;&apos;;</span><br><span class="line">            var mark=JSON.parse(markStr);</span><br><span class="line">            alert(mark.name+&quot;，&quot;+mark.weight);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222152634417-1260078212.png" alt></p><p>Express已经封装了一个json方法，直接调用该方法就可以序列化对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/rest&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(products);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、RESTful（表述性状态转移）"><a href="#六、RESTful（表述性状态转移）" class="headerlink" title="六、RESTful（表述性状态转移）"></a>六、RESTful（表述性状态转移）</h1><p>REST是英文Representational State Transfer的缩写，中文称之为“表述性状态转移” 基于HTTP协议，是另一种服务架构，传递是JSON、POX（Plain Old XML）而不是SOAP格式的数据，充分利用HTTP谓词（Verb），侧重数据的传输，业务逻辑交给客户端自行处理</p><p>REST是一种分布式服务架构的风格约束，像Java、.Net（WCF、WebAPI）都有对该约束的实现，使URL变得更加有意义，更加简洁明了，如：</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>get请求 表示获得所有产品的第1个</p><p><a href="https://www.zhangguo.com/products/product" target="_blank" rel="noopener">https://www.zhangguo.com/products/product</a><br>post请求 表示添加一个产品</p><p><a href="https://www.zhangguo.com/products/1/price" target="_blank" rel="noopener">https://www.zhangguo.com/products/1/price</a><br>get请求 表示获得第1个产品的价格</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>delete请求 删除编号为1的产品</p><p>REST设计需要遵循的原则<br>网络上的所有事物都被抽象为资源（resource）；<br>每个资源对应一个唯一的资源标识符（resource identifier）；<br>通过通用的连接器接口（generic connector interface）对资源进行操作；<br>对资源的各种操作不会改变资源标识符；<br>所有的操作都是无状态的（stateless）</p><p>谓词<br><strong>GET</strong><br>表示查询操作，相当于Retrieve、Select操作<br><strong>POST</strong><br>表示插入操作，相当于Create，Insert操作<br><strong>PUT</strong><br>表示修改操作，相当于Update操作<br><strong>DELETE</strong><br>表示删除操作，相当于Delete操作</p><p>其它还有：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161223101344557-1727952968.png" alt></p><p>NodeJS+Express可以很容易的实现REST</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>application/json</li><li>res.setHeader(‘Content-Type’, ‘application/json;charset=utf-8’);</li></ul><p>示例代码cars.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var cars=[];</span><br><span class="line">cars.push(&#123;id:201701,name:&quot;BMW&quot;,price:190,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201702,name:&quot;BYD&quot;,price:25,speed:&quot;160km/h&quot;,color:&quot;红色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201703,name:&quot;Benz&quot;,price:300,speed:&quot;215km/h&quot;,color:&quot;蓝色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201704,name:&quot;Honda&quot;,price:190,speed:&quot;170km/h&quot;,color:&quot;黑色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201705,name:&quot;QQ&quot;,price:130,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line"></span><br><span class="line">/* Get */</span><br><span class="line">/*获得所有汽车*/</span><br><span class="line">/*url /cars/*/</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.json(cars);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Get*/</span><br><span class="line">/*获得汽车通过id*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">     //从路径中映射参数，转换成数字</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var car=_.find(cars,&#123;id:id&#125;);</span><br><span class="line">      res.json(car);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Post*/</span><br><span class="line">/*添加汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.post(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      car.id=_.last(cars).id+1;  //将编号修改为最后一辆车的编号+1</span><br><span class="line">      cars.push(car);  //将汽车对象添加到集合中</span><br><span class="line">      res.json(car);  //将添加成功的车以json的形式返回</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Put*/</span><br><span class="line">/*修改汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.put(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      console.log(req.body);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:parseInt(car.id)&#125;);  //根据id获得车在集合中的下标</span><br><span class="line"></span><br><span class="line">      cars[index]=car;  //替换原对象</span><br><span class="line">      //res.json(car);  //将修改后的车以json的形式返回</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;更新成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Delete*/</span><br><span class="line">/*删除汽车*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.delete(&apos;/id/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">      //获得url中的编号参数</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:id&#125;);  //根据id获得车在集合中的下标</span><br><span class="line">      cars.splice(index,1);   //在cars数组中删除下标从index开始的1条数据</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;删除成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>示例代码app.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line">var pdts = require(&apos;./routes/product&apos;);</span><br><span class="line">var task = require(&apos;./routes/task&apos;);</span><br><span class="line">var cars = require(&apos;./routes/cars&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line">app.use(&apos;/pdt&apos;, pdts);</span><br><span class="line">app.use(&quot;/task&quot;,task);</span><br><span class="line">app.use(&quot;/cars&quot;,cars);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得所有汽车  </li><li>url /cars/</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b27eb42dea22132.jpg" alt></p><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得汽车通过id</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b28e456cdf58111.jpg" alt></p><blockquote><p><strong>Post</strong></p></blockquote><ul><li>添加汽车  </li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b30e46f28836556.jpg" alt></p><p>参数中的json格式一定要使用标准格式，注意引号，注意Content-Type，默认的Content-Type类型是：application/x-www-form-urlencoded</p><blockquote><p><strong>Put</strong></p></blockquote><ul><li>修改汽车</li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3434410e778260.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b344cd080581595.jpg" alt></p><blockquote><p><strong>Delete</strong>  </p></blockquote><ul><li>删除汽车</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3526d5bff57574.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b35474e9c447189.jpg" alt></p><p><strong>node.js跨域</strong></p><p>修改app.js文件拦截所有的请求，修改头部</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">app.all(&apos;*&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">    res.header(&quot;X-Powered-By&quot;, &apos; 3.2.1&apos;);</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);</span><br><span class="line">    if(req.method == &quot;OPTIONS&quot;) &#123;</span><br><span class="line">        res.send(&quot;200&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2017.cnblogs.com/blog/63651/201801/63651-20180108142729785-1121920664.png" alt></p><h1 id="九、视频"><a href="#九、视频" class="headerlink" title="九、视频"></a>九、<a href="https://www.bilibili.com/video/av17977069" target="_blank" rel="noopener">视频</a></h1><p>From: <a href="https://www.cnblogs.com/best/p/6204116.html" target="_blank" rel="noopener">https://www.cnblogs.com/best/p/6204116.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>front-matter</title>
    <link href="https://www.policx.com/2019/07/11/Front-matter/"/>
    <id>https://www.policx.com/2019/07/11/Front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-14T08:55:47.989Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/2019/07/11/CSDNnews/"/>
    <id>https://www.policx.com/2019/07/11/CSDNnews/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-15T06:15:13.802Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">hackernoon</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/2019/07/05/BitTorrent/"/>
    <id>https://www.policx.com/2019/07/05/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-08T15:20:42.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/2019/07/04/partner/"/>
    <id>https://www.policx.com/2019/07/04/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-12T09:50:03.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/2019/06/18/harddisk/"/>
    <id>https://www.policx.com/2019/06/18/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-08T15:20:35.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/2019/06/05/2019/"/>
    <id>https://www.policx.com/2019/06/05/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-12T09:40:14.384Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/2019/05/01/netlify/"/>
    <id>https://www.policx.com/2019/05/01/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-13T15:48:09.150Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。<br><img src="https://githubpage-1255710107.cos.ap-shanghai.myqcloud.com/static/images/KNN/hexo.png" alt></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。<br>那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。<br>接下来我分步骤的跟大家来介绍我的部署方案。</p><h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/2019/05/01/hexo-theme-icarus/"/>
    <id>https://www.policx.com/2019/05/01/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-09T14:25:12.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><ul><li>原文链接—&gt; <a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">easyhexo.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="https://www.policx.com/2018/09/17/git-del/"/>
    <id>https://www.policx.com/2018/09/17/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-13T08:10:24.253Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://www.policx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="https://www.policx.com/2018/06/19/python-excel/"/>
    <id>https://www.policx.com/2018/06/19/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-07T04:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="https://www.policx.com/2018/06/17/python-writer/"/>
    <id>https://www.policx.com/2018/06/17/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-07T04:36:07.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="https://www.policx.com/2018/06/05/2018/"/>
    <id>https://www.policx.com/2018/06/05/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-12T10:08:35.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="/post-images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymongo/"/>
    <id>https://www.policx.com/2018/05/02/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-07T04:35:29.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://www.policx.com/2018/05/02/mongodb/"/>
    <id>https://www.policx.com/2018/05/02/mongodb/</id>
    <published>2018-05-02T06:11:11.000Z</published>
    <updated>2019-07-13T08:11:55.980Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。</p><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库。</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。通常情况下，在一个集合中的所有文件都是类似或相关目的。</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。<br>下面给出的示例显示了一个博客网站，仅仅是一个逗号分隔的键值对的文档结构。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorial&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,20,2,15),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My second comments&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,25,7,45),</span><br><span class="line">         like: 5</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>MongoDB use DATABASE_NAME 用于创建数据库。该命令如果数据库不存在，将创建一个新的数据库， 否则将返回现有的数据库。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>use DATABASE语句的基本语法如下：<br><code>use DATABASE_NAME</code></p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">如果想创建一个数据库名称为 &lt;mydb&gt;, 那么 use DATABASE 语句应该如下：</span><br><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line"></span><br><span class="line">要检查当前选择的数据库使用命令 db</span><br><span class="line">&gt;db</span><br><span class="line">mydb</span><br><span class="line"></span><br><span class="line">如果想查询数据库列表，那么使用命令 show dbs.</span><br><span class="line">&gt;show dbs</span><br><span class="line">local     0.78125GB</span><br><span class="line">test      0.23012GB</span><br><span class="line"></span><br><span class="line">所创建的数据库（mydb）不存在于列表中。要显示的数据库，需要至少插入一个文档进去。</span><br><span class="line">&gt;db.movie.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;)</span><br><span class="line">&gt;show dbs</span><br><span class="line">local      0.78125GB</span><br><span class="line">mydb       0.23012GB</span><br><span class="line">test       0.23012GB</span><br></pre></td></tr></table></figure><p>MongoDB的默认数据库是test。 如果没有创建任何数据库，那么集合将被保存在测试数据库。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>MongoDB db.dropDatabase() 命令用于删除现有的数据库。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>dropDatabase()指令的基本语法如下：<br><code>db.dropDatabase()</code></p><p>这将删除选定的数据库。如果没有选择任何数据库，那么它会删除默认的“test”数据库</p><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>如果想删除新的数据库 <mydb>, 那么 dropDatabase() 命令将如下所示：</mydb></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;&#123; &quot;dropped&quot; : &quot;mydb&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>MongoDB 的 db.createCollection(name, options) 用于创建集合。 在命令中, name 是要创建集合的名称。 Options 是一个文档，用于指定集合的配置</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>String</td><td>要创建的集合的名称</td></tr><tr><td>Options</td><td>Document</td><td>（可选）指定有关内存大小和索引选项</td></tr></tbody></table><p>选项参数是可选的，所以需要指定集合的唯一名字。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>createCollection()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt;db.createCollection(&quot;mycollection&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以通过使用 show collections 命令来检查创建的集合</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;show collections</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><h3 id="选项列表"><a href="#选项列表" class="headerlink" title="选项列表"></a>选项列表</h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。</td></tr><tr><td>autoIndexID</td><td>Boolean</td><td>（可选）如果为true，自动创建索引_id字段。默认的值是 false.</td></tr><tr><td>size</td><td>number</td><td>（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。</td></tr><tr><td>max</td><td>number</td><td>（可选）指定上限集合允许的最大文件数。</td></tr></tbody></table><p>尽管插入文档，MongoDB首先检查字段集合的上限大小，那么它会检查最大字段。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法 :"></a>语法 :</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexID : true, size : 6142800, max : 10000 &#125; )</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.yiibai.insert(&#123;&quot;name&quot; : &quot;yiibai&quot;&#125;)</span><br><span class="line">&gt;show collections</span><br><span class="line">mycol</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br><span class="line">yiibai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>MongoDB 的 db.collection.drop() 用于从数据库中删除集合。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>drop() 命令的基本语法如下<br><code>db.COLLECTION_NAME.drop()</code></p><h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>下面给出的例子将删除给定名称的集合：mycollection</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.mycollection.drop()</span><br><span class="line">true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p>将数据插入到MongoDB集合，需要使用MongoDB 的 insert() 方法。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>insert()命令的基本语法如下：<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.insert(&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c),</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里 mycol 是我们的集合名称，它是在之前的教程中创建。如果集合不存在于数据库中，那么MongoDB创建此集合，然后插入文档进去。</p><p>在如果我们不指定_id参数插入的文档，那么 MongoDB 将为文档分配一个唯一的ObjectId。</p><p>_id 是12个字节十六进制数在一个集合的每个文档是唯一的。 12个字节被划分如下：<br>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</p><p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.post.insert([</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;NoSQL Database&apos;, </span><br><span class="line">   description: &apos;NoSQL database doesn&apos;t have tables&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 20, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p>要从集合查询MongoDB数据，需要使用MongoDB的 find()方法。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find()</code><br>find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p><code>&gt;db.mycol.find().pretty()</code></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>除了find()方法还有findOne()方法，仅返回一个文档。</p><h3 id="RDBMS-Where子句等效于MongoDB"><a href="#RDBMS-Where子句等效于MongoDB" class="headerlink" title="RDBMS Where子句等效于MongoDB"></a>RDBMS Where子句等效于MongoDB</h3><p>查询文档在一些条件的基础上，可以使用下面的操作</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>Equality</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td>db.mycol.find({“by”:”yiibai tutorials”}).pretty()</td><td>where by = ‘yiibai tutorials’</td></tr><tr><td>Less Than</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>Less Than Equals</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>Greater Than</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>Greater Than Equals</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>Not Equals</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="AND-在-MongoDB"><a href="#AND-在-MongoDB" class="headerlink" title="AND 在 MongoDB"></a>AND 在 MongoDB</h4><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>在 find()方法，如果您传递多个键通过”,”将它们分开，那么MongoDB对待它就如AND条件一样。基本语法如下所示：<br><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有教程含“yiibai tutorials”和其标题是“MongoDB Overview”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;yiibai tutorials&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>对于上面给出的例子相当于where子句：’ where by=’yiibai tutorials’ AND title=’MongoDB Overview’ ‘。可以传递任何数目的键-值对在find子句。</p><h4 id="OR-在-MongoDB"><a href="#OR-在-MongoDB" class="headerlink" title="OR 在 MongoDB"></a>OR 在 MongoDB</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><p>要查询基于OR条件的文件，需要使用$or关键字。OR的基本语法如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有撰写含有 ‘yiibai tutorials’ 或是标题为 ‘MongoDB Overview’ 的教程</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-AND-和-OR-在一起"><a href="#使用-AND-和-OR-在一起" class="headerlink" title="使用 AND 和 OR 在一起"></a>使用 AND 和 OR 在一起</h4><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子显示有喜欢数大于100 的文档，其标题要么是 ‘MongoDB Overview’ 或 ‘yiibai tutorials’. 等效于SQL的where子句：’where likes&gt;10 AND (by = ‘yiibai tutorials’ OR title = ‘MongoDB Overview’)’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai tutorials&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>MongoDB的update()和save()方法用于更新文档到一个集合。 update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。</p><h4 id="MongoDB-Update-方法"><a href="#MongoDB-Update-方法" class="headerlink" title="MongoDB Update() 方法"></a>MongoDB Update() 方法</h4><h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><p>update()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br></pre></td></tr></table></figure><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将设置其标题“MongoDB Overview”的文件为新标题为“New MongoDB Tutorial”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Tutorial Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 ‘multi’ 设置为 true。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="MongoDB-Save-方法"><a href="#MongoDB-Save-方法" class="headerlink" title="MongoDB Save() 方法"></a>MongoDB Save() 方法</h4><p>save() 方法取代，通过新文档到 save()方法</p><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><p>mongodb 的 save()方法如下所示的基本语法：<br><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><p>下面的例子将替换该文件_id ‘5983548781331adf45ec7’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.save(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>MongoDB 的 remove()方法用于从集合中删除文档。remove()方法接受两个参数。一个是标准缺失，第二是justOne标志<br>deletion criteria : 根据文件（可选）删除条件将被删除。<br>justOne : （可选）如果设置为true或1，然后取出只有一个文档。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>remove()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p><h6 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h6><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将删除所有的文件，其标题为 ‘MongoDB Overview’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Toturials Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="只删除一个"><a href="#只删除一个" class="headerlink" title="只删除一个"></a>只删除一个</h5><p>如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。<br><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p><h5 id="删除所有文件"><a href="#删除所有文件" class="headerlink" title="删除所有文件"></a>删除所有文件</h5><p>如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove()</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="MongoDB投影"><a href="#MongoDB投影" class="headerlink" title="MongoDB投影"></a>MongoDB投影</h4><p>mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。</p><p>MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。</p><p>语法</p><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find({},{KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示文档的标题，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意在执行find()方法时_id字段始终显示，如果不想要显示这个字段，那么需要将其设置为0</p><h5 id="限制文档"><a href="#限制文档" class="headerlink" title="限制文档"></a>限制文档</h5><p>MongoDB Limit() 方法</p><p>要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p>limit()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER)</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将只显示2个文档，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>如果不指定 limit()方法的参数数量，然后它会显示集合中的所有文档。</p><p>MongoDB Skip() 方法</p><p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。</p><p>语法</p><p>skip() 方法的基础语法如下所示：<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p><p>例子：</p><p>下面的例子将仅显示第二个文档。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，skip() 方法的默认值是 0</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p>要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。</p><p>语法</p><p>sort()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().sort({KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有如下数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示的文件排序按标题降序排序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;title&quot;:-1&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果不指定排序类型，那么 sort() 方法将以升序排列文档。</p><h4 id="MongoDB索引"><a href="#MongoDB索引" class="headerlink" title="MongoDB索引"></a>MongoDB索引</h4><p>索引支持查询高效率执行。如果没有索引，MongoDB必须扫描集合中的每一个文档，然后选择那些符合查询语句的文档。若需要 mongod 来处理大量数据，扫描是非常低效的。</p><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。</p><p>要创建索引，需要使用MongoDB的ensureIndex()方法。</p><p>语法</p><p>ensureIndex()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code></p><p>这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.</p><p>例子</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">在 ensureIndex()方法，可以通过多个字段，来创建多个字段索引。</span><br><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法还接受选项列表（这是可选），其列表如下：<br><img src="/post-images/1561132706992.png" alt></p><h4 id="MongoDB-聚合"><a href="#MongoDB-聚合" class="headerlink" title="MongoDB 聚合"></a>MongoDB 聚合</h4><p>聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。 在SQL中的count(*)，使用group by 与mongodb的聚合是等效的。 对于MongoDB的聚合，使用的是aggregate()方法。</p><p>语法</p><p>aggregate()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p><p>例子：</p><p>在集合中有以下数据：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai &apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;, </span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;, </span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;https://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在从上面的集合，如果想知道每一个用户编写的教程是多少，那么使用aggregate()方法，如下图所示的列表：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Yiibai Yiibai&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>用于上述用途将等效于sql查询： select by_user, count(*) from mycol group by by_user</code></pre><p>另外，在上述例子中，我们已经使用字段by_user进行分组并计算总和，也就是by_user 出现各个次数。一个列表中可用的聚集表达式。<br>    <img src="/post-images/1561132965786.png" alt></p><h4 id="MongoDB-复制"><a href="#MongoDB-复制" class="headerlink" title="MongoDB 复制"></a>MongoDB 复制</h4><p>复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。</p><h6 id="为什么要复制？"><a href="#为什么要复制？" class="headerlink" title="为什么要复制？"></a>为什么要复制？</h6><blockquote><pre><code>为了让数据安全数据的高（24*7）可用性灾难恢复无停机维护（如备份，索引重建，压缩）读取缩放（额外的副本来读取）副本集是透明的应用</code></pre></blockquote><h5 id="MongoDB复制的工作原理"><a href="#MongoDB复制的工作原理" class="headerlink" title="MongoDB复制的工作原理"></a>MongoDB复制的工作原理</h5><p>MongoDB通过使用副本集的复制来实现。副本集是一组承载同一个数据集的mongod实例。在副本的一个节点是接收所有的写操作主节点。所有的实例，次级，应用操作从主以便它们具有相同的数据集。副本集只能有一个主节点。</p><blockquote><pre><code>副本集是一组两个或更多个节点（通常至少3节点是必需的）。在副本集一个节点是主节点和其余的节点都是次要的。所有的数据复制是从主到次节点。在自动故障转移或维护时，选建立了主要和一个新的主节点被选择。故障节点的恢复后，再次加入副本集，并可以作为一个辅助节点。</code></pre></blockquote><p>mongodb复制的典型图如下图，其中客户端应用程序总是与主节点和主节点交互，然后将数据复制到辅助节点。<br><img src="/post-images/1561133216694.png" alt><br>副本集特征</p><ul><li>N个节点的集群</li><li>任何节点可为原发/主节点</li><li>所有的写操作进入到主节点</li><li>自动故障转移</li><li>自动恢复</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.policx.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MySQL 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymysql/"/>
    <id>https://www.policx.com/2018/05/02/pymysql/</id>
    <published>2018-05-02T03:14:27.000Z</published>
    <updated>2019-07-13T08:15:01.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是-PyMySQL？"><a href="#什么是-PyMySQL？" class="headerlink" title="什么是 PyMySQL？"></a>什么是 PyMySQL？</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><a id="more"></a> <h2 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h2><p>在文件中引入模块</p><p><code>import pymysql</code></p><h3 id="1-Connection对象"><a href="#1-Connection对象" class="headerlink" title="1.Connection对象"></a>1.Connection对象</h3><p>•  用于建立与数据库的连接<br>•  创建对象：调用connect()方法<br>conn=connect(参数列表)<br>•  参数host：连接的mysql主机，如果本机是’localhost’<br>•  参数port：连接的mysql主机的端口，默认是3306<br>•  参数db：数据库的名称<br>•  参数user：连接的用户名<br>•  参数password：连接的密码<br>•  参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</p><h3 id="2-对象的方法"><a href="#2-对象的方法" class="headerlink" title="2.对象的方法"></a>2.对象的方法</h3><p>•  close()关闭连接<br>•  commit()事务，所以需要提交才会生效<br>•  rollback()事务，放弃之前的操作<br>•  cursor()返回Cursor对象，用于执行sql语句并获得结果</p><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><p>•  执行sql语句<br>•  创建对象：调用Connection对象的cursor()方法<br>cursor1=conn.cursor()</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>•  close()关闭<br>•  execute(operation [, parameters ])执行语句，返回受影响的行数<br>•  fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组<br>•  next()执行查询语句时，获取当前行的下一行<br>•  fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回<br>•  scroll(value[,mode])将行指针移动到某个位置<br>•  mode表示移动的方式<br>•  mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动。相对的<br>•  mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0，绝对的。</p><h4 id="举个例子便于理解"><a href="#举个例子便于理解" class="headerlink" title="举个例子便于理解"></a>举个例子便于理解</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 导入python操作mysql的模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> pymysql</span><br><span class="line"><span class="hljs-comment"># 获取连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="hljs-string">'127.0.0.1'</span>, user=<span class="hljs-string">'root'</span>, password=<span class="hljs-string">'123456'</span>, database=<span class="hljs-string">'python01'</span>, port=<span class="hljs-number">3306</span>, charset=<span class="hljs-string">'utf8'</span>)</span><br><span class="line"><span class="hljs-comment"># 获取执行工具</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="hljs-comment"># sql语句,增删改</span></span><br><span class="line"><span class="hljs-comment">#sql = 'select birthday from t_user'</span></span><br><span class="line">sql = <span class="hljs-string">'select id,name,pwd,birthday from t_user'</span></span><br><span class="line"><span class="hljs-comment"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span></span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(<span class="hljs-string">'查询的结果有%s条数据'</span>%count)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取第一行</span></span><br><span class="line">dateOne = cur.fetchone()</span><br><span class="line">print(dateOne)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向上移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向下移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'absolute'</span>)   绝对的，这里指的是第一行</span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'relative'</span>)   相对的</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取所有行的数据</span></span><br><span class="line">dataAll = cur.fetchall()</span><br><span class="line">print(dataAll)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">     print(temp)</span><br><span class="line">     print(dataAll[<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])      <span class="hljs-comment">#dataAll[-1]得到的是一个用户所有的信息，dataAll[-1][2]获取最后一个人的密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> cur:</span><br><span class="line">     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-string">'id:%s,name:%s,pwd:%s,birthday:%s'</span></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">    print(s%(temp[<span class="hljs-number">0</span>],temp[<span class="hljs-number">1</span>],temp[<span class="hljs-number">2</span>],temp[<span class="hljs-number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-对象的属性"><a href="#3-对象的属性" class="headerlink" title="3.对象的属性"></a>3.对象的属性</h3><p>•  rowcount只读属性，表示最近一次execute()执行后受影响的行数<br>•  connection获得当前连接对象</p><h3 id="2-增删改查-CRUD"><a href="#2-增删改查-CRUD" class="headerlink" title="2.增删改查(CRUD)"></a>2.增删改查(CRUD)</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>•  创建testInsert.py文件，向学生表中插入一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;insert into students(sname) values(&apos;张良&apos;)&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p>•  创建testUpdate.py文件，修改学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;update students set sname=&apos;刘邦&apos; where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>•  创建testDelete.py文件，删除学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8 import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;delete from students where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>•  创建testSelectOne.py文件，查询一条学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Pymysql try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>•  创建testSelectMany.py文件，查询全部学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf8 import Pymysql</span><br><span class="line">try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="实例一：参数"><a href="#实例一：参数" class="headerlink" title="实例一：参数"></a>实例一：参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改，sql注入</span><br><span class="line">sql = &apos;insert into t_user(name,pwd,birthday) values(%s,%s,%s)&apos;</span><br><span class="line"># 参数列表</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = input(&apos;输入生日:&apos;)     # 2017年10月01日--&gt;日期struct_time(---&gt;2017-10-01)</span><br><span class="line">birthday = time.strptime(birthday,&apos;%Y年%m月%d日&apos;)      #这里我们就用到了时间与字符串的相互转换(详情见MySQL高级)</span><br><span class="line"></span><br><span class="line">params = [name,pwd,birthday]</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql,params)</span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">print(&apos;受影响的行数:%s&apos;%count)</span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例二：抛出异常"><a href="#实例二：抛出异常" class="headerlink" title="实例二：抛出异常"></a>实例二：抛出异常</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    conn = None</span><br><span class="line">    cur = None</span><br><span class="line">    # 获取连接对象</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">                           user=&apos;root&apos;,</span><br><span class="line">                           password=&apos;123456&apos;,</span><br><span class="line">                           database=&apos;python01&apos;,</span><br><span class="line">                           port=3306,</span><br><span class="line">                           charset=&apos;utf8&apos;)</span><br><span class="line">    # 模拟异常</span><br><span class="line">    # a = 1 / 0</span><br><span class="line">    # 获取执行工具</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    # sql语句,增删改</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd,birthday) values(&quot;小伊&quot;,&quot;123456&quot;,str_to_date(&quot;2017年10月20日&quot;,&quot;%Y年%m月%d日&quot;))&apos;</span><br><span class="line">    # 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">    count = cur.execute(sql)</span><br><span class="line">    # 提交</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(&apos;受影响的行数:%s&apos; % count)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    # 打印异常信息，测试时候使用，项目上线，去掉</span><br><span class="line">    print(str(ex))</span><br><span class="line">    # 将异常继续抛出</span><br><span class="line">    # raise</span><br><span class="line">finally:</span><br><span class="line">    if cur != None:</span><br><span class="line">        cur.close()</span><br><span class="line">    if conn != None:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例三："><a href="#实例三：" class="headerlink" title="实例三："></a>实例三：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改</span><br><span class="line">#sql = &apos;select birthday from t_user&apos;</span><br><span class="line">sql = &apos;select id,name,pwd,birthday from t_user&apos;</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(&apos;查询的结果有%s条数据&apos;%count)</span><br><span class="line"></span><br><span class="line">#获取第一行</span><br><span class="line"># dateOne = cur.fetchone()</span><br><span class="line"># print(dateOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for temp in cur:</span><br><span class="line">#     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;id:%s,name:%s,pwd:%s,birthday:%s&apos;</span><br><span class="line">for temp in dataAll:</span><br><span class="line">    print(s%(temp[0],temp[1],temp[2],temp[3]))</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h3><p>这个库的名字：mySqlHelper</p><p> python操作mysql进行增删改查的封装</p><pre><code>1、增删改，代码类似2、查询代码分析1、获取连接对象2、sql语句不同，参数不同3、获取执行对象    增删改    查询        1、fetchone        2、fetchall4、处理结果5、关闭</code></pre><h4 id="面向对象-建立类，封装属性和函数"><a href="#面向对象-建立类，封装属性和函数" class="headerlink" title="面向对象  建立类，封装属性和函数"></a>面向对象  建立类，封装属性和函数</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">class MysqlHelper:</span><br><span class="line">    &apos;&apos;&apos;python操作mysql的增删改查的封装&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, host, user, password, database, port=3306, charset=&apos;utf8&apos;):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化参数</span><br><span class="line">        :param host:        主机</span><br><span class="line">        :param user:        用户名</span><br><span class="line">        :param password:    密码</span><br><span class="line">        :param database:    数据库</span><br><span class="line">        :param port:        端口号，默认是3306</span><br><span class="line">        :param charset:     编码，默认是utf8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        获取连接对象和执行对象</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.conn = pymysql.connect(host=self.host,</span><br><span class="line">                                    user=self.user,</span><br><span class="line">                                    password=self.password,</span><br><span class="line">                                    database=self.database,</span><br><span class="line">                                    port=self.port,</span><br><span class="line">                                    charset=self.charset)</span><br><span class="line"></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    def fetchone(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数元组，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataOne = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataOne = self.cur.fetchone()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataOne</span><br><span class="line"></span><br><span class="line">    def fetchall(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数列表，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataall = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataall = self.cur.fetchall()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataall</span><br><span class="line"></span><br><span class="line">    def __item(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行增删改</span><br><span class="line">        :param sql:           sql语句</span><br><span class="line">        :param params:        sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:              受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        count = 0</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行修改</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def insert(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行新增</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def delete(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行删除</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        关闭执行工具和连接对象</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if self.cur != None:</span><br><span class="line">            self.cur.close()</span><br><span class="line">        if self.conn != None:</span><br><span class="line">            self.conn.close()</span><br></pre></td></tr></table></figure><h4 id="1-测试查询多条数据"><a href="#1-测试查询多条数据" class="headerlink" title="1.测试查询多条数据"></a>1.测试查询多条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where name = %s and id &gt; %s&apos;</span><br><span class="line"># params</span><br><span class="line">params = [&apos;小茗&apos;,1]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchall(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    for temp in data:</span><br><span class="line">        print(temp)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br><span class="line"></span><br><span class="line">helper.close()</span><br></pre></td></tr></table></figure><h4 id="2-测试查询一条数据"><a href="#2-测试查询一条数据" class="headerlink" title="2.测试查询一条数据"></a>2.测试查询一条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where id = %s&apos;</span><br><span class="line">#sql = &apos;select * from t_user where id = 1&apos;</span><br><span class="line"># params</span><br><span class="line">params = [2]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchone(sql, params)</span><br><span class="line">#data = helper.fetchone(sql)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    print(data)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br></pre></td></tr></table></figure><h4 id="3-测试增删改"><a href="#3-测试增删改" class="headerlink" title="3.测试增删改"></a>3.测试增删改</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;update t_user set name =%s,pwd=%s,birthday=%s where id=%s&apos;</span><br><span class="line"># params</span><br><span class="line">id = input(&apos;输入编号:&apos;)</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = time.strptime(input(&apos;输入生日:&apos;), &apos;%Y年%m月%d日&apos;)</span><br><span class="line">params = [name, pwd, birthday,id]</span><br><span class="line"># 执行</span><br><span class="line">count = helper.update(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if count:</span><br><span class="line">    print(&apos;操作成功.&apos;)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;操作失败.&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-登录和注册"><a href="#4-登录和注册" class="headerlink" title="4.登录和注册"></a>4.登录和注册</h4><p>登录和注册的时候需要对密码进行加密</p><p>注意：</p><p>•  需要对密码进行加密<br>•  如果使用md5加密，则密码包含32个字符<br>•  如果使用sha1加密，则密码包含40个字符，这里使用这种方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table userinfos(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    uname varchar(20),</span><br><span class="line">    upwd char(40),</span><br><span class="line">    isdelete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">ret = doPwd(&apos;123&apos;)</span><br><span class="line">print(ret)</span><br><span class="line">结果：40bd001563085fc35165329ea1ff5c5ecbdbbeef</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">-- 插入如下数据，用户名为123,密码为123,这是sha1加密后的值</span><br><span class="line"></span><br><span class="line">insert into userinfos </span><br><span class="line">values(1,&apos;123&apos;,&apos;40bd001563085fc35165329ea1ff5c5ecbdbbeef&apos;,0);</span><br></pre></td></tr></table></figure><h4 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from mysqlHelper import MysqlHelper</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    &apos;&apos;&apos;登录&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    #加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;select * from t_user where name=%s and pwd=%s&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    data = helper.fetchone(sql, params)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;登录成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;登录失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doPwd(pwd):</span><br><span class="line">    &apos;&apos;&apos;sha1编码&apos;&apos;&apos;</span><br><span class="line">    mysha1 = hashlib.sha1()</span><br><span class="line">    mysha1.update(pwd.encode(&apos;utf-8&apos;))</span><br><span class="line">    pwd = mysha1.hexdigest()</span><br><span class="line">    return pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    &apos;&apos;&apos;注册&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    # 加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd) values(%s,%s)&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    count = helper.insert(sql, params)</span><br><span class="line">    if count:</span><br><span class="line">        print(&apos;操作成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;操作失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #register()</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PyMySQL？&quot;&gt;&lt;a href=&quot;#什么是-PyMySQL？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PyMySQL？&quot;&gt;&lt;/a&gt;什么是 PyMySQL？&lt;/h2&gt;&lt;p&gt;PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。&lt;/p&gt;
&lt;p&gt;PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django笔记</title>
    <link href="https://www.policx.com/2018/04/18/django-bi-ji/"/>
    <id>https://www.policx.com/2018/04/18/django-bi-ji/</id>
    <published>2018-04-17T17:00:16.000Z</published>
    <updated>2019-07-12T10:07:09.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p><a id="more"></a><h2 id="一-版本选择"><a href="#一-版本选择" class="headerlink" title="一. 版本选择"></a>一. 版本选择</h2><p>Django 2.0.x 支持 Python 3.4, 3.5 和 3.6 （注意，不再支持 Python 2）   </p><h2 id="二-安装-Django"><a href="#二-安装-Django" class="headerlink" title="二. 安装 Django"></a><strong>二. 安装 Django</strong></h2><p><strong>2.1. 用 pip 来安装</strong></p><p><strong>2.1.1 需要先安装pip</strong></p><p>(1). Linux, Mac OSX, Windows 下都可用 get-pip.py 来安装<br>pip：<a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/installing.html</a>  </p><p>或者直接下载：<a href="https://bootstrap.pypa.io/get-pip.py" title="get-pip.py" target="_blank" rel="noopener">get-pip.py</a> 然后运行在终端运行 <strong>python get-pip.py 就可以安装 pip。</strong></p><p>Note: 也可以下载 pip 源码包，运行 <strong>python setup.py install</strong> 进行安装 </p><p><strong>2.1.2 利用 pip 安装 Django</strong></p><p><code>（sudo) pip install Django    或者(sudo) pip install Django==1.8.16 或者 pip install Django==1.11.8</code>    </p><p>如果想升级 pip 可以用： </p><pre><code>(sudo) pip install --upgrade pip</code></pre><p><strong>2.2. 下载源码安装</strong>  </p><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">https://www.djangoproject.com/download/</a></p><p>如果是源码包, 比如 django-1.11.8.tar.gz </p><p><strong>2.2.1 Linux 或 Mac 下</strong></p><pre><code>tar -xvf django-1.11.8.tar.gzcd django-1.11.8(sudo) python setup.py install</code></pre><h2 id="三-检查是否安装成功"><a href="#三-检查是否安装成功" class="headerlink" title="三. 检查是否安装成功"></a><strong>三. 检查是否安装成功</strong></h2><p>终端上输入 python ,点击 Enter，进行 python 环境</p><pre><code>&gt;&gt;&gt; import django&gt;&gt;&gt; django.VERSION(1, 11, 8, &apos;final&apos;, 0)&gt;&gt;&gt; &gt;&gt;&gt; django.get_version()&apos;1.11.8&apos;</code></pre><p>如果运行后看到版本号，就证明安装成功了！ </p><h2 id="四-搭建多个互不干扰的开发环境（可选）"><a href="#四-搭建多个互不干扰的开发环境（可选）" class="headerlink" title="四. 搭建多个互不干扰的开发环境（可选）"></a><strong>四. 搭建多个互不干扰的开发环境（可选）</strong></h2><p>我们有的时候会发现，一个电脑上有多个项目，一个依赖 Django 1.8，另一个比较旧的项目又要用 Django 1.5，这时候怎么办呢？ </p><p>我们需要一个依赖包管理的工具来处理不同的环境。 </p><h3 id="4-1-虚拟环境依赖安装"><a href="#4-1-虚拟环境依赖安装" class="headerlink" title="4.1 虚拟环境依赖安装"></a>4.1 虚拟环境依赖安装</h3><p>开发会用 virtualenv 来管理多个开发环境 </p><p><strong>Linux/MacOS 下</strong></p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了 </p><pre><code># 安装:(sudo) pip install virtualenv virtualenvwrapper</code></pre><p>修改~/.bash_profile或其它环境变量相关文件(如 .bashrc 或用 ZSH 之后的 .zshrc)，添加以下语句  </p><pre><code>export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/workspacesource /usr/local/bin/virtualenvwrapper.sh</code></pre><p>修改后使之立即生效(也可以重启终端使之生效)： </p><pre><code>source ~/.bash_profile</code></pre><h3 id="4-2-虚拟环境使用方法："><a href="#4-2-虚拟环境使用方法：" class="headerlink" title="4.2 虚拟环境使用方法："></a><strong>4.2 虚拟环境使用方法：</strong></h3><p><strong>mkvirtualenv zqxt：创建运行环境zqxt</strong></p><p><strong>workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境</strong></p><p><strong>deactivate</strong>: 退出终端环境</p><p><strong>其它的：</strong></p><p><strong>rmvirtualenv</strong> ENV：删除运行环境ENV </p><p><strong>mkproject</strong> mic：创建mic项目和运行环境mic </p><p><strong>mktmpenv</strong>：创建临时运行环境 </p><p><strong>lsvirtualenv</strong>: 列出可用的运行环境 </p><p><strong>lssitepackages</strong>: 列出当前环境安装了的包 </p><p>创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django部署——uwsgi+Nginx</title>
    <link href="https://www.policx.com/2018/04/17/django/"/>
    <id>https://www.policx.com/2018/04/17/django/</id>
    <published>2018-04-17T09:42:04.000Z</published>
    <updated>2019-07-13T08:10:51.809Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!</p><a id="more"></a><p><img src="/post-images/1560768371650.png" alt><br>环境：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3.6</span><br><span class="line">centos 7</span><br><span class="line">Django1.11</span><br></pre></td></tr></table></figure><h2 id="1、本地跑起来Django"><a href="#1、本地跑起来Django" class="headerlink" title="1、本地跑起来Django"></a>1、本地跑起来Django</h2><p>这里不讲Django项目实施过程，假设你已经写了一个Django项目，并且在本地127.0.0.1:8000能够跑起来。喏，给你个参考，项目大概长这样：<br><img src="/post-images/1560764670814.png" alt></p><ul><li>kindle目录为我创建的Django App</li></ul><h2 id="2、修改项目配置"><a href="#2、修改项目配置" class="headerlink" title="2、修改项目配置"></a>2、修改项目配置</h2><p>也就是项目目录下的settings.py文件，主要强调几个地方：</p><p>①关闭DEBUG模式：<br><img src="/post-images/1560764736238.png" alt><br>②修改ALLOWED_HOSTS：<br><img src="/post-images/1560764863424.png" alt><br>③配置静态文件存放路径：<br><img src="/post-images/1560764833026.png" alt></p><p>修改好配置之后执行:<br><code>python manage.py collectstatic</code><br>将项目用到的静态文件复制到项目根目录下的static文件中<br><img src="/post-images/1560764930146.png" alt></p><h2 id="3、安装uwsgi和Nginx"><a href="#3、安装uwsgi和Nginx" class="headerlink" title="3、安装uwsgi和Nginx"></a>3、安装uwsgi和Nginx</h2><p>这个没什么说的。。。在自己的云服务器上装好这两个工具<br>安装好uwsgi后最好验证一下，验证方法：<br>创建一个test.py文件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)])</span><br><span class="line">    return [b&apos;Hello world!&apos;]    #python3</span><br><span class="line">    # return [&apos;Hello world!&apos;]    #python2</span><br></pre></td></tr></table></figure><p>启动uwsgi服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --wsgi-file test.py</span><br></pre></td></tr></table></figure><p>如果可以正常启动而不报错那就应该没问题，不放心的话再在终端验证一下：<br><code>wget https://127.0.0.1:8000</code><br>看一下能否正确获取内容</p><h2 id="4、配置项目的uwsgi"><a href="#4、配置项目的uwsgi" class="headerlink" title="4、配置项目的uwsgi"></a>4、配置项目的uwsgi</h2><p>在项目所在文件夹下创建uwsgi.ini配置文件，也就是这里:<br><img src="/post-images/1560765049955.png" alt><br>在uwsgi.ini里进行如下配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># Django-related settings</span><br><span class="line"> </span><br><span class="line"># 这里的端口可以根据自己需要设定</span><br><span class="line">socket = 127.0.0.1:8001        </span><br><span class="line"> </span><br><span class="line"># the base directory (full path)</span><br><span class="line"># 这个是Django项目的根目录，也就是包含App的那个目录，仔细对照上图</span><br><span class="line">chdir           = /home/python/book2kindle</span><br><span class="line"> </span><br><span class="line"># Django s wsgi file</span><br><span class="line"># 这里是项目名(不是App名).wsgi</span><br><span class="line">module          = book2kindle.wsgi</span><br><span class="line"> </span><br><span class="line"># process-related settings</span><br><span class="line"># master</span><br><span class="line">master          = true</span><br><span class="line"> </span><br><span class="line"># maximum number of worker processes</span><br><span class="line">processes       = 32</span><br><span class="line"> </span><br><span class="line"># ... with appropriate permissions - may be needed</span><br><span class="line"># chmod-socket    = 664</span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum          = true</span><br><span class="line"> </span><br><span class="line">plugin python = true</span><br><span class="line"> </span><br><span class="line"># 这个是项目的虚拟python环境，如果没用虚拟环境，可以不设定</span><br><span class="line">home = /home/python/book2kindle_env</span><br></pre></td></tr></table></figure><h2 id="5、配置项目的nginx"><a href="#5、配置项目的nginx" class="headerlink" title="5、配置项目的nginx"></a>5、配置项目的nginx</h2><p>找到nginx的配置文件夹，centos7的nginx配置文件在/etc/nginx下，该路径下有一个nginx.conf总配置文件，还有两个文件夹./conf.d、./default.d，我们将nginx.conf复制一份到conf.d文件夹下，命名为nginx.conf（或者项目名.conf）进行如下修改（根据中文注释进行相应配置即可）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream django &#123;</span><br><span class="line">        # 注意这里的server要和uwsgi.ini配置文件中的socket保持一致</span><br><span class="line">        server 127.0.0.1:8002; # for a web port socket</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  xxx.com;  # 这里填自己的域名或者服务器的ip（决定你今后访问网站的方式）</span><br><span class="line">        charset      utf-8;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        location / &#123;</span><br><span class="line">        root        /home/python/book2kindle/kindle;  # 这是Django App的路径</span><br><span class="line">            uwsgi_pass  django;</span><br><span class="line">            include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">        &#125;</span><br><span class="line">        location /static &#123;</span><br><span class="line">            # Django项目静态文件的路径</span><br><span class="line">            alias /home/python/book2kindle/static; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、启动uwsgi和nginx"><a href="#6、启动uwsgi和nginx" class="headerlink" title="6、启动uwsgi和nginx"></a>6、启动uwsgi和nginx</h2><p>进入uwsgi.ini文件夹下执行：<br><code>uwsgi --ini uwsgi.ini</code><br>在终端执行：<br><code>service nginx restart</code><br>然后就可以根据域名（前提是要将域名解析到服务器ip地址）或者服务器ip来访问网站了！</p><p>OK，完事！就是这么简单！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>2018创业记：如何选择合伙人？</title>
    <link href="https://www.policx.com/2018/03/25/chuangye/"/>
    <id>https://www.policx.com/2018/03/25/chuangye/</id>
    <published>2018-03-25T13:02:42.000Z</published>
    <updated>2019-07-13T08:06:31.136Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><a id="more"></a><h2 id="创业路上危机四伏，如何破局？"><a href="#创业路上危机四伏，如何破局？" class="headerlink" title="创业路上危机四伏，如何破局？"></a>创业路上危机四伏，如何破局？</h2></li></ul><p>很多朋友在2018年做出了改变，迈出了新的一步。比如身边几位朋友正摩拳擦掌准备创业。然而，看别人创业和自己创业完全是两回事儿，见得再多，自己趟水时也难免有所顾虑。</p><p>在跟他们聊过之后，我们发现了他们普遍面临的一个课题：如何选择合伙人?这是身经百战的连续创业者也很难驾轻就熟的一个课题，今天我们就来一起聊聊。本文将从能不能和朋友一起创业、合伙人应该与我互补还是相似、如何判断双方是否志同道合、如何应对常见的分歧几个部分展开来说。</p><p>风物长宜放眼量，抱持开阔的胸襟、敏锐的判断、坚韧的意志，相信大家能够与志同道合的伙伴一起，越过山丘，携手站上梦想之巅。</p><h2 id="能不能和朋友一起创业？"><a href="#能不能和朋友一起创业？" class="headerlink" title="能不能和朋友一起创业？"></a>能不能和朋友一起创业？</h2><p>在创业初期，创业者选择合伙人往往会从身边的朋友“下手”。</p><p>一起创业可以说是认清一个朋友的最好方式。一篇名为《友谊的代价》的论文，考察了3510个风险投资者，以及他们在1975-2003年间11895个投资项目。</p><p>论文写道，有的人选择与自己能力相当的人合作，比如同是名校毕业；但更多的人选择与自己的熟人合作，比如曾经的同学或同事。结果表明，按能力搭档可以增加投资的成功概率，而找熟人搭档，则会明显降低成功的可能性。</p><p>所有人都喜欢强联系，但关系是关系，工作归工作。现在社会学已经有了足够多的证据说明：对工作来说，同乡会和校友录并不是扩展人脉的好地方。《中国合伙人》这部电影上映后，“千万别跟好朋友合伙开公司”也成了热议话题。电影的最后，三位合伙人分道扬镳，而剧本的原型——新东方的三位创始人也以“分家”收场。</p><p>当然，朋友合伙创业成功的案例也不在少数，况且，长期的伙伴关系更有助于共同面对创业过程中的艰难险阻，团队也更容易在创业初期获得投资人的青睐。如果在寻找合伙人的过程中，你觉得还是某个朋友更适合，那么一定要在合作之前约法三章，考虑到最坏的情况，提前用书面合同的方式确定双方的责权利，用规章制度来约束指导双方的行为，而不是靠人情关系。</p><p>中间一旦觉得发生了问题，你就必须考虑一下能否继续合作下去。其实，很多合作者走不到最后就是因为中间的小问题没有解决，一点一点积累最后爆发出来。</p><p>因此，能否和朋友一起创业这个问题，需要辩证思考。如果朋友间相互了解对方的个性和能力，工作中能做到分工明确，用规章制度来规范双方的行为，及时解决小矛盾，相互照顾，一起分担，共同奋斗，那么创业成功就会成为大概率事件。</p><h2 id="合伙人应该与我互补还是相似？"><a href="#合伙人应该与我互补还是相似？" class="headerlink" title="合伙人应该与我互补还是相似？"></a>合伙人应该与我互补还是相似？</h2><p>一个较为合理的答案是：理念和价值观上要相似，能力和经验上要互补。</p><p>理念和价值观上的相近，可以保证你们在重大原则问题上的判断是比较一致的，不至于出现根本性的冲突。这些重大的原则问题包括企业的战略方向、利益分配机制、做事的基本底线等等。</p><p>在这些问题上出现不同意见，通常很难取得共识。因为个性和价值观的形成，通常都不是一朝一夕的事情，也就是我们常说的“江山易改，本性难移”。如果在创业的艰难环境下，双方还要来磨合这个层面的东西，就会非常痛苦。</p><p>能力和经验上的互补相对更好理解。你擅长产品，他专于研发；你有丰富的运营经验，他则对于商业模式的建立更有心得；你对数字不敏感，他则是投资和财务领域的资深人士。这些都是很好的互补。</p><p>互补可以让你们在具体事情的推进中事半功倍，并建立起对于对方在专业领域的依靠和信任。人不可能是全能的，如果一切未知的领域都需要你自己来摸索，费时费力不说，风险还很大。</p><p>对于相似还是互补这个问题的解读，还可以反向进行。比如你们是能力经验上的相近，而在理念上互补，你可以想象一下是个什么局面，一定是你不会的他也不会，你觉得对的他觉得不对，那就真的很难合作下去了。</p><h2 id="如何判断双方是否志同道合？"><a href="#如何判断双方是否志同道合？" class="headerlink" title="如何判断双方是否志同道合？"></a>如何判断双方是否志同道合？</h2><p>对于这个问题，不同的人可能会给出非常不同的答案。雷军就曾说过，他找人有两个要素：“一要最专业，小米的合伙人都是各管一块，这样能保证整个决策非常快，把业务交给他，要能实打实做出成绩来；二要最合适，主要是指要有创业心态，对所做的事要极度喜欢，有共同的愿景，这样就会有很强的驱动力。”</p><p>雷军说，他在三个月的时间里见了超过100位做硬件的人选，终于找到了负责硬件的联合创始人周光平博士，两人第一次见面就谈了12个小时。</p><p>而周鸿祎表示，他会选择具备这四种素质的合伙人：首先应该有创业精神；其次要有很强的学习能力；第三，要有很好的开放合作心态；此外，还要能自我激励，自我驱动，同样一件事，用打工的心态和用创业的心态做，效果完全不一样。</p><p>虽然答案因人而异，但仍然可以总结出一些判断标准，以下几条可为你选择合伙人时提供参考。</p><h3 id="1、关系有一定的深度和广度，彼此信任"><a href="#1、关系有一定的深度和广度，彼此信任" class="headerlink" title="1、关系有一定的深度和广度，彼此信任"></a>1、关系有一定的深度和广度，彼此信任</h3><p>共事且维持朋友关系多年的创业团队关系更深，有可能经受住紧张和冲突的考验。合伙人未必需要成为最要好的朋友，但如果他们相互喜欢的话事情可能会更好办些。更重要的是，创始人之间应该尊重彼此以及他们给团队带来的不同能力。不信任合伙人的能力会导致手伸过头，还可能会导致控制权之争。在这种窝里斗的情况下大部分的合作关系都无法维系。</p><h3 id="2、了解彼此的优势和劣势，分工明确"><a href="#2、了解彼此的优势和劣势，分工明确" class="headerlink" title="2、了解彼此的优势和劣势，分工明确"></a>2、了解彼此的优势和劣势，分工明确</h3><p>尊重彼此的技能和优势并不意味着创始人就不需要审视合伙人的弱点了。友谊更久自然也会更了解某人的特长和技能。这些不同的技能有助于创始人团队自然地分清责任、角色，在某些情况下还可以分清头衔。根据每一位合伙人的技能明确划分职责，对创业的帮助很大。做事的时候每个人要有独立的角色，但同时永远要对其他合伙人的反馈持开放态度。</p><h3 id="3、确保所有合伙人对成功和失败的定义一致"><a href="#3、确保所有合伙人对成功和失败的定义一致" class="headerlink" title="3、确保所有合伙人对成功和失败的定义一致"></a>3、确保所有合伙人对成功和失败的定义一致</h3><p>韧性最强的创始人不会从财务的角度去衡量自己的初创企业是否成功，相反，他们会从使命的角度去衡量。他们的初创企业只是追求实现使命的手段。但是，并不是所有的创始人都这么看，甚至一开始关注使命的创始人有时候到后面也会转向考虑财务方面的事情。</p><p>有的创始人可能志存高远，为了尽快做大愿意烧很多钱，而有的人希望逐步打磨产品，限制人数规模和保留现金尺度。不仅对成功的认知会影响运营决策，对失败的认知同样会起作用。</p><p>在创业过程中，其中一位合伙人急着退出的故事屡见不鲜，因此这个教训值得一提再提。对于拥有成功企业的创始人来说，避免在这个问题上发生冲突的关键是定期讨论这件事。应该在公司早期就设定好目标，并且对这个话题进行定期复议。</p><h3 id="4、所有合伙人均应对股权分配满意"><a href="#4、所有合伙人均应对股权分配满意" class="headerlink" title="4、所有合伙人均应对股权分配满意"></a>4、所有合伙人均应对股权分配满意</h3><p>哈佛教授Wasserman发现，73%的联合创业团队一般在公司成立30天内就确定了如何进行股权分配。股权分配当然是任何共同创业的人都要首先考虑的事情之一，但事实上在那个时候，没人知道谁干活最卖力，谁对初创企业的贡献最有价值。过早确定股权分配会导致后面发生问题。如果可以的话，最好等到你有机会了解大家一起工作会是什么个情况后再正式分蛋糕。话虽如此，这件事情还是不要拖太久，围绕股权的分歧最好在公司早期就解决掉。</p><h3 id="5、永远要相互支持"><a href="#5、永远要相互支持" class="headerlink" title="5、永远要相互支持"></a>5、永远要相互支持</h3><p>这话听上去似乎太空泛，但是合伙人的关系也可能会反复无常，尤其是在受到不同观点、董事会成员等的影响下。合伙人之间的相互支持可带来信心，确保合伙人和员工都有共同的使命感。</p><p>团队应该早点理解一件事，任何情况下合伙人之间都应该背靠背相互支持，所以合伙人要尽量避免当着员工、董事会等人的面互相拆台，这样能够让公司其他人感觉到他们友情之牢固，让每一位合伙人都能保持镇定，因为他们知道对方一定会支持自己的。</p><h2 id="如何应对常见的分歧？"><a href="#如何应对常见的分歧？" class="headerlink" title="如何应对常见的分歧？"></a>如何应对常见的分歧？</h2><h3 id="1、公司走向的歧见"><a href="#1、公司走向的歧见" class="headerlink" title="1、公司走向的歧见"></a>1、公司走向的歧见</h3><p>在0到1的探索期，公司的走向往往是由合伙人一起决定的。但进入1到100的扩张期，一个年轻企业通常会开始有董事会以及重要的供应、通路伙伴。久而久之，合伙人对于公司未来走向的看法，常常会越来越变得分歧。</p><p>防范这个陷阱要从根源开始：每当CEO有了新的资讯、成长、学习、领悟，应该积极地与合伙人分享，协助他们获得与你类似的成长。同时，你应该把小范围的决策授权出去，让他们也能继续主导公司某一部分的走向。最后，你应该积极管理大家对决策的期望值，新创公司必须在“快”与“好”之间做出平衡，因此决策求的是多数对，而不是样样对。</p><h3 id="2、无法适应制度"><a href="#2、无法适应制度" class="headerlink" title="2、无法适应制度"></a>2、无法适应制度</h3><p>0到1的新创团队求快，因此不会有太多制度。进入1到100阶段，公司势必要开始建立一些管理系统，以在风险与发展中间取得平衡。</p><p>有些习惯了说干就干的合伙人，在此时会产生严重的不适应，时间一长甚至会觉得公司背离了创办的初衷。要解决这个问题，除了及早发现及早辅导外，请他们参与、主导制度的设计，也是协助合伙人适应新制度的方法。</p><h3 id="3、越权管理"><a href="#3、越权管理" class="headerlink" title="3、越权管理"></a>3、越权管理</h3><p>当公司开始有部门、部门主管，合伙人还是习惯看不顺眼就管，容易造成经理人的困扰。更有甚者，造成合伙人对经理人不信任，反而让经理人没有足够的时间、空间去适应、学习。这个问题通常是惯性使然，重点就是要打破它。所以，看到这样的行为要赶快提醒伙伴们注意。</p><h3 id="4、无法跟上公司成长的需要"><a href="#4、无法跟上公司成长的需要" class="headerlink" title="4、无法跟上公司成长的需要"></a>4、无法跟上公司成长的需要</h3><p>在公司快速扩张期，一个3人产品团队可能在一年内成长为30人，而两者之间管理上的不同，常常会让本来擅长技术、产品，但从来没有管理中大型团队经验的合伙人一时间跟不上公司发展的步伐。</p><p>回到扩张前，你应该早早找到好的CTO Mentor，在扩张中，经常鼓励他在管理知识与能力上精进。扩张后，如果他真的无法适应，也比较能够接受去寻找更有经验的CTO，而自己退居部门二把手、三把手。</p><h3 id="5、利益分配"><a href="#5、利益分配" class="headerlink" title="5、利益分配"></a>5、利益分配</h3><p>当公司越来越成功、越赚钱、离IPO越近，股权与利益的问题就会越容易产生。尤其当初的股权分配如果没有彰显每个合伙人的相对价值，那团队中可能酝酿出不良情绪。</p><p>比较好的方法当然是早期就把这个问题解决掉，因为到了后期，你的工具会越来越有限。但也不是没有机会修正，如果有合伙人离开，你可以收回他的股权来重新分配。如果有B、C、D轮增资，你可以跟投资人要求“期权池”(ESOP)，通过发放新的选择权来平衡。最后，如果真的过于集中，负责任的CEO，甚至会拿出自己的股权分配给伙伴们。</p><p>选择合伙人未必有一定之规，创业路上可能遇到的危机也远远不止上述这些，希望这篇文章能对你有所裨益，助你在创业路上少走弯路，也祝愿创业者们在2018年博得好彩头，大鹏一日同风起，扶摇直上九万里。</p><p>本文来源：<a href="https://www.sohu.com/a/225670991_100064845" target="_blank" rel="noopener">联想之星</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="life" scheme="https://www.policx.com/categories/life/"/>
    
    
  </entry>
  
</feed>
