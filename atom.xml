<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-07-17T11:45:03.896Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter的环境配置 for Mac</title>
    <link href="https://www.policx.com/2019/07/16/flutter/"/>
    <id>https://www.policx.com/2019/07/16/flutter/</id>
    <published>2019-07-16T10:14:18.000Z</published>
    <updated>2019-07-17T11:45:03.896Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 </p><a id="more"></a><h2 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装Flutter</h2><p>首先我们可以在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fdocs%2Fget-started%2Finstall" target="_blank" rel="noopener">Flutter官网</a>上面看到一些配置环境的步骤。这里就直接开干了，走起。 </p><h3 id="1、配置HomeBrew"><a href="#1、配置HomeBrew" class="headerlink" title="1、配置HomeBrew"></a>1、配置HomeBrew</h3><p>我们在去配置Flutter的环境之前，需要先检查一下HomeBrew是不是最新的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br></pre></td></tr></table></figure><p>如果没有brew的话，可以去<a href="https://link.juejin.im?target=https%3A%2F%2Fbrew.sh%2F" target="_blank" rel="noopener">HomeBrew官网</a>自行下载。这里就不赘述了，这里如果重新下载的话，看到下面的打印信息就说明下载完毕了。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3aad595f24923.jpg" alt></p><h3 id="2、下载SDK"><a href="#2、下载SDK" class="headerlink" title="2、下载SDK"></a>2、下载SDK</h3><p>接下来就是去官网下载SDK了。注意，这里下载SDK有两种方法：</p><ul><li>一是直接<code>git clone -b beta https://github.com/flutter/flutter.git</code>下载</li><li>二是自己在官网下载下来，如下图<br><img src="https://i.loli.net/2019/07/16/5d2db40e0aecc50465.jpg" alt></li></ul><p>这里我两种方法都试过了一遍，第一种方法实在是太慢了，在经历了耗费一个半小时下载到94%，最后提示失败了的过程之后，我决定还是用第二种方法，整个过程只用了3分钟的样子，相当满意。下载完之后，是一个名字叫<code>flutter_macos_v1.5.4-hotfix.2-stable.zip</code>的压缩包。 然后我们解压这个zip包，把解压出来的<strong>flutter</strong>文件放到根目录下即可。 </p><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p>因为Flutter的SDK中包含了很多的命令行工具。我们就需要配置环境变量，所以我直接就安装到了根目录下了。</p><p><strong>配置镜像</strong></p><p>因为Flutter在运行的时候，就需要去官网下载一些需要的资源，但是因为天国特色的wall的原因，我们就需要镜像服务器，这个在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fcommunity%2Fchina" target="_blank" rel="noopener">官网</a>上面有写的很明白，而且这是一个临时的镜像，后面还要以官网的镜像地址为准。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3f2c1f4f64480.jpg" alt></p><p>我们跳转到根目录 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>就能找到这个<code>.bash_profile</code>隐藏文件，我们用vim打开这个文件 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后需要输入就把A键按一下进入编辑模式，把下面三个环境变量配置进去 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line">export PATH=/Users/xueliheng/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>注意下，第三个环境变量这里<code>/Users/xueliheng/</code>是我的根目录，然后<code>/flutter/</code>是我们刚刚解压的的zip包里面的<code>flutter</code>文件夹。上面两个环境变量是两个镜像地址，上文中也有说过。 接着<code>shift+：</code>然后输入<code>wq</code>保存并退出vim。输入如下命令： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>最后我们就可以验证一下flutter环境有没有配置成功了。输入： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure><p>看到如下如的打印信息就是配置成功了<br><img src="https://i.loli.net/2019/07/16/5d2db44407fa682753.jpg" alt></p><h3 id="4、配置Android-Studio"><a href="#4、配置Android-Studio" class="headerlink" title="4、配置Android Studio"></a>4、配置Android Studio</h3><p>如果没有下载<strong>Android Studio</strong>的话，就去<a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.android.google.cn%2Fstudio" target="_blank" rel="noopener">官网</a>去下载一下。 我们用<code>flutter doctor</code>命令去检查一下flutter的环境配置，我们可以看到如下打印 </p><p><img src="https://i.loli.net/2019/07/16/5d2db4676ec3a36838.jpg" alt></p><p>这里的每个<code>✗</code>都是我们要去解决的问题。不过他有告诉你应该怎么做。比如第一个提示： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices</span><br><span class="line">    ✗ Unable to locate Android SDK.</span><br></pre></td></tr></table></figure><p>这就是让你去下载Android Studio。我们在下载完成之后，打开AS让他去下载一些应该下载的东西。 如果这里有提示你 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices (Android SDK version 24.0.2)</span><br><span class="line">    ✗ Flutter requires Android SDK 28 and the Android BuildTools 28.0.3</span><br></pre></td></tr></table></figure><p>这就是在提示让你去升级一下SDK，然后命令如下 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;/Users/xueliheng/Library/Android/sdk/tools/bin/sdkmanager&quot; &quot;platforms;android-28&quot; &quot;build-tools;28.0.3&quot;</span><br></pre></td></tr></table></figure><p>注意一下，这个地方的升级是需要”科学上网“的，如果有的小伙伴没有这个条件的话，我这边百度云上面给大家准备了一个<a href="https://link.juejin.im?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F10yp8PuRXxk7YvcNR_dTy8Q" target="_blank" rel="noopener">链接</a>，提取码: e48c，大家可以下载下来。下载下来之后解压到<code>/Users/Library/Android/</code>这个文件夹。把原先的SDK直接覆盖就行了，就已经是最新的SDK了。 </p><p>接下来我们配置一下安卓的环境变量，还是在根目录下找到<code>.bash_profile</code>文件，并在其中添加四个环境变量 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=~/Library/Android/sdk</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/emulator</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br></pre></td></tr></table></figure><p>分别是： </p><ul><li>安卓sdk的路径</li><li>安卓的模拟器路径</li><li>安卓tools路径</li><li>安卓平台工具</li></ul><p>接下来我们再用<code>flutter doctor</code>检查的时候，显示的信息如下图<br><img src="https://i.loli.net/2019/07/16/5d2db4964a70b73490.jpg" alt></p><p>意思就是让我们去下载iOS的相关环境，我们先暂时放放，下面还有一个关于<strong>Android Studio</strong>的没有解决完</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">✗ Dart plugin not installed; this adds Dart specific functionality.</span><br></pre></td></tr></table></figure><p>这个就是缺少Flutter插件的意思，那么我们就去AS里面去配置一下好了。打开AS的<code>Preferences</code>，点击<code>Plugins</code>，在搜索栏中输入<code>flutter</code>，找到相应的插件，然后<code>Install</code>。当跳出安装Dart插件的提示界面时，记得点击Yes进行安装。安装完毕之后<code>restart IDE</code>重启AS。 重启之后就能看到多了一个这个东西<br><img src="https://i.loli.net/2019/07/16/5d2db4b731cbd14001.jpg" alt></p><p>我们再用<code>flutter doctor</code>检测一下<br><img src="https://i.loli.net/2019/07/16/5d2db4cdc6dd137908.jpg" alt></p><p>现在终于ok了。我们看到<code>[✓]Android Studio</code>说明，安卓的环境基本上配置成功，接下来我们就配置一下安卓的模拟器就好了。 </p><h3 id="5、安卓模拟器配置"><a href="#5、安卓模拟器配置" class="headerlink" title="5、安卓模拟器配置"></a>5、安卓模拟器配置</h3><p>在AS中找到模拟器配置如下图并选择<br><img src="https://i.loli.net/2019/07/16/5d2db4dacfde455330.jpg" alt></p><p>接着就创建设备，选择设备<br><img src="https://i.loli.net/2019/07/16/5d2db4e68a2ed68879.jpg" alt></p><p>选择系统<br><img src="https://i.loli.net/2019/07/16/5d2db4f6cdc5889902.jpg" alt></p><p>最后点击下载就完成了。 </p><h3 id="6、配置iOS环境"><a href="#6、配置iOS环境" class="headerlink" title="6、配置iOS环境"></a>6、配置iOS环境</h3><p>我们配置完了安卓的环境，再来<code>flutter doctor</code>检测一下。<br><img src="https://i.loli.net/2019/07/16/5d2db50ad75eb82331.jpg" alt></p><p>情况是这样的。目前1.5.4版本的Flutter需要匹配新版本的Xcode10.2.1。按照他提示的来试试，提示我Xcode版本太低了，需要升级Xcode<br><img src="https://i.loli.net/2019/07/16/5d2db5275c8f825074.jpg" alt></p><p>更新到最新的之后，继续走下面的步骤依旧会报错。那么我们可以试试下面的这个办法： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew link pkg-config</span><br><span class="line">$ brew install --HEAD usbmuxd</span><br><span class="line">$ brew unlink usbmuxd</span><br><span class="line">$ brew link usbmuxd</span><br><span class="line">$ brew install --HEAD libimobiledevice</span><br><span class="line">$ brew install ideviceinstaller</span><br></pre></td></tr></table></figure><p>这些执行完之后执行一下<code>flutter doctor</code><br><img src="https://i.loli.net/2019/07/16/5d2db5515858b19228.jpg" alt></p><p>最后还真是没错，全部配置完成了！那么我们就把iOS的也配置完毕了。</p><h3 id="7、VSCode的使用"><a href="#7、VSCode的使用" class="headerlink" title="7、VSCode的使用"></a>7、VSCode的使用</h3><p>VSCode上面使用的话，就简单多了，这里我就简答的赘述一下。 只需要将<code>Dart</code>和<code>Flutter</code>插件都下载下来<br><img src="https://i.loli.net/2019/07/16/5d2db5643b08597602.jpg" alt></p><p>然后<code>command+shift+p</code>输入<code>flutter</code>，选择<code>Flutter：New Project</code><br><img src="https://i.loli.net/2019/07/16/5d2db576e145096766.jpg" alt></p><p>输入要创建的项目的名称和存放项目的地址。如果提示需要指明flutter的SDK的路径，那就选择根目录那个经过解压得来的flutter的文件夹就好了。 接下来是这样一个界面<br><img src="https://i.loli.net/2019/07/16/5d2db588f1b5152482.jpg" alt></p><p>接下来我们选择<code>View-&gt;Start Debugging</code>来运行项目。<br><img src="https://i.loli.net/2019/07/16/5d2db59bb3b3338193.jpg" alt></p><p>当然这个过程需要你把Xcode的模拟器打开。运行完之后就能看到这个界面，也就是你的第一个Flutter工程啦！<br><img src="https://i.loli.net/2019/07/16/5d2db5ad5eaf434960.jpg" alt></p><h3 id="8、Hot-reload的使用"><a href="#8、Hot-reload的使用" class="headerlink" title="8、Hot reload的使用"></a>8、Hot reload的使用</h3><p>我们打开<code>lib/main.dart</code>文件，然后在其中找到 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have pushed the button this many times:</span><br></pre></td></tr></table></figure><p>并把这个改为 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have clicked the button this many times:</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2db5cc5b4f279074.jpg" alt><br>那么我们就能看到界面上多了一个小闪电<br><img src="https://i.loli.net/2019/07/16/5d2db5f044c0553935.jpg" alt></p><p>我们现在如果<code>command+s</code>保存一下更改的话，就能很快的在模拟器上面看到相应的更改，不需要再重新去编译一边。这一点简直是太棒了！解决了iOS开发者一个大痛点啊！！！ </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，flutter的环境搭建工作基本上就进行完毕了，整个过程大概耗时接近2个小时，这期间包括采坑、查资料、下载、科学上网…等等很蛋疼的事情。当然网速基本上是最大的障碍，浪费了很多的时间。所以也是需要一定的耐心来完成的。 后面的文章也会持续的更新，最近有点懈怠，OpenGL系列的文章有点拖更的节奏，这个后面会补起来。Flutter我也才刚刚接手，也是慢慢的来采坑，也会以此来记录自己的学习经历，也希望能多多跟大家交流。 再次我附上自己的邮箱<code>coderspr1nghall@gmail.com</code>欢迎讨论交流。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://juejin.im/post/5d0508d56fb9a07ec373eb9e" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2dbb03b8ef977558.jpg" alt></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://www.policx.com/2019/07/15/spider/"/>
    <id>https://www.policx.com/2019/07/15/spider/</id>
    <published>2019-07-15T02:06:04.000Z</published>
    <updated>2019-07-17T11:46:21.684Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。</p><a id="more"></a><p>其实爬虫这个概念很简单，基本可以分成以下几个步骤：</p><ul><li><p>发起网络请求</p></li><li><p>获取网页</p></li><li><p>解析网页获取数据</p></li></ul><p>发起网络请求这个步骤常用的类库有标准库urllib以及Python上常用的requests库。解析网页常用的类库有的BeautifulSoup。另外requests的作者还开发了另一个很好用的库requests-html，提供了发起请求和解析网页的二合一功能，开发小型爬虫非常方便。另外还有一些专业的爬虫类库，其中比较出名的就是scrapy。本文将会简单介绍一下这些类库，之后还会专门写一篇文章介绍scrapy的用法。</p><h2 id="标准库urllib"><a href="#标准库urllib" class="headerlink" title="标准库urllib"></a><strong>标准库urllib</strong></h2><p>首先先来看标准库urllib。标准库的优点是Python自带的，不需要安装任何第三方库，缺点就是urllib属于偏底层的库，使用起来比较麻烦。下面是urllib发起请求的一个简单例子，大家看看就好。可以看到为了发起一个简单的请求，我们需要创建opener、request、ProxyHandler等好几个对象，比较麻烦。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> urllib.request <span class="hljs-keyword">as</span> request</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="hljs-string">'https'</span>: <span class="hljs-string">'https://127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="hljs-string">'http'</span>: <span class="hljs-string">'http://127.0.0.1:1080'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'--------------使用urllib--------------'</span>)</span><br><span class="line">url = <span class="hljs-string">'http://www.google.com'</span></span><br><span class="line">opener = request.build_opener(request.ProxyHandler(proxies))</span><br><span class="line">request.install_opener(opener)</span><br><span class="line">req = request.Request(url, headers=headers)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a><strong>requests</strong></h2><p>requests是Kenneth Reitz大神的著名作品之一，优点就是极度简单和好用。首先来安装requests。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>下面是一个简单的例子，和上面urllib示例代码实现的功能相同，但是代码量少多了，也更易读。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="hljs-string">'--------------使用requests--------------'</span>)</span><br><span class="line">response = requests.get(<span class="hljs-string">'https://www.google.com'</span>, headers=headers, proxies=proxies)</span><br><span class="line">response.encoding = <span class="hljs-string">'utf8'</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>requests还可以方便的发送表单数据，模拟用户登录。返回的Response对象还包含了状态码、header、raw、cookies等很多有用的信息。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="hljs-string">'name'</span>: <span class="hljs-string">'yitian'</span>,</span><br><span class="line">    <span class="hljs-string">'age'</span>: <span class="hljs-number">22</span>,</span><br><span class="line">    <span class="hljs-string">'friends'</span>: [<span class="hljs-string">'zhang3'</span>, <span class="hljs-string">'li4'</span>]</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="hljs-string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">pprint(response.__dict__)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>关于requests我就不多做介绍了，因为它有中文文档，虽然比官方落后几个小版本号，不过无伤大雅，大家可以放心参阅。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://cn.python-requests.org/zh_CN/latest/</span><br></pre></td></tr></table></figure><h2 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a><strong>beautifulsoup</strong></h2><p>利用前面介绍的requests类库，我们可以轻易地获取HTML代码，但是为了从HTML中找到所需的数据，我们还需要HTML/XML解析库，BeautifulSoup就是这么一个常用的库。首先先来安装它：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>这次就用我简书主页作为例子，爬取一下我简书的文章列表。首先先用requests获取到网页内容。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"><span class="hljs-keyword">import</span> bs4</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><p>然后就是BeautifulSoup的代码了。在使用BeautifulSoup的时候首先需要创建一个HTML树，然后从树中查找节点。BeautifulSoup主要有两种查找节点的办法，第一种是使用find和find_all方法，第二种方法是使用select方法用css选择器。拿到节点之后，用contents去获取它的子节点，如果子节点是文本，就会拿到文本值，注意这个属性返回的是列表，所以要加[0]。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html = bs4.BeautifulSoup(response.text, features=<span class="hljs-string">'lxml'</span>)</span><br><span class="line">note_list = html.find_all(<span class="hljs-string">'ul'</span>, class_=<span class="hljs-string">'note-list'</span>, limit=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.select(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.contents[<span class="hljs-number">0</span>]</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>BeautifulSoup也有中文文档，同样也是稍微落后两个小版本，影响不大。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</span><br></pre></td></tr></table></figure><h2 id="requests-html"><a href="#requests-html" class="headerlink" title="requests-html"></a><strong>requests-html</strong></h2><p>这个类库是requests的兄弟，同样也是Kenneth Reitz大神的作品。它将请求网页和解析网页结合到了一起。本来如果你用requests的话只能请求网页，为了解析网页还得使用BeautifulSoup这样的解析库。现在只需要requests-html一个库就可以办到。<br>首先先来安装。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests-html</span><br></pre></td></tr></table></figure><p>然后我们来看看用requests-html如何重写上面这个例子。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line">note_list = r.html.find(<span class="hljs-string">'ul.note-list'</span>, first=<span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.find(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html除了可以使用css选择器来搜索以外，还可以使用xpath来查找。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html还有一个很有用的特性就是浏览器渲染。有些网页是异步加载的，直接用爬虫去爬只能得到一个空页面，因为数据是靠浏览器运行JS脚本异步加载的，这时候就需要浏览器渲染了。而浏览器渲染用requests-html做非常简单，只要多调用一个render函数即可。render函数有两个参数，分别指定页面下滑次数和暂停时间。render函数第一次运行的时候，requests-html会下载一个chromium浏览器，然后用它渲染页面。<br>简书的个人文章页面也是一个异步加载的例子，默认只会显示最近几篇文章，通过浏览器渲染模拟页面下滑，我们可以得到所有文章列表。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line"><span class="hljs-comment"># render函数指示requests-html用chromium浏览器渲染页面</span></span><br><span class="line">r.html.render(scrolldown=<span class="hljs-number">50</span>, sleep=<span class="hljs-number">0.2</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>类似的，今日头条的个人页面也是异步加载的，所以也得调用render函数。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">        <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(<span class="hljs-string">'https://www.toutiao.com/c/user/6662330738/#mid=1620400303194116'</span>, headers=headers)</span><br><span class="line">r.html.render()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r.html.find(<span class="hljs-string">'div.rbox-inner a'</span>):</span><br><span class="line">    title = i.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.toutiao.com<span class="hljs-subst">&#123;i.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》 <span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>最后是requests-html的官网地址以及中文文档。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://html.python-requests.org/</span><br><span class="line">https://cncert.github.io/requests-html-doc-cn/</span><br></pre></td></tr></table></figure><h2 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a><strong>scrapy</strong></h2><p>以上介绍的几个框架都是各自有各自的作用，把它们结合起来可以达到编写爬虫的目的，但是要说专业的爬虫框架，还是得谈谈scrapy。作为一个著名的爬虫框架，scrapy将爬虫模型框架化和模块化，利用scrapy，我们可以迅速生成功能强大的爬虫。<br>不过scrapy概念众多，要仔细说还得专门开篇文章，这里就只简单演示一下。首先安装scrapy，如果是Windows系统，还需要安装pypiwin32。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy  </span><br><span class="line">pip install pypiwin32</span><br></pre></td></tr></table></figure><p>然后创建scrapy项目并添加一个新爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject myproject</span><br><span class="line">cd myproject</span><br><span class="line">scrapy genspider my jianshu.com</span><br></pre></td></tr></table></figure><p>打开配置文件settings.py，设置用户代理，否则会遇到403错误。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br></pre></td></tr></table></figure><p>然后修改一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JianshuSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="hljs-string">'jianshu'</span></span><br><span class="line">    allowed_domains = [<span class="hljs-string">'jianshu.com'</span>]</span><br><span class="line">    start_urls = [<span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">'div.content'</span>):</span><br><span class="line">            <span class="hljs-keyword">yield</span> &#123;</span><br><span class="line">                <span class="hljs-string">'title'</span>: article.css(<span class="hljs-string">'a.title::text'</span>).get(),</span><br><span class="line">                <span class="hljs-string">'link'</span>: <span class="hljs-string">'https://www.jianshu.com'</span> + article.xpath(<span class="hljs-string">'a[@class="title"]/@href'</span>).get()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>最后运行一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl my</span><br></pre></td></tr></table></figure><br><table><thead><tr><th>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1563247765&ver=1731&signature=gm2iTUKE3itOZzvlz9SUtKCYNv*PqEYt2C7ReV7kd47e2ZAWPvG5GRXZUJsiRIde34Uh5FznBslw4hHhXmHQXyV3yz0tTdgds1RMCdai6Oyy98w2-iTBRWeJlpm3cWa8&new=1" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2d4c5ba835e96705.jpg" alt="Python"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DDoS（分布式拒绝服务）攻击是无解的吗？</title>
    <link href="https://www.policx.com/2019/07/14/ddos/"/>
    <id>https://www.policx.com/2019/07/14/ddos/</id>
    <published>2019-07-14T07:26:43.000Z</published>
    <updated>2019-07-14T08:41:14.777Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>“</p><p>DDOS？ </p><p>一言难尽啊！ </p><p>”</p><a id="more"></a><p>先说结论，DDoS是近年来网络攻击中的一棵“常青树”，的确很难缠，但说它是无解的，那也有点太看得起它了。虽然DDoS在对很多大平台的攻击中出尽了风头，但在现在互联网的解决方案中，并不缺乏应对DDoS的解决方案。 </p><p>说起DDoS攻击，我脑海里能够想到的全都是中国民间俗语，什么“双拳难敌四手，好汉架不住人多”，什么“千斤拨四两”，什么“乱拳打死老师傅”等等等等。 </p><p>之前有朋友跑来问我DDoS是个什么东西，为什么这么多互联网巨头都被搞得没有脾气，我记得我当时我是这么举的例子： </p><p>我们这一代人小的时候，自助餐开始在中国内地风行，那会儿这个行业里为了打击竞争对手，对手最惯常使用的阴招是雇佣很多五大三粗的人，给他们钱去对方的店里一通猛吃，杯盘狼藉之下，用不了几天这家自助餐就能给吃黄了。 </p><p>而DDoS攻击比这种还阴损，如果你开了一家餐馆，你的对手如果想搞你，最好的办法就是找一堆地痞流氓到你的店里坐的满满一屋子，你如果上前问，他们就一直跟你扯淡找麻烦，导致真正想吃饭的顾客一看这个情形，掉头就走了。 </p><p>用不了多久，你的餐馆就会开不下去，而你的竞争对手就会趁机蚕食掉你的市场份额，而放在网络语境里，这就是DDoS攻击的最基本原理。 </p><p>而这件事之所以难缠在于，一两个无赖根本成不了气候，想要耍流氓必须要有很多个无赖集结在一起。<strong>所以和现实世界中的无赖一样，DDoS真正的杀手锏在于利用能够发动的汹涌的流量，可以瞬间冲垮被攻击网站的服务器。</strong></p><p>如果我们回溯一下历史的话，会发现黑客组织之所以会有组织有预谋的发起DDoS攻击，基本上都是基于以下几个原因： </p><ul><li><p>有些行业如果网站被恶意攻击，会造成很难估量的损失，这个时候黑客发动DDoS攻击的初衷一般是出于敲诈勒索，为了保证企业的正常运转，他们通常愿意向黑客付高额的赎金； </p></li><li><p>行业内血海一片，DDoS是恶意竞争的屠刀。这个现象从逻辑上，其实雇佣无赖去占领对手餐馆的原理是一毛一样的，而且DDOS攻击早已产业化，现在中国的DDOS黑市，出钱请黑客打1G的流量到一个网吧或网站，市场价只要不到50块钱，但对于一个创业公司或者干脆就是一个小网吧来说，这已经算是可以灭顶的无妄之灾了。 </p></li><li><p>DDoS攻击往往成为掩盖真实网络攻击的烟雾弹，在遭受DDoS攻击的企业中，部分企业还伴随数据丢失的现象，黑客利用DDoS攻击掩盖其窃取用户隐私的真实目的，这种攻击行为在社交网站、金融领域等用户隐私高价值的行业尤为高发。 </p></li></ul><p>比如说，去年年初的时候，荷兰第一大银行荷兰商业银行于2018年1月28日晚间遭到DDoS攻击；第二大银行荷兰合作银行的网银服务29日早晨遭到攻击；第三大银行荷兰银行在那一周内共遭到7次网络攻击，仅周末就有3次。 </p><p>不过这一次发生在荷兰的针对银行系统的攻击并没有造成用户隐私的泄露，原因在于这仅仅是一次来自俄罗斯一个网络间谍组织Cozy Bear对荷兰情报组织AIVD侵犯其计算机的“单纯”的报复行为。<strong>但并不是所有黑客组织发起的DDoS攻击都如此单纯。</strong></p><p>2018年年底时万豪酒店发布了一则公告，称其旗下喜达屋酒店的5亿人次的信息被泄露，共计3.27亿人，泄露信息包括姓名、邮寄地址、电话号码、电子邮件昂面地址、护照号码、出生日期、性别等等入住信息，更糟糕的是万豪无法确定，侵入酒店系统的第三方黑客，在窃取的信息中是否包含客人的银行卡号和密码。（此案例和DDOS攻击无关，建议采用其他案例，比如2011年4月20日至26日，索尼遭受DDoS攻击，目的是为了掩盖盗取索尼PS的用户数据。） </p><p>而游戏领域，则是DDoS攻击的另一个重灾区，不光是刚才前文中提到的暴雪，包括索尼、金山、网易在内的众多知名游戏公司都曾数次遭受攻击，可以说DDoS攻击是游戏企业的噩梦。 </p><p>许多刚创业的游戏公司，可能刚上线就被打死，而一些处在融资阶段的游戏公司，由于遭遇攻击而被迫停服，则很大程度上会调低投资人的预期，甚至导致融资失败。 </p><p>而这些因素，都是竞对打压或者敲诈勒索的绝对软肋。 </p><p>从以上的几个案例我们不难看出，和现实中的耍流氓和敲诈勒索相比，通过网络手段进行攻击的风险和成本更低，坏蛋的嘴脸也更穷凶极恶一点，无论是政府机构还是企业平台，无论你是巨头还是小蚂蚁，只要你身上有羊毛可以薅，你都时刻面临着被洗劫的风险 </p><p>不过刚在开头我也讲了，虽然DDoS很难缠很让人头痛，但本质上图并不是无解的。 </p><p>回到我最开始讲的那个例子。 </p><p>你是一个餐馆老板，过去三十年一直是个老老实实的厨子，突然面对五十个臭流氓到你店里耍无赖的时候，你最好的应对方法，应该是什么？ </p><p>自己组建一支人马，和这些臭流氓正面刚？这恐怕不行，因为你不是臭流氓，你没有相应的作战经验。 </p><p>报警请人民警察来帮忙处理？这恐怕也不行，人家在你店里没有打砸抢，只是“温和的”非暴力不合作，警察来了也只能当民事调解，并且人家马仔众多，明天再换一拨新面孔来，玩的你一点脾气都没有。 </p><p>这就是面对DDoS时，无论是巨头还是小蚂蚁，他们的实实在在的困境。 </p><p>但正所谓“道高一尺魔高一丈”，你在云上和我耍流氓，那我就在云上回击。 </p><p><strong>“云”的事儿，不如还交还给云来处理。</strong>我认为就目前DDoS的在攻击量级上的疯狂进击的前提下，云计算服务厂商或许是狙击它们的最有效手段。 </p><p>2018年年初，峰值1.35TB/秒的流量冲击了开发者平台 GitHub。这是第一次TB量级的DDoS攻击。GitHub 受到攻击后，服务器断断续续，无法访问。攻击发生 10 分钟后，GitHub 向CDN 服务商 Akamai 请求协助，访问 GitHub 的流量已经由后者接管并在15分钟之内完成了防御。 </p><p>Akamai的相关负责人在接受采访时说，我们是基于迄今为止最大规模 DDoS 攻击五倍的峰值而做的相应准备，所以 1.3T 对我们来说是小意思。 </p><p>在关于流量峰值这一点上，我认为饱受双11、双12、618等全民购物狂欢的电商巨头们更有发言权，就拿京东举例子好了。 </p><p>京东云在之前发布的高防版的DDoS服务中，展示出了非常明确的信心是，在多年的电商狂欢流量对抗中，京东云已经在实战中建立了一套完备的防御机制，无论是在流量峰值的建模上，还是在DDoS的防御算法上，它的部署都远远不是纸上谈兵，而是拳拳到肉的经受住了实战的洗礼。要知道，全世界每年有超过5成的DDoS攻击都来自中国，而我们的国家也是全世界超过美国的第一大“肉鸡”市场，由电商大数据加持演化而来的京东云，它在云安全的理解上可以说是非常深刻了。 </p><p>所以说，如果说一定要有一个结论，我想说“上帝的归上帝，而云上的归云上”，像京东云这样的基于电商大数据考验的云计算平台，或许才是对抗DDoS的最终答案。 </p><p>From: <a href="https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA</a></p><p><strong>内容整理自：知乎@例不虚发探花郎</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“&lt;/p&gt;
&lt;p&gt;DDOS？ &lt;/p&gt;
&lt;p&gt;一言难尽啊！ &lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.policx.com/2019/07/14/node/"/>
    <id>https://www.policx.com/2019/07/14/node/</id>
    <published>2019-07-13T16:06:04.000Z</published>
    <updated>2019-07-15T09:40:32.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/15/5d2c47df96f5d45317.jpg" alt="Node.js"></p><p>能方便地搭建响应速度快、易于扩展的网络应用，Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>中文：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org</a>、<a href="https://nodejs.cn/" target="_blank" rel="noopener">https://nodejs.cn</a></p><p>简单说Node.js就是运行在服务器端的JavaScript，是现在流行的语言中能同时运行在前端与后台的程序语言，你可以把JavaScript想像成Java与C#。相关技术：</p><p>数据库：MongoDB，非关系型数据库，NoSQL（Not only SQL）</p><p>MVC框架：AngularJS</p><p>Web服务器：Express</p><p>模板引擎：jade、ejs、htmljs、swig、hogan.js</p><h1 id="二、搭建Node-js开发环境"><a href="#二、搭建Node-js开发环境" class="headerlink" title="二、搭建Node.js开发环境"></a>二、搭建Node.js开发环境</h1><h2 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h2><p>去官网下下载最新版本的Node.js一步一步按提示安装即可，如果安装失败就手动安装，将Node.js的安装位置配置到环境变量的path中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装完成后启动命令行，测试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="三、第一个Node-js程序"><a href="#三、第一个Node-js程序" class="headerlink" title="三、第一个Node.js程序"></a>三、第一个Node.js程序</h1><p>在上面的示例中，我们是通过IDE完成编译与运行的，其实手动运行也可以，比如编写一段代码如下：</p><blockquote><p>server.js</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//依赖一个http模块，相当于java中的import，与C#中的using</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">//创建一个服务器对象</span><br><span class="line">server = http.createServer(function (req, res) &#123;</span><br><span class="line">//设置请求成功时响应头部的MIME为纯文本</span><br><span class="line">res.writeHeader(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">//向客户端输出字符</span><br><span class="line">res.end(&quot;Hello World\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//让服务器监听本地8000端口开始运行</span><br><span class="line">server.listen(8000,&apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server is runing at 127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>在node环境下解释运行：<br><img src="https://i.loli.net/2019/07/14/5d2af984d2fae77488.jpg" alt></p><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2af89c2b5b226144.jpg" alt></p><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。<br>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。<br>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</p><h1 id="四、NPM（Node-js包管理器）"><a href="#四、NPM（Node-js包管理器）" class="headerlink" title="四、NPM（Node.js包管理器）"></a>四、NPM（Node.js包管理器）</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：  </p><ul><li>a)、允许用户从NPM服务器下载别人编写的第三方包到本地使用。  </li><li>b)、允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。  </li><li>c)、允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><h2 id="4-1、查看npm版本"><a href="#4-1、查看npm版本" class="headerlink" title="4.1、查看npm版本"></a>4.1、查看npm版本</h2><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p><h2 id="4-2、升级npm"><a href="#4-2、升级npm" class="headerlink" title="4.2、升级npm"></a>4.2、升级npm</h2><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="4-3、安装模块"><a href="#4-3、安装模块" class="headerlink" title="4.3、安装模块"></a>4.3、安装模块</h2><blockquote><p>npm install <module name> -参数</module></p></blockquote><p>如果带参数-g表示全局安装，否则只是安装到某个目录下。</p><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install express -g</span><br></pre></td></tr></table></figure><h2 id="4-4、卸载模块"><a href="#4-4、卸载模块" class="headerlink" title="4.4、卸载模块"></a>4.4、卸载模块</h2><p>我们可以使用以下命令来卸载 Node.js 模块。  </p><blockquote><p>sudo npm uninstall <module name></module></p></blockquote><p>如先使用安装指令安装bootstrap:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>再使用卸载指令删除模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall bootstrap</span><br></pre></td></tr></table></figure><p>可以到 /node_modules/ 目录下查看包是否还存在</p><h2 id="4-5、模块列表"><a href="#4-5、模块列表" class="headerlink" title="4.5、模块列表"></a>4.5、模块列表</h2><p>使用模块列表命令可以方便的看到当前项目中依赖的包：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h2 id="4-6、更新模块"><a href="#4-6、更新模块" class="headerlink" title="4.6、更新模块"></a>4.6、更新模块</h2><p>我们可以使用以下命令更新模块：<br><code>npm update</code>模块名称<br><code>npm up -g</code> 模块名称</p><h2 id="4-7、搜索模块"><a href="#4-7、搜索模块" class="headerlink" title="4.7、搜索模块"></a>4.7、搜索模块</h2><p><code>npm search</code>模块名称</p><h2 id="4-8、NPM-常用命令"><a href="#4-8、NPM-常用命令" class="headerlink" title="4.8、NPM 常用命令"></a>4.8、NPM 常用命令</h2><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。<br>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。<br>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。<br>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。<br>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。<br>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></package></package></p><h2 id="4-9、更换NPM-镜像"><a href="#4-9、更换NPM-镜像" class="headerlink" title="4.9、更换NPM 镜像"></a>4.9、更换NPM 镜像</h2><p>因为npm的服务器在国外，在网络状态不好的情况下引入一个模块会因为网络延迟而失败，可以更换成国内速度更快的镜像服务器，这里以使用淘宝 NPM 镜像（<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>）为例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/15/5d2c481d14f7270384.jpg" alt></p><p>这样就可以使用 cnpm 命令来安装模块了：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＄ cnpm install [name]</span><br></pre></td></tr></table></figure><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><p>如是安装失败，可以试试：</p><figure class="highlight zsh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">alias</span> cnpm=<span class="hljs-string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">--cache=<span class="hljs-variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">--userconfig=<span class="hljs-variable">$HOME</span>/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">  --userconfig=$HOME/.cnpmrc"'</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。使用Node.js作为AngularJS开发Web服务器的最佳方式是使用Express模块。</p><p>Express官网： <a href="https://expressjs.com/" target="_blank" rel="noopener">https://expressjs.com/</a></p><p>Express4.x API：<a href="https://expressjs.com/zh-cn/4x/api.html" target="_blank" rel="noopener">https://expressjs.com/zh-cn/4x/api.html</a></p><p><img src="https://i.loli.net/2019/07/15/5d2c484698cd427801.jpg" alt></p><h2 id="5-2、Express框架核心特性"><a href="#5-2、Express框架核心特性" class="headerlink" title="5.2、Express框架核心特性"></a><strong>5.2、Express框架核心特性</strong></h2><p>可以设置中间件来响应 HTTP 请求。</p><p>定义了路由表用于执行不同的 HTTP 请求动作。</p><p>可以通过向模板传递参数来动态渲染 HTML 页面。</p><p>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。</p><p>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p><h2 id="5-3、安装-Express"><a href="#5-3、安装-Express" class="headerlink" title="5.3、安装 Express"></a><strong>5.3、安装 Express</strong></h2><p>安装 Express 并将其保存到依赖列表中：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>以上命令全局安装express。也可安装时指定安装中间件。</p><p><em>body-parser</em> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</p><p><em>cookie-parser</em> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p><p><em>multer</em> - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">＄ npm install body-parser --save  </span><br><span class="line">＄ npm install cookie-parser --save  </span><br><span class="line">＄ npm install multer --save</span><br></pre></td></tr></table></figure><p>默认这些模块都已经添加。</p><h2 id="5-4、第一个Express框架实例"><a href="#5-4、第一个Express框架实例" class="headerlink" title="5.4、第一个Express框架实例"></a>5.4、第一个Express框架实例</h2><p>接下来我们使用 Express 框架来输出 “Hello World”。<br>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。</p><p>创建一个目录，如Project，进入命令行：</p><p>使用npm install express 导入express模块。</p><p>在目录下创建hello.js文件，如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//引入express模块</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">//创建一个app对象，类似一个web 应用（网站）</span><br><span class="line">var app = express();</span><br><span class="line">//接受指定路径的请求，指定回调函数</span><br><span class="line">app.get(&apos;/&apos;, function (req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//创建一个web服务器，可以认为就是web服务器对象</span><br><span class="line">//监听8081端口，当监听成功时回调</span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">   var host = server.address().address;  //地址</span><br><span class="line">   var port = server.address().port;  //端口</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-5、开发Express项目"><a href="#5-5、开发Express项目" class="headerlink" title="5.5、开发Express项目"></a>5.5、开发Express项目</h2><p><img src="https://i.loli.net/2019/07/14/5d2b00e97910997783.jpg" alt></p><p>创建好的项目如下：<br><img src="https://i.loli.net/2019/07/14/5d2b02dad205355700.jpg" alt></p><p>app.js是网站：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><p>bin\www是web服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">/**</span><br><span class="line"> * 依赖模块，导入</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;nodejsexpress:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从上下文环境中获得监听端口，如果空则3000</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Web服务器</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开始监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);  //指定发生错误时的事件</span><br><span class="line">server.on(&apos;listening&apos;, onListening);  //当监听成功时的回调</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 规范化端口</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *错误事件监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  //错误处理</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);  //结束程序</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当用户访问服务器成功时的回调</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/index.js路由，有点类似控制器或Servlet：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 获得首页 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>views/index.ejs首页视图：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在www上右键选择“运行方式”-&gt;Run ‘/bin/www’ 运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b034bcca6187136.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b044c2b12347829.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b041724d6091090.jpg" alt></p><h3 id="5-5-1、request对象"><a href="#5-5-1、request对象" class="headerlink" title="5.5.1、request对象"></a>5.5.1、request对象</h3><p>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ul><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ul><h3 id="5-5-2、response对象"><a href="#5-5-2、response对象" class="headerlink" title="5.5.2、response对象"></a>5.5.2、response对象</h3><p>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.app：同req.app一样</span><br><span class="line">res.append()：追加指定HTTP头</span><br><span class="line">res.set()在res.append()后将重置之前设置的头</span><br><span class="line">res.cookie(name，value [，option])：设置Cookie</span><br><span class="line">opition: domain / expires / httpOnly / maxAge / path / secure / signed</span><br><span class="line">res.clearCookie()：清除Cookie</span><br><span class="line">res.download()：传送指定路径的文件</span><br><span class="line">res.get()：返回指定的HTTP头</span><br><span class="line">res.json()：传送JSON响应</span><br><span class="line">res.jsonp()：传送JSONP响应</span><br><span class="line">res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</span><br><span class="line">res.redirect()：设置响应的Location HTTP头，并且设置状态码302</span><br><span class="line">res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</span><br><span class="line">res.send()：传送HTTP响应</span><br><span class="line">res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</span><br><span class="line">res.set()：设置HTTP头，传入object可以一次设置多个头</span><br><span class="line">res.status()：设置HTTP状态码</span><br><span class="line">res.type()：设置Content-Type的MIME类型</span><br></pre></td></tr></table></figure><h3 id="5-5-3、express获取参数有三种方法"><a href="#5-5-3、express获取参数有三种方法" class="headerlink" title="5.5.3、express获取参数有三种方法"></a>5.5.3、express获取参数有三种方法</h3><p>req.query 适合 <a href="https://localhost:3000/form?num=8888" target="_blank" rel="noopener">https://localhost:3000/form?num=8888</a><br>req.body 适合<a href="https://localhost:3000/form，Post请求中的参数" target="_blank" rel="noopener">https://localhost:3000/form，Post请求中的参数</a><br>req.params 适合获取form后的num：<a href="https://localhost:3000/form/num" target="_blank" rel="noopener">https://localhost:3000/form/num</a>  </p><p>（一）、GET</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = req.query.num;</span><br><span class="line">res.send(&quot;你获取的get数据为:&quot; + num);</span><br></pre></td></tr></table></figure><p>（二）、POST</p><p>解析post数据需要用到body-parser</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">//引入body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">//需要use的</span><br><span class="line">app.use(bodyParser.json()); // for parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">extended: true</span><br><span class="line">&#125;)); // for parsing application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.post(&apos;/form&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.body.num;</span><br><span class="line">res.send(&quot;你获取的post数据为:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>public/test.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"tinyphp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（三）、获取路径参数</p><p>app.js  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.get(&apos;/form/:num&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.params.num;</span><br><span class="line">res.send(&quot;你获取到form/后的参数:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="5-6-ejs基础"><a href="#5-6-ejs基础" class="headerlink" title="5.6 ejs基础"></a>5.6 ejs基础</h2><p>ejs是一个Express Web应用的模板引擎，在NodeJS开发中可以选择的模板引擎可能是所有Web应用开发中范围最广的，如jade、ejs、htmljs、swig、hogan.js，但ejs是最容易上手的，与jsp,asp,php的原始模板引擎风格很像。</p><p>官网：<a href="https://www.embeddedjs.com/" target="_blank" rel="noopener">https://www.embeddedjs.com/</a></p><p>添加一个<code>product.js</code>路由：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  var products=[];</span><br><span class="line">  products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">  //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">  res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>在views目录下添加<code>product.ejs</code>视图，这里是一个简单的MVC：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span> - 产品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"80%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%pdts.forEach(function(pdt,index)&#123;%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=index+1%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.name%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.price%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%&#125;);%</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">%=pdts[i].name%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改app，注册定义好的模块product：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> index = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/index'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/users'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> pdts = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/product'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//指定视图引擎为ejs</span></span><br><span class="line">app.set(<span class="hljs-string">'views'</span>, path.join(__dirname, <span class="hljs-string">'views'</span>));</span><br><span class="line">app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="hljs-comment">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class="line">app.use(logger(<span class="hljs-string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="hljs-string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/'</span>, index);</span><br><span class="line">app.use(<span class="hljs-string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="hljs-string">'/pdt'</span>, pdts);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b092ca2eb115835.jpg" alt></p><blockquote><p>原因：没有安装ejs模块<br>解决办法：进入到项目目录，安装ejs</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save ejs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b09efe80ba53992.jpg" alt></p></blockquote><p>重新运行：<br><img src="https://i.loli.net/2019/07/14/5d2b0a951a09231745.jpg" alt></p><h2 id="5-7、lodash"><a href="#5-7、lodash" class="headerlink" title="5.7、lodash"></a>5.7、lodash</h2><p>这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。可以非常方便的操作json。</p><p>官网：<a href="https://lodashjs.com/" target="_blank" rel="noopener">https://lodashjs.com/</a></p><p>安装：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash</span><br></pre></td></tr></table></figure><p>安装时先用cd切换到当前项目下。</p><p>如果浏览器使用可以直接引入：</p><script src="lodash.js"></script><p>添加lodash依赖：<br><img src="https://i.loli.net/2019/07/14/5d2b0c4c7c14a17367.jpg" alt></p><p>依赖成功后会在package.json中添加引用：<br><img src="https://i.loli.net/2019/07/14/5d2b0c9e03f1844597.jpg" alt></p><p>后台Node.js使用，可以引入模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//导入lodash模块</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var products=[];</span><br><span class="line">products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">//1、取出第一个元素</span><br><span class="line">var obj1=_.first(products);</span><br><span class="line">console.log(obj1.name);  //ZTE U880</span><br><span class="line"></span><br><span class="line">//2、取出最后一个元素</span><br><span class="line">var obj2=_.last(products);</span><br><span class="line">console.log(obj2.name);  //iPhone 7 Plus 128G</span><br><span class="line"></span><br><span class="line">//3、指定查找条件返回符合条件的索引</span><br><span class="line">var obj3=_.findIndex(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj3);  //2</span><br><span class="line"></span><br><span class="line">//4、指定查找条件返回查找到的对象</span><br><span class="line">var obj4=_.find(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj4);  //&#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;</span><br><span class="line"></span><br><span class="line">//5、排序</span><br><span class="line">var obj5=_.orderBy(products,[&quot;price&quot;,&quot;name&quot;],[&quot;desc&quot;,&quot;asc&quot;]);</span><br><span class="line">console.log(obj5);</span><br><span class="line"></span><br><span class="line">//[ &#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;HuWei 荣耀8&apos;, price: 1899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;ZTE U880&apos;, price: 899.8 &#125; ]</span><br><span class="line"></span><br><span class="line">//6、查找价格为1899.8的产品的key</span><br><span class="line">var obj6=_.findKey(products,&#123;price:1899.8&#125;);</span><br><span class="line">console.log(obj6);   //1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/14/5d2b0f023a83710965.jpg" alt></p><p>API的使用非常简单，但需要注意版本，可以现查现用，API地址：<a href="https://lodash.com/docs/4.17.2%20" target="_blank" rel="noopener">https://lodash.com/docs/4.17.2 </a></p><h2 id="5-8、参数"><a href="#5-8、参数" class="headerlink" title="5.8、参数"></a>5.8、参数</h2><h3 id="5-8-1、URL中的参数占位"><a href="#5-8-1、URL中的参数占位" class="headerlink" title="5.8.1、URL中的参数占位"></a>5.8.1、URL中的参数占位</h3><p>Checks route params (req.params), ex: /user/:id</p><p>127.0.0.1:3000/index，这种情况下，我们为了得到index，我们可以通过使用req.params得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式；</p><p><code>http://127.0.0.1:3000/pdt/9527/phone</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得产品根据Id</span><br><span class="line">router.get(&apos;/:id/:category&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(request.params.id+&quot;,&quot;+request.params.category);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b10e8e678f43145.jpg" alt></p><h3 id="5-8-2、URL中的QueryString"><a href="#5-8-2、URL中的QueryString" class="headerlink" title="5.8.2、URL中的QueryString"></a>5.8.2、URL中的QueryString</h3><p>Checks query string params (req.query), ex: ?id=12</p><p>127.0.0.1:3000/index?id=12，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用req.query.id就可以获得，类似于PHP的get方法；</p><p><code>http://127.0.0.1:3000/pdt/9527?name=jobs</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(&quot;name:&quot;+request.query.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b12be0371490358.jpg" alt></p><h3 id="5-8-3、HTTP正文中的参数"><a href="#5-8-3、HTTP正文中的参数" class="headerlink" title="5.8.3、HTTP正文中的参数"></a>5.8.3、HTTP正文中的参数</h3><p>在post请求中获得表单中的数据。</p><p>Checks urlencoded body params (req.body), ex: id=</p><p>127.0.0.1：300/index，然后post了一个id=2的值，这种方式是获取客户端post过来的数据，可以通过req.body.id获取，类似于PHP的post方法；</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222150412682-243382356.png" alt></p><p>页面：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &lt;%= title %&gt;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%pdts.forEach(function(pdt,index)&#123;%&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=index+1%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.name%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.price%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%&#125;);%&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=pdts[i].name%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            &lt;%if(typeof msg!=&quot;undefined&quot;)&#123;%&gt;</span><br><span class="line">                &lt;%=msg%&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">        &lt;form action=&quot;pdt/add&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                名称：&lt;input name=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                价格：&lt;input name=&quot;price&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/add&apos;,function(request,res,next)&#123;</span><br><span class="line">    var entity=&#123;name:request.body.name,price:request.body.price&#125;;</span><br><span class="line">    products.push(entity);</span><br><span class="line">      //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">      res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products,msg:&quot;添加成功&quot;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151340745-1374859267.png" alt></p><h2 id="5-9、JSON"><a href="#5-9、JSON" class="headerlink" title="5.9、JSON"></a>5.9、JSON</h2><p>如果需要Node.js向外提供返回JSON的接口，Express也是非常方便的，可以使用原来在浏览器中使用到的JSON对象，这是一个浏览器内置对象在服务可以直接使用：</p><p>将对象序列化成字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象</span><br><span class="line">var rose=&#123;&quot;name&quot;:&quot;Rose&quot;,&quot;weight&quot;:&quot;65&quot;&#125;;</span><br><span class="line">            //序列化成字符串</span><br><span class="line">            var str=JSON.stringify(rose);</span><br><span class="line">            alert(str);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151858839-27300214.png" alt></p><p>反序列化，将字符转换成对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成JavaScript对象</span><br><span class="line">var markStr=&apos;&#123;&quot;name&quot;:&quot;mark&quot;,&quot;weight&quot;:&quot;188&quot;&#125;&apos;;</span><br><span class="line">            var mark=JSON.parse(markStr);</span><br><span class="line">            alert(mark.name+&quot;，&quot;+mark.weight);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222152634417-1260078212.png" alt></p><p>Express已经封装了一个json方法，直接调用该方法就可以序列化对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/rest&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(products);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、RESTful（表述性状态转移）"><a href="#六、RESTful（表述性状态转移）" class="headerlink" title="六、RESTful（表述性状态转移）"></a>六、RESTful（表述性状态转移）</h1><p>REST是英文Representational State Transfer的缩写，中文称之为“表述性状态转移” 基于HTTP协议，是另一种服务架构，传递是JSON、POX（Plain Old XML）而不是SOAP格式的数据，充分利用HTTP谓词（Verb），侧重数据的传输，业务逻辑交给客户端自行处理</p><p>REST是一种分布式服务架构的风格约束，像Java、.Net（WCF、WebAPI）都有对该约束的实现，使URL变得更加有意义，更加简洁明了，如：</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>get请求 表示获得所有产品的第1个</p><p><a href="https://www.zhangguo.com/products/product" target="_blank" rel="noopener">https://www.zhangguo.com/products/product</a><br>post请求 表示添加一个产品</p><p><a href="https://www.zhangguo.com/products/1/price" target="_blank" rel="noopener">https://www.zhangguo.com/products/1/price</a><br>get请求 表示获得第1个产品的价格</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>delete请求 删除编号为1的产品</p><p>REST设计需要遵循的原则<br>网络上的所有事物都被抽象为资源（resource）；<br>每个资源对应一个唯一的资源标识符（resource identifier）；<br>通过通用的连接器接口（generic connector interface）对资源进行操作；<br>对资源的各种操作不会改变资源标识符；<br>所有的操作都是无状态的（stateless）</p><p>谓词<br><strong>GET</strong><br>表示查询操作，相当于Retrieve、Select操作<br><strong>POST</strong><br>表示插入操作，相当于Create，Insert操作<br><strong>PUT</strong><br>表示修改操作，相当于Update操作<br><strong>DELETE</strong><br>表示删除操作，相当于Delete操作</p><p>其它还有：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161223101344557-1727952968.png" alt></p><p>NodeJS+Express可以很容易的实现REST</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>application/json</li><li>res.setHeader(‘Content-Type’, ‘application/json;charset=utf-8’);</li></ul><p>示例代码cars.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var cars=[];</span><br><span class="line">cars.push(&#123;id:201701,name:&quot;BMW&quot;,price:190,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201702,name:&quot;BYD&quot;,price:25,speed:&quot;160km/h&quot;,color:&quot;红色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201703,name:&quot;Benz&quot;,price:300,speed:&quot;215km/h&quot;,color:&quot;蓝色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201704,name:&quot;Honda&quot;,price:190,speed:&quot;170km/h&quot;,color:&quot;黑色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201705,name:&quot;QQ&quot;,price:130,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line"></span><br><span class="line">/* Get */</span><br><span class="line">/*获得所有汽车*/</span><br><span class="line">/*url /cars/*/</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.json(cars);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Get*/</span><br><span class="line">/*获得汽车通过id*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">     //从路径中映射参数，转换成数字</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var car=_.find(cars,&#123;id:id&#125;);</span><br><span class="line">      res.json(car);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Post*/</span><br><span class="line">/*添加汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.post(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      car.id=_.last(cars).id+1;  //将编号修改为最后一辆车的编号+1</span><br><span class="line">      cars.push(car);  //将汽车对象添加到集合中</span><br><span class="line">      res.json(car);  //将添加成功的车以json的形式返回</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Put*/</span><br><span class="line">/*修改汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.put(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      console.log(req.body);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:parseInt(car.id)&#125;);  //根据id获得车在集合中的下标</span><br><span class="line"></span><br><span class="line">      cars[index]=car;  //替换原对象</span><br><span class="line">      //res.json(car);  //将修改后的车以json的形式返回</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;更新成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Delete*/</span><br><span class="line">/*删除汽车*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.delete(&apos;/id/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">      //获得url中的编号参数</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:id&#125;);  //根据id获得车在集合中的下标</span><br><span class="line">      cars.splice(index,1);   //在cars数组中删除下标从index开始的1条数据</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;删除成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>示例代码app.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line">var pdts = require(&apos;./routes/product&apos;);</span><br><span class="line">var task = require(&apos;./routes/task&apos;);</span><br><span class="line">var cars = require(&apos;./routes/cars&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line">app.use(&apos;/pdt&apos;, pdts);</span><br><span class="line">app.use(&quot;/task&quot;,task);</span><br><span class="line">app.use(&quot;/cars&quot;,cars);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得所有汽车  </li><li>url /cars/</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b27eb42dea22132.jpg" alt></p><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得汽车通过id</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b28e456cdf58111.jpg" alt></p><blockquote><p><strong>Post</strong></p></blockquote><ul><li>添加汽车  </li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b30e46f28836556.jpg" alt></p><p>参数中的json格式一定要使用标准格式，注意引号，注意Content-Type，默认的Content-Type类型是：application/x-www-form-urlencoded</p><blockquote><p><strong>Put</strong></p></blockquote><ul><li>修改汽车</li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3434410e778260.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b344cd080581595.jpg" alt></p><blockquote><p><strong>Delete</strong>  </p></blockquote><ul><li>删除汽车</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3526d5bff57574.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b35474e9c447189.jpg" alt></p><p><strong>node.js跨域</strong></p><p>修改app.js文件拦截所有的请求，修改头部</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">app.all(&apos;*&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">    res.header(&quot;X-Powered-By&quot;, &apos; 3.2.1&apos;);</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);</span><br><span class="line">    if(req.method == &quot;OPTIONS&quot;) &#123;</span><br><span class="line">        res.send(&quot;200&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2017.cnblogs.com/blog/63651/201801/63651-20180108142729785-1121920664.png" alt></p><h1 id="九、视频"><a href="#九、视频" class="headerlink" title="九、视频"></a>九、<a href="https://www.bilibili.com/video/av17977069" target="_blank" rel="noopener">视频</a></h1><p>From: <a href="https://www.cnblogs.com/best/p/6204116.html" target="_blank" rel="noopener">https://www.cnblogs.com/best/p/6204116.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo front-matter 怎么写？</title>
    <link href="https://www.policx.com/2019/07/11/front-matter/"/>
    <id>https://www.policx.com/2019/07/11/front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-17T11:51:49.855Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/2019/07/11/CSDNnews/"/>
    <id>https://www.policx.com/2019/07/11/CSDNnews/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-15T06:15:13.802Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">hackernoon</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/2019/07/05/BitTorrent/"/>
    <id>https://www.policx.com/2019/07/05/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-08T15:20:42.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/2019/07/04/partner/"/>
    <id>https://www.policx.com/2019/07/04/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-12T09:50:03.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19XjSwdUJEfqpHO50OP9n3Nij1ab3AjnS9enkmg78x+WcVlZfhCjPm8ua2LsQaauk7BW62QVMAKApdaixHc8+w+cztaH7svdObrUgPcb0CDOc9D5hu3YEqj3d7Gp6k4po6HBEvtj3p/DeAxdzEQpXYqtZRNj4PVt6oGdvBuvax1akeP7pM8JRaz6noIa9uP2f3GesQ+m2E5TwfQ3T+/A3ANU2X7b/ZAaMw499ap7816/JYjiD6+eY+LT+5n+q0FvYzSldgkJMnecWL3JYDNspjoOVJDYSuxdUFIqeATHzQO335hx2gZEwh7gDchSBICK4XYkNhh79wZKZ5Lr0oAcBqCO4Qu08CavMeZbMddCl0ohGNhYKyv0BN9bl8PC2sKelxrwpul5SlX3tajnCM8lWMgLhYUpfNxw5ZAwrTSk0Hxn4WFI50YLYVS5LAzYZEldoB95imANy7kRzy3b/hGc+4/dKO3aY9KlW6fxU3Ve7QUgCL29tW2GaHtI83asmtiCaaNWHv+SjndMRAWTbv6VGP64xTFZw78t4tQo59eKyz+4cRaMS3pbVhLgl2dtUID13xJaq2JLs0TgwHg/wInCZQQjJlHBcXSUVzzDiTxaLfdOKFTjWBlqwKKEVorY4lBrntlG/heboAMS9l0Ohwwoxnn19zuiv1gep2NRTSWVXpWV1fOTifDEOtHRnp6hgvVO9AWcCnIJX6vBCuTBnFPt+DVx0C3VOOXr5qjmFqNMy6agimb76nR8D77GRxOdkljHjgOodJCUwjn/iE+VEzGk5nEkhVUz3K9azMowM3gpAWCKedha54Hx1G6VBkNOUmGq5p07OYv8h56D/ZhbC0vKw7X8jFbQdJvNMGM3ykGcuhyMXeg+1qtplKKSabItw+/gqo0Md5IUKPTO5yMU2m9yPXSHjnzgJ6MV0aGfU6aBuuCynExNzLbm0f3Lprjfbnb2epLOjrGL07gtQ62Q9ssAs1cjsnqaV20XVARVba5yYm0l/Wus30WkBWQZDxpg5ArO0mcvnhxmP+NSC1Ioe9IlCasWYr81bIckYs4hm3tRH4SkhfqjsKDZjArEs8iQiC+zYcTZkg309hRhF0Zvzvuu7Ps0FKzGtApcGKgB225t57UCxENi9Go1zQ6R0hOSId6cI/SSmvP7qzIEoXHRkcSJ3goSYvx7mSrYYFsg+zV7pAWB0AmfEh/x6dWkzLY0oRbeypebeEeopGKbuOZOmld/+crA+6SFjS0TODNzSqWTvbxNaBQw3GRUSt7ObjyOCJGYRqZNZeikMNk5GE6mQsCzC2YcmevNuYrGIp3SPnwGpkNqulVa4QoYCN9mCMzBXWKxpHxOz3ioR4STh6kMcERYOXY5U75on/1Wzl0WsaoZht57mLvJlDNmHsdPwaf+YHyuz44inWDIGQa2qlc1K01oPgSHoPiJYmZc3zobC+Sf3FTeUtlIOvy3ROwrkZuo21HOKFPAgfsD26z3TnmarNOUZ1SOeHB594M8Z0DX5eL+jBau5+LEhxhB3aqgCMk60Z2LBapEwLdLybxpyx2e7yYrISrVOSEGt4bS0VvyhOQK9o5GeYkp0Oi19qo1iA8i3Kzmc//lClgzhhmbTgL+bVT11c/AUrR+Z9KG8R0/pBr9EmrSNGIUiOw5iaItZkaS37s9K2WQGtQoc8JrWFl+zdjKBGwnPoMpSL51TbpVUBFVpcSo4DAxTWp9wK9YPc/qgimGS6vMDTeapP+dcvycIOZ6qA0t8V8+MLjLrm4TZOq74dH2BYEyiR4H/vfCnBjmdM4S0tSdmiMSaxAtfyxNBsLR7A+OBd8eFUdq8fovZ9JjHyPA82rY8mOSJ9aAt17I/N6i6Vtw9OmLqm+I2VhD8cqUaRexkuHjvcIzZ1kdyk5QJfI+ntwQX39/eUnPNeA2sdrp5aAs8wmkgV6G765psRIKGKkebPuGcHyslG7JGmQar9vJX14Qpd6PrRMK4gnPf3vpxxsAV8T7OmYInFDioG4dKpYZSYW0DZauiFixSe4C1LA+reVuRqup6XCrv56GSkchOLeKTp9/sw2anuMHMTHDhwJQ151QBlN6SE9sAEcfqja+QMAXpRehUbi5EYCrD3aJ16CD4h9XhJ8vV6AktS4cmnWyFw12Ff0AcCapBMitWyoleKOmQwlvGxAic3uaEYqmb5XGUGDBbW3d4FV2oBosNHarDXZEgknTRDUSdOpI6jpBc1TAX5pewr0U8ACGhLxFw4buvqAzY7BC7qz9uwPOquNLukmMuw8dZdz1zwEDdJi1EEjE7/1iZWwJOdRLhrLzlF9riRA/JAb2eSQZoRAdgBowGxng/TCiAWsRiQDqCoF8EowpzmGlPhoGynlslFZf3U75Qcod1fQNXhUqTTvO/3y9OsWnBn5/AAqZLcE9zg4T6bxyzG90Fu3TJyJHx3hYfwdq4Zh8j7R4UPRazl3n5A8wkJ1TdPzowOBhlGHC0v8NSoOvMXJ6Liy8erRRtLmgCBdGbfuRxDXu05h3ub4ogGA0vxuvmE7QpUTtgY1Wuaz5LMpPRQgRWe1+yHmE86FHosC4bpb0XFMwGxJ8hWVFkITTM7r9jBfb53HZIlOsOFYMKtSF2g2cfzb48kNyIMRgs1+JbnBbZqFOKjxIbD3xLIDChU+3q13VGhka4FB5Uhkt6cKIMxqZLTvg4eIkuF73Ukipx1YMZkZL6uRr0Nr/o7jk2CzrTYnwNKxBJS+VuGpi5D9IFTze/ooEDD1AdGqWOH6NDQlV4g8NAFfXWO0tTrSLthqQVbehWa1ndvcGYyAz19ntwbd4gJesJVFSmomI1pfDHkqZMH2ozYkJB102mAHl1uznb0R+KTQ/CN83Vcwvaqg4qmvCYg6X+z/cJroPMrxUjG7UUh2jJtEZ+hUsJcp2qse9H9Dk3FWM7mRGe5ZFDszr31b5kzY96rKmsbZYldqcywhz2BhyfKfNVhl1hNQvllUT3gjMiDJGlO+6Mot85eDYVApMvLPnF0oItwgh66HqCmn1mTwWh5h6EI9XhqGtAhXOS3hXuYr8TYVd2t3ipjCZbVL7l6zBywo7fjwjQoiHJPEbe9FIMop7OQB/D6ksPb+EpV88oNahqHrhV7SFD0ihPmbMWdcU+zsIKNzTrm3Pfc7gw7uEXp+W8pldxRTTwIKTOCS6Xyw9WIAr51XWJHrXcPuGNbWiqnmd1IA0Isr4oQPuirkRJjsFfvcwNWu17XjfYy/i2EBoOnwBXBCmCQX0bDJZO8DQpPHRvZQCh+B2cw3L4PmpPcguu3/XobgoRq0H3ZrBBTPJxOisc8iCVGD+cMJ6g+le3tZQ/EMngTj1hVcakOFp9Q7txMowuhZAwJE6vfdXfYgD8PBogzi3PUvaw5oc5iaNbK6d6GkAtgCsvlpNJ77tyeRzrYAzv6iBMoLvOassEE63bNvqPQ7tJD8bGEhs3yAeBwpW2xDaq+5DwQWSpIcwXa9yKKlk8vJCS/Bs6ozvUIXDp5OeaXcZRfMSXs5osMBLduPLbxrixmsEauRdsR5srAPQgdWoDodc0DKy2zw3oGXbjP+Zm2PDf4ts2pJ5l+5ium8ol3WwrFLxizqNFYK7LfcTkeVJJkHcCdaff58qhkVnWYQg34tg9IMZnyDMSdhco1jxD24re76siXoBAG53ejFxV60GWNx40W/G0CHd8MVvM9Daj3MKmwRW2z31gYySOzqkt4HWRx5pVHByZSIuspNTftJIHDwSIF5qtECA32qmZ6iadKJqbzttDiyRpkHaP0lwxWeYhnuFHNVKucKZigkTQjjyAyBi4QuwJI8M36MR65bjvbEcH9hSeNNWSKU+3VjVtgze55t3UtVal+tzhG7AmkhdiyC+r6bdrJuh6Uo8ZHl7tdd3SJjLeEaiduDFCJUOUi/AgYQ1rXMUTv7GBPrDkfB/QqC7r3GOyc6jYuFXffWIWBK/Zu3/IsFwIGB9D7NtwkNbGyQ6ndIVH0r8JXI0G6jEU8BpOf5wAPNCTmyjoDUBCsdkgQAFmAXONdtZXuxsN3H2s4xc5ff6LJcvCKbQf34XvJuF/1f5HecCnL7u+PtgEEhUpYbD9bG2taJr6x3ilRRXFl3Gb+EcYjHQxKUhNBZOvVrVO2NVR83zHfsIbJdfS1KgjMTv5ryB5Y9qspbd108hql/gVaoqsgOBl04u/whpIpmqrT4VvzNwqo1MKeS2PrJh3HCkQbUYCP4z6wDMAJhppuy1NXmrZWYimPUWC9fQwaWskfYQqqo9jrvU4oKsYMphDnC0c+2flo+p8ufh4Q7o3toRUV+jLdMXjJeMtWiuJHo7v6eKWE8qUk14JRqZSqB2H83NlK7rCzg/9js0QHerlqrV3aKTmPM7P7tsPELx1DT7/WBo8bX6CCC49Ydv/aTVQVDO2DF7Tt6R2hFUUR75vVSOdeMgnm2ZewML+dS/pxE1P8vgQLJV7G7rIFqORdP2EIP0EbHMhP1OHWL44cyMybH8SxcOSSMAGGJyDVOWzBUEIg5zdctn688ChJzfpXsAP/Ok0VL7q+a0J+EU/RcS/UUGnQ01GB8JEHAOPCZMdjqZ6KQzrGs00BBmPWtJNhJtg1akIbc1JugJJ+vLT6bxCeyAvSWja4+G6pOhcvIPRmz2nW3U8DSulurlCQyxgCmbCd0Eam2x2K6Ut1pxgL48s4GH6qyK0oax1w9wA1z5c3JylUZcRwxzH3/496y2C25oWSeenXHbw7xaO7IkFO2Gk3RaLkRMhE0K+IqeG3pX0p4QWLj11RP0WV9JBoa7hs1AL8uebUppMBwhOEgGg4obPKJF3MO4oNtpafvfDjz//OyJezKsg8Mh2eVr+FgYN6YgBcDuEu2wNw2q5IyfYH1uBCmJyacSpjpzyLJrQKDrHizSIStWjCNZBvuNZ2OLWBOKRjsk+Z0kFTIU40DErcdNfzKVzt1NYdZE5GmM4UMJ76keosCxAToaKO8++trkA1nB6C+DBh2BqfJcZZvcXdnhpk8MInHqlQ85ssnMrL+CGWrIpoixdQrJ9E9hRtjoGUO1Qua44ANaWbDShpNfcGgCm3N1iOxwQw6GQfoqLIeP3GFeJj/oBqNmnbKgfotjeow/EFu0tL7zDpSoQIXZQmRWSWT+LDG+mNEXSV8QgOBJS0Csoo9FPifmgLOULAW9b7itZ0NEhUyZ2bpwOVaL9F4LvwppdFEzdyORDUeqTbnEN7EsmcQPzRw/J4L7Tar/Mo9ZY7E57In8RQeOTd5Smw8sn4TedQJ9jHhXnr+F4CkeBRTkO5XVXiezxT79K06GfaA8/86cv2CuCbHcAjm7yZc5IhR/ypjCJXvWZn3/ANB0M0TA3k5w8DWsW22EUqIqTMhx5aquSbWl5JCJ9hw7YSAHPhuT7wZJJzDwutsx4W9CgCtPXEMyegtWyAPYa9taRu7XyJ5mq7YATppsdxYBJKQoLghzFkXs1EFuSRDM1pNJy+SY73uiKsdXc4QDCWExiIJbn+u6oVGsv1PY7QLRIz88Mu2kghZu6xqZkYiP0wSi2DmIQStJs48OT9uatKdPVYFgmMOzaWxxtTRGYFInexwjF5/ZspORP3b8AqiPPiXhOceywJXFpleFtHTLYF2PN70/m1RNFx+8aq/K+8CnzRmO0JAAfhptSRer8yQ59GwvDBcOPLMEoTTZ5dcWoK0fA/pEKC5+OLNSp6gwz2ML7aA8yMI3KGt0m03TgzbAXAB+nD8yD8c2ImmvvabBIYXw+f7VNaHf8XEJJLjiFXmwUVBOD13c6m/g6N7LDdQ3nSuyxZCf7A6VtZiHg7o81TwAm/lNXeRLHjpSyejapLXFwf3opoX+AR44o9xYKnU4ACjZP9+bO1g4n6e7WZLDP1uU63Px9rVlO9HBd/y3TyatFq2SWdODYFP8VEakbaZFy5STAGifk/OkjVriAu0dfsUX/wkgC6RvhbSToQgGwfbwaSN9vVMl4b03n1g492mQsyWpV2TILOe0zfWYefR2Q2Mpn7qpFBs7ghsUKt1IFXiXVF8AB1yqY4AAgGfwhl3v95oodVTTkVZXP5NXdGbAJiCJq57EwM4maxeoTeylGoXhcLMS/KmZHq64kvl/2YJ/28zb1vdHHpiC6cQoCnQ75g3VUDgAgpv5zmYQTW/5DdaxlReOpva1w6sLdUtrB05gdFv2jxWXddTMMxgR40+Molu3W/PE7PCFsV4Fjy799wGLJeAzfNY4Ft0avy+6XYwMTJkLj/s+4FdwGVy7LSLcVjk2voT6U6L3hWznSVA79b8w0S5yq8vMM4fXN90dzTwbnbiMfq4kGaYgfMieTAALJu1Q+4to6SxHsAAEPEbV+J/gSWm39/3fTHPEA7vJ0eYvIK6LKxivLO/EXE5KvQeNq/YA+KXIOP4suqqXzYsnWnYEdgokm4sdTLt3Saw1fTXb4JWro6LuBtaRFI4Ztmaqlikg4jALqjUjNfKDI/lKUYHBLf7B7g+gMUk2jKExH46Rh4rqLoEe2wWdg1rYAa5RJNLP9hdN1Rg4PUnWMRm4if+5/+Jhk7JrdC66dSuIjvMxeOWOl1l4G4hZKqOkgxOKCwtVFrRTA1cFnFfwYnO7sIXHojdZVXC2wn8XWXCFjazHzDL8s+hHHHH6QucE29t5ORO2j4CL3NpisPntxl4hC8gdBLtcquWEpziWrn/mbgTADsJ8nvMOTfsdA0iv4xJTA/DmiyRnckV9lurs/KWRJ28PJzSdm9zPqHcqgJZWN2Brc/b4mhXW0kjqpPwU8YCZHeCY2RWnbhmHnbPMcIb27zvgg4Kvb/qsYbSJxuWPGitmelO9KRULJ5wEmjyuQh3wZBCavRR9FxJ/f/GZDA/p51ISNUO4pP2JlQfX1AqciybZcOfrNYntpT/iNNPKaC1v/7BnlTy0TfT44urP+OpPa8OOeeXyBKbADlKQcErXK0ZN9bPGzX4MZXNpr/R37BgVRyI7BV1cKRVuGkXZauoVZWjZS1CGiAEIZEa/xyT/v7dCwhiJ+QTDZa5hGgjVeDVezNAKjKTbOocTyF2EsLOtrT67UE6IYGF4mJ75ikDjUPQjC+8xtul+Lxt7i7Uz9rr/mmXr1d1yIpba9Lz6ffHt5UauBqTkvP+v8F8/imFDp6cyV+2S+6grXqQPH938HE3Vfghw/VvebW7Es4fqjnjPFqVROztfwAaZ9d9+PCJv+K+4kpwMFGhako0ESk9fpwwowMGV5o39p3d9ja130gjKXJORj2U1HvDNDzsShz5TVC3oIQDaENPQZiEDIIScPLl8QVNTTKdV0bpkjk9atatd/k5b+TvHP3aEVRU3Jq4th8o3ivbryeBIyF5l7dX6824WQ/XS/AluRlzV9GonhooIX5/cvuGSbHBDwXJs2xIh39YA3shy89syrwER4DMoPzlGlT+VQm9NIK/J3HMZY0r/OS+kNfLb7r9V1O4LwZEr4xRhqPJtNlSLw60PqdBBywXQ55XjJ4lqL/rk/9baMvV00spiemMyuwCA8tw8fQU/gOAeP9hnyhzynLtOMGAupLnoKpoj+g+VtoKI9AyaDkeb7n86DklrkDNWppXbHf9mTS7LJ4Hhn3H4ece6FNH3hwGBgtTgBSJ1JXfWURlF+2ImlzgTRVxFyL2MD815OfOz0QOueaE8db66VR+ePik+ZHUyNWIWqZSXlqkWWEN5X1Js13y7+6p+10IQQJ7eRFDEWxwBjo/xH9dxKYHeMx8HNH8zFwsfjk3eISjKmBz+wLfyatz9xQ7Dsckv38xtQZvpZ4wFOlP3LUzH3dGJ2NePIZ8P3+4LFKMk3BoaIXQTUgiwWCn82UjQnaeT80Z0dmfbehSOHihB43+SUC71Hz+9KRsnIZnw7R4OW4SxnDqYkrFn9osFmFmYnXs7SsK8cimyB9Lw+WmKS58PcKM1tLIzf94/xfF1aPBU5bZvGgz8WmrusdN+8P+RQOLpspbjB9lyilrvM2F8JTTYL2iGn770P0MI2hCKrdlONNaEzSUu+0LQYkPiqeyGP6JmV6NQrWnE4zsVQvZpjdCwkQ+7H16ime+syL8LlDFvAaBy+l5WoAxA0Qw2ThZL/f5zJPWBOPEZ8/oTHiYJv5HhGmYshimn61qHAONxtdXTfswxZM/c/gCCiB2DcHB8RFion7iw1Lw+46OpSiG75uvrdnkuPQi6ZFfy+qsXFtHYbN/+AOs3NvyNYHoVz6RaswBllKELMXlwhoUVJDdspOfKFXTgKoBvYqOzAhSzy5YROVVkCAXekErRRi1k5QDL2Ajm2tbbZ8xy4d1aW5UTP1zQEHQBCABy4BSV39HeDpWDxTVcwx41RqQFe6LDDM+0CyU7TMmr27Frg6HuYjHXHqsnynT8/RDKZRNgT2sfocPG9UR4kbdSULKtQykLPJJR/IdgRdQqsrOSykDnPqyQMX6vGb3K07oqZLFoWzwrqrwLDIRLyILitq8PAbLil7ipg+uU73fIIrI65xH2zix42pGdlH0qpR4NPQdnrYRrJmIFE7ahq2HZ/eyjX4qDOI5a0fl59FMdU+8qvFPdx0bdMPBq94VuEo+sVCwCmYCPjB1p8omNF/9p+8QqRiYS6e8W4hzx8TmdPrxE7GJgtRH0QXHX4hn6+pHMz2lqYrhyFI4JOtybNBLjutYzMgrWU92Ip9uushuqcQSc+0uFrdCE9dn9xN9nNYw4IvSWsbYXREVa/yjQcrQQqkW+a5HNTTQm+s79sg+HCJdP/D/eSRIemdcfXXGm55rCxmLZQgzGc1FN52MGoHSZmHi9e3hNG3Ub3C3F9k3x5Hp3PUNTQsRQUOHK0gGED8HhoXSujy0dBhZhyOa/L6vT6EnFFfumO4mtsDE/IkTkZ/cOkwJpDJcLWdmO6A1S90t/xP5KIgOWFsd6pPfBeSim7gBwAQfm7TNK6Ru0CJXAky+dj625YkJGO4ouYLfs1P6kdU98sgfAnBDp504WC8Rsbc05TqwFP4Vk0dP+375JTfC7K0acpZWJsQBt9I5ynY2ZxeIU2xz+0nie6shRjwdUicSH1120VSwO/WXzCTyLoeQogVjZunJjNHHjLP6n2fycKdWTRHZtybnt2TWcuP3YWsl46zxzqwELzT6fXUZhaY0ZgWewN7Jpsw0iEQ9cQvYiJOqHTkeW0X5RFsXT0lc/sUa7kpF6gaEoHcNxc9HrKWAaOGBjVF2U118dqrt9jMazBEWLklyVnPl8riTkMw7QmUoh1QorJUfexX1vyuY7XaOy8s3BVHR+4T3qSjaQVonBDfS7y7GprP7pB8efG4HJYJwUPjGWwAYrRtHsr2dUnTAfgCKf1xyDHYFsTYgJPkL597aO+sWZXQo5/4RG0ChYezZOq31ejMGlwWFvvYKthanQ+YjToZfhRbKsHIIoS44+bxFifF+yM38XUjiQVmgOyZuIz9ndYGLSMpQ16XhXaB9JoeeZU/V4Gx2O2LTXnovCOphsxC5H3zleYeaTFEzuMF/wjaoSocCkSGZq6Q2mnizpg/hTwib1yGSZylNIdun7BFd7pmUB1/88gg6EQB+/1sfS+jlK7BlcN2X5yhgzWUolzustZ+YJSaBsc/tXLPYVbLN5lNjypvpg8YO9HYvI/1kk9xA9TQQn/Qx2Sna5le69PseYKkJhTJGGwC7N7kequG6Mqne5kGaHbNz+TjaIBlU4lDP8sju9Jv7oCQ69uKSRoLCHy/lPnEu9Wdlc2YeLHGKnJ8w8zZmWhO5dweIe9ngAsIdr4piZAD1BkhIxTiBrK877Gqe9O6VhNPAxolCrezyecwNzsrPyxWJIFNUxewc2B3tLte3doKnmrdmZmuWlMMd/p3fT3zCnz/Rz/iVWvSSHpVselD8uWfMRoaUbOaUgFxmtXt43N0UAJWXoT34tHGUnrUCOv+FeOZ8iGgfQ0Dj3QA/H4UJJcCAfHVm3HR5eyDCdiJNhGbP4MyfCd5HUMK+d4hQI5r8qvjLvsXAUXcySk0J6SxtQHIeWDpshbkqcVaX0crkBDWhxoX1E1gc4VI7RKF029DmlDj1TpAZyOqOVWmkQJu1Z0Y3f9+fF6WG3R6t3Y0D7+EuMKZHHlVADZtr+lKLvKvm798Xwy6VHjJW28YiuzFj8YqMMzI1KKCx/sdOTUxszvJgDTkFD5VQK44LA3hg3JV7GsqOy5+6bfJTwBj0vVWND8nu6WBXI8MRuPtHlx1HtG5mT86ssfVpln5cAO+flF523EeXxVXGCxrxOKUlFItXQkY0bdgHE6B46zldOtAPKg0J7tuJiamRVOZNSSY8B6xwKOheSfs73vuJ+730UCoZRDWLxIH62xNXvXvnHh7r0Y/M4wMGtrXt5geHAnrxFqG0XACznkYQKjxh15YnoapGzr476yeDs0fmOy28de7RqQgVwxLpEoc33ECp0N8D2iPt222bsMpmG40gP2CqDcJ+episkdTAzLEpT2q7nqfNxo5Z3Jxe0oYDTKfcUFIHfsAHQU+HVxzHey/LVneJWK7FyUKw01DnGQLTt6MfWnhh9lbBz28IwFUmwhUAwpCJAYtI4iBx9+zDsdKd1Yxym+E2yP0kE6MqDS49BGVC3/SSWy0kQJ94c/gV2syIciYWjdZ094Rb9lhyf72H1vO2z+2yW/HsdD4vnGpu3ZvvlYHiiQBzLB3i1rpuTm+0JK0CapXIHUev1QfnezXV05c9dJQ3X5kUDDXY6U/qOtRnRgGaEkUzxG2h+ybL5/WN7lKFH8nkQUwRqFFJHguHsAoNhy579G7zf2x7/vj4/9JfJydksDwZb1oCaZJZ2dVB57hJ72WOJkA4xcFpEx5FZ6yXD+x8MCQVJh2fgbyRl8MUIbORBhdx3AazUbEIxYvB2z47AM03MaDGyotMZyI6yLwBmTeJflefxx5mzXLTswfww2LzWKd53hY5IhBWflL7XtQggUw6PEc/W+bwsi9b1BO3So7BYPoHyuOuQAmY1pJ73Og8QC3KBgt7c/YRHG6TzXJPm66IPCLlt6R2Jqf0gKK8w1XepknICebrGqGS+e0F/ROL/ptXf6I+XaArVtw4AdwkJLwHm1Gh6fI3ukAuXhIpvJbkaQiCu73irBW82/Gu+b130S5/vNNDAQhCkZMIr5cbJXXP+IHa9hL5elT5UmKmuP44jqaqeNWyqVlWJVOrQUeAxlbEBPBrbEoKQ5lgFfXMfCgzkudZnAZgs0dU8mzgOpK1ZVPsoetr3Ii2av6LBy4qcbxoa9jBzZqSBS49IIovyGRmzoL+eOwxgLwaSiHbP0Ry8fhsvq7TAPOoKT+xQ0ahwtBld0VR9ojyYTfnkDyPw5Yvs5DMsdUiBXGdKu3xCaGZDiGCaiPIkvCqEPvOHp6ORc4pc2vhNgPdagv4j0EVjkCq1UoWdtmwK0u2KTk+JvqWQtBwdN/IBmcjTgP2Fg/XwyH9Tvdvdu8llEc+/ZXv5s8RkEHeCi18k80XVey8UqOd9F5rmrHUc3lzDNeJBj+boQ7goxpAyRtIyBy7mXMTlt2l5sxI3XhZLyehVzZS+fEsJHR/wae7r4CZTnTLNrrT5XBRIZy2GbsaHjOGBA3jUCgp0NH1AOIp04h+VdIQY+eu6r+Sgj2ybjXEUwg8PheJJpIJ6Nm5unoo+uskb8blDdhppUfzV5M+MzDye0DR6WUo/l3sdxHHNUDyuoEJMeWuox1+UHyy6vyzIg57PMlYA+8PvdVoPdrgYPxORYui01LJ6DCyEWm0WA//dcfOKh3XJle10v4RLvDuNIsGv688zPQQh1uSzYUUFG2Pk9FAJJXlu991JBP5w4xFCVVYeVys7w3tExWPnGXRpHr0qAjSMzc6HLLqWSpvLLTwaH1pOBPAHqMxt03zNNh/BWfdyCWhLus57zpyhDVfSU2dFzapkdBzqUv7e+ks7PN1i33sYPK0TFKS5EvzPiqo2358EFgejY4kNRSlBsgTAxzyVGlHE40fJMmEiMkKo2b3udydks/YsfAOzHpDgJdFJu3bMf+hW7akplE1Mlr2/ylsubet4vaukgW/Y+I4DHPoP4UBHhOIyOJFILUXJYFp+AQ5ZH+lkuR48hOt6sJS+aBb3UNrOOaax5jx2jIQIS1cA0lLOFI/Xt1EbwoVl20me/FZy/aZfy1Ga5iMDxVOo8kmczl+rNPbRhTuXTxqL85vnhpVqQgoPWCcF9ak5I09GaYy+X8qguNvj63SUSs1CCr4uecMF4fbJDMRxLiEkQHYZFc7KJh2/HKqMcFZUysk+XXcRbTexducycnbem29/zVgfaDyaSjLtVgCuy+ylkTmuIErAVzzShEHxLr7UX4J7W0L4v/dAU4AuEE6hGPPk0IIwdNe4jCyP5lmgGprReOsQLJUp1h8QnbSlK1U54COjhSga+Mx5x3aebZuFiZT5MRWHpGUJRn1UUx7Y8P4dcv8U21L7VdvozdZLs4L2XNGL3TFBoMuffaowvWkbynUJp10BAQNCdwP/wIkwASwbjKX4i3Zt8UnVdSGq+Y2G7M1ZkBUany1/KHljPrlf4/ijNxhtZCbuQ8NhdS6RWUOW/MKElULGexiRBoY2RYRPD/d35GuXK7PQ/BIdav1c+8F8ndfmJ5H6gP6F0xBm4Eo2ODfsez310WB3564owidtrAdNep9NtkbPaq0335chby1SyCZc30sDiNnmXjVth08XsrrH/KVSCkJ9A0yUVHKIpqLhFjTvTukCGFkpsQjxVQDiOadWvt0r0uAHwUCl17w7+otqDfTw8oMcrp5ObcaksMMYGnyPYQXOSBcFXhuBV+gEoiXvX2DXEhKVauOSlD/JVRscaBdpX8w8ukKC9khEPpObfltfRcSyFSkBThFIBJWbkmB4mjLR/pFGf2TRmZXigAurVvvxhqV1UzVLxcuHJbf9+RI+IBCWm1q7zDSzAs8Nh4X+sQX16xSHmnxATiczZGnQs4KNuH3Ah5iDnXQYGVYvh4mDjD8KTdB0RuRTS0kZWc8vQXUEA+Ggo9FghH8pXu1ka8+yJf6KBYhfbEEuwRpC915153gaOtZUJ1K6n7OXbn0shdj82DezFoUet39LbIbw03I+XCdEhOP5yTc0qRQVC6PJdD0w1TIrII+7QEjMoT7IQRkW5f+QtNRwj/cGcXzcjEsgvTow7AObqyKvr+5daXCjIayGaj+uC1SZlme2fvCCTVvKU9V1rWv0mokeL5DyEs09vEYVp4Fe8dKEu8rt12iadtYCl+G/hDAWBGJbaaFTrSJhVxGAbhw4XcUpFjlA9jq8CdInMWnC7X47E6H/6LuITa7fNO4UZCcd8zIEWhCzzv8mYExXskDb1nWx9h4iat+iFqzDR8GarUmWBMw//PCFYjzdKY9W2nUCbnsetHDxOYe/TD5SBMoKifo1oX7dZQuuLzddTCpUM4gj+DFJfcRFLklBKOZ0mY9EzbQN151vCmupwr5ceoIpo5l9I4l7upWCit1okcIgi8c+8Hrfg3JXqsjCK2ka32iUsDURianbM9S3gC6dkcSS9tnhs0XZo8UiWA/EIAOi1hMJebHFyG/YjPC8pyYKF/tHdhXxAw0xDL4TJ/PJIQP+LUcGQjy0mhR8rOLFGm1jJ3Tux6AF2DHp9pRTOOvWPMv7pDF9qWsi1+Scurz61zd1wmi26QtJgBfu1WI7rAKtJckSfQIICbeENg+IcY7jy1Gyiy67bskqQHBzXXsjOY/Z6uG/bNEjmZkyfRbc+N160UPiRI33/J5ibOtacen+FIxCzTuQPWwj+Wrs/cIudWEZgXJENusL/u32w8KuvvHSl+Jn9gJv3xrYxFdpHSyTdTzNeolp2NDfdV8ktigGXcQ/MpgMd/eN/ETk45MqehWIz6uWnMTRLlX5t/S1iAFW2eDbxG9bfqVWtKkU59NmEEixz1OZ8LVYGMEtFgtYh65jMxR1lTeN0rRhq7yJNp/EFAIk+LLvmwc8b5/qm+TdXsNK7W8OMrJqqTZuIaXBsS27cfCwEK60exsuIqIXKUq9jmsQVyUgROBmSOn21morYi4NW9Z58aKLW6PZVEFSDU9dmWr+D6YAieisVgNjovd2VTxJ8iK98oGTioK+qQMzSD6BpmsNCT9l91p8xywtIax5OM0jmD7BravBMNEO2U8UEz9mCdaVvgwhTZzFcmPuTbmgqiU9lD1p7yf/TIxnNffYD+Czr9d4iy/xBstuKBa16O7iUNgWEPopF85zbQEmjDKW3jKSzX+1ZwQbr7k7FyoRd9Cu+xPDFzWcVbBygl5JtogD1FGztd+K7MSlZhCrPm4uzZcmo0PwWX1ftYCCD/dTzNpYlHd2Kk3AGadGBlDtt12oQP8aq9dG0QZ4gCVgrj3isQeMTy2HllCcmi1eANFb0BV+FIb20wTBmT5K0EaKhsxZdatbVXCxg6cMiWigO0AsnbOAWUYP3tiJwq0QfQMnOE//goAFOcbbMWSv/LtWP+JQnsG3oCFVUDWnZA+Q46pMdWDemXumClfCBUP8rPwn1K2N+ztn3x4Ag6W23dBqGda1HjDHAXnwOAaRH4FytrN1VxmMrc+v59VjNUsX6Rgreq09if3njNlH7WFsy8W1qU+97+gtlNbvv83in56gCd8PB7kSbA0MZpzwE4ht/f3g2P2iarcm1r3dTktN3XxIz3orx1QlU0iEc3kzyQHHmkQcfJmPYmEKVjxl+d6jVq69GnssUn/rvgqv+BqZqN7LSoPEmM3hUm6EkXhcnJKWpovxe+FtGxh6fAP3EgUNsrvhgvcwip/n1sAQCmGpQf/2RmwBI/2sQUYy45QK2M3MPnMY0BjS9Oh5Y5WEbqheRCdhsVfx9mL/RzfENdl6YG4p8qRMcKU4X64tASKLqxflys5/3hQvuCuHNRRXDiwi+dvTL3W9l8erDaoYIxzi5ZNR6ndFZC1MSzJVY0z7efsN29zH5Z5g6+DdLYuGDGLFa6aLKOo/x0jkHYINRrfRJJP+yD7tYJMWs/ec6eCMdQICcYC2vnChVFxxS/MYG9wcOEDi5NCFiJlG/ROc78LmDwUSyDJ7StIgcgwHysVCaX3VeYyEwsg7wxnPPpuyR9ukVscdT21ETo3E2qslQ0ueU/nHqzLTMk7ctKzKyATVYhm1TNiOxLSSgPVh27yOPF6HwzmDDXPPlF2nAGKY3I5IoO5WOmGKXupvaBnvYXu4pm5bevGlmn8XCbYbWtdsXU8NRH4Co+iZtpFQvklQ1OgJmKkmZhfhrs/AZbBrRxcQ0F2y3GncxsIgjvcl5CDT/UtHGL8W1eBux8U6zsaUgGghKbRBtprV8Xz+72fExtLYEoe/hg6XOBnY7oQNsfb8oisnGEqH0N+B/YD51KWpPJCRwF2ak93a0NXXNHaSzJH+q75gk1jTcE12ftOSao/f3xxj0krK9qZwCH0WL+DdSUJ9eoYkJyVDFwi34aeVyfUxz6uc5UnJc/j/WkOfQaUtXxtzyRFUR7BcsO9uqKWAof6v2XhmIXJ8SnAPpB4tq+JgkArfIZjgiButkeoT1XAKdQ1g6uSrQo8RdzA6rfu8u3k/7J4am3ItJBCvKm+hM0XLBGCTAth8T1LZT0K+JQ9Ni+see50aKLKWDrdIkTKRSSsjU9eg/D5yaWZano4vM1XT4SV/n+7SEqnKmLXIxHtw0HKkyS3xWtxhcJjrSxILJX8JnCnwDaP3G0DdclBd+GvoY/OZPdigcvkXzsPeEU/Vbnyyn4g8RTD7UdPHbNrdna+9Vu6O0inAst0X9FJ79bVTFZFz7XSVb2dc/WJSOcRf+E37D/nvWGkadcuIv0bHFtyXcJe1scc32qRWAUCrFV2YzhquivC02xkYPUAnnqm2FxXRAYYqZkXai68VZu0qVbs+Q1kIAScJPeTrhpsQ4GjZhVBDlsWxepu3LAnPeX3AFgAItXL8AediEjnic5Cc6VO3LSnb+CuLzvTkOaWrsqoZRk9+PYl/H/J03AKXPMOmVclnaUZD5MnPGzu7qwY0aMi1qosz5f/3Mjgz/oFc9kDy/cUE12iOYjTYvscscsxphmMNx6mE5wAzPlIpzWtZ1qh2dYATautliHWvT6S6gC5ne71MQzYfGdBVopZ158Ol3AejV+DApOUhK4xmEHwmHlv/4VOTiUwTO7r3Agyps9smHtMVWD5HFivV5xgAsCC6dkbHr0SLdddOxi5BlDd3GLPR4rZkUpuMuOGuNoK3OrVFHqgpe0mJ7YFyERsBIyV+rkAc+A1Ojawkx2yyMD4Y6jtK18WWVxpb3snW5KHXibLOX74z4Pt7jYUbgEy/WqTos6rKU4/NXIhGodWIkKFuCTFaz3dZJk1AShAJGAKFaBh83T3+DXb/IknPUTsDNczhZb89rzZ1Gjedaq9Eek92d9CrHdnTlE9bGkm3YR7jYmJvgjMKFNVKYyXMcVlF505sfBx0vKCppuQhkJU07ItO6ZGAEBZmvbFIO1TWWDepDHr+PkLFJGbb419W9NmOt6KapE8Tcb/+PLDfi2CQZ1O40x7UNWWFQRIWHO+P0gowpAePmQPies/qtwme5Jo2eNM0btJh61YjXFpy0zwL+tKOFmwkSs5Ak8I3o8YnUIJvQvLwxR+UwWG7UDcdVPVd17yhWwjF1dmIIejQmze+a3u9jBeqHaPM8Gyi4dhrWzucfvjD8p5ol8yE8BtE2ma1J9hANBiPD4dVzdYBeZeCfhmG6W7W+kFf3bJGicAIf8IRk4N0qzssHnCGYOmcmJN+QEj3+JwK3E42dT4UfUN/XWFXysKofCzd6mWzSk3PVUjWO/Z7zrtghm7VNd366XbgWnuSgpvOkxZAOnSneLI8R0mKqwl5EZkLXOmx+Ihri/sd//VkkdaQQhfpeZQgdMRQc/e7qf7hAcztxdnQcSENRQPBXT4fQklA6TaPlG63LadqwYGqzc0yhg4RCjY5QgWWjX6oKrR1AahGogF6P0NfnE0gPchdUrFL+S8yNe0OB81qyvml5HAMG0FJYOdIwJtXPexYC23F/CXbDz0DecfVkiFE3z2ZyrShdIDDqPbNwp4qdEFXyBEwiy1CfdMTsUgEWoIaTUEbk315NP0IADDZcN8zr9F0UzS9LrMyTzavvrG13IWFxd3qslymCNuS33/tdFqlem9LP+mU/kFApkNNzPmhBaQ7WzdaF/eiZeeBsfMD53QSPJHjvozHxZ5+ibHv3pYLP0Z+n9oLrWpojUo76LgNJezb20+AcGm+Fio5szXGgSDFlkOVAdvT9SNSwY05tiBusabZzv0wRR8vVSD8ExlRVioQaJskFU88xoShrDox4l0XL43Y1+mFXyNZF+Y/1vlRq1MxQAoKs01sqnVX9DS5jt71dLRd36cNuvwlEMAteEvDlC5Q0+oiKHACfEm19zQ4eijuXf4l8zDo58t9hPHPm6szFpZgGZ1hWWiFo7Y/mqlglG7LpNqCUsiocQkbXqQtJbrxVprJGAnAQoF5OSTcBKg3Ev5It2FLQMQXiDi7ppEajySIw/g3S67vZrkFOcHH5UdyxxeID4MqgX4F/HDfnF8kDkGHM4BPMvkaP9q20XscwKD0VWOU2GvM75NEhPk9If/G4jNoJy2zfDCTH/Dz7LWjkUwjkaAWHQ5mRweNt8t+EolhkT3/QLbeGfGEV4z/7PYZozlYJCe5Z6nMqpn0m1OCKGU6eQmtJolLynPovuGdZNNa4y2yeUNY2rOE3F+3rUnDdL0LabKuoIftMMo9SC9JWXCDQVdVgkCH1mSY/Tg2D87+EouBOIYyZVCrEt3JZMWMpASkI7Y7anNHlnNT0Rv/URG2eVLwsNg+kwO058pLuiuyvHyPg88bxKMFv6wR6aD0Z9SnszeYrt9SJGheowu4RdRtFlUnXsf0wuvcJ/ucTeUfnorKdm8wiqbw/D2O5w8qMvKT2j8hepkwoKd7tcNioD/HeHOXtpC8Guby0PEV2+kJY2R2zCwFUEkVNb2iUOsc2Lpr1lAvB8R2d4bkTuY/8Lur/theaZcWjYVXCqbCxxxxjwdzphyPZI+iQWNDi/Q5lDhGNvco0wptg1uRYaOOq+uG2vRBuercBWK+iirhUFINXpcprjJdZsp7HLnxv9TsIta4h5wsPq+r2KX2nrDcssLpNAQvc8tTftHdOdskdHBMgpip8bOEAa0jL+OSbAFJrUw3EIwkaEWFjx92TLI8LUQ67B3rvkikSKngdDdPlE35N2BwlvjF0CEW49gpHAfSaWJTW/XOG9hLBcaUBo4EGjDgZibgUmdAY97SlvEUxxc4x1hBb1sM4QB7qcPRmBokz2DyN4VPbxzdOLU+jHNB8nzN8nABYaobvzUmprkyqBOFSrV9K8phiVOgCD7aeqwU9MTVVBBdhZJeeLLGS/3wfCesWMSWmYn4JPvndPIvYHVyGDQkdr78rj2wXncQ0QquKveEIgkrMUrIVm23jCP/L37Pox11kvNnUqHwnc53NN0oJ/DhShNIRxtyiKciOG5rHbNFmM+z+TD6BAe8jPM0AkVi6+O1IpunbQuVfiMXJpz6CNrmK2yHwPtX4MlNNNZsWpf6tgW1yvjV13YbIEMEgFv0hCeNo4Tm9YClV/Y7PP/4PTawLYNVNZYRiKLlTgcvQmynJUiyQ1bYCwIa0FRZlHE6yxjxJdKy1Ymh+FeSBXqerwolnDamqeW+++OclhPjxhHZ0h3aIz/4DAglXdbwb/W6sV2AkIt4NM22M85cqY5S0WmKgLwPHG0KzlZzcFo1OOlSp/hHwoN++VZ4wTdwtj6t49O2TOJdE4DbESefFYuqIoy8/ZZO0EUu0HzaKPk/QyECRMMgRLbVGLx649TGjanz4oG/kPMuHnxj4bw1u4gwOYCCoK5/K4xyKCpx7GbZaeMI9LcGAp+BGutYMY+LiyUJLDoyXF3mrv7Td7AuekiZIFhIZPcFSuQ7A7DVuZSA+P0PrWp/GAnruV6ldq3i/l68mPm7d5WmMa8x9rzFSZLhovXqSblBzRHwc4DVTE6sF+XlTNmC2wA7sNSdeuu9dUTy5C54pbriEavi+JSjCzhlWOAe/tp6X0F6K03nYH1voeSiXCG/oTbIR2bC8jKoUz2fgJkK4aFABbjb48NfFTggEU9D8l7oBD0fmBzkDsQqVyqAB9lFAt0E72ZjVzb2he0PDlBUE5uUIApIujOO6lNyvr08ewn6tnYqfo8gHON8cV8Opb/NAO71YKX3BiQ1AvcthRj0UzJ7NXdXXMfzLL0KeIwFyv7GXvlL6wdckDVxPyV7W4WlbaSwqAAUlesUIUm2S4gqEPh2k69zrIr0bnHGI48XPG3Q5MxMuG94asMYFHSgJ5jjmTFPltIvKVeOlV/olhnhy1Xs8Jw4zchwJzzTSd+nJe5aF17bW2WDfcrbzhHWj0R/3bQzEDSyeC8KhmYNk35wFH+KPsI3Rf556E9RSIFkUjiR79oB4hSww+SUy1ce6kECeRB+2z5A094ifL2CgJCGiMAlwukhgnsLEysrR3OY+PCpkGGRfK3s1luwHca/aPT0RM3t9VfAbChKcK6jlWgPCT6/GbWPsCbg1DTm3TOURCB5cMxcPpAfm9RP2L8Pa3I6C9T/tPB7qx41mHfq8/5IEeiViPd1RcMAYA5q/5b7EOfNM9UqAKtuHpXJJ0OcVzMBP81MDK++KsOPG9x0CyoMTtY8l15D/pM48+HUYz1NHUEdBDdLVrlNO9o0KWrOVSWT0Lp61yIfzdf5ao3uiATUVJSrzvVrbIwhfEyN+jptA5jX+9PG6xqT9XtH3/Rj2y7QLvqyF3RmKrPfsHvMcqE4O0PAxrgh65S6cI8ZEhhtU9J87AytRx7idl8d4CwbF+MMSrT8rtNRzJc/uEZiF/ed6o9Z85C9vEj2Jsw2P/mvZaAUbUH0MIMeBEhRdQhJlSGRaPp/UULK7pCgg+GyBUtKh2L7lx69PQNcUFq2mvrudUISDzELe7GJESq5XAw1H/hEUb1bGZrJTC0dhy8FpsTm2qult3wPiP2Mg4y7grRxVpCcWNRFZLH8PrOjyqRyWJikNqIaATnbYFz5lIUQmFmKB4JaDQUEINo/MEool+IWsHxAGkvqWh0Nb/2wOspVUNPqwkQWc+Zc5h9tXckOg+UrYATqBKSVjNnx0QiA/TcugKURtXT8PzqxRie2yYkULyZlDEVmRmMP+DxQcgTBl9wowZuKsoGDDd9llkA9UgDUZP956giqbFYvDUNjJnY5Ds/ZYakLbwYOZ7SzW4qacrmWfDHKPJcsSuFJs6586wf6vRRPM78VUI6hQ/DeOQBOMhuI8tLEd2avRyVCr4VhU0yWj5Sc54AppBpjXxR7gPHWlCDkqmTIxraBYrlEAWALwblBoiLHCnS9q6x3GYUZ7riImkyVwPvS7Z4CwnH8Tu2T7RAxx6HnKTQa+l02YkH9VkItUXlhwtIxxPPFrqOCdRv6ta+iaL9kAM7yIuSMmffzrPZn5GNzbYLo0UEXipVW5uqZU3ZaG85M+NqVRR0MunvA+x6SYq1NWjEyntuOaJi6upCnQ0ROb0TlvuUqLhm9Yw+pHVFVVIBY1I9Kx613rQgmqbCSsh2jCCA1pK5Y0e9KWBA3IKWyWMTtSdW48zaOfgXqoPFmU/Kz4FZ+V2s1jJGmhLSdd93SG6qL6N0ifLOs6Y4ZK+FmYmMMAbj55MkIO/EInvx10UDFnWl3ZXsNzyxTvgOTDr5kpmNTfNAkTyh/mQTFliA50viu0nzFYd5nuENQjR2sspYKb+dyPs4f7nXxbUl4QiveHdFsUMMpQ82+wC8KKy7u18b+TbaL1InVSCiZlhKpOynFfLqj3K56Pg+w/WKxXmb20yWTt1Vpvvzub2nEIQGdO5m/wGOrGKaR13AS3y0HclxuygeTQWw1cfPZI0GT8NFuyDzby2I5O/usTAES7BgrAg96d6WjzFXCSRkkT+svVpInVi8HTGuN92iNjMpjGHJki3khu9c/NHUhG+fDSFsANtB5U1iy7y30jeNNgouKXXhor5//q7FzERU/4YVguOdMjzPOEHYR3FcCIuHIKm3uGuE6tDV+mu7GPnGxS3O4TVktHsorbTrEbw2ZvvnIUOO6zsIAIv9RQSGaMXc2DbjS1JnT675vl6pzT49vIJ74jw6M6NQLH2S9L3so6Gx/2B/zYnwQW2+GPno7cV3LoWst569VDDeziH2AAt/LJ0su1/wBWZ4Y2UMdyQOUoyy/sJnxuIS1hk24XqXAiw+0DI67FvYj1Gkbk4QW62RlnrwyBTsx9Nhk97W3Sskx+btxMx5AuddRRGbAe1wW5fxlQrJYPkoqPf7KQZ57ucU/s+edRw/CcJEwcenVI6pw6G9clcnWv4YhqGs3wg9Zpo/ipyyxaEHTnAwukOolIK6Ht3b0EGEa8B+83HCCkS/xo2zePeMA37VSav0vKVqKty/FK1aRjMmroI66Cg6kVFNJ7YAK3XIe/pi6zSaynPzi8BYW0xPvSABP55Pi6dpEpUyjgGWTRwXmP4Ml4LeK7nIajPgQZCjXGc/BFnTBxpA9PyrMq3j5kjywWXjli70YWP7fgRX/ik42PIfVRemuP2hKD5IGFlmOpCSk5ysrjV0Ha96G84sgv9N/tPlnEb0ceok54uJp8bhNhqxq0ySpxtBwcoetiLdSm1SHHI+MRy0pGAK1jFa2aI2uMLZ19Fngbe5Va/RxWOjCeVD8yoHXzq1qgWC0MMzD3Sl/AKw3M0BUPB8P+EzGwbWAs7O00D8ZrkwLyeF3NYX+sq00ggJvRydnLKC+ep5w2N/YN/Khzray52xy7hjwDVOJ15hdhvhbURr1sg8cUl0rPIemu4gJX5AIpwnzAYxqkns48WUbHs8pmaLVzUl16Z9BhjB105hZ8rWF9bAp3Fhv812Y01J3+GhXbPhntplgEDxR/fQPlolI03hGgQ4M4I/B5S5RimqV9JWkA8gFUAED+2pZEt7QMWq7UPgvXKOk28P/ARB3auKDSNOxDCkbw9OqdVXa5i8yEK+ij85iHxMUCnoOXU6urHM2E/G4+pubkF6OkQp1nYnyPB0d70QO7ZvsBk9ZbXe3YZBLSyi5Dp/FXp+GOeOz6MFDLMSaF50j4yDJClU0uGDjIZcSmmepJi7cTeLfTwuaFf3SxgQ/6BctMNvDHF5uXgRRafBGQqvSYo6ikYY3J5X1H1u7EhblAOkZ/R+KTUcMj5VvsPi2v83874mYyBmMoPj1aT38R/lu+U9e8HhMwDKZhkRONoiO7UPC/TX9JFfDkCrU16Cx4m2FmXBmt9Pbld7dm81/pvrSSN/7pKCHe2+9ExPn3FUI+9yPmW7EzNjeTp+pBSN5/HniipOtclON1ckGYbNiwPz4YBGGGeCAn6sM8aSyj7Ywbk4eTKDbShnM6PNhD5lMbstkCvpLuRa8TmdrIpCefXQt6Ojgs2CPzNiOLf3aJ4b+B34i3Y4dOFyolsv5MvefFTo6/yh72plnox1caO2yAx8PJKhXSsad0QdlOPoqmLwhq6I+NHXL+HUepUKANjoSeY9NL+HzVn2SRTN2xv+cyowv8068nx/i1u6bDy1taaKTLfQ5vsqVLnM3wSLxmtOJLVmC/z3uHG2Gkk+PMHwstfBBGdQQrR4aHDaenuEtNPjz1yQJ6zLF4/h4SruV74W7gtSXni+ozwPhxiR8y8SGX7qEJNXrwg3AghZaPfDXwATi/aXJqMgABf0DvFXfiKqRH79OHV1yggF5g8SpTpvbsFtAWvKBO1r6lgJvjJhFNGFkZp1zV/sPCSGbgFjaLsfM75D4fWFL4okAbRpKzLhrWolpamvtLOsYHWJTQWiUeH2HG5garESEVBnxgI7EuyYqVW/p+DU5Suwt45CX/iZ5LWBQMBSjqofpRmay0m4YPgyVLa21FMcwE+JfmdAj8VyDSfVsoyYE/5itQz1cqb0sF5gq7VIr8wBuPPesp6sf0RkjQO/5jMllLldLB0lh+rX3/UwO1ou/levEG6BaGonKBouCxsnenNhEjQl4MNCth+Plqyyrqi7sB7YC3/J31HQdfnSJRJ4kxeIjl16SSkAgjOCoHNS7apyvzWLAgstvS83EQkq60//MD6PlU+pkQsA++v5Os/QSqqHJaiLE+nFVNkKnfGDAAv8LWgNFcPJPknSvYcCpQRIvZfcFg4yopkDV414lDVjZ8PiGFMf/HTRqyhg8oawZRgQkf7O5rHtDjYsMO1ARnClaI6P/Z5eVxVpzOEbP09ZkpNav7X30SDkeGQPQuPLfYfCNAuD8ZNAVPTtvLibuHzrNiI784RCkUYd/YBYZ96lXdSSUXtuyedLhNkYIT9F3C/ETRUYcIkVbeS6d75qgtpZUdr1IJaKey4WNyLTdLIq5Ryxp/R+ckvR/Wn368cJKVt0A9ymSSHHn+citriNFAAKAJl3iljdBktxwgzmJ2AM6ntUzaRZWlpkUyPuVeZvbhUFzWlqTOkEy2XHCOm/sYNiQoLvPjwTSVlbP1Pv72V4mRovSSumY2g4oPu78RWS0scxkdKWNYwsu8UlbGnrLTDjbP/0ScWJ6KOoCC/s0X7XVxyHhn1M5Emh5DlJVAyabepR64PlFCzvabPCZbwHyOHYdFL2cbKWHIB+1NPykGqEHum47OqNKb9JiXPMfuxrKM1k2a1kFdOGND9gxEwB8sdQMkZFdxiPW3lP8lt0T23mTJ3PeAuVkLHVTPc4BIXHTuhgAOn8ZllDrnoN/owB3Tpo3BV7W/wx6Y1MrMQly7jQ73RnRW8NtLSj4O9Z+56Kfrqw6Mz3JJhmzKMxkfyv62qvsRy7As/Eueha/PxVlTR6qtzP6NkaPlmhEGnqxZcRXeDaT6oh+pSlwPHcUian7F+2MlfQmxH7E6BMA7vFL/+0LMbfD07tzWYUfJVJVZHDj/3PlHxHI6EZ8r3FLu8W0Vd8LVSu4zu3qLGXReuYRiDP7xWil9+PqpKJ/+5fnHT6HZJaxn/qZeYMYPkfJJgrCu9spZ9MAl8HJX+wLoph5MluQ0KORrqddSj3Yxrh2f7y384juzDN2KEG5WbR2wVrnRO69Skv4f1lLafl/nrXmmzh41VITr9luLkNhD9/S8b4HAD1+rH8aH3w3YdikzJv8Je9a/UMj5chMjRAW8V++CddxuoPvjMQf7Kmht5us2MyPHcVgK0lJI1eVNk2KS6j3suMpbBis04fjr4c/eZAtnEXfbC8C/al7JRLFjpxlqmt0s2M1CTXsaSB8oD1QQL1/i6WmfP4Fm8lxvEHBCItioBkvtDMBr591DIZ+Rtrq9JhfDaD4DpydNJukYLe9TWmiQNYoFHDIGk1aPSUSyHKRJ015uszsLx1/LCMMHNKaQ/Qjel4uoMir1bHTpq9b9sj3OQLiOHCW04kURcPBbcwXSvN+BjoQ3acYC8Gp+7W8WkdyvTSXob0RBOo4/hRz5tCVfHmwic4fXszGoxXIz7SdCQhTwQeizFaKZ9jdiAm2j/Y1gXWBpH4hH5058QuU+biKrHSjq+YVGN3/zZe2/tJrerc8jSL+c+C4z3RQbWuYoKHvUtiCXrzscdLEjBCQZ63xGywgQ9F+61aRxZ7kLmLtlRN10hZMx/LcjY50ZCei+Twot09pyn8qNdUmItM/H3SWHJ2VrfVf906JP9OarMHGXEtc+odj3ldm4DYwZiZ2O0vPqSlRxgmzcODwzQeRfgNgTnUaAzGX1EpNw4yxdDiUCDg7XKK6pJULvIljFcGQTwpILH6P80IsvJYXxjUfidehrdMRFrveLDbTv7+/1QuWvpse49lusXzHEkApzlx/Ur0Tfv5M9r4pf7kCg22AZZNntz8/YzQjRYXaGIDViikIIfPzUy2L1fN+xWG+aEUM89vHO9jDiAwn9NJ50553oKQFBMraQgtP3L9YMoFmoAtPPtWhCYhp+yWoWI4WEhpwpgohs0lIb05ekylaSh+w55evZejCTY7y5u402FOdxkaHfo7Lzr6dWUNWQG77oHM0W45NpQ13B48jrK3kxc9/cOoVGpmdy4I0HqXoYBOjJb7ss/A9+1O6E9wKZKZnMYbC5AazIPQEEQFWDChuEZGOVuusNngA3AStvYQd6/QUKixtMKFDCj0IURuyC/C6Z3iCcO4PdwsBZwGHfIrjSFp7WDH3/pXEBGD1AXtWqujEvMvUuLF1tMWha8YiM2lcnfljUjxyRgDN7l41Q6dfRgsY3b7Z0OSiY78pLfQZpoMTvyTKdeA9tKztSy6bf4ghCQa6irq6hOjvitQ3HVHkdBcXcYEWGSaZS63FSgh8xyaHkaVz6Vdb97cw+sI93yc+0ChdEfQpptbj8eBiRfFiPrF3tso7Ua36MlFO+RxSA+PD1nlCX1di9qqTivGm01FkOcpOLrpy44KFSTENbvQf9z2Xrsauzf2g5jA4uY+qyVqAI7t7nW/xrT3t8mdv3yY0Ai/zCVcZeAYi1RCYnkwUfcd1YG/jXvr76Bk2PxDeXZm95wO18ZZrQllqCcBbaZWbceL7JrGLRaYoHeh5QHWNQMsKh6kSyTy+GD4FHEMNigaER95Z2w94q6sjcxzIDanpqcYM+O7NMqz5JVdaOoXP7lNuUBOF6EhMWwOAbpF8P7f7uOuZP5/T1pfON0cS1PkSVGxc8FYa5JHyROsM7oNOIwIJcbRlDKdyKqosSLAnFAjhslytZ/jIwizumYLh6dENbxqXV2ajRjKGz9GeO/AEOiNkT38HMDIw4jeSAxqFnwT7lahOdhzolWQa5a+IW88C1L4hJmdPmrFHhyS34cHRuhByAP7p8pPQ9a3uBuYP3txkI0US+GFB4Ncp0hlP1SD/7IvaaM0IJ1TRNKv0glMk8zGnCfgWKXIzotM+xA4prmZRmZWdCaFC/6QF2TeoMcljqNqwH9q/DJL3V0NsaZVRKaTGtambo2tiuBp50yLsrtNx8KZ+FmwwqBrvRxpFRyoNgjy/jrVi3eOawBLRhs6FHlV3PKawOpRMNUyHwZ1cmFtF66JpFM/j97v7jEdUYVO7xfPoF9arCQER/YmSsUnq22hilc/lS0OmUTTiYYmpOwr7+eKBacfF9EEUyXj73ziainf7fU6pEI+D64+wxXrVZ8wpdvT1WnGpnD8PzU0dzNB6fwdJCgzQEyHv8FuGqpjAOq9qeun34VUsc5Vxn9fOf3nDcfK0QYpVYrzuR4Xt6c5Lc0ZfhilPf5kZrcjP7RkncVMfgZlEfwysVs5v55255BJUoYDsZ/n9ZWs6aN942l8DIqWmaD3Auj8u3LL68ht4zaXykBmxeVSy94y762WSDhObsh//EHjw3itC4/V3NqG2XSbK7lj8zUpAX756CotN/Tj/Kc0KKaSYgmr6gukh4r1HOFwM9LYqqhfiSqHN/y+fMf5vXM1iF0F1/7bZUUpg5dbD+9NeW4zkJ/nleuGqW3xJDP5RvkMx/ONxQdcy+K0lyF9UytnlO2sxv/oZeUbMzkQY86IC8zOfvzSWbktLH3fheLE0bAg4/5nn0pJyBmHWpQDQMgkjsGmGNuaOYjbRdu3lxh+8kaDDTOk/6rPLDtxuG864sJQ3+2cxfcUozv/i1pbh8xkNMTuME5F788Bw27g3Sry0NN4Zt1/HldTX7iMRlNJAuFv40Ry/H96j/Bg3Q2p8cNE6zhpmtXYJ/oIdOj3g0OxCs35HEWRgJ6PqtAwj4QsGjWRWOU2ZYYuGud86EDPbk83Q2zXLtbMsHPf3FnfgLRGobEhjTT2iT/Stjqm5IwhjJ03mwuj1Qi6JRmeg9jpexjTqJUp4Kxlvn/15XxcT8Mk7/SFdhTJ4aLO+vIDbTzA6J4FQ1RKxImwZqQvq/0Z/UAoahA2QxSFTQXMv9/Crm4e+rbtQ2UVCfQm1lKErpCdmgAJVbeEiSw/pQFBlxRnQf1bppWcN/raLUgcQRaTKdAFaNmn35W/CH2MSlPrtXeNE0htlSeg9QVacpBPhe3FQUryvJ76bsP9NoDp6EKigBYDfH1OKwOkVpOMK8mbSF665Nlayl7W9Qp2aEN4tqb4cj9EoJy8Fe90TAedunpUBSp+TSuuMGZe3uVG2wIazSPhkWlvTUXVIBtjpRbmXC+PyI6nFoeP6SsjRiV4MQq9p8WxUMV406+FZyWtevqBM/6ne6BBbYNcmmiAn6pE8xzAqce9K+rex/vARLMkORx9Low8MJJtQ9B3Y3eZLTi6ETBMSezivcpnI8unCEl4hKu+SiB4QCVSUy47XQ2Ups15E/IhB9U2uS5Ye+2y9k1Im6XVVcd8onX0ntOS8QBNyEaUrHb/4Cwq92kvKbqnnS/F2v6NhvPEr3zzk+ob4wWpF2DfiuihOyP4rQQgYaZR1FurzJI1+z2GFbX4M3W9h+EgMv3cBsvEeTlqDMUiIalgujZX93tEtV92R6b0drU5MNmgyVZtuBG11ij+LK2nN0pvHHS9XwSk0t+bwb43M3J+AV9apS6d/qSYhhAxFcy6ojnF/9+2YbJSAPL4XpHAtusMmdCI4QB2Pymokif0fALqmBPTytqfk7LG4xcW3wO6RcO3Ve+RIS7IDT9YnKciME2vK1UTfsJBo+ptUcP2T3mvpXgj/t+xocp6mjdEg8yJkDADP95rrBBW239Sx+9+fddz423e2kZ4zyR0HkJJGViWQhMnB+mKLNrC/U3UpdlaODayfoam4SnSEvH1usULQpKeEH0wFU6eIwUsifXxY4zSISUcaMvOiwfhg45vcdzvYZFdqdXtOPWuTvSdY34pK0t3Pfohwi/FFzihOg2/2IpBRFAZiUtXU7Ashew9KRJv3rQTLZULvIbm9qh+C5sO/IlbMiKrFX6J3QXSSxFHKbp51kx27Fz1r/W5hTOsUyBpTMT74anzLa6588zFEX3d0OjsXE7CmWJmvw6FuQX1I/dk9mOopX8uUakdLDnCeAfns0vNfXzQmThJvPkP5yAWEncLbdq+KZvqNkOEvk0ChOAOcLQoC2rlxa7yEFMr5O+/kTgf1OsLE/qlLgbE8dXGokEw4rZjpuXIDKv7NHDwhexH+iawNrDUm4ZDU5c4CrGEHDKCYfOumJcqxxgDpBmL9rJkRSwICLkS6MT+n9kbnohWO8u//Ed0lgZeZQZvMWV5T1WzwDeHzcLEOn9vCVM/3m0QYkYFLNb46iCMX017gXnogITmxHNdOlt5oCD1CyYFYdijBYDbvEcJMBFjv+ucwzc+gMbic6zDMc6OxzKwq41nYPvw62fCHi91gZgjrI73rub+z9eWGJrJmNLF3DNvYkuN98mKzo1xHVxNsntke2hE8N9XBzHHp+3FD03nqtcdof+RJEx+lCPKvHSG6dxY2Msg90LgiMS9bVeaT1X8nP+7bCEUVqqWFdFJqF4FzKYGrcY4qi9Y2YHpHVFWA863901Yx+7yAVo1/LbcEYf8cU5v77dx7NhMQa+g9CZhVZRYVHAf3MFe5MgpvZFSzShf3jYUZRou01Sb1BlMk045Ec5udlPn+L79hxDDFHoGY3Uxkic6PmjblfQgp34usJuqST1Xbdx1zLAlVlJFk9GMTcOhkraMcRjRqXKdcajv+RgaACqAv49Tg+kEG8nHlRhmJK3BZtFllis/S03Ik4rz5DH5RopGcTbwOCyY2r8rqguhJaSB9r2T4w5Lt1Fhi8pq4PsbvPQ1+/RodMpmEwpFckuWvdeBfWUqeIB+nchLT/JKf+uJqiurQ9YJrC3yY9oIMQxsN71IDajow3xzQb7ehn46vO+DUSXl3Tdwy8cRc8M69OaXbTIZEDhNXBWrZE2RffOwUMPv2CFhK0WVkeXzXwHxuvrgjvjxMs44Sgr+9GYcqOxvsq0cAgNql8K7AMAkPIgbGRfh3h5SY7FH9UkA1QOQpDt0fy3TiMCiPbEZ6OrdRxk5a+BgYU/dhrtS4qmwnJXx/WNRGrNxHo61CgT7mE1eXLwkzpOZvL89+9objQz8+Bk+GQiwFbIqHRf+ohRm1fitJ3JpsyNpH7v/4yurWsuLIzKvt5+iKJ0BfHs8J8gFeBtEbYfIEUMb9EzZ+Vrbcvzxu0mQm4rgcRU5rkzaPNKU2IdgvinoDQ7cbiN+v+7Ra1BWfHpzxXPSHrPADzJMxQsXcDNF1eKsYBpwDKqqyZAcbUfJ8T4iPzeIHNsU3L9pVPwl5VnQ8qDIJX786zEiH6+atcHwPrhC81u2MuswlG40lsfPlaWxz2PBQseo2AADNxSQfg2K6hybPYhpvOxFM7OqN04Cr1RVR5ZcwwWcUjnDa8firX+RxgvsLr8b+kFl8RCQlpGslx00BYZQsVz2yjbrFmLtg88kt1w7Imy84xmCdTqUrjlXp4mtw4ghgtmMIN8QVeuL2EIjNBGfDFiLnRGu5VKKjipZYlIOTs71oKnOd/r/crKX5GTFG2T5xgdndcQDEh3hEwnhQbjAMVPig85RB1c49UgSxh7PWy00i+8iVXP1BQKOPDeb/az0c0dku47dthvPdI+sDYAhUs67hScTYOS/KA6jHUEB+mwfX5YbwV/kR3C2/pGRDEW0o5wvh+UjynVFSx85QmhUOSxFnPTTYpZIO9QkRtTP3gNzVIP6DIPP851Y6ZuVViHu1qKeCop15pBcS83svp/WhzXq2EmnP+xTs46lIZUFAkaubvq9zuk6wxJmSN9vqeWgrLzkS57v8o96D9Gr1ubG507i3Yx+IN+EUXFCF4AcKaVRr60Ix3Qs5XUjF1dU/xbAEqMqMvetKY3PaUwI8ldVYm2alDkq8sP3QyhbfsQjg5Ciepe68DWYxgAkoVp0LuUxzTjPKSXD389KbGuPIz+qK0wrqlygFzrMxixtp1TfgGBbeueme04abjuOG8oo/tTeTNZxPNr++DSI11DpeI2iiIfPgovbon8bY+jY2dgLtCXI+7foAlxxRIUKXmI6f7kAjN6SDgktjWaAl0ttUVyk09GuXlPLxogzAYqNyCGPrEkP9zZJLURDK9Dz2mFP6+ITWFCfPcV46qxOVcHXpLoh8xjacwa7YTEjklrBBbV5UwrmOVAahYO9C1FV0w9rxGBWSemB77d+sIDb6hU/hwcGOaJBUmEj8mvLlgRj706f1ki3h4OlseMPZxpdLkWOGlAV6EEed0XZ7ZpNUFZyG97UwZlR2WbID6KK3oC9vwlqWUlig5OvuaEedXkKNeYK54+BM1s5lw9nDV5+uydT8EJnrhWYsPvJSgMUzEW+chpsUdvqDWM81YNKmdJcLUZ+EDAFyPks+gJdwdcEBzd5+R7+SeoHmPBU2mbs3RT4tp1jCvTaFLljKsGKZ1MzIrZX6cDTiV9CzktAayNHcKsBnaIzYCte4hDpZJhD7LUZ+HQeds6l2xhZg1COM6+1HT9dZFn3FtH1mFPWFoDaBlg7M8snmm7Iv5UeRYYK+JexVYmwo5d3tKLGBLM1fuY0GvUNF3Qkxxfh+u0IqV7U+6GuNGzuDi3ibj2PJA6wAXiS325Z+4CAv4I6w4K/IBFKxni5vkfCannKypbK44LhV1vVB9ifkfijSA1a2zCDdL5V5NWYoIUIerVWneexyRTYCm8dwW+l/BO96MRmVG0gK2ypwk+bw18ij+cgCPlhDpQqsfYslLOSUZxjhPubFFNKy5I/gXOzvj96sqsYCOzTPzGUPIhXHmYeCsP3X7UDMBu3wLl7QJm5Myn0bBW6FwlKwAhCQptl5GM6guiCDcFAkJ6aAhsvJuFPSWydZT6s8hAHkcJA9FKv/VJFD3HIcbm3RmugReEeJe/jqoom/P545Y4U6AN/fZ4/eJ3Rp78dT4ZdUZBec3PlaMSH52os2Tf6mAlaLrRp89esJH+uJ6sbZFDQd2bFhoUTWj0Ts3Opw5NunGu9w6zLnzg78dAj0cqjifqbQLZBoayODRRpU9T6VoALf3v/3FXTOhCOEi//ertrojYco0CkRnYFZJzkE5gDSGtAGTDQ6wZqxSA8Oo1hVY/tcJ8Icnu52Z0hFA8g/srQWj0uiOWBTgjrUbVDgxoEwNngWfys23yDUOnxpwsZysTuLvX41EyBNUs6VnHQYJe7ZHPlhhetXAvdIyATDcpOk4+248kRwaYFdbzo5XsfJ86rRO45PDRZyvAu+RJUAHIn4Zc142BTU9bxqa/dbheL//LQgPoYBl+0difprJrTmeG05NKdZc+sZma11CMOSf5IPFofE2ITIDJaHNyW0TSmNjkQ4BluGC5O4XjKDknMm8ZOv4yDyCUaLG83i1qGvt3t/geaFySRRTpQuW1lwsEPfCIiz92+3fFLHWVnjVt/8Bhea9q0x+9JyYb1TAR6e1dcfb0UziMKLjF/jy5RyR5ebxDjFljCzmAKR41GtKDVvLpTP89w8v1wnqboHsiHCMUOd2d1gJMP4+N8HeOWnDf6sNgKD8uQM3SSUqT5hL2/jcp6X1V1pAAhWuB6O4r0IPuomMBz5tNWGbgyGdJuhwtpB588AK0PE1FDqZ9yMns8CcryOX9NqxmfS3MauO2VIB8x4OXRZn+tz9LDPYrGXR214kcfTnN/AKV07LFUFEX/MWK1sJSkRj+yuYadUJm/0QbSOTQyI0BHA+US2lEFkUZ+vVZ599kk3Vzdf7Td2vZwLGcaVqHz5AZnUqEvCnVgO4XjTHthLNl2h9xUq/3/P42gAfGmb1+45Vs5ZLi7FPEKn97AJaKP3BJ4WYxVUNHCWGWUT8QBFL60vSK9CtmqwH6xIpLSZcMUu+Fb6Kd53WwSZTvH0BMc0GxP9JCTqUh20KY6JDonvy6o84Y/en8HFAnfaxTUM66gbyA0J6unCHHtp2woLKNFvqCBskI8Lnh/BVQzFvVouXRLMr6tu5Jjv+Wb9YfOLMQzO+gs8oYgWlQ0NMTCa1/07JUCCqtBvWbuS9Eenq8cINaZYdvxqI8hfFzsJy7f6V1Id4UGhGKjUU7uXIeZD2kG4vTYBpb5j8DkNEu8dvk6Wcsh/heCG4HzfpRlGeLP+zPoXf69mq7npNNi1i4kkvi3oIQ81CD9HN8ZhRZZxU8nfAbflDV3mxrDsKxO4hopaFDediErTs3tqm0cAyBxQGnHH8SiT77nq0WUq4fcEuOcdqUXImt1YvkkEnCFXI/jmWNhg9Nh/4nLt5FQ6eesDVrqzqISnGxJkC/O3M85xVTeQ5DKMXaQprXRcf97HNEXxL97KWUWVqTpieP8rtYqpDSB7u+pMDHoJX+oL5kJEekTEorE+BOCp69cTA8l7pf2XKD1zOsl202ZVvxQWYth+ZvxgQQ9csrilfC3IXl4oZAAc6oWydOgrbQA/vjuP5zjlwFMUvhzauoenBCGCnvKXyLTCYX2+RXGxkVaw5eFBxxIvPQHfIvs4eBnwwnT3sYzx6mfee9esaKDsuC/aDcdPMkT/CuU0oYb7djz7unAVf44qv8IYilutxVIZGR0bcEa572AArCDINTgQrQ947QEkIGCfdXHTfYRvRReBCoQdZnkB2/MdtaTXtsnky2SgwONQ1seu/y39VM9Sqf/ezWX/Z3vzv0vljkkQ9tMVIm4JYLpF8zs7oLYLG0II16MlvqlnDcn524DWA/wvOB+RxXzf7W2S93eRJJlEJQXPjUCkrjf38pYzpm2gTzWetTD3Uxlx4RvXzaKUHdnvoA+vISXARoVYdkibQp43suSyF/UGIzQykTI8BnC0HNclLgnfXi8SZXZhdFIeeoMG9VflhoAEVUKQ7UfjtWGPkXE43jQBhiWtvedLdGdso3lrPwA2i2T2HLLDCr/j5ZZRI2jpJgwPqfA7skzvj4ZQoU9vXB90aAUWxxAairDLhA4IP+uyblj9HYycOtTIYTD88w2IDn+v/j/miy7iYF3ux88KxjbyHZAYMlsRO9Gmln6F8/xMHurGhNp1HpVrKCSl9kuMvFaVgD7aXIqlwg6336FmR9fO86Q12+Ej29TKeELqMECA4uAshsE8QdEzKYkf9BWTasumf7zD/pKHo+88/DzxkHId6CajURJJC0ApKh/jdeW09QajKA3CpRDjp+/GJmFCbQQlMkytxdM2QbsvrkNYpNxB2K8kibDRrR2yp/TYQw+AePfuXuoa+OBMVUbPf5MwoA+gYV/HRZr4zZNjiU9uM/f28hnpLo+y6eD7/TeynTodUidt7zrDA6+xZWH0qmaBT00dMZi9HI7sZ96zIugFLAhMkOI09HkJUHlluyBH4JJ1P3YOXajRFVWo205LYCFETi0DaCUNG3+SFQYFeWqeJa0/yp83UkmLiUubn/8qBoTaQbQXg6J+/AhCSP07b3fHJxFsZR12q45eeLc1icL0SJv3K+eR2HBc3+oVwp/fuwdpNue7R1iaIPUD9zupJwzm/ou9L15j7YcsKMaRJetpvCOTUErN4qMeTXbCPdzBbp9HL1ollA6jLutIwInNN71YEia4zGfRuMHEKkIXkTtzJVIyk6RdOTomLd0QTdi/v/PdWRhKhHUmcUEoL9t+LEiVoExfPOhZmdvOpoS2nGpIHxRxV5f83It70GA7S9dK4+msSll2TRfL2pI7wql2l+saqeJKbU3QyTsb9eGVUvaMBTQvikw7UZeT8m05ub0x9qs1yG0Dh8SYA8xMzXOj5ZrL8kqjVO96PFw0OlAcwm4kk1Z5X1yQvaXurdAwWndy3rUkq/AcrcXUxfHKMsihfYHqJ24RusJKqDrjukZayzNKLYAFgGY/Me0BBIbm3V0faCr/qpXT0IB9j0OO3Ukry5uha8inoERhWA+BM81xpTYc4KjE2j7AYP37AMI/G+OvrjWf9W1GCP1HlQO8XHQf9mDWtpCM3ttXEXzmgRjUX8cfgeuY3MMDoCdEANdAVqLVLfj9nyOdD56vi08sGGjbRO1dpEG8/aZLMbuUyLoUkiKyW2lUJLreEKvSCOYQtziNh6rTM4r4s8MDZO6UU3MwhgGryl3X6z6L+T2F6J1BpUeMj1xNBvBacgNrBfyLAs+Vq7TVjsN2zbn1UpGTWRn9r6eoclwWEePRsjSMByxC4kwtqU8y5lPa2ws3GvYfY6oJWxrZ2efFdD4iuejaT+mq0Y/saenRi8fhgVMaWWXJWQxCBtF6RmQ3bVxNsUGy8slGkPWh0N8UJBhYWw+iqcKXBZre+mc2S6AdGrQiuTynL33AuXfExuEYkyICLU8P1leC5Oi9ZRTIaMZuLKR9b1oXYVce6/p7mmpJAdhXFgtoLj3v+mK0Q5Dgln1r70NfCkVCBk03FQG+QAkNbMuRrKUfcO13LtTV/sOBli0ED9bs1c60g9gII1naZaluAkbdIYbQVREksJXlxu+YpjxBIpst9wMdz4XdChBuGwNueGtwd8Dh8RCe096I6n0lPEgktG7j+o3no7k0KfLZMPaWVvIWjxuBy1TQx1EeNmFsBbjC1L0lTE2RXg94B7L0ofLC0wW/u9F5Z5JZx6qmEgljOHkLOwHDeJRCqradZcVlV5lPGiLFMw1OtB7ku4xznZQS2pYCZfxpufsaCimly6Tze9A54NJjzG4HjnfqMb4eFBVrJVDR2MB9ZaBoE3Oik91/TuOX9B5u1wqHbn/wuqTV48FQ3pcwz4po5Vc4HevuZNrk/Z5RrTaNxVGDkhAIMlcDCOJ4kjVZeMMwuGHE1anMsmIU6PSijSGo1snccn4uhjENDVR4+v3gJvQ+FSXja/VbfIEpJiVjZvNct8LHzzz2BfPL91cPdym//DKojwq6I2bm4aiKPb7ykOuynGeXZP1+DP1C5PFGHe3ijaHz9pqASUrEIhJSVhclV+PTMPP6iW5c9yAPF7+o1BSaoWicFjiZuiV3w3DgEAUKNQvys6rvMgeszhZAqQ23xGNWIVMD0uXfJ/8oY7jOFNAquKU/MD3tLb0MQ8ZIGiEVljH2x4sLrImGKaamjl/bYHZlTgky3SbFV7ERX7wC/VRNe3WcAFbnPR6RIdtCCeTakYzGS3lasJRqPS3W+ytWzl7h30vV7NZP6Jfk8oe/NovOu2TVpUf0ylOYpLSxL7mJc+WlY6PPOyyg/Qbb+MI+hqmojYfS3aHype2kGQ0TrZcHBAzC9fLg+CQMH5TMoeGlSj7kjjcfiT9QY1bDowc2iWcnCIvTbDboShNSSAvVtj/p+CDQSaBStey3GyWhsUOfH0omYOuhAfhp7Z5doTt+DBhGGNK2Pvfxc5Mh3WellEVONKgPCbw1miT1I2/IgrERmYdjDmdlKbrF6pzSX1BsAV9DLEg2UdBCXcq8wdefs/NQzjxE6UkSw58fTYCRPUv9PICHMsFlW8c0Npkl+UeQYRmYookogU2Zpi1fEVTExJokKg5SDVL/zpFQQv10dtdwWG9IrXMw4R5zcSUf1/G1sRp78Q0Q2tuBVYSwTe+TrBQDCkFQ2o52hXwAUwZpfWIKUFTg+PUFErZuSMHU48a95CyohoizYP3soqSFKyr2firSOBM6d5kM5XhGnswbaDGoTa/o1QNjw6qRQdoh5RG0V2nFev4/YlX+CJiN5SJoZI4cPbyfjQIcpcrf7fs8AA0GSs4IfzRZDUZxo2+e2qWVGPRXt0HyAG8GncpN0s3Rmk5WBchBG6iW+JCIotUJmDrRgtP3ciAhmnnNIDxjyQnkDk457ocQ3Z433ZHsV03QZl8m7blzB5WLACTOU04oeDkvi7Wcf97pMYgWdARYYNXfa8Tq/B6/ejbVfZ7f4TihPtttm0c/VA1qZ0M3ZqgHc0dVWSZLoBHyDJj7SrevpLXxxdkJzP8vDHbsOXoiFdDjbR7o74sYHSibGP4yqwPUI2fJgE8Ij0X3ljkOYegua7u8BUZ0wQEqR6Jzgf9MP668Fw10rIIjK6NatsdLkOHlZcqSMMPkxu3qTVqxf3xkvmA0mcGi2KFcclE+5MhMX+QD2jl4Lra//J5estsGZ3jAyNDKYDbxiVzh6lU5Rs6b7AsAc38gtR6SB1/rPtpsoZtIoO+Z+dSp0qiJzuMknRADyEOBOXfjGpDu161CAt0CdHczo3a+sgq/+9sB/4qgQeMm4AijbL9+gVnm3VWMOg203izA8u444ANORsT3pmApANMbZcPTXIrLgAIWq0EfqgZI3WE6C19KMWKcPhVwttzSyP5rhx5oHf3j/Yn38BE1HPbAZfb7Sd53c3n6d64DGkkCMvhCqWVWH5Ekg0fQ9v5NOhHM/o0tPQtfCaW+RDtnQAqddpVtooreCbcqib0ZjrOgkvPWWzjlHAo7R6ovmP1l01Rscs8JmzBiDvC6/HpZUlCtFnBrDzNofUMAMLrDkyTsET82AXvXXMKje2lELK8ifV0N4rkdnk1WP3IVKE4l4rVojiOOs7QniZW1XdCnXbt43pxeQ9fjQI1ty3cUCLtXABf3X+J88bvdIoLUqgtwa9fns3dzfZX1ce9n42x8Jw2TSTNMdgUlBYEViPP90hjszMP3UJQB1yC4VTyv+HjDSypgjalqWPRQ0Gt7WCfZXbPAUgux4gYnjMRF0PoYKxOJbkDj9HLYUrKxoDw515DNUC7mqk5wiM/OjTQeZXYkoQNh3wIAWpAngDbFlfDujcKqaB+25xP9SFia8crWF/5XtNBFBr4Ifpu2HzO47eVW8lix6SXN7+vf9UCLqf4QvXvv6ig4owslm/u3aQUx4h7iPW99B899l9LSEfvG60gEIC+XzNLXXi3SGi3Xfwsc4f3C6wD/uvN7aGc0GPJ0rD5a5LF+oDGnw7mK3dTcKbpKg25KFRK8Ogl8EJUkjNdIxg/3MeLQU5VlvYwtpXJVTvjYGz/HZMTm64zq4UV8YTQK2aKOsJYE9+mILEiNb2pO4QtEFK3KbQLwKbsGqcQLBpZ/mKJyxFTFZnASDRPOySuN0VPlInZqIWlNBi2vJZtd3DIP3FAtoN88bDsUJQr8gRVhDskADjFRjrsULikZtGpDaS0R8wBPtFjNVVCL/ndwDAozHuMK8+GjS9AAjoKrGJIj4y/UWZjhdQgo7T3v5vVicaN8sJg0j1fik6Q6PQjE8P32uKILvbgFrdhd5k2gmPPZkgoEMWWUqMA3N6yoQgLJkVJ8t+3J1t9AU3Ljb5oF2munq0trN8G/XnXBzubjpoXZptmnoFWZhkl1kOHXpxezjKwyYanx4QxIzR22wfy0A/2GyudrO4S6t1nhxB6fLVMjCgq3R+W1sq1F8lZLO4uvY1s0/W+LcMMjBv275hMvPtAjxVSk1g1GdsKPPah5FMU4VfOaEbp2Uc8sekcQx3/tUE8TyDpiwWRRXOl2BfQ863V4T3ATR9E5Z7NoLvewXpJgCZ+jAkYdZ6zHvxnKEK7cCbxpyDeIoCgnS/I4PZBvyoGedVD+ECf0s6P7EMkvyR8/npWWcIACcupXwS3eAr/GSioyoRpvRZO9f4/CSTdCt6rn8hwi4EoyLXN0i73QY1mJS0Zj/kEPSMtW8gCuoL/3jvWAtagy2Ni9WxRbQIi3GufrQMb8BemCNNb9ZgmWdUfoRmhEW/kyzewlnGqGtdlBLVwke/u9TnKRXdixfS5ZfIBEzRP4A+2xVpe6WO8Z3FgHquFLul+bgxyT5DuO1ydtV0uIrY5xfnkQkhV+ZgrOfEEEA/IID+Z/7pYCIjoVCls5+ntB6vatPtqOdhkbwx0MjB2CUueO7t4+fwY3KV9ciTdh0vIuujvx1wT6JT1X9Sb9sqTcfpljgM/6CmdR5Zns+DLOojlsgR0/peDB8XEAPKULTaIZO0nJeZDqfH/S3I+yCAuzJe4gvGIUsntoUOrVsZP1jhTXBxqw0yB46Aq2uEVnDifAzP/9NncJ7+NRqT2xXg1u8y7NxBB+fMCY4ld2vwxCLoxHH3jIRUQTuWYlzz8z3LnNWiWpIoUcCX2Ks2wa5oEG2Qv1xapWNTS3kxrQ2XcVWYhOjNA5DLWMcRMPsuB1pWvQI7CoZFOsTjv5xAxkpCyI+wmlO53tGJYhBge61KTEnvkJUmnMmfOj0GxVbPtRg6DrWn2TfXrVhA6mYv4Sg/AeMyi4Z1KnNv0EsXHrQRGGE4kQuzkWsIXDouswY6YbAOfx4FuLpkvqeIBmewnYLcBaulD67ZV01WDiTRj3KeLpHJsZMcL3guRUGsr/4xr/0ef8L0ZC/KC91bVgejv5hrZelVHBbiTESxbdr3JlLRP8Ug5vW19kg7D1afFSU4L5p6HmgYWs70DWIl4xh8UlDZZMo/MPtRsbc6DL0PcvCdxcf2MdrdpauEItVG+XGvRXGndFkLroFzLMoJ1deRzqBbucovmOfLWWhWZfFMjf9n4rHnO+KuL3j2phgxn9pFiN8G5jEnV45vjGf9R82OnGLK994PuGjwAxII0plN3m0JUuG3+CInzyDVC/v8P0k6b3tXwyomSLww7pEbGCxHwHOXu3J8ApNKF60cJlr4R2UGCQSdsCY8HE3kfIZoD6J6riWEifazjG3jjWrPautsLafS8OLqCNt3rMJPlAHdL21z/P2LMwKq+fpGVB3h65uw6UvqhcHM/r9b2A588le8chivpM4X5yJQLUUKzgUHT/o/E3hxwFwoV1MRkWTh12FtdpcCFr9fVdg1b30zf4dbBbVGWfJ7DQwl8KI6oWThipMNUJn2DU7/SC93jWgF+S8htES1uXiVdBwnpNRdVPxyhu3DHT7DkkUMi960KrkH6ZNzXGPwIkewgC8rfHHyXjySugE7FS3smG27rLjHiSHJEdqvIgPuXG53qCNvbWV8jHO6CEkxtUT5hsUrDk3InM15KwzX7LbU6r6XoEWCgcTv2X1NV1xjHGyjErfYyTSbdjIZuXzZbfIohGafTC27kNunjO/E+iUxpdSEnJSQZgtB4XJHGyy5kUgG151y4AG3Kr00J0U87gEwp6MI29MirG+Qqeo3LhG2045tmEwch/6Echuca9GJqj3gU8Ei5gqigMVUHVXn7Nn+PFd3xCoK8n4FrACyooHC4wZvo7jk9iJ2FNtr0UgaFIxZjSSlTBB5yyPuIcK0wkfiKeFGRUVm36V7waLCGY4yFrc5ct6sO2LoLB+hZhO2757viG2AxJKfDKTXpN7XZy8h+m66b9QRlT41PXaF03qeANJHhn2FkwJCY3utwi94BKd66dlKuhVP5CKqP4POQTJ8lO4qOq5vpI6/x/zdRRKeXuuK9uY+5Mt00EEhxU9Nw6fyjl0IUtfiNBWEhpnjHJzFZxM2jwmChWU7kcW5+phPEfF3yMgLvq5TYr5VSMgf350hlSC0fIxCouiMC5lB2EHNeEhNidgSq+Ys/5kEAhPcBADhH5FCFMPC1ileUWnwPneYp5lWYFdrrXj266iJjwJCCSHqCfUmYh987B6Vk9zb4PVT6tzbLOhuoETL1PfTfWsMWE+IdhthPihOyeWefJ1/WCDz2srhVRedNNtCTe4nRollzHonenheDHpNN5/yRu4tajBIRXzlFfIuW8/qrydT7B34mPZwJPFKuUMJFotUlblfLUgQylVIkUSklJgRVX1eBFmT+G6/I5LrILhPuhIS+GYEl0X1aEZ1rMtnV2vVq6ZpfxcVpUs6w6YGrZMdBFvlEnuGi/R0Mc0dkTBKMRbZHEWvvn1dBdnIJIVKDQBas9HqXleae2mCvC8BnEeGINVfE3QAtZ77PKx2bUOEP4E0Ar9w/Ngme7XMXhciX2V66M7tcUpQw1WoPFI1//lkq4H6uzdQsINtQi+zxgiZ6aMn2Du0KNMNMPAg1iRWDRbzgyymyoQHs3uKDvTuHevk/AwWCBAmmULkxNzi5rWlhTx6udNIPtpQZ8AquOKei7IAoBxlLaGuxI/Pd9+3NDV4ITsOrFTHq2e+Pf32kQOwyzyF4sWIxYAlFI9PvZDJIHAq8jKjXJtOBSi+hIIBE3wzLQTEzI8etj7aNbos7i92HnpAZqaF+3l97aDSPzwgn5oyGpHRfUoSKTvfq0XVIOHb97K1cfIdMO8IYkNWLAcu2igXZuPBG4MQnOQ4Z3EguN9ZzOwdSi8c8nRnlyj+PojowkuyGmDwyIo0g4U+K1G4hqWGmI1Pc4ohaTMpAD9mA0kYqcjSlNOBQ+6ba69aSmwUzegcv+9NOA7kEiX4nHJvjnBeYNzK1cGMiEeME3wFxRu+XELRnZkGXrGwnVhpSU3+kCpGbsGIVvrYNKcqCIF/g/GrDi/pJY1WypoTYwUw9YG3vZksQTxRJTZX4aSiPyph4zD3SBjw1IpSDzndW7YN5q7Iszuj4ARNQP6a9x1TYHeDJW+t/6tkULV0odwVarBVgNKPz8jCXqGsdMhgPbY/O0Aodnqy6MktFAKvldNUWVNFwPJ3ptAD1mnI4KSNYQa+VnJ687XhHa24k0FvVDRKUM4OAzaAua+9z5XKXwqcboVOkWN5UTK4zI7RzMtR6B9GYLgondIyBInwc1zcM3XlG1Eo1zNE/FisFnUQCQnhtyi7XojDRBu1ZVeafae1g2Wbd44Yfq9q8YMJRuiuqT96EQmEd419zlO6pQq8hgRH52dlswmzBYHu+0HBcy8gn+j1v01cQpktZUkaRpYnzE0Qwj5tNGck8P03bsCFyQTF1NybmV0IOW3PAKRF5+Q0OsIg45spHP6sycEPC9tjOB8xN1VPKWQ4DRwD3W6UwSyZTtQEBN1l3iNy+nOXDj4jFe6Uu9bwgzWELdMHuPtm6wAsvBY6jtdKzKu5vHt94rfin0husSsb8UXFxCuAGMkqjNuE86i+dlnIfAW5dec6NloZPCy6LRTKhjRzmeNC/Qtc+YCIKy8igvmRbPJdmm2ZszU4AMuJJG1D2dJq0owMnLm0l7wcp4om3UzrRSjmGcUqZBGGfo7kzT7SB5WLsiEmyZqelJFbFY+OOGMO/YK6PsPZYCHPf9ftWnjm/ys5VOsI52b/qI1eChBkPCa0KCbLxG27nX3JAbXyRo9BRj+AnE8wLUrWF4TfUNaII6yX3n6Z2nRefKGOTObBZlQ/CBisBvl0Ve62xyHmu7Y/elget8knS/ATFYVzcbqAGTplLo3It6Qx9d51gbSe1ZFGwfJVxO8Z/eDZsYTJbpAlqIl2DjbYR/Mbwui8ugyF+dr13COyVk08qC0/+x1DM+G6k+CG0CgLdyO2XgfY04sb4oD/OugIjsJN65yxrpwnR282zfznGZ5h2imVIQYiQ3bxqx4Qs9So/Usn5OWXxkdOpAR/L83i+Nl1+AcEbIJqWVDmeNg4BTvl1nykJQfXhbW+CgAxwsZjV9C5t4XnOMxAcd/G8acv0cYNakMwd3WyS9gOY/BzxcvZymo+W3xT+fOBDiL0+4O1vQeaB9gm53Pm+mpYL47At36vCaXVChrloEWPe3cY8t+DBz8iEXe0gOluvbKN1teu4BSaMKZ8RX+OPD/DiykloWKUryN05jSYMfBLoj8Yk6P2F3GRQucbtJAbHuHE6tSXr3CCPsoKySyvBXOPKf5UkopLgZqxGUGlfrGamGziMPE9tyzB+HClK+ljaQKfuWltyaf4iugLvJtvA1IKTG3UbkusP3+JxaPDgZ+10TBkkLH2Cwe086uoD7OkGXAvzYsYokBjuuFcYgMSXzAZUbMVB1z3y6FbaWbxxatelPA+wQ+FkpDw6K1X6PtPh0GNU/hmfAIrlKDRzqG7oBjzcHYM3j4k2GURfJ3mmIfruNHfLMbpnzLi8HgACYjRmCoTynQZcFfvoBnhDOYjxPNFy6QYoTUAGg0OF+dY8acsptwpoB7/kWgxgFwsAgkkZ9zIv+OGCZw012FpRn58IAqcZppnW0xvwEDy6gZpaO31DrPMkfbK6LDrZFDE1OSyrhWbQLUthJLJAo8+8miBCaOg1IdimLgWC32nJZpJpoX3uz2CuVJRCnkOP+77UGUgZdrShNoIu/zxGD5EyEylxJayiej8hTrzkQmIQV8ycCZvoRUGdWJn7Mccw+dKCmYEDnLIx4xJ/bSviK40ugmljERRwzu3MowabahNqPhqqHWDQhOT/KoOfy1qHdhPw5hSOMuK8FwFq+EqCxv/qrmXmLdnNDaeEQnxtdQV8ZxcA2mOuXfkiQwtKpT4EXoeXi6Qeij7g0a+kU/CMEiN0vHL9TShqmF1KEQIMoQ3c0u4r3IpwnFhO4fmcqkEAFanNGVagIa6xz+4ScbKdaQMOUbwXJ+MHAJ/VWRuRvHg1hiuUJeQHzKtTBu0kASvJScx/npzWbhZV4gV4PvfC5hdyKrXd4pCGoGNoGWAd+WIeKhNfIJibbGX/ZK3ehAKF8KQRu/lMxBF8YMAaiqQODZYdPNYN1L22Ztm5G+JrsGb/hynmhULEth/OdcN9YJbjkk8LJ8xPW/yFC78/qpKUxVvvsSnGrE4FFgoXbGuaC3lwfDWTy2wXF7YZlvezeM06ur9u1odszCJmNjcXxeosBT2gTKYhuoPQvKHNwbcAbH3puROCzIH9nVtw6czCnjDoscnwPplqVUQ7TWD3VuligKsDi/W1qozsfWdoErOBCnuinZcHKrlpaw8qPPvG2XIR8sG1nxt6qDQoI6ayOuuf88EjvxQ1H3O3EyLqI00cwM7ML+AzOlUKpzMLxZ+TcMJRsrnnrDPwbjBmfDbTHVOKxslCq0V54QWGSGLFcxRoFLPtpBlb3cl/+tEojzC+T9fmy4Bu7MEET1Y8MSoqYgJpDNoFABXGPWEXnsWpjCEC/HRuo62Lbsae7c2BhMJHQBUE96Ez3JWsLtUbCyup7RszgouwgTlYTwZZFYbK6OWs/mh1s2J1LthPgnHXq0G7yQwElybO9D85SpkVZZn4HcfeT4baUkrOkgB9W3fpMvLnVa7AXFEwl7MyiUBXpSgvuN0nLpSgQ5ECwceM3yX3CMqntNQEgI+imnLdmcGmYFSgWStWDuep63ZV+UNsf7ah6vzxPS4sziSxYXec3NjyiTbbRyE6NC0ab+WrnUx4BOoalzrP6ydUNOhGBV4YVkjpXW2GMENIT9zdSD3VqdIhduzFVD23Gk4tn9FHdYKFBZVepa3E2iQRLkzR+EsHikgbUqD4pD9n4q8tlS4xdZhfefg3JuiEvQtgT1vEEk2bForLsG761P9hpvxtgbn/tIovV1TvmV/KT99UKAJlGwZV6eJPOkMjCvBv653JC1pj8wdHf3/PvbS2aaIM81y6wTP1l1DabN5raMMLitq4UrMc7cdKz7oYctIAKi0aYihy2rddoV4++XLZ8S9wc2FIPg/UtR4sr27xmqW41zz4uAQ0kSVCIqlhPWVvyCmpiPLei4QcUikl/5WMg5vMzNhVlVOA7AMx/l5K1Z4ugZknqMe4b1eiakYJ2QnmVJGmk7O+r7tzJSIOyjBr/qKJesCZONCvlpZa9LZ1KZu1zNEEwhKzE6q43gLNdMmdxUnsT5Wg5q/zJDDLh4EZqSVXqloVEsqxZ5TqDPeQU3k2qfCPctRTedUJ4ZRdcr23CeHJgpbjWJthgqW8BhrEiWcQ5xerISyrwlS+RE0uh1L49kwrLiHhRaG/CfIiCwzyGac8T6AejqdZ3n4duy85AGKMuvp/yUV7bVcKmB/yOiyUnvLyFSFS9XkD+1E3i1lAxq2VbLs/Kc2tSP3HpkBrFoybxsJCCeIFOFal+FN19nBItXGi3fcU2CN/bibEpJ5wQEKqNBEAnvv8U5shzMoszRTR4OmTwtF3pErrHtfkUwcBsgiGza84lLSiJeqmeSn9mxBq73ksOC96NvkaFN/7JCFOFL5AcCzgtiQTsqV1SzZc7Kb/AWnCJ4fOVeyazlbIgdk7TSyS/mKWLEp2xibb3bQkL5vtHPtMdT9i2O2J13NovOOX4cAiHThaGqrJirHS1w47PuA2rTq0P1ZPcyp+At5hhQ+yq2zXEIAnQC4f9yif+fl7rTvloHsf1qOrRrrM6KSSOwadtQQLuPeIwirJIF4Wjs22EYe9QRVk1oy41CDMoVlyx6M1bdqnRrLDGBl8P0rtkqXBN6ouPvNjBzt625aNxu0Cb+9nR1g4NFlTUufCCBr4M7opPnth4rYV0h2PCqfkb8QhN9HN+pAzMfbFRKH8JKJfP/8b4got2ZD2zxXF022Q9IMxkCOE3ccQ3DsReXF72wv+iNyoH1SNGfRetyHd2NJ6dD5GrUTJ1jIhZwGYYDERapZEIh9ZVWjQFBUTZDkI3bEbWaOUjMXOSf7Ryt4o4LVXr0nICoNuN/k/cXatwRF/OZ7XMqEVEN7haVNJULS1vEB+S4p9ZKMW12Tvyrbu+xjzGWqeOLuuveU7C42tIXABb/zqsbcLiu4Us7TDeJRaUPs9S+/lBhlADojl6aRDDyRzB2KJAfkTEkN1ZBHnyjjJzYHKO4ZhZi9Y5M7swysNwr31JMkWTJQp/58IEnJEuqJOSXyEvIqYvT66xcP71Gywb4Phyb5oiBaDhfssc+o3WdBAK5gpyaBeyHxvYSvPrrs6ybpwPGRZ0yRmgxUUBOs3betlSt41rEHd2/S5poUsFuyIOSENNX7HnZn3pv2dXad8Bc0Tqzy/bdlCEOg1Rq6lYXRGsUyYNQZWx0Zi8qTCErqL4Xts1CXyPWLGZ3yjCnZe0f1t/xg7f0M3QHuyx+J9jiWTF+5Pk1UDrz1b3JnHWQTXRp7c3LYQifJj8b1ze8IEOiVSr/oWn5VQ35oB1rPck/qF+pBQ6L3zmdYnNxq9TH8R7BuPvcHcBsPt4CXk/prQK/d3bnPo7SxK8vh8NOWjg6/NO4DmI8tYaSbRTVsfgVRQOUQ+TVJbfuR6WBXAn3PP53GRaGdZ4hdD6GgJ/oGOJloQGJiGUQa04+/w64pExsZnluL54Fd+i9Ua+lRl9MMvXY4ms2zSvlS+snjw+GRk/J4ktjBgCwNL1zftWNZltrF7A6EdjupQJzLVseIWgRDsBgUwq4aH0F1Etf6mg5gLhE2x2maXR43Fe0ZqUAfEqUXJn4GeW4xA0da3MHWGHFCB0uuF4KgcmldeZYG0FMgB6wUMc1KRnqdcB6h+m4Er691ns/C1mQewvk24SfJAPw4j32alLTMoli1fvTRsm9s8pPLonWQLTytkRVm4xENMXpYKAb8N9/kJ4+8VrXlM7fsegWxzIsDJ/34iK7whWPG4vFc4AgNnN0BJ0kpEJPNBe3GBol1UJbX18mBEcUkGE504gIR7R/CK0Dzp/ycHY/OfOMqd0caomOmhe/LHZ6EvcBcI+2BuYEpQZnqoF+Ut4QZ8t7fGpIV9Rvh8WrqymHJ1N7b/8JQTtActLevbm5m7JI8uVNTSehzpvOEJE3GnC8bYkGWME8vju73AqbG1P5Xo7XWBUuUkICkjIytXc2Z0C9+A6cdPH4jPk4L0Dcm8v6JVKs/2n6WQRVz4llA7oQIX16npv0f0WUh60eQonONRKMAIYE1YZmX08h1nBX8eQjGAHklr0DXAgIdv5yConnnMyyTK6+sG07CiKwAV1i90RtXB+XRC6YE9hgg18qpI8pq0DBsXK25uVKw5SUCf5l0HWS3BLu992bTxOZu3FXkNYGtcxYiSteDBfV4TkLmb22Z1JBK5gKDH6IrE2S5u+SFVCnqCMQ5KwSHZ5xUUrlrTqN7cMh5adz0zufM8soGaIhxaW6z26mzoW0ySuPUqXWR8briuFAcZ5T/bnA3vEJVisstfDrXrro+MPlVo/R44QxN65eewVR5JneEcuCBqQ5Qtr362veTYtExB/edOrcQlq3misQ4TB7o8+eG9Ar/pZpznpatYugwXBzHCfQpvqiTQjDzuZaIcpa0esPqkFEuFOms5R3SCqYt1Gb1k3xGa4ZcJ6bGGSfhJM3dvZYXzMh7FP7r9FTbtAiNiNggCWUOWP0JPyvTaf2Q42tziOsrQvDHPeLUDm781lriexX0H4Q52OXcpAa8afsKUpHIS+JL6zm1jpUgcVMNqp+6TThilWlhU0FAv9LjPGxBsNedc28oCz6HdWyQcDFO7gTCB6mtCAB0Vi081CDVul8vMPMILwnFPqieoqgOtoQG0ckcVky9o5DpupQ0sUYoouZiD5j3QMwfvtEAPztvRV3VMjDdqN1KzI8eWixooJ2eaYD1ytLzws+xpgtrVycX3wuLq4nerzK01OydDSfdcApXBGa+B1DGo2GB6DOtdS5EiHYNQoVUj8MG1mB/MXNn2U9OvYLxS6yucviutoKu+vqa2ksAmWE97IKbpx01G8Lqq9qSEblBQoY0NkZsdv99GKTn3KBcwtFcUz7YKTle8H3v9axb5fYrrjacA75HI95cVXsWIfm0wYnAfBBz5FG8pNhdq6eKPnOqwjc4pHTBCDmZRpfdLfyfKKFGNmAhhSMtX46GxKVlN8Va9zBb3Il67pvBzhZ7AAqbaKfypUbQY1dL4rwpbckZKxaMgetZQaREx8w1TXV91zkI7Bqe0VvnSjYjr2dcf963AF+Ol01lFFUHsbk2MezFI2M7AuRPkT6TNbSNgmC9mkNRvX0lVzJe5PrE02Z2545zemefMeXKxIW1xWsZ+OTYvAUZokXV1JS8kSNc0XN44nSH4B1fH+iGTzXBOPPEz+m2QKVA8ke6vMjptlDpU7xVBJUTClHPjaD/FJK8YVZ+cuE6Hd2uNFNv70kU0/RqeOaIONYM/EL0Su+pzY/mId2CmIDt6upJFC0+J2laLN6Kv5p15gejx7p4/PetR0Cx4grYWwPYj3sQESWPqCq1pEHTkMu2BkBU/9pSY/Cm9Aj3/XxiYbd4SLYOsGHVAyOlBJb/l3hs4lBR0Q4/RiAafq4WTjdAY5VLQr69LRZ0jg8jlkLmxmWugFTADSCWkeQKCvdzM2wreRcpZ+/1LkvhBJZMfsPub68e2KFHrcA7szFHMVRV6reyRozcSXvVm8cu5WJn7Eyb2mezpuQ6fBbIbRkeTKNM8fL+OZxdm0qI8FeetW2EHe8zj6rHUqbi4LGdl+z57L4u0BT5omKESJySeS3Nl6N/ffzuC7WU5+Kw+IWm7yEfpt65ZKRWd0D5xxcM036er2U0Rn2LAKJfDdOJGgXKT89LGYd1eciQk2feh9Mdq26skBPj1339iAlaJqlNDNZF3uZl+KRygPJsyywM3OLVB6obSjOuE0JM35sqTjvpatVNR870ZYvt4pUtPWOHSJJc6+WzIiM7JAPK1z+1OoYOuWM/55KAYbbbCj/xWzKu36dtVL05aBl9IwbWqtXsK0QwrtM4XdTPtbgajTcxeex3IGqkh4tuEnxQs0fHXX6ttfzVgoJyq2xzx/a5gZLzPBrE9+LjyutWMVOUALMYts+WaqbHN5cztTbkRnR/JkETaqZqvT8IV1J017iCLb+d6HVzcwYlCgHHYPag8K9ytD+o4MnKpzlXvGO/ihhtGVm4mqtPBrWELSYnEy/BwgS+x4cOofTQYfwa7TQ+qqMVqAAwI++jHA0cNRLHWJeEBYrffs2exr6RFy8buzwwAIJ6HchGYxCCBuviuOALAMHeroWIN4FI1nLOjpK9D+JauUj/zJMBFHH16DPkIABDS9EFwPEhDLoKu7GRpcZCcpHkwWPcpFDS0kqBBuLkMZS1PY4sxCnlCnifjIQ1PdapTVQOuurSnmmbkUrDTf3sUV/NVvcRbPE+GCF/VY3BPcrl4JGMEF4jAR4ojBWpZBa8UGw6Rvx7XMkCkdT4l34WvzWsC8HePwvWbORTYBMrX4PuMrMITX39b6NslWF8TxUJ3Kxx1sBAbJSwkw1KQc0MI3rFL7Hpzwm0Rao+6InkIj6BgF6R8ejlVYWYHnpS4UgGEanYeMBSw1zt+j+RG3M4ORAjWKw/bSN0vZMF2IBeGMsxbTkKYURX+iFMatr31XcQVtcBAS+g1rnsuVIXwH2nDU7LdOklBoQQIwtdurUpb15DH/wYyMdXa1O/COBgdfOhA/Wtl0i8fj3x12mPhRVTNm985mh4sbFfZGTD/Zrq9k8YVTK65FeEtRDwgJe8TBIKcxrVDc70GaTwPrHyNhkk9hN+o1YmQuUPfotfCSbDaNakiYMA7dcwQlLUIz+6fHMmO95+K/sOjgBzWjUiIjByEfRg9pdDa+jpnw07cJaXo4LHgsqJGCQqo9M0a6q3zcQP4UT0L/VWmV87g6La8X9piJa8i7lCNQVusJmTKil+BBHby+lXdtYkoggCjgtaQ9FK9AzOo1oeVjah68lcil9BETfWb3FkOiIw7zgYVomt1qQW2q+0fEDS3iv0cbxnGZ0X3QOxWVaxHnVc7f8/vkz6T/vZrdjrcVLxxHXRnSfQi92/rSJVb8a6M1Ro1aZi9dYWa5P+91gKsjtqAmMTUbioPF02uRb4Pk07w1hlsYzJHMG4eQynfvVY0xuNCiALh7B6Af94uV/fjphZl4mVDzwI/fvRcfc6GBWKH++aH2Qywg6+qCuE/pGswrzUfSi3jqKYq3rf3eOKLITiinEfa4KUYz/K+wnVcFGarFrBU/S0ZKnPpmgeoa4lotLWqKBeQB4Ji64UNyZtU9nK2yIchY6I5wh7CIbcM6mQKkygiUxP2OfNuwIU6r8Eh6a6BCtaC0JUMWSRLtGW6X6488Hl8b6kSr1s2QawVrERgWpUFdYls+QTqHIP6Ig/AlhsBKqGxvG6ZhDme3PygaIUD/euL4q08/2gvhEO1RUQdQK11xzeczHflv102dx3KZr5OS8HrZTwa6ctMwb+1mderM2FdUtj2xQGUU/TjH2JsSCoGkMmf+YIULYu6/SAYj1qs/gLuldJ5meqtTDucQfJw7u2G4JN5X4FiNLJpIfzYdZ0YaNpmqoDgVB9BSEcg6ac99GD/J2grI20i37B243ACmJ47sv7zK3J6LS8GSspI7jWFng8YQFhQnFEr3hrqyPm9ZertaHFPcbfL5cfCg3UGgVKxAUQfTdNk1WPTy9j/t2QnwiCEI04slnLoV9kOq0ruMVl8B1F9sg7SUcL+9ZNcQ0Tgb23/0eVRdcH+d54YWTFCMQ5Sr0/z5vPKpogbxoqeGyMS51JZsaNVHFhR5gSGcYBgU8uclRE1UfujX5WBt08MW4KoL8dv4zdHFM8i5gBDwWhjf05p9XtArefwIch3NOQwcU8VUhmpFgd7BYwswzvXaUqfCPHodKj2wXeBOA/HeleZcu5meZBqX9CCqJQkq9TVR2fSSd8r3ykofD3e0Z+c7HX6buiQ1kurVcdBYhRQ9EleLiiEle871h9h4067i97Vze+d9wR7oOQM09R9sU277TE6hYbrPhiAqnBlsYZ0AeQDJkDa7H42Lk+HiXS+2VMtOE9CeDUPG33Zjkg2oPXi/Pzof5QIb2RSJWm8LalVyq05vdFl/+sxF4NWm8q8gchfW1B3pUPTQPgiFDUtac3QoqsALxprg3qm21dk9BoFYYmXWNwEleJUm9XG+3Sv0BaCUFvi5P8mjGzYWHS2a8Uf1Lunfmo0imnrw4blxoMcVg2fupO+KAkDP+glUuYakKqMKgv3ry6lM40lKwY9TUCy1ca8F+MzdzBP7h2XLptXeDebR3RI+wtJn4i+Us1gsh0eMIfqewL7EAMYG+GxmbHDE9o+aMYUbQPRt5gmpHjeBtoLRwtmukCiRZzJBRZbPdds7nlaqLcz2ARuO6ZgSLqATGNBDVw7doIrKczKvKTGb5BQiFXIKZnnG02erWi2YKmt0bNkyuAsE3Kj5CsLTYJaMTs/smkJeqrkzka5mMHBc4LUXJONVr+2Tgxnt/e416tz0y5+FPivQ2SgLEdhz5tolOynDRRSOR0lgt4PjUWhJTRr4tCii/46csFmEt+t0/vM6oAokt6iVhfmwiqPB/FZWInblV+oIaz6jORDj+28r+Rt+WoAJWelCNEW4ijQQJnbdZ59HJGLNRW7zv8Gt+wuRwwtmxYqtCaGxdOQN3kRQNBC02z+vzXx0V5vzPfuncLjkF8xsH05VXbjoVxw7n9Sond8lMbsL0LlbhBJ7yEewTFAWCPzKJjUY6r2O/eyDUqDxva0vxIGXmF/seqITlf6O8Zcf25SPa8q3exfduwn8OeFQkfboQIjeOQaCel/+jXse17RKVW1cbv7tgztefbuuh0hhDfU/u4SLrBrp2JDQClBkd/GJH71UIM6WlDzBwr2Jz+RjfweoOuB6dfnS5yC9dPZ9PyZsICfLe9Mi3g9p6t/MvmRtYn5pOtPFAuI4uG1aPciyhHil2Owa8mH/LU3enu3Kqf2stAmzkIqDlqOhZvvqYUdcL1L3S3WmqBscK1HDloaSQ0fMMODDK//uuILMwC21xJkyn7uulwCmh3YkdKcEqR/39fimbsWF/TvP8MfrS32UNCJ/XB13CowSQGmZXiHjthdlZ0eysEE//qVBi0n8G5Y9fycODZCCxq2IdCABk2XKBeU8553vDXJt547ZoG+ASgE2Zku26sJUiSAZ1dH3SM8jkZg98AVA7eZcoCo4plLO3ylhMyg7LWBuhA+Xyi7v9pLjEPOZYLcIadso6FCATEDjEhGz/aiHwzapUpAtAghhp7vQqoRdKme+8cuTNzcoDJjOm9rh3D81+GlfgLVC2Md/vPHk8r8stWJ3S+tNGeZWb8utPrsk7qIcWxgArPhFAgCGTOUlVe1W/mtLmovY1NGTBmCn6ynXJC1X3VCeevxwOLVsU2BQyAy4j0pSk9yz+ZOcIYS7jJtmMD5vlG2c8lHT1gj/3LaCbe/dnqhhPiAU/bVI7Indo+peneBrB/6bjsX6FqM3+LFKOdhwGKoeweyeX0ianysW19viXIe8eOQsy1c2kZOL40DWqpfwmQvLFMt7TUgL/2IZQtw9YVRipZshRQTn16ITT9XYkDu+Qnzy00ko3J6frY/xQ4c/HxFLU+cXwVcqUnpr+MMP75lyi0P5G2drkbeT+KsHPTACv9ad5g4XeMHBu5Npyy/atF2nSDSmD53H+LTc+KSOMP6oXhS499H1f5eF87QocuUu7eDcgGVIjeDWGL2g8hrCxRcBbw5Q02b3ZSp7QxEB9RnVpSvI68EBObAyzXS4DEVCC75Rs2qyY2Wlf0gsNIhuK7X5qVlvRg0qJriqrUNuG0iX7r7MJb4Zd5YZ2KHYOO7X8Qjr7V9jEkBjY3mrt6zO7knQltr9FIHRx5AawW1YU64zUoQA+rnd9U3G/ag2UngS9u5YUm56ZuxmK2F0G9BWGsqW7sZIXyeC6O0rJEwBabqLCqptvBm4/1A5UcV6jr8id9tLYVsjdCPvT6TrD5Tsn38g+QZ8deOdhxSuIbgv6lQ20VvQN1659oAEKvdj8AFdV3oKcUKD5YVys2lODnIHhydA+R1Bm6jyu35gj+eH9w1hTh0J9O9rGQtXEy2v29B11dihqvmlXy+cP/NJ679De2mb3/1GVAGiLds1+1ffxqr0QW8S7rmOIF6Z35wZTOHOxjHtWDbot09QdXeBxrFs6PMLg8jo0f8WitANz67pOdNNSnKH/X6xnqUlw65dLID16HDd4P7gsS0gME+nx3N1ckpGO5Cq9UyEic5TqHwXWjNZRVGC/4PFzfP6bTM0H28jnsB3Ea8EIQrb68PBS8c+6m26daHAQ2RKRplz6ngSfPAw3uzo2WsnVwFIFYETXnyF2S8ziS6by6B3vvEeLjZFwBeLfLJcVsBIhXsHbtMGbD8Ysj+dkhB0XI7mU2xHybYrmIZTY5/+4Bz6Suz2RGKEwaXHoNZ91gecUnSVS/N0lb0lS0rUUjf1HdUbDB1IMtbKq/pFd7NI2Z8lB5xCILhzs2cBpI3gmEKF4zkVqcrTAESyqqCzl3A2ItslR0Tw2GD32N5cttcaH7dBFzzh9UrkA5UvixPWIKFLGu+XuCl+0StZDV/z0YLl0Jhh7xUu096RNQHQjEzwj49aWZaf6YBPmwC/oTCv4DUa4klOEbN1r81y1HxVD/ZVnj8nhxSsqEc4r/cK1qfLwLExru3N0SOfw0jLiN9WPNiH1oPF9Nf31N3WUWeVxKf5K9jUvTOV6GM7HBB1gYDC0zIvkMU8Pl/gYlAcFncPBS4+M6gdN56JZZy4wGdowXY8A0MR0D4Tdq+869UA6+5dQ0K6QiSvLV4c3tkNQfOI1WewrTHsS3puyyeEkCrh/Gq01VYZdNiPnQm7RpjuXn8wiBvl0NmfvS5+3BFLBXUwHh7ghbcOuU/dhy9RTRuISFiFG1No/clLxReqgzNTUzP2zTeF4lh7DwpItSBgdOSWxNLbIVlldtlwgGrqEM1168aKaUQry3mXIioA5dD9+FkZr7dz3jJHbWWk0hKskPVzhujIw1wfjvNvwO/vMcG1xXe77w4NVjepZJl19vlF92B/qQSsDXE2raEsE8FYwAFLQDbDLPP6Yl1kpqtphgEP1seOqRpL1GavVhn9+HG+2aGEfX1T7hnnHqD5/WsifvFip2G1+pyp/+9WpIvSGWIGu/xsKxRkC1tLiZCA91I2YSx1TtYbHuEeP+b9aBwXikjpH5SAbC3hDheeptuGofqbIU2SlkDFMSSojem0v3U4EMgMrNxoHyviJn7N7eca5cEGzMBNeYrnWGYJs8EyjuOy1zASlrRMAHgDxql0CcRitBf1hsTtJSBz1rUei6XZLOX3cRrCs0uzMqzvVlYnGhZ0JplTnFOJlLoB3ScWplABbODE7o03UQGjffR4ei3bPYA8Aovsfjfl6jrnWsjdQXy7zsLGH2WXvDI14UjpjGVgrHA4LcbgQQKj+kKkbR/XMtPcvcvq+K+zCUDW1AB7lcWpudIRNCf5OGWfB/98Id6GFTVkvA9aXdMFo+R3cOzNUTfXmV5nTKNQWn61/i8qtyFoe9LmtL2IxfJzWOGArW/GkFEvjZPGeKnROl8OqmEyDqwCfQXjw8PSGjON1KkGjZF3605+7BSb75SxtQ1K3gCKsbCwb3a1PKHtUN7sh4UfZCImvrxG2S44XIHAzjrrVbgUy0NUQop2dvpcOwx575IMu4TfiQ4OmP7X5K8GUQlJJ37IoWs3GLWouYmvb9mViQgBTW9Yr5XmdqCERp/8Y9YC0gx6BhON0hq+2DHTOi1yWdnXgrt21LVR+yvfeyGOpbYuLoZfft7/xM9G0QLRkoQUV2xbZUgUYJ4gAjKcLsw5MscS3m4sjgFCHHAPpRmnLu/WcmpA2dRWvUClBKOJYB+irWmRTD8tSE7AO7VtIIp9GuTf5MS+7qni1GQqmJ77Ib6mq3i4yyMafVs/GwFt2rkIlAjluK7PYxpCHdUcy79RlDGo8IyDg/UsJU0z4tfG/eC7mIZa3GJwWQDDDLdgcRLCRyplI3Jg3ihiyIZFzw4DiHybzoafiXDc2i6DRZoFjL6GD5QVncDjJXlEFd5bWzUsIB05BFi6WFV7XBtf7ULqFfBjEjWP8lApu6tVfMABdXIDofBa9dRlK1PEhfpi44x36nL3RMSk6IOlS4kVwUM6PT0VrumjbXin4DcHaNsynPxgV9Fu03W5I1h0Bf7omRWQk0zJHsjKPuY7fe0D86oq4cMM1FnV6ld6Tnzw2Sd3Oyo5ge1CQRFr4MsBlR/n+vGqPTb9conV08Dg877SeeFdYTqwpSi/cIleOvxLgvf9icNOSNrExycn+Zx36iYXv9YV5cAv84pzeIVdVZkNIrlcFzYc5U+1cC7fQGMSeLlFjSVCZH71UH3qeFQrIsjRZzv6y3L9Xhu3I6gzMkMF9nXTbU3yXY0y9R8GyJmYSMPSYlpLiMhJmR66tZxidWGBM2E73uuyH+CcYFamsitnPjgLtT5I/MBek8saVGKqa6sXiAqXe779uKxqiCXvhp5KVnobt1QYc0uF0wK3gElISGSnQlhrwWoAsqM5n9r66KwSEJP0QrAAmUHeYSFfvJ1FtBlamjyuV/cFCCY+MgreHiBerTeTCsmTKhQE+CGFljm0eya7EwezaLWjyrvH1uExSHfop/COjZLLR2aUzPZSxokVrNQiO9nsgoNQ1tneorreZVj1BJQmpATW3sLZGWAxShIF4dqH+ZZs9jhlPrellR9d9pN8vQ0Ug4G1Y5pDYFfsgiMJEDye6xiSO2k+OUYA4jeB0OL390UFy5hyrCRj+Gj+Zf0ZhjusxE9sIHGjT/EmlfDjpC6jjH/1LY4tpoW+xlWhtyaDd/TEiBAxgHpGBMwvjda7c65Uku2vmuIPBRLRUfqBQUGBUF1G7i9X/Nf2Nfut+Jq+wb2xcY04cKqdVhKDBJVkpeZHUKzJNUVuhpCyiSLtUDcE1dxRx4lm3ndUyNYFpmvkN22XOs1vXR0U7HMy0ORE4axfk5eIGZ84of7RzazLPDlehSPbKOtYK2nQcHskvpT+O9PI2vytvvfQ60rl3eYkCeGY88ZvrmMCuLl4GR/M9gCGH6HPD8TFtiFtRwqWMb1sZx+WvZS1WW6+FqbHzT0M/4ohXCUXg4uFl0+vvhICijctg9ufQCLy0blFyEQAJuKzHIo/BjCI2PKF9Y6wSbaYg3/Cr/u0rU8N7fFLDslcwn4KBdE5Svma49nHFs0HukgpEgvjIeBtKlu9WM80aL/5v1m7v40VzWdgYsqv3LSHouPKBFWU4xIyWnS1kI+LT7Cy6rH+YKeNLIC34q6THM9LHGZPl0oJcK593AqN8oY2XuE9t0TnijR3JmdiZBwDDre47qEoN3cKqAUqW0vS2TH9spU2Ug8TgqJrQ5n69rqEaVsL1PbmS2wtmBpPTPhbk2w1j4aFy4WPcgjEtYqzn1yF3JWZLgYSlNCCVFu24eNlqRrWafYOb06IAbOruoc0OD/NHqPDM6aUG6K8GUwRLkMn0rjLcq3UvtbgLf6ZILM7WU9biLXLHaKwcJnYxgyod8+kKV++Z16fV8IbiVB4UX31pWQiQ7gA03cN7P9W4x354WXYVUgA6bVJUOPf+4XjELfCCv40j0Hke2fGRHuO5LsJy+9axyFwBG4nvWDK10r9R4KiONe9Alj2UBlGihITqUwK5rPfLhx/BLxLlDuPiE3HkTNE7uk82eLOwanW0YQdUOQ3a97sN290GQ/u5YHMFHCrvp673/kelp359+ftyppc7w3K/9TJEPeYjcOE1xqZZkrXLbkzILs0dEY7K9y8HMZ4aubt0sjfbxBEju8n+G+dU1KEhe7eB1srB5RTnKVbZo8Ms4LPLvGG8zBYiJDgGF9aomwdnWYdbm9wt0wJW4zRWux5eZ3vosPR27hxavwIymveYkYiw8fKXU0Pcehlz8eMwZAt+FikcIw/n5iV5o4EfT6RW7iZsIDI465OoFSW2VIdZi9vyqn9HyvVXGALxjEgbp+W13AN2DUQ0jNEBQZK794yXMIwHUpvWC3A4GxYDVAWjLl/2sAqKLSUwMj+WOXJHbjqAYsBgqVsbuM6Q0PcxgC1dqf3YLfl9dleeBgnjnJXFcgES8NuCtJn29uGMaT6tcUyobciWOa+Exadtrtv+ZAkFqq2qIoSlaY8nLKsZDZb0RCxGiQp0e1hGJyi0yGN3jZLN0SOSUJkx9e2EHRuQgE/ydBWftmNdjVW5SRXp+jpHYgRlqfRJGApHRqPLlYwvn7aLiq8hRXW+WrtimYMHjP9sbo9L2vkBgkaEs47H/89LsPaaRorIip+uaRXd5pMrBKa/7jl8JZ5phlt/jv4dDFQwPwYUc6kRA+fCZKwNZu8QqZd0A/PuVnciTwn6DIe63U+jR3S7pq1O6ehl0j8ZlHMXxolUdMQLqXBL85AamyA7N8g1aizkL+s+ii/2LjfIYN6kNBVcHwr6nWiwne4kGBbAXof+LZTHVw5QP+4m5RV4HanRh8N2EmY1BazA/D4hGdamiL+RmMXLipjvuwuevFBLTc3ChtctZ8jb3yuGNtNZ9dCnV8wnc1/IPeb359+pJ5Hq1qICn2UagY3QffVjWcp0FvOva3d5XhJygulbETBz4xg5+3P7YwI2YjssfNxnoRxq6eJ7rkH2FYd13yN6eZGoAVU3UKbICkXABLRzgGHiCi1llFR0ysFef322rQrK+wjfLjAMyzYahiTqP4Wa36jk1kbLdrFBjJbWp4dFmAYeJH5wYsuJxPJfsUYEpsuwOn7RNvr3Bdj0I1zolniwdHz3+eiotCDX52EG3pkx1smXhj/WAKjlg8F2RZthdgcfpuVm8eR2jGdxWk8EXJNDLct2SH3Q9BdDZlILAmv1yurYUUgEIA+leHbUfTLbhiEFKJN8oB1evDT2pn2oFFpHQ2f29fS8fbY3sHa2rNpmG+mVh7tKzxaI0W6jYQbqbm51C2BvmMgDidZGNo1P3l6Sk04gXFwTbES6emskn9WO+WpqmRoA7K6cBSMS0NKrqgEAPiqWfuHHPHHilmqMQLfH2dPcIJsJWT7iUYYcrg9ZZCGOkYFRhUu67ojBBFxlYllbsGDQ8cQArmKzhKtXRXQEabZDfjWeEwXR86UlfMUIRbSk4qJ4t9hWgBf+W6XVllY/rQmV7iQEniUupP8M+1/QK0F3xQv7qM/W0fGheTKlaUMIObGlP9ilSOsmgrknx09MmIgkwkQtYAraG/2cte7Rba0tuofXT1cXUDoBGOs/AeKFraxi1srMOw6ZmseLNuWA4KhU+vukRzT5FQdTI1AyxV/ZFef+mxz/fILrz9jorj5JcQy8NEd/zikz+ZwVPhXw8DZbKNlyajxbmy95/1vmZnEAyahD1yswgF+icDW9sG1ssPNclBmgj/B1fZX6cbi+o6Q1DlBTC9aANTklmvf7sods2BzlLi3eUldwAC3w4ioGOvmoUo24WwREAMPmmmPxUK4rAJrmJ4Xw3yy5nvLOqEJfUNg2UnQziRAFs5gKRU0jXppjeAuZ5ooixXgsAiVEqi/rUQNBqwZKQAx+k+danASHy4g8q5eAkIFeCG6JUTOg+kc94grFvbpimif1fVxZfIUrIMU2YmAf6VbzealvsIwRjU6Uh0nYAEn+tHGrq++GOKahm5aTcWKQthtYqCM9BOimpuK0gDnShAbiU3lXYIZf3yqKsn064m6NFdR/A6GN5eeMXc8vmnwbUXvJKem1E9H22bXUaAKd8KnfQh7obHQrjfFxz3JydDsJPUEBm5j4Mp/Rt39gNchNfegsfg5Xd2Yg01dUiziosBYVtSCzx76MU3azFfZsLGdtv8PUb8FmaSjXYZHIN5+4ajmPYr48l2Gd7kQB/LyW9MkKpP6CrNrppyQcne1a1IX/fctxlTgExvKhhcMnt9QQKIVFd2Up5kftWLcPUdiE7sU3I3jJKe1AqRlOHnULfOyoI+G5hn3sIT0Vssfv/a0X+WibcL3aEeINuABOyAZ7/Bo5/M6B3fncenz/lv5d93xqTzCGgCO6ngYuN71GRlYJcfcgj4o5Scz81pEeun++B9ueoaEg964me1B4rcaxlLNFm4+FSn8WeOCbh41o1UfU2laQ9k9BkutQIELmOryF7zto7109aGQ7nDxllMJHj4Tpatl3vNFrmsYTPNU3SClNZQHGSbs7b2+YKexkTuz6UGAKglEiV0noxRhDqjp0pWxpwXuhokagRqEGz7ZAOQqVCPsDSqmsJ70hvr+Jo+1s+FtBdPJvhaiGWS29WB1obnDpoViiRb/7+vvKLifUCgzCfKdDbiZUDNXRdJi45W0aolmi/H1bLsnvMQeAMadJ5XhU76Zip8i0gn1sSUi57YAf4uTsSv4ZnkarOgJaPk6v+Exj/rsUe8TNdvhupOrvEsy6td7R9ib5QYyeTaAsKu/C+eVysuYYfVyEeSJiLtvsNNVbHVXKggJOmD4/DtU/d8QGN4KbDPcq5nZ63ggEbFvfFGBDkXa7Oj0RXBSiWFn5Pmk8SpFcXmpzCyXfQvzDzEH6lUwX0npFJLChqrj2Ecjn16K/2Kh68wVfJtfdmOibbJifr5oYkTFkjToPMw9Jm61zkAYQXdCQ50ORXHwi9TP9AXlUFOes6li8ryIJpyA/2TKG6tUzKQ4SQmTW+QIfxgNXsoyMCcs+6aAINC/FHOvtD2+19a7PDecH8icFbIZosBGgqa4Jl3wo6TwRqFc04LKHvVUXKMCG1s/3mg37Z2Uz4L8x/tmG9PnIasr7M8gfLGvqDDcG7jSM+FKlGEGOzOSAleLezYjcN+Ec1eNyVQDDHSNGm9iNolfR02En2Ww2/YCBD2zyvHkuMvTqSVhjl7JeHzfhIKgHn7OBxVmRHz1A4UD/nDMMvRuWfqto4k0vh22sAgXa4V5Lqde3lUGlR2cgo6YxsXfLi0WFGPuG2Sj8eSjKTrXhFoH1dHa7lc2LqPtDTcrbitq8IokfG3KR6QxxC5utTZntRusGn9wOukdSyzy9fPYqFEIKarqlxr/txjv8ku4Eqrk8R4Cb+KdwdAgAf6uLa348+SJXyXDSbCeqElZJNkgR1oxSF4jjtlssVymTvVrNm6UWjt1fdwNSNUQYonAL0r+Eru0B+Hbweuvt3QhVcBs7SviZyEbdJRX48mCTMF3kjCfjWxKYpZK08vY4x+57K8OAZV0DsYMako1NCnFgeelQGjFZyf98+AdZlf8jN16HFuk3Re19jpE9IMmdKEgJYw+D0b+62oQ67Apo52Jid0LqQR1a1nAz8V3ulfqHj0g/MkBb7lv5AryfHACESnOIIW3o9ue7fOsaD0dlYd7mCizhl3OVLatsEHu6hqP0VUi6t6O1zGx1iOCuXbqv31HEy5gzQQv6/vGS0AYFS21m+2/OKdzwrLPwHvo7wZoa4+VDL1b5UbWmfvEF9C78OPTxmMGwpyr3TaON9o4JyftEk2BT4TQSTxjHhWC2uRn0fsba4OakaAaLYdsYOwHjCD78HXJGPs8rHVaXOe3Edy5Mqd8/IKmSGPLhWtwGqTyT7icoDy/aSY31E4ghhUtnzYMsvr00mZ3McC8+s9yP8zPX+G7F6d39mxiAcAPtTowH96KzeHOTEVAKGsTgEYcsu6dyF4OvuCb2x/km3Wkqbs3Q5c617qiVkQTD1X0gJY4u5pwPHUgL0EaRrAY1Ysr6y3Bod/eQFK/SlPyEF5PFbbYd13SDonYSD/YHCZA1EiOLyyWCC0X3kyIpv8xeTxVn05pvJAsq4ZwdMGM9XqAO91B4Ywee6g1u9d5iUYN/LwbWrJUWys0AC2WryPb72lle0sMQFhymXoRPWURnzV1DD1FKRl5mK3d8nucUP//opzBUxpdHXkKaFQT/fxMD7QrxewjHeZfxWAUcQdHpzsHMSwvM7rqjH4ELjJP9zPn2MSmbB0fB08HNiSwoDXXRPe/MJeOSPHICoJy5RMG4aMexHdZYAucVnrLjkh6ZIPyw6nLxJvK73lPIDlKwDIoMmwBI22021mNsFcHhtLAH1lS6i2xa0Gb4Cw9i0xodYIAawFcAumL7THq0qFQu/YMbNFR0YNW37udErUSLEXJW3m4jJKbCSsZc8EccX0VUb/Tai8hodnnna9d17bN1QW5rOyqYhofwNRdRQcVFpZLE4QtuIscA0RHAStlVYFNZSBtRqjtvdTCQsFY+ssU+Jp7bXtPsoj6qiXxgo6Y0BrHOaNpUoI1hTZQXI3In5zLLqenfMT4MJH6xHPMIJTguyl2fHVsypxddxSbgDPummrYyLO5EZ47HFR7qFeKZyXYeE2txtqDjoxBSKCoepAIkAmGP1cvaCYEUPdMn+8SSbipcrJG2b9xs3u7SC+UO2F1jn8uwmPeeepwAqkBGdY17EmOJAuJNFSOxrXb5h8ylSI0P90wtE1iBdtIcAVGvA4on5sGqA7D0zlTxIi7oii7rn83hRVkcJz+YYEn1eko4dfVZ6Dswm0vLVDSlCqrV36ogbohXNYqaheaQk8i20Qu8uNNr39AVSVA0vBc2Ql24sEPsDTBgkKQtMiiTUAM63Lee/oaPWp2cA/J+Aao3aMcGO3CTfKXm+nXIFeLMC1hc1KmahyrfZ5kglFLZQHBwMV/No0RQhrD0t7ws8nKfzmx01XimmXwCVtqZxi006+rx0hDipbuB4bI9scLhzuVDsB90xbXcwUnRl+U2B2jQVB5cnAMh0Bhr3fUdpqYSunbZsAb4PVk6iDDV3yPhOTCcseKB5/fTzVsT9Ll497M8YaXzYzf2gf9V4bWiXRihCjaFOGiPbwkpO+fmM6DK/zHlLfdGzjLHUu8n4E56/Mvq53yEmV/5wpvgESHde8H4wUw9STw04K9NT1jUQE23a16A1+6RwQgl4tiIlWPc28cjRjNcdjssT+29fThkeo3MkLTaPoeFwXk9AbY8VYnpnd/X+B1kY78wZkAcGIuGFGeaYjlzIFG7pxjVUb55XusAVdEyox0bjQD+4Qh2+/C/btqhi1i+dzzCI/npC7qB3pAQrSFtHYQ4LTMtiQGc9Ge8P7g4bYyd/N+GvHLPXVtRNt1aC4cHUvmhwr3z3/p2w4HtdJPUcBoomoSF4gd+AwjiWxjtr8QTS4s26hbz57Lw7jOLV/oAywCIvHtM8PbOMTL0HlL3HDKnHQIlH4GHLU2vtFFDefZOQyhdficIx706nc/hwS0tRgPofyMl7qGiRw74wSHM4K7xWQ/e0wWXXBuyEE/C9uY/e7MzEMM7EGumoPN4KL08P2bpe9B/3pGO16lMmcEhQ9opURjmgg3uIt+WyNy3Ya8OH626PkWHx18N+VAvBNuIgp2e1l0AkerHPGYbCMKkSq2+XHL1NLF8DVMBikXrFmxT6mjxqjQ3e7G+CpgbIgBAKIX4HaL2XBcCUiXBXVgYANfd8pWjsHmXcv+F7rXn5e/mZn2uVcChVNNfrusIRSAeWJam9bu3ktZNa9Nkz18l+/3+lUVXo8MEFWTQGDhf7P/WP/UJbxrR2XQ954ZWnQ6ZA77iGxUuDGrSbuLzPzGLnlnypjzzFZR+bB4Gk1ybNShRq1uwFBo42n3S0hA8K28JnBKuKVwi+EtBGW6SW6ctZkcNBz0rzbkns9/f2MxNnCj1Rq8VkNza0E7aaa+7dfM04U09zkdu7K0iYIT8bUG8m8aZ/P90BlN7JjNsavM9BupTBXC+uFBxNkTFB/WYpzBX4tIclOyEaQy8+6R/ZFhgs5mPjbcf8dQee4Lv9ChKEXs9PKxQ5jwE03Vvl8o2xUGXX6gnT+qXy5C2hfWBgjFnZUvKCYcQM07j7/jIG4zMzJR0GVDvHhdG25It0a5f+V3uIjBz7dUnvIQXf22jvlyKlWiVobupD5SZchj7adXN7wMmdHJlcKWLxFy3bHmINQB18Qj6snx3zfaf+lIuG6ZH1yhuDgowkm7cau01pFWazriG7Tjc7cQsULjPNIW5d/5Q5w+PJvx9ILWdwAAXZuWNjabRVk2fC/ABNOOH4Zzw8V/ov+tqXQTQm/UmKZGbLZ93iX56dhDZUiL8ROr6CZkNZ9jcEzz5j/irtJxoPvaTwkTlJcjEui3KWlU1sQFygXi+VF4Qd2q6scFIMOe7XqBl8htlDSlJ1cy/cDGYB7L4HmR/4c75lT6UslPGls2f8tOfcs3z+0dimhUjY45gxh1mXVUqjQMH1Vyr7K/tmNWxuiXhg0/vglyxzd7TNyXMJojhMNv/DImXlPG89xd0gzylOoq4p2KVyyN/5GVz2UddLw6XO2LdHuPiX4gOuq+IMXnpwwa5UEW8PoNMjB7iIUOOS+XZU0ZFb1kHyJ8leVvcaruLCR+eTq3EDH6xPJr5S48oHobS5b86RNtAPZiWG9KUbRm/T0RTTGjGeeD3gB0CZw9YUpiPwkp4qI8uFpzG9p48iqUvep3C7AQPYJ1lE6j8reNSEoJoXGpHs8i1N9tPgxDlP7se+/9cPZnzDUKWU9iEgEjK2SEXxqoj1LonWjdKKn5GNbUuTFfmEnk7VqOHo1Nrzq9sTHExx1UvtVTmhSWomzApl9gRUHgnPP05bk9O/JlDbjLKUS1RRGw/olSPFUEAyjd4sEPROp3Enad6oRW+vjGPIZdLZxq606qBvuOmrOY2JfxjUxP5YLeB6HQ87auE56mD3gCXTdK5c9r7Ver8T/jevEtNJ3/IngObetq1tJn+VdCLuyHSsp0bKvZ+t+obflocAyeu4aW9K6AMiHXu6Yu1OLziZWFlwl9hgM7IE2hlbCI7MNxisM9fiHfe+vCnnerNo4DLbN5+vl2h+Mr5xqTLl2jjA7sMZX+cnbjBu6+qxI4WzokslUycRHpOVUtA28kM8EP7R4ei7h/UrH4z7+W2Mz50fNUkEGyjAaOINDjTd/M4Ps2Cvs4+El1qFHkO9Sz6WOPhlFKrm5aeUgWvL6tutKBo5o6okS2IkAcuk2EhL9Iuy8vimv3vCipw/0TWKaUjyBFs2NeqQbxJ8LBNVK6Hh+cPMQCKa+SIqZVn10iJY640kcelql9Re4O/o3RtAfKhvkfILxLW5QflUi/SuMkZ1nQUwtOmo1KQM3ZYREpBypBqIlqcvLBFZrCQ6yQ8zntMBzxbS0N94RzE77nrn4GayVFvYgf1V0DiG9gWO+t1zIakNiVgZ5CwCKGqSTWwyy/QiOMaNSJjHzCLtkoxp367RP0mVT4ZdAJIDIRioFkRMMGwIa7Ze4dnJ2Z+nYtOBUju0OYqEVsCDHnuwaRFfSbkGs8llc3K1mGX8U70i2/LW1KvOwg80sMRGBNQmqsZHMYOCPebTiLVcFAd7y/3WnuunvL8F5AANWLGotFS2TY13EvUEjslzmBJetZAbwC3Z45cRs9QVgjW20wFeHNopVvQeEmQZGtaRHap8h0GUg22KxZZCaLfraOnVYXFSdx//6DgsgB7vnEWHUfF4OiF2Hp3n1ToruCl/7hpc6HdoYq/s5+hXG14nva3bViFS/rbVBQILcmtuPVuWXZey5aXpmW4mc0FwOKfrLqv/rVB3DgbPRACZIn0tBMBty13kEHT4jFXlKAxyZI9zQtyaMDpYcgKzQnri4Eiy8jmDLoCoX5Wq+05wNjy8MczGHiczH7wDrrVEZ4Lc4ctQwtkCULG/KI889inEe0ZBOo9kqtiO4ouB8BR0lW3l8C8M2RNcCfZCKdYA3jeId4ILrfFiybs9sfMjvc63FB08jV70VYV/joMuE2JH/XL+UfFb0QRTHO5tayoqR3VTpydfLH+qaVpp8lLpZGELVok8nuxGyS9BjNsNZlOjoJ6xu3Fz2h61ffFdtfLL6NT/BlRSMcbUHg4gZ6hEEj4lADFFh1FWmcP7af+epyptzHNwdLDj4WaHFIHpBf3rYClyQ0DSC4po5QC7ICPMQrST8Z9YWl6YYId2gs0CJdLCMXcZVT4YvGmCNRZgwzuEfG75ssgfzVWnWKkZns4TQceGV6FmyodmB9RFhOOcDIcK79pzY25cCZ4OsBRMQqN9tPAQR1tinVQNwI9IMB5bPb5ZJiwMc0hXGlDs8+UM5qZCKrV5wK6QyDT4Abyxt77DKY9YsYniO2l4SppTTyP+WIn+vpzIPW6yZ/XmiWWDG4jiq1xvN+xb3q0bdcgGQXVh95msTLzaruehS9BLKlYVf+SeNrqFTLn45Bbepj6BNV7r7pnrZ3miZh2FSGsjFddP1cV0Wbu966POzmDCF10XEobW65VKbnlLJdq3UiXIfkDdHGjbiYcpH0mHppFkuwPlbKyUHgSfGB1I/UKhLw/ezG92tB69ROShUAHWTZ5Tq+lwQbS95QkxyNUBUcAUR7+KQsCwmlSpFBgKYOLOP1XieXCdkEXaW08HFoTG/cviY9kkm9gvsI7484hekhq1Iiqtkzn3SWvPMinoV65SSDZcgfVNEZcoaEzBlZKPV1ZCFo8TpGedYe7LFzAMnzvfBrM57Q0XhtIalm9k1OAEqAMrLPX68zrhCZNYPNLvEHvk2mrISawrfYy2y+4zLuwIpyEwRHmckjRQsQLJnbhE5lPctAcURPAiH/w3xNipBlu6XnZfS+tfJgtRwzoos3OZ70ANyPR5Y02nF3RzDeNiMoT02YRaY2vwFT4SFtta1Lhk/MdVyscKFNtWYqPsHeLb4wEqZLArH5MqiypsWQLhoWyJIcNV8tMVJjwQUGzIzET/+1XY8Mij4tkNP/ZMT+lm1kD5ofuU9eIBMKGW4f5FiWrShg8WZ1Npj6tgeYFJA7IOi66E5jkan4/ly6k0NJfl1Zs4luvndTOF/E4yjtoGyn959JyMBX7NixWinx5Tt3aYZWhsFpBMg3qvecutxIZ5JmpdYsv0E5PoZV+CdCw7Kb6lxJ5B+3jxHp/4+sHVflbcWpF02E82XUYZvYx+hIV/IfuZGD8m69RH0NPn6LMoN3engwCzLR8VL4dRagyqaLLntWaX/PoiVz3nU7rSYGVcY8eZOFO/HqyyX+sOXV1XwTCu8t9kmipqg4afVpavrh4I3uKgo7wUmgSQoMZcP4b62DhwqhBAXW8ZbRgwg2VNY2NIiB9gfyUZl36OVgSoJbem4TaLfU7Pez5KZoMZEBFkjbSD7miF4e/PaNITLXxHaFZneN8Mq/kxbdTMWiNyIQswVRQZRa4GEnT6ORhOOUOyQWd7UKyqlTRIVmHj9Yr3d/Rua4hM/3xriM7uYgyC2Gk5NWZkMVHAel9dSl8IvDaXkgGROahvF0OHBY2QZ90w78PF3A9IKA8es5Up+c1Sk0WS+1pXYVIRpGTZiMKUMjHtAcbHAxVwBydYNuxWd6KuBvdN39HX8/fy2eSlsuamtLSrQL+xSKbtV7tFFm/mhu/8/3lLLPSWJszlyyjRYP1NG0M/VqFiR9ZBPThd3L5sAjx7ZKwLV9Pf+nqpbJrMbSNPgw9RrYVP68N0KUCLVTyrtQpLQXaCK1IiZurRbaCzd2xbOI7GBJmosBo2ox3BkUNz0uH7GUBf4UcLbx7sLytYUv+fdXWHo2ZI3j8jo+IGJWPXwLecGnZo5awiQa8Zf6Y8C0ffQHyKZk2OVgvG7jqLQUmqcicQukVgMzdZf0nVnazixg4e10E3YI3iEtHeFRy4CHm9d/RSXWTrIz6gdpamkUdwsBXkRZ5VsBcgyKVYlSeq9ACJpNQFquA6TJR+nHkQwJEVlNWCR6ik36b6kUaQaT22aOLpp8FVk/1fuvbsahTmH1nek6GqZr3iFzkmmrADAi4W9KaguOqdyjpi+k5YsOWqAIRqvqnrnofL0Zli0wBWtn6yWKrPdzD6ElagfG9AABbPjegvh9OKSOZIOSlCwWhy+cHJ0eYWMqHapD6QGRfOD99ghTZ4f/2HrWkDVS6QpIwc3jQFuffhTRhhDDiMlNoqq8K5uBA8EIGcU8G4TGV73p254NDXf8C8UFj0V+bTyBpgpyEBYigGa6CSFcOPKB6TKMc9+ONoSvUiRFV5idPza23vBemDUO0MaK2K3rKM59+oRCEMRjVkgmankZaQeLreq7OYJTeVkAO4yPF3ThtY5oYyvjeWhq6ez5oHQeBHWJ5vcxi8VAD0lFRJvzuBGDm6HLmkFlP+B7HJ+DhsDeZtfrZTGi7Jb+qyOMjN1KMx928aBXaW1XCDx2uw63pZDJ70S780HFgbIKfkx1aPLYx0OpbfJMlNhpqLopKZOOl9ES7ZA25wBGiuqV5wLvsnGK/26j/yTo5P1WxS+zozUdrYu1ZklpjJWSCo8ZkAK+06vScUZVUTlcYxNCKKiwc30Lgb6S/z7SWuXe712wgtd4uX3zCXBSpcxb01FMe07ocoKWANYX1qqXHYu/gHzcod9t8K0ZE48ywBeNG1LWyTEAvJZcbEQZ0JZHMJUuvezlq0vohFei1L5MIwEwuv+JQkYD/aI2KHhKNVUvl2aodhcKAtYRoBSoP3CxglWCqs61CVkZxAZQu8VyjoXCMuOY0mREm+X9ASGxweueGI3mKpMp/YwKLwi9kALH8+80nEqUknN/ZuDbmmcOdrS8J0EwMFl4U5mgx4NfRFdmGNZaWcqoy/xxaAUYinttbgoABFR37juSMO72+X2CVyi4vJFQFnFptq70fgJjNteNwXSQkbcvfe+v4wdUJCi/QLVFd7kUgTcmy/Eox2y3/v0mWBYkyMzHl0XHGHVK4T8AaYI9/rE2MCbyLr5MUMqRk6aUWEOWPe5Yx8GLHJ6nFmq4TtAvXq2WwbGJe6Su4KppcqveWOaJcWhp2JkqcidRZO2705JxvzYiEDMz4BauBY7+0H+J+v59QSsbD7Ljd0CTAO7UO7U8rWcZ55XNv4tXoz109zDh273hPf+X59X9Su5HGJPJBD0L/gLK5qBjBnqQM4CADEU1CV+8fUGYObKDReu8d/SCECCsS6yVDU6Wgh2MZt2TkktYcp5oW4CeWaAw5C+UgDVF1obcSnHRhvU9bnTTn9OERJJUt+8HkhyWCdCaXkwR7yy1m8+r0eFW5c71GDrg2jKBOSzx649RaBfCYj/oyOV1/NGkL5g9xR9FelxVx4WSb9Ow500uvEpSqzcR+0xQK620qTjJxyEo5XjXzghsDxb3+mGr63m3vGP9tatoWXSr+od3KzmK9I4HMjVy177MaIbjuMd70P/AfUfZ7ob0D07jyKYRrLGsRS2AooDXU8Jq11f8tRbYk5yGg4ESegmxVpnXqiWjBtThDUdjeIrML5AK03mVzFtdqDyOEuKVGLBnQEAIeFZBdNkYY+dG/9jHCG5rM1qknGSB1lmrf8+SIkj2BuZu8erjUwKGzfqKr7rNnf1/pmQLSjP6N6mn8hwEKEmm1hnpfv2aZ76RdauSyGi9fnQpHlPBdy5FhUwXHz5DPtLgmnZB9qHeJqfv6IYKjbtEMC7u3NquYuZuzByQJmJzLNiA5l9N+9U0xhNKEDk7b6buFDrKYobvKTC8C3Ai+pCAZ6xrYiqMA1xeCumJitozBf37bdGQZUOtbL8UxL0/mhCIsv+Hq4tFdkYgWhAFLVrqaiE2mo7khx681hhP6FP2bxTylCnpqrzv+TBY8XiKP6sGN/djRa3cpK4hExHl39dGH7jZF8Yz2srng1d4gwHlwza5e8P1rsSfmi2YwLOyCtzXs5F8ey+1Z4FHD1LDsFZ26FwlDxGynoJysQ5rQYLdRod5iwm6Vhd5iTbik9ebLq1Fftc52+25nS9cnl3T317kPnL5KMGQH+BRqEuCVkpKEcwymN7QktoZutof+i2bLfrQwNVy6vmml9MXCF4f8HomFlVe56f4S0Boia615GzpkCcBja0WOOmroV3ESArrkK0764qYds+LxLhVVu/f+uxYWFt19zHBaoFeZVBslZntdLFknOs1FrUVbc/XwPAOWw9PPpdPQKggT4t8vlh1kkuplVydsV4kBVQ1znJXEhg9oV7aKw6fQ18Nfx9/NnlIVwptlDvAKjwFm5Uw9Kr0kP4BmRmMxh5nceQfQ1pzMsZCx1x1kBwMQF+YdW32KGjzPTOFU8FkL7X3twkfWPoc9nD2AoavqMP3EO040x4wCI0N9yz5AvZTCzj79uwgs1/YOs/MyB2PYvG6H3ITioCGas3ocGjZdxZ49/QOBSPGae3bRkYBETVFxGUx4PXULwSHo5ETspArvn4kAiJ/0N2Q1py9toIabIjZypnTgKiTNmBr0fGaDB+CpSuf+9C8FT9icVKKbEkpuf7J8kpa1o/K+itLzCaYP7Yt/f/QJWWCtYJmNBrtJpH06iAssxNW0cgDpbawKMMW1pA7LURA8spmDVTqnblPhpTVlZX7QVmTPNmZjVVhzLGwsxTnxfDl6wgmJmTPqWSo9nHDqjE4sKPPT8Uz7B1UPnRfXGcMZuoH89swpauvilwKHob2hXfIqXxHS5wJ6yMwmclaiLSIg7f3ehHgPS/R0gLwQiqqYczoEKB+3cpFyAief1zicMdNedtbPC4gE45pQkQFAtOxRUXA7NDEwtOhQnbYruj6HJllcpLqTO3O6JplCTmPQiNc4SpJd/ffZgZ/C1WcoYyMhT8GnE08ofk+GYn+IkhCJ3IIzKpfRMHWRoCmihGN+Vx3SimQvh6yWno7p5VUa6BUttcdpFdkbYO/vCfDMxGKS/Ooq8jBj4E7fdbxb4RvGJlYN8/dWIX1IVWGW6pGuAyX+3LwiAtLe+iYvnBzEbL5MlGo+PG8Sdv7l2eh1iCs3MV8uxwfnumjqYm1r1bJdYtllYRwZ59/9UWFKNnR5jMaSAU+Ai2koP6Eij2SMNQ3o8gvpfcAECwoAHeSWkLYBZrv6CK6lIzt2hbpEPT2yXgxKb5NWrMRcRVRknE5M2yHo9VPHeHr2mTQov3J11y3Sfz3p4f0yQ10DBfCPNJBFF6J15z+fn9SpfjfZi5dKUmVMopfzMwaJfgmZeyqWYM20o3oJ21nQaoA5Jk2Set2uW3ZroNzAz1uJvBs/PZPM9lUZDOVAUy9PKPnRjulxpX4C7koruqpRAriVncc4T1p7P0/uURHNY2LfZzpRAyd8p86rEcov/G02W4+TY5xypLxxbqe6CS8CFwLiVCaEz9RCsYnMuNh2mg9h5OGsWmRLmhnxo7hJbcbOLSJrmLu/LosKAkb83lY4M86rMoR8mbrYq8kkNXZtAEx6aAqb4YcsMdInLbYmHa3Z+UuAYrqe2s6qellUoKBWLIE1cLToaJ77YS/m5SAyH3TfSHhjTam4LkVveE0AS2ibJHaSyE3DGD/rkLVOs0ukMk4UVqR3fVAIx8qzDmL7bMsPD4fKQmK4FZRQRDkCuEzqC77OSGdoN6aODZKxcavcZ0eJZ0vTsjEv8abGndsvBCKUrfD9gZcG3gPNDg02rjX4Co2sYuugyhM2YNq+BG9wHnawFgw6nRuPScPGmF4yR3Je0vV9zzBrz19QxYEINsf8azKt4g/YGArbA15Fx8wj9x8yZBkPyUBfTI5rEAtcDdv6buUKAKkwTabH53DXrvkVe7uY5ihmFyB4dCYDbj4gOHO9QVM61dLfqmurrwhEAom2OtuwWWzwBnKccsqXfOsX69aL70pFsIZFcYL/UKtyOOdzNGFkN8bIycdpw9C5HONhHIplgKeBsj5xpE1aAfVmASgJ4bY7AfCt1clW1RJtvJ0e7n4obzUapxNsNaHAQ2T7xN83kWNieBdPgVSxH5J852cWEyPurKK+AIi81SV6VxIkiYp7D3oAeBLFl2wUm2wlPGbcfAT1Xk0re7iLA7Z2S06oEvqWQly6EwKqMGWplS+gOLQ9bwOi1fM0X3WNhdMEPJksQ4r3Tg5ht1gOY77gePIKiDSlHGY1D/KQeRX0KXKMPVUo5HiBZNrCVG69czQ0EQpYuPOBpeEglnKATJI9MwvwmPHdtC9eyRy/QLy5gMEErtPDYSOIQPzO6KQwSK0pxE2OjG/4eOFtedy4LDckhWZrHHMpKc3FuEBK85lUEF6HNAU+zSGJ+KS86qg7yw71rU08ix8Lz9hmSFrY/NxTJuvxDTC+5fglS6GC/U4KU+xRaytpaW1f041YK9av0/cKhlJADDAXxtponDbc6C8hzomZeekCg38BkbVqXTwZfH+66XFfFtcO6P7E+mYmwacooFi/we6+OsB0LmBVJTz9mrkSLtH22TtdxD2QHqbsO/YF+w1ekkqGK6KIAHBJS7Y9hlcOx9Wjz5mWdj4+scxz3rA8LT14mNewogZFjm2J5y3L9rb7DEAMrNsX1kJWVtWwCABe2vxVRoNrl7XEbJh2sk7Xf2paglU0DWhxSrHLnsbUvG47kVSlQepSPwGTS31CDQD/LqtZhDTHtUytfLsV7R48IZG8hi9QgCzNoaJweA7nhulUFPnw1IPf3UC5kZTef2YBLhhHVvbaXni5Mj0de2rqj+5ALCuGzy13SyLEQmEovubwle1nXbKHBUx/i/k1lJg1nGRu+cwJs4whNV1oSFZ9gBSjl575One8yH99TeklYhFJ1TkH5w2UfSVloa2Q9S7xAW942knaxzVPmF3MJg0oGY73Pn/87LpQERLj+MKRj0GOiQnfFaYc9KL8iyI6RjCQ/De2183bgK+pe9qofNSQUJdG4d0rCkGMBRinidRvp+jSMxguZgtEl1mDg1sEr+9/2YyVNeO/NmKOI3dpJPIiV6cRwQalcSz/jH5NbmfoiULWYZEmr/qk7LGPJhHExqsz5i61yxHlAX5UbsN/afLmm17wqhOXrNtwMJfXKDpc6GhmqPkcj+ryjQTS87qVdZJbsdX1zov4UtDlRvGr9YqktTI8vR+KS4wwAYpCTYJ/UiZ/d0WpkWas5nmLS4UkFqj9giCD6uCzMVYu7pkabrS2jYj0D7R8DWZC7qPifJMTmiCVJkk7hIAlaOAhJ3xoEDRU6wzgtldi2NrfqkdC13WywkAPaCzs2Me3ZOpZV5uJPGjXzbhogUbHaMZ5bepIRHqIb569IjkQzsZA0mJXrj55o5wuZXeC2MLgR4g4svBCqyVI0njiENBuTGkOCpDE0x2goC3/sjjtJeYarGLgn5AX9aHNbJ8qhm4BpkhLD6381huixK63WZ0f4jEln66WqiS3jPyISeOG2mbzRo9kwh6y0CErQSdrJFXaLkwE35VjBgcURVdiz0JmHY25v1EpjYkyg049OSrf7jRQzgLaljBi/+s4Yh3Ak0EupIAYB80/8sp6wBouBR+JW6/FIzYWTSp5tj6Zv7QOPF0IuQEXKhytEoaPNbB5ZPu4zg/kW/N4Sq2TwS4YF/ZsF+zVanS7wFPku4pFHR4ZM33vCoxs822694H+eUseBdWnKz1OY6tXa5hqqntbR6bN4uXjaQ2TNOHidt6CDT0Fx8OqZ8ZSMT2VnWcBg0XkpEgjwCdBFphqRPBnfOE9tpGp2M+zIo6cmXG0hUd/r+oNMQ9Q7X0MYq75E/Gs0JuKSNDQoE2WIZ99HmDtzQuLkPep752zFISiN3JSWjjg3j/w2Z939PX/M9es6hdMLPuaGS4PccSRWeNfq8v/y4Zyi7N9RY7cvC8H3SEIHFiYPp6Qc9/UUMifQbVhRMKsg53OznH+WLtawGtdOYq9wSJ0KVcFAVQCuTM8fdiIM+3VzzugQ3xgQor6DzYcqg/RLqioCC1pPa6v73cfViQrcXV0wCyGefCTAxt2FTHwGM/wNHw4l5KwFwPfRcTJnz/TmpjwAeMWNkRly5DItBWC6SfOa/2WVQ6v+3U3No6wsnm8MjyShVpxnxERBD9RvklV/iQumkHGYMo7jOeN3qbW6aBh3MpSMg/Hfn7wfWNRr7b45v9Mc/fyZFTNvBeMkzFxRNizvA5jhgmLjZBepVAUvV1SnPXAQUd5oxwKJ64MPX3D1FEWEttCZVlgs4qyX+NA8OpdiKML9HJgMntfdMwZovvI6L5lzzCdW5TJLb514B5qyFV1M7RLjsFgT10Qb1A/gLT7dsNSPDavp5ZneE37mC2Fe7GlfIaM+pQ68rweyQXZvej6mqFLzVqZ2YooXQB6ygWC31SZxcNJMHMyCFmWKKrk2AdO37SDHw0Oa7mSB5bjcGW4jTUPMpun2k3SQ8LoIHgYszamgj28tG5sHH39uUnR8D2zFG+7mGaMCy9Xyh+N5QLy38wMBJO/jcOq2O6Xy7fQQxcIt5Iymyz0/WcQmXtRoW1RsSEhlgCLP/Zus7OhPcZYuZdO7pB+SdCTtdeLuLyN3O8ZewqGTYPDAkacZ9l0q2ziyccKxxJEYCrVflqmiZE7sGRo/7XSUb+0qgnrJwXx93Kwa1/s3zm4gln9vM+Zr0U0k394QCaHz9SjuCJpADRVcxzTiV4cp/ZDnk/vDbnlmPgxl86ZoHs/BA8BcciUjldd1jGFWGcblD/45uwNTpY9dA4h2hZx9VkjcoEtgMwNNmxMYCipYawTdUbv8Wn4OO+3QDOz8AtJQWHe62ER6ABhyo4hABFc8O9IudqKdKC7K1/5cbNbve6moPyiWxTudCfc2XBXq0YD3pzLz2xSiXdZdMK3+iFLMvsGBe+FwJuqhaTcarehfEekbB4Ru+Q17Qv3BtqrCbWVve0R8To5qwqgng6MM8zZ+ql9jgendWZc+Rz6lAF+2xZ8G7/93nxIZW6v9GVho4Vq4efgFbuEuLcuhim5RKXTxiWZHEEvh38WKwTZJ3mLnRC3iNJbtM8Gx7gFcX0ew0j9ZE3kdpT1RuPk3kWX9F4K8jxwZ8V7Z0j492HSQlynLivqiiQHvzEcgI5AK6Z6/lUpT23NEcYRvCFxQVCzi4+wc8CBsG/q4xdyNFOvZIRw4r6jbj8mNWf6PzCO+Iuf8dW2lC6k9iYkxPq0pfxNWJQDbJPorhXMhaNMqBM1cL+x14ty0VsDPwC4u6vXEA1q8tbYMOEI7drRCOlX2OgXaH0d0V3k4Q+V8fkPDrYxitJGEOId76qF4lIW0lMae/fcyhiXE0B7cCbDrwxDMqyO6+qU2yt+H/QwEIHeoBVtwciG3v50oSifATVZvLpesZjpSmwav4PRGQqVVDQUPbryP1Q1CRDglzu1V0wYn8t7SLTaPRUHm2rqcSTTXtGDRTo7+LM3z5qvIqV+Cq3/nHvqHcwc6S9+9FrU/TPcoXrpXIRIfezZA7q3qqRXLf5Sq77dJljULjVQiktNlvGYYg8vopVu+5AX8zH9xH+hNEgmdM6Zm9tFRp/68Jdr2e3H9inKHxoHm8lVaEujnR2peLoYUHly34ZcGLGdEBZ0utugNdeVPTTBlXunqcHAKAQWdCaGfbovxdLrL0eEgP+iswnmswEMwNjvbEhOQOvJfyZcBzOha4vzppiAag/iZSQNa/ul1CkrDykQVDqEOJ1aWJtMv4vLq5vXDSQWEr7RmAITLwUZsH/h1fnvBwp0wIkRHyTAv7HLSUQY5RgAP0BOA6W2KtxI7u53Uwuk9lWaiVkx2wSCD2nmZf5B7SM7yMfCcgGJ/83N04kvpV9LpfjBVJQ5Jh9rMDhD+QtT2cJGTSly/edf3iTBa7S75aI8WsccnDmK06DikEItLxaadn3ot+l+zIwaAMopAv1oN1IGO3z1ZAQzHNqeF/EH/Tl5E2hGPHG5alLMgopUIJ9T8dhD4P7aHg7/M/Cg1oHvF4i40+HXL9M4lETypO3HW2e1GpRo/ZI3sf7lukaef922dAIFaUGnC86C6FRZWOjuQ23K9/PzZr75yGF9gNQowqE0N+wFgBusvHX1A307mmFVIzRhGksf8MsLWHajCEFYQSBAEtt+zP572f2ZcK+IRmqR1H4pEIzyOuqD3YCx9Medf2RPVxdVZU4r3aP1Gle1oNG9Y7J69wPQL/YcjEtCdj9xviWYZwRInMI0mwOPWxxG52+rB3HdSMxdsDvU1NM9Km5hlv4V7oAbzdAv2tQ1JqJM114WYUjlINQddcon7YjJM5d+SuXIuqcijLfYbtovJ4p1UKNZaig2PacaMT274BJhQaqkuSu04nAy1VZrtM7VMkYWgWU23+Mz9TQ3I2d0WlJripja9Cz5CTQGwo7OSJei3CJMKXBhx3bx0HWSerOo6UoiMEXGLuMQ5cCfrFohAIyk1g1KrZhfd+PMfclt9aK3UmRhKDkzVCOUL1S9lol0LERkrKOj3cxv4FzzOz8qwbyjTT4mLyW27wzHQ4ZClD5Gx5HIVVuOkYXpKsoT0TPI/MKFBO03/0NZVqdsXWnlLhsahlGVLhtGT6HypXaIPj0wqNdZPBepdKSDqVdLJcYu0WRD+4bBMDaO1hxemJ2Bq+aZsqQxQmPgn/N0bs2POL8XNA3SR+Bs6rlsPJRoqOLKZgRQ51U0aDCXCfSU1zEt101mCSEuncvyZeef3QmGAaNYrdB2CZKQCpsAzHX6BUVFUwKXYok3pTOeyZF4Y8fqEVyoZiqVo48Ek6NuNi0SMSbn+AVHMOU9Ptk0qWWbligKXAv7rh2JN+95h6HiJEivW6z5HOuS2MZxE6WF0rqBX6BZRFViU9ScCNhgCjDzdYY5ynqJlRNJpjqv3bjRsFPxIFTHpG0o+F9M7zhZGYFAWqurR4709ACL4gw7sHDRdVIBFd695Jnik1pO7zJoVf9VhYkGdi3Hzm2IRla7bNYxlalM8vyBpM2bsa8RJc4bdK4zMeZ0ummOpU9x03h3nI/YZinjqrQFPNLfmybGTxORjqiYQ37zw4CEEHsEK1FV5TJCLNNolvXU1XCGzA+iMug/Wy86YMIQByWpBVXQRUh13QdfseBZeS7L/Xvr65qUA2Yr2d4/UKpj/5tae2cvxCxMs69m1dOV4fg5SHac9SP1/A8LKraSfSV65j7c9zQvj8ogGh2I1laFMMJ23wj8C/Pk5/1HKQKFHcjxfKeEQff2B/B/SfELdvQ2ihDL2dehPfOfR1xOPqflkfzKQ9outEThCRbw727oLeQ2DsowJAW4gY2ScVYS7pNJoynZNoulAee2hCg7/FiFnQRYnJWgbQkT1YZZzFYoY1aK06FLAMgihWonfkNMl+ziaFpo1zi21zIcWhR0jFBNwtOP+hJMySYgR2pFT36IGzNEYMHnPp6DT3PBPYsL2tME4SN/IPiGo3atBuOUPJ654Swoy3Kd34ZWUOS3TSPc1YAXmHWMLzhML4KrmRFj9OpYvdYXiR/blwfzBcT/3Dlrp/FU/d66lmNWfpv042TS9jwR5pFPLH/Y8Jl7/S3DhPxeuCpa6TotG8TE+rSjyE1CPl/hzeRQkti8FTK0JRrx3ReZPPs15oldXEZZxrYqeE69SoYvqTxMVuN3dEoy474xQFoMjeUemQK+vrMN7XgoG5tFt8ONv4wxMYGzKB9Hwhk2HRkBzdF0dh2VA0K6si9TP2nO3BJgKJOb46ZFAuyDjCOHZF0PONYobjCY1YDXM89IFGa6dePKRFoIOQX3gpjJdOF7nG3gU95Q0CUiC7ubuh0wBoL3aPc8gHgVLGyKnwSh4LFncJKXyxMP9kSZ3CO+L22ryM70yi/vgCpf6pGllJcixd2QuGWNX++keIviPJLIGQjt7rM6KbM6tJg5ZPJ0q1GB9vazplleFleAwTVn6+AfBxRKKxiHrn/eo0kXKVPyea6Fx+tcNiOQ+vPG5w0KKaQMcUj/qZha1eA3CSsX/D7yTu0CivzOMMsUjUL/HFsApTeWvNLsSnbgkP67yxDMrbZ27jK3nOf+fe2M3339Pr1fnqeNGnPW2jVE/7HCqxOgOEVBr9tkK1EfEblP4rzGF4cmm27qBkZj0K4C5aDZt3KAuOfmostKmwtlegkIEqoGXEyDseeUSpDDgARjKvqKN9IwYJ1W/AE6wAbibZTEo0/ixdwU+nGgfOJDXn9sdmMV+B/Ro3hOTchenUuBOW41degHpXfck4DsW3cw7yXd9jMwtR52nEpOnMCt+4c/QQ77EzNrTxuF1pTMhTLuOwyspjlTQ2/vSr/VTBUsxg64elG2PRi7OR9vLZpTNSbkmSksDIrIeRd+erduObPi/WQiINT2VwIXHiKjmkZiSUiUXj75O+vJNecGHCfo42opiV8PBChyl4pD9TYP10SKzIVMPP9XriN7sw28WeYQI+HTn88SyrZSV9L2axjfBUsXruxLSSYcRnMyiMJ9l0HptgLsEqB+nVVclVH9gm07PgvYIdCTO/6frU0CaIdnWLtvOBQi295iW5wkVUOquyxPcMBqQ9z5spcq8zyIoeOQoXJTphgtSTpxp1yLeEPFSPDTEyF2UdRCcmHYm2VpWgQPZwxE0BByDxF78aNld4iLFPMU3z0CCRcU97Q9jpAEYVa+xq7V95jb0VUF58nKEKRmOLUFrYo93VNjFI8Kwdlfs8Vo2qgnNe9qjNwzj6b73HwaPaip/tUfmv5g/eDrJjnLmsl5Igivj2oGrmHBTEmr6e2DtdwcSU9aOM98sS3NocZ3TfbNIuJP+mADngjni+E5YIsZX8rOYe9F/5tW+5ekU0a/+MirWtqB1srGXxk45ezrYWUj+wcodXzDtdYYqVIZn4Cb16/4hIiY1vDZAI5kJQ6ivkmm1M/bTI3gRLegGUllATBchiAxDfg/5kqvgJPkiwKm99qAbn2SIGekWadjcK0YSoUY9An+At4ddHr6VFTbD8ugxozXa3ZfhZ0oR1llsev0h3PmLUTWXXW99YhrQe8SUqPxO0cnyMZe9rd4y7hE+E4EANFPjsMtNed8dKU5kNdbRkfC9uHyjBPvffZxAMitEYD0cjxHZdhXOPzoDiRSg2hmk03oxxUbhSjkSRg1EMEENXVpah/dfhjZf9JFPD63RXyY3sROVqG3Nf6afdJeghq9lq1q+UzLMmscjrU6dkFqbhAmDMSRYJ7W8loG09iT7iW2kv7z5l7JnXxPZpA4jguL4nPlewfRuPTyhEvAY6OZF7hYz8aVV9ovuhQ9/Lq/EdWfWsPuqAlTbWckQ1Al/U6UilEL/798kV4EY78nzpIAxfGUqJt6oRF4Bs0lhE/DuK814WUuLVqBzEwY/HCZi1RxPkBxqYHr16y8ZPldMT0b93/yxtdWQzIk7G0CsNtNxSmh/2Z+ZIPM3oGDOsLACpg6tIhgifWYCIwYpfOUuKHLGqcRqQ6O+IMM383woZcFlgHJN7Pw8lvXSyEJ1uOk9vYjnuW+9a6GDvd7W/COjdeccpe+ejDCNRHSIT/b+lHRa3Z83ebrnMToJfoLpEvlzD/mG4Lu/tby2u2ZSYLxQ93TfMIGb3XuH+U+/2AQYUPHVKko4ISd2RkAuAHzcrrzmm/JlkIH0GSzeVvxiD4X4z6PMRV5wWvKSlcFxtidJXwHJMzlPY9mQ62/8mtgXXtJGgIL4RvQMKtSuuAD+HTi8AROzUdOBrdU+nlouKF3RH/HT8aE8xSToptS6pYOvWI1MgOilj3ktbRH/oBOoK1cPfK0mV1m2Pl+BuhifnWdloO43T2jgnjHs8KCllurWCJhjdWq+zb8RaV7EdY3ewD8HBwM7b3IkKIGIp7PtunFgVdkn2GM44PkVilym+dEP7Wq4bWC8NVImQefB/FetdRRJY7MQcLuLzGPuzmfNJ11csVXvt9CrobhMjgYWvMaHuWOAYegP5saHzC/YeDsNimXUautilHG4fb8nJVB+i4aaSUtsgwEIzMJ/FQiy0VWgjOnchA/lsSWbo0GQ2JqJmOO+BRTysW3agpNfyX42EtQYBKE9Ie9wL+j+JEbPQ4fneEFHKcx3k7alxKJ3oZ7MEyTvP5a3WtBf8RSuwSVkxD79M1iN5JExHtLRM2/r4OrrJ/dj1tpY+K9sU6Z68DqRgsUx04Y4tGi3/HXLldwSSXT8pmjn7YaLupOoywEV9vzgaiHOsFmHviaBJX/EVnzMVMhJ65ZBv7d2vmGkw70KwmP+LLbZb1gCg6ecUUnrrNjtBGFHqCKTmqzESyZ9MRacTNZPsO7vU9IH09ZrX22Oes/8AU4sLWRBOAdXPTKj2tpA1JkR0xgvUEhG617ttKLFg9x9G+Rk8Yp186s1f7b5nk2nqcTh5R4rSfgn7/evHDn8mUvYAJMJMe8HcOYv3vm1kY2q6RYYqwz1kb+xP1MF8/Cr4tqpJ3ukipp+H030QSBOlOwNYyjNFfRBOfGrTLLkIEwu8TzxkDAflxFwVymUliryBqAH/g6QWk9Uoi0N+TXfgFlqL8Tr2FRd3JCKMbadcyly5k4IY6AgI55z/w5U+HylPo07JOfQEfMIfvFOT8FY21eL4lScluWD2xOjTsapqQWDQufdMxia4PKB7Fo+/frm3MFeeXpTmgIPtmo1QBISXj1qVBDdSqbHukWuPhvGAc5SyTbuMsxrHj9ECH1gpoosyVlFNCjyP5+csbjZYel7HJOj1JTFWxUSFPzXastwFY6oIKR+88QjMPg2TitpcM6n+6FQuZObLpkOZUP43N1Q2bSBIw5eKv/9X80x80roc2uJm3dr+8OkBoicW+EMaodkwAoiF1y9qnzdzv2pWIiSKa4qGKXzBDQU7iloBsgjnw+Xplz8YazgAJpDZQ7/6P4l7IjqSo2FLhTDUpoh8VpBt3J4/2dTR/oZXqFM6WcxTxXydRAH9oqgt3aLO87vT3KAjEzsEzZGzqJM/I8S2sz2HgtA4RKLcb58tzkisRRZM3p0cAT56lb4xKo05cxBi1LanI+rLCFgA4vgQNGsHNdbvAr3Ps/zaK1rQL7OS6vSK847RYYMHdolwo0UTHZ5doxSuT+r54n19GtVsA1clFmT5BUnDljLXxauMGhH0ILFmBT+DMmX1x6uNFeoJolqBZAbcrsTrjoxKaO6dFU1qJ1tj4bBZd2J3UtMYB1fA5RcAT7rD73WOeW+22hxVXy5j3UcyJxHzloHf2ark4U5ZGaQFXBmF2v8m8A0Nf2JeZlhkDfpJRxzBqEwsi0N8cOArOMOk3uiFSNc+Pw+JPrFDkUk6L4PdXXb55z50ft9JJAD/zRwZGpnvx/ustrCzzqTCctmETYyPzifv1DwLl36p1QlzRnh2r/vD5fXpx5s/zSTdJO5TLhaQ6nhGVy5fb8vsrphIX9J5PRclL2d93uPWOf5Z7IVzUUAtPoPCYOQCyl13EPB/O7cWTR/XEaXgkptf/s4/+nlKxG5seodGfIx5oHHlgBkWOW22lG6qybJqHJHs1bi5EeEVAqXuXmdBN8ITN/ABtdR1EoEPZrtnFMAIboK334M1K/9saH2Uy9sE58ZdZ4jNiBDw1jaF3mCV6JXDMG6SDVTdpWF+bMHhLSRgXJuOpXuGZCJ7vtrmw6BM6Kmjs4UAFbiUfQv58DHTfSwOu7uEyxzHX8Nv/xJHWakaw0D1O490qSWvbqAa/yzy/d0wVfNCecCBy6idGR2mmg3agklMTzwjzGsGV+Fm+cP/JyebZg51MkmdyHb6wZydFwKxmdTBNHS/X7XdEJbKbeMV0uxv439+r44Swqc1wV6PWyaTMd65/GwX6seKa8bKwtpQrRUuBDpPDyFHBq3WbB+zFbosCFsTMhsyar6wRZW1Z/wtk0yYp0xUNW8c+yDJ9b1yW4cqMoCycPOEN88R4k+YoveeCLEf9ZutzAiiiM8kXF6YIT0zVWz8fXqanMpNt7EEwXeRKKqWvqDdJmxZDHLpoJdKK425v5lWrDjJ472/vRaLH2x0NZatYfUEBKMV8gA9nBBoK10UWWZl3TJnA3dip3P6Ra2duxqafPlyULkEnNoLUroWJ1+Pb0bMOyOkMFbxx58ErUo8BP1ht+XVkfvLeHJnzLSQN5reu9rTHjBKfRavLt70LXg7Rqnm/LkPo/+ukaGR76hLq22SJDd6p/C2jzQqdk47VEXf02fGZRnStCTvZiXm+zuyKUFAIvZoMHIwQA4ioAJ7u94rqjM8MEeD6Nl/c4872bAD26QZu2JGK39hSqSAAk2sDxAmBgnLdocH/cyzA7yys4TADh33Ptwp2M+e0qoCu6L5jJ73LOyoYe6uMG7BXsXMEPkS1ewR6qnJ2ApS7tcfZE+P94uaqrrOmDEHihv+tVdI5KE5kSIvKi3PSlgiaP1hQ8/h+96XQ8OJuwb+5CimalDgdzznik5ipeinHiBEmml24W9AiDVGtFx3Bxjtg8zUKrRF3mHxtgp7u80fzThPn5IVxfTIIk+KfvlLqxNuh9yvdfta1jZesY4bFSCmtQGVjX0+aiwXSZjNxZOBIpBXhX0zbJ16uQrj8VfXM3RivbNBkTEIDz7VtG8ivU/GqMWeMNYOtLYgyUI1vR80l/WfZ8x+oqkGvO3fPZRhgZzXbbFZp42ogcV7DpdHoURTu3/EFCgG86Xn50aoB1aQlUv4Vks2PRJ/VO/t0Z/K178abWH4ZD2BmlA+eeUIQOOEV7HSjCgUy/cMAncAZaoEBtiVCtQELdO06f1QzF0O3DxgyyIPQ3X3o/dnhXfGyWu7XU6fnb5aASg2LnRnCxk5PRPC9eJY+vPJQF3ddzt/8keB/L/YEP7ie+koXmkdpA/5DUGgy8bjSFVt86kBPXvKfOgCwEKbd47HebHYKQhj2wWxggPsKuJJY1dt9VMsRgmG7eMs9C/au2HNAZf+1TxsyZA28QXbU7aVDkDzomc0JsjLgyoswwkKnjO5FxgF23pPjfH815pRpZ87QO3ljZq4s3lnj+Po391FfATzwFrFyOncu9O01RawWrFfJFfq1P1x0j9DgqePGuxMB1sxIL2eGay9jouSIC4zyJTMTkJFuWElsue+HWNi8u8t4QdbxE1ydH+Jw3G+y38vpiFjzy0sg7YSRNqldGf+x/hnoABjXecfZq3uthHn5uMHDYxtEfvGpCPCVLgGvSN+DuemvUg/nn4yLq8zYgEcFrqiY+SaOLuqwPhR0DjKzB0d0/l90QEvqGn6+QGt+61QC08RtWXAvfMSYXPM5tQ0FngsGXehXhEH7+bV1Rg1bmzgGYyJZ8778Yq8cc/qEKshDwy7f+Y08Rq/ztFX8BB8ZEirlyKrtBtgW4IMFPuebAg0mWouzp1HqlU4hpypL8Tugktmv1bv7clxJg0o6zvnsEQoXoWf7yWACTFU2sU7RMduJUFzvOI6XKaSFQ/IOMOmkD07Tk3UX962D0hhMWzu+qTIFv5OkiYIL/LkfbrbtGD1JHdAQc0YOZS8v5gj+LtOP5wWFxIKfDc87TVWGVB7CwX6CYuKZ5zoXDmkLxlw9Y07+lgiFaae5vU5jlWFoZBnJT5qOWDt44JyaDmF3QEz5xrnJPDaQsHTBsppYs8ATEQCJScxKY7vWghnXJkAwnCfEIjEpGiPYNXVjohrN5smi8eLyd48wH1Ngp5xA/ijdBCoCdXZBQ9r3bMV5Nc5s/kaavgYJ/ziiomBqwjg6SmCroXc0j4z/rLKQCKwb4lII+lU/yYCsXxaJHysyFDRp12uCL6H2srEqumWY7dyZtoDKzui/Aq5N7DCZZo5TdboBfhk1spUgTXV/B/XMiCr8NuMfeleWMxKKqqPMebOejGW/daU2tBcqsrWqsKjPwdJ/Yk+OQVpV/gFYuI2rE2uoyxLO0YiDAkWVzKvrkIZLethWgM6H6aX8yR+TJk2g3t48O3Cju50AcUSmEMyRyBoOD6CBKEpJU6uzwhW05jsIaeL5iVu+PAVJrrNMWPpbHMuZFe2EKaCnWxobtfYUM1XMWB0c9OixRZ/akKDxd1k7MLID4/QyovEf7gNvX/tqvnacXAts1w1G9BXgSr1ph0eosbz2YfvlsXdYOv2yib5KvS28eXdYK3ZDd9y08TCwPh2gDGeEnLngi+Az0oDIL4zpA+8CtmOTbQD2AAWSFFwK3f5G5NvRZ6COJUG96tejtVJrXOuZUxBRWC4yo8X1Rmu29B8G/USfCiSrdfDIwomUCWFBHljzDf39iY65NDsC+9l1O32KqAfPrbUHQRlbKUR0LbJHfSaiwMtfdyuzMl1TucQ8ko3zF8yiEaJpZHxP28+pYLAHOXu9cri4RSrHHHM24s0dfP2LpMYw2l0cTMnnLBfDgJ/WHX+d68iVCEpWnVx9Z2Hdr1N693SPrs1TFR2UsAtkgFhO0ex0DLnYOcb4cWaCB/j0G8lPaV2Pev+YQ9OEW2RPyx36kQ46O5fFGfxc0JgDlg5j0d1IS1NPTBbczjl1dC+tXMOEPt7dpyE91VUcRfBC7657MqAfG78eEdZozuMeQl90cmn2LCxk28PbvT8F7FIydDFJ5Pt2JLmM7EVL+suBAqhCwWAGD2pXdx7crbjvsLYNs32dwoza4J2j2x0NEWvzx6qSPHjbg1JACWgPRwA7VfBDSsNWEjd6+dFNp/XQgF/QuGmiNNLiqMyrWNtWYObPpgzJUDrqYmyPujZfh5c2o852yGT5fJV0p52b+hIurj/e0QNjDf4XDbt46srGwk7Ign3eE2QXMRiWq8qgJdpcMCJe9FzpA9UBU7NiGOsfsYW64eIvtyhYB36sBMmSqzr5IkECys5+YZmF1lwhCVWcDu7jtuVJvBpXZzz2+cPeM+iFxm2xz7QSj9i3hZ7ItF3MCj1zClbeJLSeKKjSIkjpSlEjiAXuTonBY1G/y16zTxW4ZD9HS4H75euHOYpzvI7+/yzeVnrwhgd3TgwzWQy9oieC7ONw4g9ub4z9tih5sJVpRNrFy62Ogutxq92AXp4I9HnQke/SvyYyO7WD8WNNRawBTUNSn2wpO8HsdNoXSfj452YImoaY+SAAH8OPZMFY2SPrf3rWGrqAcIEQXA3Muuv0GocqCUx3g2Pt57rqPsEjWpC0vRs8KG8MtaB4UyP8QczmOuc7INOQh2cl3IDmaMvF3jtTFwnbSAy+QlkHm7TNwmg9Krh92sfyIhRLIOiAfh8ISB5XhQA8RicaXZaOGLlrTZMkI7Li3pfC/32+SoqQzQHbfTbqPAU8sBIVgmDnDj0FOKjs85WlDKIkrHLtPYEY4gFN+S6jEdAK/znDNJCh+aCQ3Jvyq6qSzFW1k3wM9wSghtH+zzbc/Jmy+zgeg3xJWco+PWS6WChotpxRo5QVw5Cq7fpLnEJdUNpiP6H4R6ZP3uQw5+L4jv6ivpEqEk1sbPFdgXdbgUA0JGnsmwiwHjkrVDUTwMAYdCpQkCOZM419SuwXK4JoQGkUOrALOW81bRRIrGMIvqwl6YaycdTP/+E+QenCc71ePAtncfmFhodoQse7nrLTRUCRWInwEM2Y0/X4JtHUyWsM6BC9/0FLNAvFbBH0qRmbKHh2tYTMu5nRDbr3x+FlrmRMzQDVWFZF6uWNtk3WNGpAVifPujnvMMMEphk+A5Fx5JJV32Ty6WDfWNZi7hZUPi/dbtwQHMF6OKialQd12xFdCElybpY/kROc+DgQHa6KS1qCo5y5NUzHL60QSSpeCwoklEzjodATZBQJf2RiTifOfvmnNWBfKK82DHeeSuvV5JtYNxxlB+YWAuUqjIlUO34IcI5sCLX1K07kl10YZg2D4o/jKTfpdLPQp/XOQoGd69thOzMB4WP0Rf6JhSI3ZTPz+y/Qf1rEOUVGgZDuu19+6tZjHh21ZMo3x0hKzlBiXSqQfYH7Co0hueJPOeUh4yVOGCa5YehS6rNtzuGbdHbevBQkNf6f4cBt5G2DVtez96bq3onukFr4ST6fxlF2DcnQDCFHuooLZQfF23SLaREDP2P9eXuhpTM02sZYndtcYeGEi/MPY9VMQrfNALJy+f9rF6sU8LtXeSeQjtWZ4OIl7pH+2oSNbjeZ9z3SF4VHcjdacPjUEnyvngqxYjJzKlFO8MiE213LRieI8jpEwTDZcMXFYu5QElKONdDzNvETaCzKwiKYaTpPMj4Hp4Qo1f8G4Oykq4TqhhkqXlimrn2KqapWQ5Yds9QoZZ4jBZwP9kESINA7a71PH/Vazw82BPupYxwD7DDfF37pfdRodOLe5L4yAr9ZJHK8GZJEpM/QNqfeo7sA9bd8GU2or+FnB/sJpMGOTMVJMf0AvluJpL8SJED3u5upYVo/QvAaEKZgWWl5H97vOJc5iHxrTjExnOQwGFIAdw8zIddCwB2eB14qf7wYeIccaT6zgaix8JjEat/DFPKHA+mDKwp8vVmkibdL7yC+pnIeUn4dhkuD/FTxLiz7+LK/ZiHtQPNQVftPfPUnTLMUOrLQmVWoN8iNDJRPZcbZos1jWJT04MKwqmWv6XbzcTnvhBQ/ylNo551JfN3vqRUaj81fKoEpSPuDx9X+ZTtS7QlJIlaXraHe8F6oecIMtIE6NjQqjqG3U7PqYB6C2EjPRRM+jhfeA4VkCcJKmG3WV6acSDEnokJ8wldrE40m41dmYmumclKG8tJ3kB5wb9HsVbJ2Z5eN4xmCYZH2qMpAjv+29rwobndbe5om1sLuBXmU0vbraU2t2lFMFZasDPQkPjmqIfua+dK1VXgBTxqfYfdh6fJA/c0REX1b9vjjXbxyXLmsIBfohxDc+18zI6wA30WwlyzdshYmrxz+dNNyzh4tR5HrISubpVR1ToGa3o1xsyu++PicfvdImCpfcibpXbmvZpsSJaRHxNQj4z890OlgxvuEnBjAL3EV6tgf/2wVnJC3bIuOoAzSQcn98AZhwZ42Y2ZVOOApTyorVlhMdO6RcQUJKO+7fgWMQT8h7k+VER21m2dHV2hrZVgWL15gJj1ed21e1mUGYk6HtaRkxCVE6WesacFjo3rVtS+Wb0k+CJCxfHZk/exbTE4uHhszBwBtJB3n1SB81oG4GZoL/v2n3KIPzDK2SBG6rbXcP9+tRVJ4MbMyNEffUQ9w4WmTPuFMyPDxeuLbUbNxpQLXWlJecrlKQqmOxuiRvmHKheQHIK6szIwHBV20j8JTC+EYrSZtCIX4XRGMyhd6Tb1Ij0jEIFYadbj9iDmsQaqnewt6DdL2UwJcqctY8KryFAGsU7YiIhTc/AdTVkM9aYCGISfORYt4LQdIj7YbwZKEm6wFOT9FGvtte3KL0adYgLDs1Lk38vZovd5o4p5K+aku4LAfD2mnjOahPt1cu+MVJjpID2YdNBSxEdin+O9qKlpyXqJ/2KAbZpYdalGG09vjE6UR7k6Rj+lch0kEWzk2jPfTMHDqPcFU4Wmls66ECywSAaj3J78ztCQYUNSbe/4rDjnmBhcjrGsQjxE/TiCsHd26gFzPYhaY92a15k9WPravMok3yQH0JDHpyLc1zCfck+DI7sLfHE1TSdfR2uP8hpyeEuXd8oS9yEWlHQrdPeKKjFEws1kNfwXMQSdXo/J1rK4QP/dCqsWoO9CzdJpDS41bCVJFTW+JAwDNlSe/OFLVXCeAzHElKHxkDnxjZo1PsWoI6Ey38cQIV8eo5wVLkJc6KIuh/EZEaYvJ3WmesBH0NMbJcHcdxadO/xWw5uOx8nUutSY3l4ZqtKPTkJLwazKgWpr8/jrt+n179GnOv6gP2feHZMYbQCfNRd5ROmpTg2qFCJUHRRczDk0ffUTPiqW4BccKDpP3dLmRqhNHvH3wQDizCwHxSMIKn9+FNcOYLvbRr8bkjqpQE8uNODa+JVENOmNDMP/Xi9G4FymHFYugv/y/qzrJsR9VZ4Y4qQDvrvLUWZTUTbS/78aMCBRvtdNMxv2stbzp/EtNXG9kfZuT+3/1LYUBYOawYvNzVsng4QS2exSV5Dc9+YPkaq91tPJoqVPhhjqCBQ4ddy5u7+yTiBYuVODdmH2RxEwvhkdnsAESWGxPuD2RLMgDTTIXR9AJnTkM+BQAaZSTDiuF4dweFYU5XiM+sD5A4za8NJ8M8iufwrdkoiZt79kNW1Z1EcN5H6MU2JsKUJ0uK/3eNDDV07l68ZX4J5Xv2/CGXe0RSrv9tn/oCTvZyu1rEj4Gj8NTDLKeDlb9pIVEBM1MktvaIWGJB/IN4L8Qpl8vJ6ZoCEO/mo+DVPuaRk9s2vd8OkEci1WZsOKkdG2EPtxcUSg4SpnBQPmjiWK3HDxMJDvIZ5FdFE595qhSIhxemn0/eo8gqijnHjhz4iDfuUHZkjjCtKDcsF08jOOuiNhabBajNri81wy50FH2DcVWCrobSpuczIL/0W4ObNmnQAZwzI2h2ont42dS72/5g3XZ9jwrpEUmSy+5fDmF5ddF2PeuYdBEKU9Qpeun5TUHGMhKQUg+iW14A4azvJw108Pa9QezB4snBUdWsfxN6YRYJ+s/yyIRMONBiWWHv+jidYmozZbjmGY6NnjBThqeUnpEQRu+2D7LL6BVeTGrSXR6ZoDjV5sYwCFSPmsZcSwszFe4mq/FneBptzf5MQgHbauThXYN6XY7rr0T7dEkJLgr5+nioSX6wgMBvQOndTwQ/wUaEB43U28XVHuayCuaf8MpGEdrK/zeWAn7nK3KXVyTrGBR1zgQVfl88hLTGwL1CZhVhcaqcTuaJcvR4A6+J3cv6RXQTw81GVXQpHOwbT3YBVVYvQR1pswrtJ1ZrXi+O5lnMhxwMTLpwrV93gyY5tNnZs9Iyk+jkZOJqQzj6V/JKDiwBdF8ZUTTnBxo0PxSVM60zFkladZdyZ9GLp45ilIYRATDcCzlDZu9T3DJBR+CQGn4THMFyjXC8pcCJSxyJiDrxabmgVmTK+gPSiuema5y0jbczhDlDcYtMHA+5ilwzU6nF1rt/CRIyvJwUHkekuwHSbLCqeyQZw2W/WbGB0PsQvPcrjTmj993s7NXhBSxy+2A6IvUgEs+yJy/Y3qi2kfLq7oW7aXfAHc3wmi2E0cVmYktYekHFMlJzNamIluOkEa0g2CdictRtEIQGJIswACLIf8wax+UBYdSiD4dLy8+MADDyWxRlm1wmSb8aT5u2Q3P6bxWlL2jKhsc2JkZhXVhCpoWN0+0r7ncfixQCI1gZebMtvllQOtLAAgjWzyHgO6Tgn/8WrwUteRePxEEaXz2aHyYBB+5KAsh238ofh4NS3swg5MFecFoGDdvCN/OgMFOPgyGFcJ1j19IjN1q3qwJDKXKMm0fGYspZKFBAhmqezGv1LepUep0iXRoVMudkCTpMPXDK37rbtJLs5kmvWzlHjv9SmbVRckYNsJ+AKsnkPLy8k/N2SQz+9iRKRf/XIN1OVRA8znLFlSQjwSnIKFsIeS0jl2aBfRrIrFSaiwHKDEWjDTP/HL5jSCDyzfeUX9UUK16Mm5E7cdRbQlQI01xA3184PVRPAgxCvECEQ1LbJeZUdq3+8Up+HT0JvnXF4gxjt9BrHfL4d6rCl1op1VVrBWpEwsKzx6RG8BTH2RxB13ZjeiiB6PU8sdubl+JwnhyEw/Br8p+3KZ+ygA/WzOs4kq/gYjJwT8a+k8u0+Zou/lVcl6i2F1+SJXS+QWCnReyqDVsBFk2EKRr3Ij4rM34ONKGhHuOzb1QeaKQXPfOAaeKQ6CGugsadURB04/E0IIyheFv+paTRw8faWOjJ0nL702M9Eu/QdeJl3+uOU521puU/wkdK3wvZ9lSTmZlS4y8A14TAtzfcDKt8F6RsSnFBzpHeFd+JqKTchMBGoP/SBqf8Biwo2/eQQ3wAS4DXFWoTw8ugfT5fbjjTU532f6DLFo6DT6KeN+shDJHhQZYuhHdZcRsmgyCg2hm+3Bs+++Hpi/zNL9t5jsP+mDYoaCHOqwOgWeucv+gOHz2APIcBCOsBKvszbn9NIvPBGzT9zIOz89wju6Jbn/QeWHy40uktk9ZC5yA+Z88F3SWmU0O0qc719nbEVEGXqsVx3uRKRwn99150UlYuaIWtlKkNJPG6HcnoXleQD41xuRYj8mvRdmZ65BgjoNdjzdTsiBJrK8kyDLN61dCi6Ecykc4FM+/FGK/CvQMIu9Jtc9Ay9h5qz6e7+6Iq5v82FCHz+gD20+bTurEIU0mgYOk/Ji9UMyZhyxwVTz4aoKc/qSL1R3V68QGevicQPEBIzsufDbVb8SQiPUUEEwDJvSZBKgAfTN9D9KsE0bbrG96JaNLAt0Fh/FxThNBDbJ5evbBgNn7dIrhFVzVwq4++05NxdLPsITmfbSC2FmFWb+1fUXVRXXFf/ZrVvexQ6kaNWV6ukWBXYr6fjYyYm4fx+XOy/e1fgSpm31gqf9Pnry9i8kXHK0lHnmwM49B/5ad73LQlObdhQAnIh0QJo7fGSeWr31tJh9CMEDsKk3d7PV9wae06dhuHqJL04sQWEsZKGRmzIdeoG7RB3NfYJoBVmupQZOLd43cNtzB9YYP54axH0vMDBVEK79xMkHLnpMbFZUhdKcu63DQQ+PB3uorBHgFyMyNpURI8U0mVIxGflifAat17vRN/K6lyE+8mDPn4qdzcpBQsvIxRGg2NCZwoB64AjwgwTONCfibJzOmJGbjlUASnCBTgA3FEOWsqD1KgCR2OnRKEkrxcvopGfKdQAmq7jNDjjWsK2K4AEL+EgLILRdSbYvfOilaqKOahqcjd1SV7m/xg0z8OS8xE+Mvp1gCtm/A4Ak0T638IhNR+e1JZbLLn7Yxq7UHpWAcf5F7h8+3hjN76ZORh83uGUJUZ4WTzEqCcQDSmPYMQOuI7ELmZ0HSMXy4m95Ni54VxlQ0jUk4NgMWMMeE748p9XLMmnjopZzocjYkNbwjChheXzb+DBYwpK6CE/gwG2kAmLuh0Y6BwSvHkkgYQPkfqQmsaC9pUhdTh7+HlNQ5PE6+9X1nQVwiYhfY9Wj5nkhtvdfpU8KAUsuDjdFbr1PNhZI/XYbOsfoM0tJTZK7crEF55Rr1QBnLrrbgqhWsMa0eBonf8hF+/5tsyWvQ48cIQT3N/tGa/ctvKCIanm+QuX+XpwsrSfy9AAstJhh1fVRZ4DAToZhxkVO+fF31EBRZcx3anQGsSklSvimL4XGa4uKmgP1l55zFGgiqDZjzcGoXNM9RjbuYgLk7bIek3m/ww5JC2DpjUc0TI+/OTIEmKmU8vdEDuMDHyj4TjTvhliD3FvB7z8SK1Fs06N2+8TW0qtjVVqZ8MX29Mt7r+aFGWPMVlWg9bHXg9y6Ua3Il8mb0033bQnztPrm93M8JTxMO1B/S0R0ZeWob+2z0AH3mhNkLyDZTHP7/ZmFHSUjjcFx5AF87Ayid1RHj2fzy9/1pBmk/Q0lvSwqGE0YN4d4pkQORL7tT9+7Cu8yYSYM2pU8NbdIEWTeFc0ZyCyyHj8tx37D6YIKqKou8rl4p29r4Ali+BB6+9aAhZF6FPYFoqXAuateDo6niHqmrqcNjWJf3qivyknrml3N/D4cevGoZMHVS4C72IUiTEgfnQfYgH08XynxnjRaTKYl7tp/4ZVtjLW8kFqjuFzsXxUGywd3KbzqDbbbma4RImolt5wr6mY8xiRpfQMjVVaYL2cx8or7s8IXI5Gmkeqk3mOJnJ26Or4ouJnmq+rmGlBhIHiM3sZ/sEFcXhAYljphGEW/4cFfXm5nq6PklIX37VRg16BGklGjFahaMRGbz8jdcaYBJ2krXBiISI43+nreCWRxWgTGvra4kBmwEA2QIP9ThnM3vn9DGBLM1TRDBIOfGxCjP5lRhHMyonVMmHZ5cOPtEYdadbYpfE4jDacP/lIhauNKWgK7Tb31B7ff3A2Z1hF2LCghuLKMrwuHu9PLp3rhnOVX1xzu9M/UmYQB3GOPuk4cpgMT9CWP+3WL1Zy2cKlXTFDd0WOLBgNjD5819p46cJXFJOgyp12z8h7V3UHIhYdY1FmTdAdc352feMm/sqLsRoT2xHshptWBAW3fI8DkzDKhOTRK0cgEDwiQhFhafyWvjbQjVDb+sLPHCCfAGGC/vny4TPY6P4DS56KfffxtEUBczCxBONQdSV7kzdrhFXnKO1gSaAMQVXsCGQj/3lkm/A8I5x9EPDYgLsrSqyWwuCOT6lLwoLEoykR7XUauQTiE+K4nTT/0V0ziYSlJprucFxHTBYHlCy1+nA9M456Xu4/3PQC9rR1uRlzhXg+5RDVQP/7dUy7QZ3mZOANH3QqQ3wSe2gCjqDkCkm4uS6IHQEb4cImkeN8nll/GL+48+mlwZ4LKZ/1Ia7gIiSJ+ZfXSQL0GZ7WHopEPgDGPGLj1AMFI7NK3mTNkOGxhuvKUBwzqdhNBeUTP/ZKqC+VM35qkpKKswX1zNqCO0s6eF1Xr9K0USpSDiGgND/irZWbBwH+yqqbray/sqyhQ88WHcR2Rm2qB475MZciBGXgCJ1/5wRYsDdbR7uQd5p7rmsneh8dO2Jwg1tO5vZlfbj+YHKSKFGCyypzG9Go890lmm1qg639ntlg3QVaxr2nxjvGTzuO2tSM9or+TGDVpKOhJ3zcawfiJpj9UPu9JcEQJYc76iVFOoPBwrNQAxP0+uAaet1dX1B5JrOE3po5aujK1FudfOnywKh5ZGy7rqNIvHMuEfy/7ldSzH910nnuSOVX/tVERM0GCo5D6baSO7+fw8iacW56BkFLj+BsJ48uNZUmhx/XKP8rel7FBw1jjUh9SCQB7ruKpv5vAoC25YimqetBhDDrx3NZfIHYCR1XqfPhdId9zzfpp7rxjicnkRjEBgK+OdvUMNlbm4Tbzp3whjunrvI+7au50yqQhglilzLPxXSb1OLusMMlijH+BAmHH/jPifSKJiO/ilYW6oksMS3EZYQmRqghxm5VWx5WWzAFFnuZQ8ld/MP0E6pLEiscyO2/JubGhpHD/fCFp2I7vzzHP+tFmlC7tkV9HiFPatcQzpQ2FeyktgC37jAG2OrYkpkupVyYv0Fbs/m/iNwGUr+M+eJcPgZsUtIulUkboLuR97ILOH2OlI0SeWg6dF0cfpPCv/iX6uwy5bxbRJlp2EEv24ZjvioFkLOVC+QHxjfJCeBlVesqmPkazd5W+AiXEehEhYX6R0rPpT4cNSJ+GVxswZH+ClnJ+TtzNsz+yOgC8zuro0aAl5yXC+T2A6yRg4NrVTWqTLUJk0uoYqDU9k/TP7KbNYmzi6tCtujw8t0pAnpX/2hcA3wdTJdp5kXtcIYnh1IRd3aX51hqDzK1SPcABJgVRlyDysYa8chNqYGTUaN97hRIOU5V0gZpcNSPqbfOTfhDjZYgD5fpF8g3Ms76X63qPO0eUcmFfeQNfoBgKuLHAPSjjtm++zmcUQQkFd6ZgEwvNvI45OsC01G/1CtNRjQsFJb6VtoYYtmRHN5KUN+y5chCLXsgQLMQqYJpKZpXZB3Y3jvyWki6fK+XPCaCb+qexVkqSoCgjqtRgMKrzSoLu7qPTU0KTLbckLiLZvFQPniiEvdmgWPVMLq5RYTa2nRnmtOkGly4kcm2vZHvsc6hAsgLhKm7vY1vGAfB+wLgiF9TYr26V4cNua54Km6D4L1K+XHDxFIT4QIISplYKdKPdPEXO1QpCJQirw0J2fuQvRT0vBFe8g8nDdP7jedCMAkFVtciFk8SNsZOs7JiWENq77v5WK9Edv8U/SZbF2CWdYTJywqcPD7CQXtO9c/8fgWOlpaiIcadVWYwbF6G5UrSMmEkjrykmxXqf4op0yvEn8g0oihQCrwmxJVBbikGaGQp2cqseraKYfl8/OEqFfnwmgV1wLEvGMsCNM4Y7hagkL+wrkADdkGsSOaS+6I3vxHD+r40Lnt9jGojzcyXI7TGyJ4UvKTSjULjeH6kB2mjVfM3mvO6LG1YKraMHtz0tomMM4tBNdQYd6jFK/X6qpl6RTixlFj5PFRaKr5JIah6/ghwKRD3zAwAT6azVMSCXtlgtMjfPI+3ahvzQOeivshna9bzCmnQW1Ot7Gii4eBITCs/gvyxksvQ1Hlg98hmWBSPG4CP/sDYXQXeXHmgHle0gZ13L8GI3W3NhnPIDCqhf6qP29I2KHRW0FbOFRSnM4Iud3LN04YRBsh05pa2rf7VjaNWqkwpmS5Ni91iERqh4Khg27xCBvPaQtc0NCKCq9lGZyjf+RDBEHTLsDStQaUaapCRNj3M8sER66XyY7Tcfh5QO3H7yRRCmzonmMqXPiNe+eNqsfXk/hZEMoZj4cq1QZHHMq50K+scONmPnk6hOWSM2qLazhlYcCGHgLcpxJzlffjQc7yDvYDxwQivvW6jtNgwShgdU36kaAujTrqcyW22JNGIxlt6XMlqNNTGZCoraP5nmnJ+vqZe9c++5mTjUSCITBAs6tFywSKXmgCSi8HKatGowbrgFYb3gTSi3Xr40MJGdSEnY4nLxxURxCa7lmJny4RE5FpdfWPww5RVBbUZe4uoXWD3wbTDHqUbkxE8vc/fAd0bcmw4gcLOgHyqet7POzwNqKLYTEMDAf3IpUImnOwtBxlpxyMP0Nz/3qCdWicJhhix9qAPunKurdWbUu33fyYfVciMvcf8H1Ff3ipkaVJGLwxdQ2oD9Ke/4AiuDSn6zmGdWnHJUsgqQHewcoHDtyH8T19UaSKwYH9lXg7yEAScLMOiu2TTGBbPxpvqohKcact51zbuNGh73qZ9rxvi8+B1dBnJ9tXChQ7hq92NL3OmDRld35SJdROiqq7+XUiRlkHvUTSSkoVZ25lIp5Hg33QJ91ew4KgtKIBYTLHZBJKzVkyrsSxS18Xli2QgNrGetaUoDcIoZ2OpriCSulPKCBJpu7uB3+jCYaQ6UbZnULHEpuhA/kpb33ZBT5avHpeQTWmyiflijQDAMM0T+EWqBcoWDw0FDX88K+NJXEPVMuqyAj5gVdEURPoGPCmAjSZsNsELxSwE/pbFHJUxDBnoZwXFYTkNyYGi42jzeFqBLGBb7jK22EwMUXNXnejFlB7LlREFUMvUyydtaHvR0clcDeXMH61OdVq4E0E1q8+P16j4pS8RhW40isryM7ZPjBtvOcjZfR0JvgG056+rUo+2ex/VNXXU06Q20g9y0hTdsAKGvJLj0wdN8o7N0BpEUfqo0JeZk0/NZ3KwTNrcnPJJgJFt3YJHRt21LjIodj6M8oVLcN5OQSOdf7L1N81y2GRyEWiT7jMrjImaMaOIaIBOSBngQ+suzoDzR7HIouCEqfHytsLUEkie1bFrBbYZlkNvRz1pTp/4jGUgg3VU92Lw1uYtpqX90+c0GbrZL2LjoHi2jdTJ0y8e74Of5sCVCjPwFd52CEIcxq6bf4ljBaWFtLZnbhgat45irdh6O41+UIalvnCQ3Z9h/J1/Z52zIbJP0S3K/73R9SF9/XlHl2PMC+mhiDiJfu68FkbO06vYZFyMQK+oZIkPPBO1l7Njsxy695Xfx4MeqEMtnPFdIRdwhK8OTCY1G7HygHHkE9NEDmj0Bk/esNmStCtvrYkuY9D5OFGyLzRJfaNqzsuYXDtzIgh3RVqw1cyxU+2XtvttAIdZZ/JiyR0aqnJN5sXrth2WLRkpTDJMgfH5HsfIt7sZBH1AphH0CgjiyMeWfZLcuuWzCRmA8zehTVTeYE8oUS6kZGaIULLvKQ0K06fJ2xuZ/OU71VnxB860+Z23AjLnL8dHEr+7+ASd7OPgkuBdzxVFNO/ZB74Z15SQxN1s3kPaIJV5J3GAG+OFnKFPpu1WPawa67Uf6TYFtOTtfEbsWbNJvNXI7Alb4deP2os3ty0GIU7Je1iuOTzNj3sFkPo5cPLIpc0CYgWGCosWZDwDj2Xy4eBr7bGf9zs1zyoDhebM0Ud4a9sukIn0XGpge+t+gWYKHvqs4smW3EEXSUgMJbCocBSQaaf6q9J1HoLz2IJaOXfo1xGS3JqPrj1nmhOgLzcjHC1cpzSMd45RJflNvnumKgOeuggMxe/e4qUojGCIv0lrbPAjXW8vIlGkzs+eGTIwLNctnAyUDeDcAhwuRbJZLIoeOek0wEpEIU4Qizm5Y4CsgRTmkSa1bZpuOErjc1rz3KQti6EcQH3wmYqOInX97OHfMPHkLOqkwihQQGqNCgJGRkLhIFg2SP2yAnyExsYIfwOQBZJ5IcRDfjxz9yXvZMJuQGE+7y6aO5OfJm3XNAtEMB5p3QcC0EJfbFy4eruE/ME+ON4Eo5Yb+jbJrL1bba+fIVA==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/2019/06/18/harddisk/"/>
    <id>https://www.policx.com/2019/06/18/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-08T15:20:35.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/2019/06/05/2019/"/>
    <id>https://www.policx.com/2019/06/05/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-12T09:40:14.384Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/2019/05/01/netlify/"/>
    <id>https://www.policx.com/2019/05/01/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-13T15:48:09.150Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。<br><img src="https://githubpage-1255710107.cos.ap-shanghai.myqcloud.com/static/images/KNN/hexo.png" alt></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。<br>那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。<br>接下来我分步骤的跟大家来介绍我的部署方案。</p><h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/2019/05/01/hexo-theme-icarus/"/>
    <id>https://www.policx.com/2019/05/01/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-17T11:39:04.531Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f0332a3bdc91139.jpg" alt="easyhexo.com"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="https://www.policx.com/2018/09/17/git-del/"/>
    <id>https://www.policx.com/2018/09/17/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-13T08:10:24.253Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://www.policx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="https://www.policx.com/2018/06/19/python-excel/"/>
    <id>https://www.policx.com/2018/06/19/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-07T04:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="https://www.policx.com/2018/06/17/python-writer/"/>
    <id>https://www.policx.com/2018/06/17/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-07T04:36:07.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="https://www.policx.com/2018/06/05/2018/"/>
    <id>https://www.policx.com/2018/06/05/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-12T10:08:35.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="/post-images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymongo/"/>
    <id>https://www.policx.com/2018/05/02/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-07T04:35:29.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://www.policx.com/2018/05/02/mongodb/"/>
    <id>https://www.policx.com/2018/05/02/mongodb/</id>
    <published>2018-05-02T06:11:11.000Z</published>
    <updated>2019-07-13T08:11:55.980Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。</p><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库。</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。通常情况下，在一个集合中的所有文件都是类似或相关目的。</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。<br>下面给出的示例显示了一个博客网站，仅仅是一个逗号分隔的键值对的文档结构。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorial&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,20,2,15),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My second comments&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,25,7,45),</span><br><span class="line">         like: 5</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>MongoDB use DATABASE_NAME 用于创建数据库。该命令如果数据库不存在，将创建一个新的数据库， 否则将返回现有的数据库。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>use DATABASE语句的基本语法如下：<br><code>use DATABASE_NAME</code></p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">如果想创建一个数据库名称为 &lt;mydb&gt;, 那么 use DATABASE 语句应该如下：</span><br><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line"></span><br><span class="line">要检查当前选择的数据库使用命令 db</span><br><span class="line">&gt;db</span><br><span class="line">mydb</span><br><span class="line"></span><br><span class="line">如果想查询数据库列表，那么使用命令 show dbs.</span><br><span class="line">&gt;show dbs</span><br><span class="line">local     0.78125GB</span><br><span class="line">test      0.23012GB</span><br><span class="line"></span><br><span class="line">所创建的数据库（mydb）不存在于列表中。要显示的数据库，需要至少插入一个文档进去。</span><br><span class="line">&gt;db.movie.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;)</span><br><span class="line">&gt;show dbs</span><br><span class="line">local      0.78125GB</span><br><span class="line">mydb       0.23012GB</span><br><span class="line">test       0.23012GB</span><br></pre></td></tr></table></figure><p>MongoDB的默认数据库是test。 如果没有创建任何数据库，那么集合将被保存在测试数据库。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>MongoDB db.dropDatabase() 命令用于删除现有的数据库。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>dropDatabase()指令的基本语法如下：<br><code>db.dropDatabase()</code></p><p>这将删除选定的数据库。如果没有选择任何数据库，那么它会删除默认的“test”数据库</p><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>如果想删除新的数据库 <mydb>, 那么 dropDatabase() 命令将如下所示：</mydb></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;&#123; &quot;dropped&quot; : &quot;mydb&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>MongoDB 的 db.createCollection(name, options) 用于创建集合。 在命令中, name 是要创建集合的名称。 Options 是一个文档，用于指定集合的配置</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>String</td><td>要创建的集合的名称</td></tr><tr><td>Options</td><td>Document</td><td>（可选）指定有关内存大小和索引选项</td></tr></tbody></table><p>选项参数是可选的，所以需要指定集合的唯一名字。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>createCollection()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt;db.createCollection(&quot;mycollection&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以通过使用 show collections 命令来检查创建的集合</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;show collections</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><h3 id="选项列表"><a href="#选项列表" class="headerlink" title="选项列表"></a>选项列表</h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。</td></tr><tr><td>autoIndexID</td><td>Boolean</td><td>（可选）如果为true，自动创建索引_id字段。默认的值是 false.</td></tr><tr><td>size</td><td>number</td><td>（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。</td></tr><tr><td>max</td><td>number</td><td>（可选）指定上限集合允许的最大文件数。</td></tr></tbody></table><p>尽管插入文档，MongoDB首先检查字段集合的上限大小，那么它会检查最大字段。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法 :"></a>语法 :</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexID : true, size : 6142800, max : 10000 &#125; )</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.yiibai.insert(&#123;&quot;name&quot; : &quot;yiibai&quot;&#125;)</span><br><span class="line">&gt;show collections</span><br><span class="line">mycol</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br><span class="line">yiibai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>MongoDB 的 db.collection.drop() 用于从数据库中删除集合。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>drop() 命令的基本语法如下<br><code>db.COLLECTION_NAME.drop()</code></p><h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>下面给出的例子将删除给定名称的集合：mycollection</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.mycollection.drop()</span><br><span class="line">true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p>将数据插入到MongoDB集合，需要使用MongoDB 的 insert() 方法。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>insert()命令的基本语法如下：<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.insert(&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c),</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里 mycol 是我们的集合名称，它是在之前的教程中创建。如果集合不存在于数据库中，那么MongoDB创建此集合，然后插入文档进去。</p><p>在如果我们不指定_id参数插入的文档，那么 MongoDB 将为文档分配一个唯一的ObjectId。</p><p>_id 是12个字节十六进制数在一个集合的每个文档是唯一的。 12个字节被划分如下：<br>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</p><p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.post.insert([</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;NoSQL Database&apos;, </span><br><span class="line">   description: &apos;NoSQL database doesn&apos;t have tables&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 20, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p>要从集合查询MongoDB数据，需要使用MongoDB的 find()方法。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find()</code><br>find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p><code>&gt;db.mycol.find().pretty()</code></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>除了find()方法还有findOne()方法，仅返回一个文档。</p><h3 id="RDBMS-Where子句等效于MongoDB"><a href="#RDBMS-Where子句等效于MongoDB" class="headerlink" title="RDBMS Where子句等效于MongoDB"></a>RDBMS Where子句等效于MongoDB</h3><p>查询文档在一些条件的基础上，可以使用下面的操作</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>Equality</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td>db.mycol.find({“by”:”yiibai tutorials”}).pretty()</td><td>where by = ‘yiibai tutorials’</td></tr><tr><td>Less Than</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>Less Than Equals</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>Greater Than</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>Greater Than Equals</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>Not Equals</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="AND-在-MongoDB"><a href="#AND-在-MongoDB" class="headerlink" title="AND 在 MongoDB"></a>AND 在 MongoDB</h4><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>在 find()方法，如果您传递多个键通过”,”将它们分开，那么MongoDB对待它就如AND条件一样。基本语法如下所示：<br><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有教程含“yiibai tutorials”和其标题是“MongoDB Overview”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;yiibai tutorials&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>对于上面给出的例子相当于where子句：’ where by=’yiibai tutorials’ AND title=’MongoDB Overview’ ‘。可以传递任何数目的键-值对在find子句。</p><h4 id="OR-在-MongoDB"><a href="#OR-在-MongoDB" class="headerlink" title="OR 在 MongoDB"></a>OR 在 MongoDB</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><p>要查询基于OR条件的文件，需要使用$or关键字。OR的基本语法如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有撰写含有 ‘yiibai tutorials’ 或是标题为 ‘MongoDB Overview’ 的教程</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-AND-和-OR-在一起"><a href="#使用-AND-和-OR-在一起" class="headerlink" title="使用 AND 和 OR 在一起"></a>使用 AND 和 OR 在一起</h4><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子显示有喜欢数大于100 的文档，其标题要么是 ‘MongoDB Overview’ 或 ‘yiibai tutorials’. 等效于SQL的where子句：’where likes&gt;10 AND (by = ‘yiibai tutorials’ OR title = ‘MongoDB Overview’)’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai tutorials&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>MongoDB的update()和save()方法用于更新文档到一个集合。 update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。</p><h4 id="MongoDB-Update-方法"><a href="#MongoDB-Update-方法" class="headerlink" title="MongoDB Update() 方法"></a>MongoDB Update() 方法</h4><h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><p>update()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br></pre></td></tr></table></figure><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将设置其标题“MongoDB Overview”的文件为新标题为“New MongoDB Tutorial”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Tutorial Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 ‘multi’ 设置为 true。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="MongoDB-Save-方法"><a href="#MongoDB-Save-方法" class="headerlink" title="MongoDB Save() 方法"></a>MongoDB Save() 方法</h4><p>save() 方法取代，通过新文档到 save()方法</p><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><p>mongodb 的 save()方法如下所示的基本语法：<br><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><p>下面的例子将替换该文件_id ‘5983548781331adf45ec7’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.save(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>MongoDB 的 remove()方法用于从集合中删除文档。remove()方法接受两个参数。一个是标准缺失，第二是justOne标志<br>deletion criteria : 根据文件（可选）删除条件将被删除。<br>justOne : （可选）如果设置为true或1，然后取出只有一个文档。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>remove()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p><h6 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h6><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将删除所有的文件，其标题为 ‘MongoDB Overview’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Toturials Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="只删除一个"><a href="#只删除一个" class="headerlink" title="只删除一个"></a>只删除一个</h5><p>如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。<br><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p><h5 id="删除所有文件"><a href="#删除所有文件" class="headerlink" title="删除所有文件"></a>删除所有文件</h5><p>如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove()</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="MongoDB投影"><a href="#MongoDB投影" class="headerlink" title="MongoDB投影"></a>MongoDB投影</h4><p>mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。</p><p>MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。</p><p>语法</p><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find({},{KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示文档的标题，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意在执行find()方法时_id字段始终显示，如果不想要显示这个字段，那么需要将其设置为0</p><h5 id="限制文档"><a href="#限制文档" class="headerlink" title="限制文档"></a>限制文档</h5><p>MongoDB Limit() 方法</p><p>要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p>limit()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER)</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将只显示2个文档，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>如果不指定 limit()方法的参数数量，然后它会显示集合中的所有文档。</p><p>MongoDB Skip() 方法</p><p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。</p><p>语法</p><p>skip() 方法的基础语法如下所示：<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p><p>例子：</p><p>下面的例子将仅显示第二个文档。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，skip() 方法的默认值是 0</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p>要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。</p><p>语法</p><p>sort()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().sort({KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有如下数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示的文件排序按标题降序排序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;title&quot;:-1&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果不指定排序类型，那么 sort() 方法将以升序排列文档。</p><h4 id="MongoDB索引"><a href="#MongoDB索引" class="headerlink" title="MongoDB索引"></a>MongoDB索引</h4><p>索引支持查询高效率执行。如果没有索引，MongoDB必须扫描集合中的每一个文档，然后选择那些符合查询语句的文档。若需要 mongod 来处理大量数据，扫描是非常低效的。</p><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。</p><p>要创建索引，需要使用MongoDB的ensureIndex()方法。</p><p>语法</p><p>ensureIndex()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code></p><p>这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.</p><p>例子</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">在 ensureIndex()方法，可以通过多个字段，来创建多个字段索引。</span><br><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法还接受选项列表（这是可选），其列表如下：<br><img src="/post-images/1561132706992.png" alt></p><h4 id="MongoDB-聚合"><a href="#MongoDB-聚合" class="headerlink" title="MongoDB 聚合"></a>MongoDB 聚合</h4><p>聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。 在SQL中的count(*)，使用group by 与mongodb的聚合是等效的。 对于MongoDB的聚合，使用的是aggregate()方法。</p><p>语法</p><p>aggregate()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p><p>例子：</p><p>在集合中有以下数据：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai &apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;, </span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;, </span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;https://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在从上面的集合，如果想知道每一个用户编写的教程是多少，那么使用aggregate()方法，如下图所示的列表：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Yiibai Yiibai&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>用于上述用途将等效于sql查询： select by_user, count(*) from mycol group by by_user</code></pre><p>另外，在上述例子中，我们已经使用字段by_user进行分组并计算总和，也就是by_user 出现各个次数。一个列表中可用的聚集表达式。<br>    <img src="/post-images/1561132965786.png" alt></p><h4 id="MongoDB-复制"><a href="#MongoDB-复制" class="headerlink" title="MongoDB 复制"></a>MongoDB 复制</h4><p>复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。</p><h6 id="为什么要复制？"><a href="#为什么要复制？" class="headerlink" title="为什么要复制？"></a>为什么要复制？</h6><blockquote><pre><code>为了让数据安全数据的高（24*7）可用性灾难恢复无停机维护（如备份，索引重建，压缩）读取缩放（额外的副本来读取）副本集是透明的应用</code></pre></blockquote><h5 id="MongoDB复制的工作原理"><a href="#MongoDB复制的工作原理" class="headerlink" title="MongoDB复制的工作原理"></a>MongoDB复制的工作原理</h5><p>MongoDB通过使用副本集的复制来实现。副本集是一组承载同一个数据集的mongod实例。在副本的一个节点是接收所有的写操作主节点。所有的实例，次级，应用操作从主以便它们具有相同的数据集。副本集只能有一个主节点。</p><blockquote><pre><code>副本集是一组两个或更多个节点（通常至少3节点是必需的）。在副本集一个节点是主节点和其余的节点都是次要的。所有的数据复制是从主到次节点。在自动故障转移或维护时，选建立了主要和一个新的主节点被选择。故障节点的恢复后，再次加入副本集，并可以作为一个辅助节点。</code></pre></blockquote><p>mongodb复制的典型图如下图，其中客户端应用程序总是与主节点和主节点交互，然后将数据复制到辅助节点。<br><img src="/post-images/1561133216694.png" alt><br>副本集特征</p><ul><li>N个节点的集群</li><li>任何节点可为原发/主节点</li><li>所有的写操作进入到主节点</li><li>自动故障转移</li><li>自动恢复</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.policx.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MySQL 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymysql/"/>
    <id>https://www.policx.com/2018/05/02/pymysql/</id>
    <published>2018-05-02T03:14:27.000Z</published>
    <updated>2019-07-13T08:15:01.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是-PyMySQL？"><a href="#什么是-PyMySQL？" class="headerlink" title="什么是 PyMySQL？"></a>什么是 PyMySQL？</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><a id="more"></a> <h2 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h2><p>在文件中引入模块</p><p><code>import pymysql</code></p><h3 id="1-Connection对象"><a href="#1-Connection对象" class="headerlink" title="1.Connection对象"></a>1.Connection对象</h3><p>•  用于建立与数据库的连接<br>•  创建对象：调用connect()方法<br>conn=connect(参数列表)<br>•  参数host：连接的mysql主机，如果本机是’localhost’<br>•  参数port：连接的mysql主机的端口，默认是3306<br>•  参数db：数据库的名称<br>•  参数user：连接的用户名<br>•  参数password：连接的密码<br>•  参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</p><h3 id="2-对象的方法"><a href="#2-对象的方法" class="headerlink" title="2.对象的方法"></a>2.对象的方法</h3><p>•  close()关闭连接<br>•  commit()事务，所以需要提交才会生效<br>•  rollback()事务，放弃之前的操作<br>•  cursor()返回Cursor对象，用于执行sql语句并获得结果</p><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><p>•  执行sql语句<br>•  创建对象：调用Connection对象的cursor()方法<br>cursor1=conn.cursor()</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>•  close()关闭<br>•  execute(operation [, parameters ])执行语句，返回受影响的行数<br>•  fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组<br>•  next()执行查询语句时，获取当前行的下一行<br>•  fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回<br>•  scroll(value[,mode])将行指针移动到某个位置<br>•  mode表示移动的方式<br>•  mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动。相对的<br>•  mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0，绝对的。</p><h4 id="举个例子便于理解"><a href="#举个例子便于理解" class="headerlink" title="举个例子便于理解"></a>举个例子便于理解</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 导入python操作mysql的模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> pymysql</span><br><span class="line"><span class="hljs-comment"># 获取连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="hljs-string">'127.0.0.1'</span>, user=<span class="hljs-string">'root'</span>, password=<span class="hljs-string">'123456'</span>, database=<span class="hljs-string">'python01'</span>, port=<span class="hljs-number">3306</span>, charset=<span class="hljs-string">'utf8'</span>)</span><br><span class="line"><span class="hljs-comment"># 获取执行工具</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="hljs-comment"># sql语句,增删改</span></span><br><span class="line"><span class="hljs-comment">#sql = 'select birthday from t_user'</span></span><br><span class="line">sql = <span class="hljs-string">'select id,name,pwd,birthday from t_user'</span></span><br><span class="line"><span class="hljs-comment"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span></span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(<span class="hljs-string">'查询的结果有%s条数据'</span>%count)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取第一行</span></span><br><span class="line">dateOne = cur.fetchone()</span><br><span class="line">print(dateOne)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向上移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向下移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'absolute'</span>)   绝对的，这里指的是第一行</span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'relative'</span>)   相对的</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取所有行的数据</span></span><br><span class="line">dataAll = cur.fetchall()</span><br><span class="line">print(dataAll)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">     print(temp)</span><br><span class="line">     print(dataAll[<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])      <span class="hljs-comment">#dataAll[-1]得到的是一个用户所有的信息，dataAll[-1][2]获取最后一个人的密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> cur:</span><br><span class="line">     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-string">'id:%s,name:%s,pwd:%s,birthday:%s'</span></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">    print(s%(temp[<span class="hljs-number">0</span>],temp[<span class="hljs-number">1</span>],temp[<span class="hljs-number">2</span>],temp[<span class="hljs-number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-对象的属性"><a href="#3-对象的属性" class="headerlink" title="3.对象的属性"></a>3.对象的属性</h3><p>•  rowcount只读属性，表示最近一次execute()执行后受影响的行数<br>•  connection获得当前连接对象</p><h3 id="2-增删改查-CRUD"><a href="#2-增删改查-CRUD" class="headerlink" title="2.增删改查(CRUD)"></a>2.增删改查(CRUD)</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>•  创建testInsert.py文件，向学生表中插入一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;insert into students(sname) values(&apos;张良&apos;)&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p>•  创建testUpdate.py文件，修改学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;update students set sname=&apos;刘邦&apos; where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>•  创建testDelete.py文件，删除学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8 import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;delete from students where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>•  创建testSelectOne.py文件，查询一条学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Pymysql try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>•  创建testSelectMany.py文件，查询全部学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf8 import Pymysql</span><br><span class="line">try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="实例一：参数"><a href="#实例一：参数" class="headerlink" title="实例一：参数"></a>实例一：参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改，sql注入</span><br><span class="line">sql = &apos;insert into t_user(name,pwd,birthday) values(%s,%s,%s)&apos;</span><br><span class="line"># 参数列表</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = input(&apos;输入生日:&apos;)     # 2017年10月01日--&gt;日期struct_time(---&gt;2017-10-01)</span><br><span class="line">birthday = time.strptime(birthday,&apos;%Y年%m月%d日&apos;)      #这里我们就用到了时间与字符串的相互转换(详情见MySQL高级)</span><br><span class="line"></span><br><span class="line">params = [name,pwd,birthday]</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql,params)</span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">print(&apos;受影响的行数:%s&apos;%count)</span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例二：抛出异常"><a href="#实例二：抛出异常" class="headerlink" title="实例二：抛出异常"></a>实例二：抛出异常</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    conn = None</span><br><span class="line">    cur = None</span><br><span class="line">    # 获取连接对象</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">                           user=&apos;root&apos;,</span><br><span class="line">                           password=&apos;123456&apos;,</span><br><span class="line">                           database=&apos;python01&apos;,</span><br><span class="line">                           port=3306,</span><br><span class="line">                           charset=&apos;utf8&apos;)</span><br><span class="line">    # 模拟异常</span><br><span class="line">    # a = 1 / 0</span><br><span class="line">    # 获取执行工具</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    # sql语句,增删改</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd,birthday) values(&quot;小伊&quot;,&quot;123456&quot;,str_to_date(&quot;2017年10月20日&quot;,&quot;%Y年%m月%d日&quot;))&apos;</span><br><span class="line">    # 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">    count = cur.execute(sql)</span><br><span class="line">    # 提交</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(&apos;受影响的行数:%s&apos; % count)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    # 打印异常信息，测试时候使用，项目上线，去掉</span><br><span class="line">    print(str(ex))</span><br><span class="line">    # 将异常继续抛出</span><br><span class="line">    # raise</span><br><span class="line">finally:</span><br><span class="line">    if cur != None:</span><br><span class="line">        cur.close()</span><br><span class="line">    if conn != None:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例三："><a href="#实例三：" class="headerlink" title="实例三："></a>实例三：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改</span><br><span class="line">#sql = &apos;select birthday from t_user&apos;</span><br><span class="line">sql = &apos;select id,name,pwd,birthday from t_user&apos;</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(&apos;查询的结果有%s条数据&apos;%count)</span><br><span class="line"></span><br><span class="line">#获取第一行</span><br><span class="line"># dateOne = cur.fetchone()</span><br><span class="line"># print(dateOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for temp in cur:</span><br><span class="line">#     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;id:%s,name:%s,pwd:%s,birthday:%s&apos;</span><br><span class="line">for temp in dataAll:</span><br><span class="line">    print(s%(temp[0],temp[1],temp[2],temp[3]))</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h3><p>这个库的名字：mySqlHelper</p><p> python操作mysql进行增删改查的封装</p><pre><code>1、增删改，代码类似2、查询代码分析1、获取连接对象2、sql语句不同，参数不同3、获取执行对象    增删改    查询        1、fetchone        2、fetchall4、处理结果5、关闭</code></pre><h4 id="面向对象-建立类，封装属性和函数"><a href="#面向对象-建立类，封装属性和函数" class="headerlink" title="面向对象  建立类，封装属性和函数"></a>面向对象  建立类，封装属性和函数</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">class MysqlHelper:</span><br><span class="line">    &apos;&apos;&apos;python操作mysql的增删改查的封装&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, host, user, password, database, port=3306, charset=&apos;utf8&apos;):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化参数</span><br><span class="line">        :param host:        主机</span><br><span class="line">        :param user:        用户名</span><br><span class="line">        :param password:    密码</span><br><span class="line">        :param database:    数据库</span><br><span class="line">        :param port:        端口号，默认是3306</span><br><span class="line">        :param charset:     编码，默认是utf8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        获取连接对象和执行对象</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.conn = pymysql.connect(host=self.host,</span><br><span class="line">                                    user=self.user,</span><br><span class="line">                                    password=self.password,</span><br><span class="line">                                    database=self.database,</span><br><span class="line">                                    port=self.port,</span><br><span class="line">                                    charset=self.charset)</span><br><span class="line"></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    def fetchone(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数元组，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataOne = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataOne = self.cur.fetchone()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataOne</span><br><span class="line"></span><br><span class="line">    def fetchall(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数列表，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataall = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataall = self.cur.fetchall()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataall</span><br><span class="line"></span><br><span class="line">    def __item(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行增删改</span><br><span class="line">        :param sql:           sql语句</span><br><span class="line">        :param params:        sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:              受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        count = 0</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行修改</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def insert(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行新增</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def delete(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行删除</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        关闭执行工具和连接对象</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if self.cur != None:</span><br><span class="line">            self.cur.close()</span><br><span class="line">        if self.conn != None:</span><br><span class="line">            self.conn.close()</span><br></pre></td></tr></table></figure><h4 id="1-测试查询多条数据"><a href="#1-测试查询多条数据" class="headerlink" title="1.测试查询多条数据"></a>1.测试查询多条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where name = %s and id &gt; %s&apos;</span><br><span class="line"># params</span><br><span class="line">params = [&apos;小茗&apos;,1]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchall(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    for temp in data:</span><br><span class="line">        print(temp)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br><span class="line"></span><br><span class="line">helper.close()</span><br></pre></td></tr></table></figure><h4 id="2-测试查询一条数据"><a href="#2-测试查询一条数据" class="headerlink" title="2.测试查询一条数据"></a>2.测试查询一条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where id = %s&apos;</span><br><span class="line">#sql = &apos;select * from t_user where id = 1&apos;</span><br><span class="line"># params</span><br><span class="line">params = [2]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchone(sql, params)</span><br><span class="line">#data = helper.fetchone(sql)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    print(data)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br></pre></td></tr></table></figure><h4 id="3-测试增删改"><a href="#3-测试增删改" class="headerlink" title="3.测试增删改"></a>3.测试增删改</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;update t_user set name =%s,pwd=%s,birthday=%s where id=%s&apos;</span><br><span class="line"># params</span><br><span class="line">id = input(&apos;输入编号:&apos;)</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = time.strptime(input(&apos;输入生日:&apos;), &apos;%Y年%m月%d日&apos;)</span><br><span class="line">params = [name, pwd, birthday,id]</span><br><span class="line"># 执行</span><br><span class="line">count = helper.update(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if count:</span><br><span class="line">    print(&apos;操作成功.&apos;)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;操作失败.&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-登录和注册"><a href="#4-登录和注册" class="headerlink" title="4.登录和注册"></a>4.登录和注册</h4><p>登录和注册的时候需要对密码进行加密</p><p>注意：</p><p>•  需要对密码进行加密<br>•  如果使用md5加密，则密码包含32个字符<br>•  如果使用sha1加密，则密码包含40个字符，这里使用这种方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table userinfos(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    uname varchar(20),</span><br><span class="line">    upwd char(40),</span><br><span class="line">    isdelete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">ret = doPwd(&apos;123&apos;)</span><br><span class="line">print(ret)</span><br><span class="line">结果：40bd001563085fc35165329ea1ff5c5ecbdbbeef</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">-- 插入如下数据，用户名为123,密码为123,这是sha1加密后的值</span><br><span class="line"></span><br><span class="line">insert into userinfos </span><br><span class="line">values(1,&apos;123&apos;,&apos;40bd001563085fc35165329ea1ff5c5ecbdbbeef&apos;,0);</span><br></pre></td></tr></table></figure><h4 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from mysqlHelper import MysqlHelper</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    &apos;&apos;&apos;登录&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    #加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;select * from t_user where name=%s and pwd=%s&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    data = helper.fetchone(sql, params)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;登录成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;登录失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doPwd(pwd):</span><br><span class="line">    &apos;&apos;&apos;sha1编码&apos;&apos;&apos;</span><br><span class="line">    mysha1 = hashlib.sha1()</span><br><span class="line">    mysha1.update(pwd.encode(&apos;utf-8&apos;))</span><br><span class="line">    pwd = mysha1.hexdigest()</span><br><span class="line">    return pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    &apos;&apos;&apos;注册&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    # 加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd) values(%s,%s)&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    count = helper.insert(sql, params)</span><br><span class="line">    if count:</span><br><span class="line">        print(&apos;操作成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;操作失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #register()</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PyMySQL？&quot;&gt;&lt;a href=&quot;#什么是-PyMySQL？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PyMySQL？&quot;&gt;&lt;/a&gt;什么是 PyMySQL？&lt;/h2&gt;&lt;p&gt;PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。&lt;/p&gt;
&lt;p&gt;PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django笔记</title>
    <link href="https://www.policx.com/2018/04/18/django-bi-ji/"/>
    <id>https://www.policx.com/2018/04/18/django-bi-ji/</id>
    <published>2018-04-17T17:00:16.000Z</published>
    <updated>2019-07-12T10:07:09.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p><a id="more"></a><h2 id="一-版本选择"><a href="#一-版本选择" class="headerlink" title="一. 版本选择"></a>一. 版本选择</h2><p>Django 2.0.x 支持 Python 3.4, 3.5 和 3.6 （注意，不再支持 Python 2）   </p><h2 id="二-安装-Django"><a href="#二-安装-Django" class="headerlink" title="二. 安装 Django"></a><strong>二. 安装 Django</strong></h2><p><strong>2.1. 用 pip 来安装</strong></p><p><strong>2.1.1 需要先安装pip</strong></p><p>(1). Linux, Mac OSX, Windows 下都可用 get-pip.py 来安装<br>pip：<a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/installing.html</a>  </p><p>或者直接下载：<a href="https://bootstrap.pypa.io/get-pip.py" title="get-pip.py" target="_blank" rel="noopener">get-pip.py</a> 然后运行在终端运行 <strong>python get-pip.py 就可以安装 pip。</strong></p><p>Note: 也可以下载 pip 源码包，运行 <strong>python setup.py install</strong> 进行安装 </p><p><strong>2.1.2 利用 pip 安装 Django</strong></p><p><code>（sudo) pip install Django    或者(sudo) pip install Django==1.8.16 或者 pip install Django==1.11.8</code>    </p><p>如果想升级 pip 可以用： </p><pre><code>(sudo) pip install --upgrade pip</code></pre><p><strong>2.2. 下载源码安装</strong>  </p><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">https://www.djangoproject.com/download/</a></p><p>如果是源码包, 比如 django-1.11.8.tar.gz </p><p><strong>2.2.1 Linux 或 Mac 下</strong></p><pre><code>tar -xvf django-1.11.8.tar.gzcd django-1.11.8(sudo) python setup.py install</code></pre><h2 id="三-检查是否安装成功"><a href="#三-检查是否安装成功" class="headerlink" title="三. 检查是否安装成功"></a><strong>三. 检查是否安装成功</strong></h2><p>终端上输入 python ,点击 Enter，进行 python 环境</p><pre><code>&gt;&gt;&gt; import django&gt;&gt;&gt; django.VERSION(1, 11, 8, &apos;final&apos;, 0)&gt;&gt;&gt; &gt;&gt;&gt; django.get_version()&apos;1.11.8&apos;</code></pre><p>如果运行后看到版本号，就证明安装成功了！ </p><h2 id="四-搭建多个互不干扰的开发环境（可选）"><a href="#四-搭建多个互不干扰的开发环境（可选）" class="headerlink" title="四. 搭建多个互不干扰的开发环境（可选）"></a><strong>四. 搭建多个互不干扰的开发环境（可选）</strong></h2><p>我们有的时候会发现，一个电脑上有多个项目，一个依赖 Django 1.8，另一个比较旧的项目又要用 Django 1.5，这时候怎么办呢？ </p><p>我们需要一个依赖包管理的工具来处理不同的环境。 </p><h3 id="4-1-虚拟环境依赖安装"><a href="#4-1-虚拟环境依赖安装" class="headerlink" title="4.1 虚拟环境依赖安装"></a>4.1 虚拟环境依赖安装</h3><p>开发会用 virtualenv 来管理多个开发环境 </p><p><strong>Linux/MacOS 下</strong></p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了 </p><pre><code># 安装:(sudo) pip install virtualenv virtualenvwrapper</code></pre><p>修改~/.bash_profile或其它环境变量相关文件(如 .bashrc 或用 ZSH 之后的 .zshrc)，添加以下语句  </p><pre><code>export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/workspacesource /usr/local/bin/virtualenvwrapper.sh</code></pre><p>修改后使之立即生效(也可以重启终端使之生效)： </p><pre><code>source ~/.bash_profile</code></pre><h3 id="4-2-虚拟环境使用方法："><a href="#4-2-虚拟环境使用方法：" class="headerlink" title="4.2 虚拟环境使用方法："></a><strong>4.2 虚拟环境使用方法：</strong></h3><p><strong>mkvirtualenv zqxt：创建运行环境zqxt</strong></p><p><strong>workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境</strong></p><p><strong>deactivate</strong>: 退出终端环境</p><p><strong>其它的：</strong></p><p><strong>rmvirtualenv</strong> ENV：删除运行环境ENV </p><p><strong>mkproject</strong> mic：创建mic项目和运行环境mic </p><p><strong>mktmpenv</strong>：创建临时运行环境 </p><p><strong>lsvirtualenv</strong>: 列出可用的运行环境 </p><p><strong>lssitepackages</strong>: 列出当前环境安装了的包 </p><p>创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
</feed>
