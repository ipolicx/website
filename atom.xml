<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南一道街</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-08-16T09:00:26.297Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dice 称这  5 种编程语言未来可能各自成王</title>
    <link href="https://www.policx.com/news/DiceInsightsB/"/>
    <id>https://www.policx.com/news/DiceInsightsB/</id>
    <published>2019-08-16T08:14:18.000Z</published>
    <updated>2019-08-16T09:00:26.297Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>上个月，我们曾报道过一篇”<a href="https://www.policx.com/news/DiceInsightsA">Dice 称这 5 种编程语言可能衰落</a>“的文章，它基于 RedMonk 和 TIOBE 等公司的数据推测的，结果引起了广泛讨论。<a href="https://insights.dice.com/2019/08/12/5-programming-languages-future-greatness/" target="_blank" rel="noopener">Dice Insights</a> 是为北美的科技专业人士提供见解和分析的网站，目的是帮助他们找到工作和发展事业，并且报道就业趋势、新技术等内容。经过了半个月，Dice 依靠更大的数据趋势来做出预测，又发布一个更大胆的预测续集，关于 5 种在未来可能会有更多使用的编程语言。</p><a id="more"></a><h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a><strong>Swift</strong></h3><p><img src="https://gitee.com/policx/im/raw/master/images/mnC0iO.jpg" alt="Swift"><br>苹果想要放弃 Objective-C，它是一种有着 35 年历史的编程语言，用于为苹果生态系统构建应用程序。苹果想让 Swift 来取代它，Swift 发布与五年前。根据分析公司 RedMonk 的长期语言排名，Swift 自创建以来的使用量迅速上升。</p><p>虽然如此，但 Objective-C 仍然有在使用，这主要归功于过去三十年中产生的大量遗留代码（legacy code）。不过，苹果已经不会对它抱有任何期待，Swift 才是为苹果的应用程序提供动力的主打语言，苹果在跨平台应用上只可能会加速这门编程语言的发展。</p><h3 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a><strong>Kotlin</strong></h3><p><img src="https://gitee.com/policx/im/raw/master/images/kcvzdY.jpg" alt="Kotlin"><br>Kotlin 正在上升。Kotlin 来源于一个岛屿的名字，全称是 Kotlin Island，是英语「科特林岛」之意，十年前，Kotlin 还是俄罗斯岛屿，现在它变成编程语言，JetBrains 公司开发了它，不过它受关注的原因，很大程度上归功于 Google，Google 将它作为 Android 的一流开发语言。</p><p>可以说，通过选择 Kotlin，Google 减少了对 Java 的依赖。而且 Java 与 Oracle 发生了巨大法律纠纷，但是不管谷歌的律师是否在推动该公司对 Kotlin 的支持，毋庸置疑的一点，因为它的功能和灵活性，许多开发人员也开始喜欢这种语言。</p><p>早在 2018 年，Pusher 就发起了一项<a href="https://pusher.com/state-of-kotlin" target="_blank" rel="noopener">开发人员调查</a>，发现 Kotlin 的使用量正在天文数字般的增长，这很大程度上是因为 Android。Pusher 补充说明：</p><blockquote><p>很大一部分开发人员，他们的工作和其他项目的程序，使用的是 Kotlin。大多数人都喜欢使用它，因为它的特性，80% 以上的开发人员都喜欢它的空安全性，其次是扩展函数、与 Java 的简化互操作性和数据类。</p></blockquote><h3 id><a href="#" class="headerlink" title></a><img src="https://oscimg.oschina.net/oscnet/d4ff57d5e175ffaa925bf25cc075cd1af7b.jpg" alt></h3><p>对 Kotlin 来说，除了安卓开发之外似乎无路可走了。所以它的最大的问题是，是否能超越 Android 生态系统而开拓新的领域。</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a><strong>Python</strong></h3><p><img src="https://gitee.com/policx/im/raw/master/images/UX6DG4.jpg" alt="Python"><br>Python 是一种强大的语言，为世界各地的开发人员提供了多种用途。但是根据 <a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener">TIOBE 指数</a>(每月更新一次)，Python 的排名还在继续攀升。并且开发人员和技术专业人员也不断发现 Python 的新用途，包括数据分析和机器学习。</p><p>Python 现在也已经有了庞大的用户基础，并且它深深地嵌入到了众多的业务中，所以 Python 不太可能在短期内消失。唯一的问题是这种编程语言还能够持续增长多少，以及它接下来将还能抓住哪些行业。</p><h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a><strong>Groovy</strong></h3><p><img src="https://gitee.com/policx/im/raw/master/images/YNuq0e.jpg" alt="Groovy"><br>Groovy 有广泛的 IDE 支持、与 Java 的相似性以及与流行的开源自动化服务器 <a href="https://jenkins.io/" target="_blank" rel="noopener">Jenkins</a> 的集成支持下，在 TIOBE 的排名是上升的。它已经成为相当多的系统中的”编程语言粘合剂”，它的未来似乎是光明的。</p><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a><strong>TypeScript</strong></h3><p><img src="https://gitee.com/policx/im/raw/master/images/fWCfFh.png" alt="TypeScript"><br>TypeScript 是 JavaScript 的一个超集，一些开发人员认为它不是一种”完整”的语言，因为它可以转换到 JavaScript。但不管如何说它，<a href="https://redmonk.com/jgovernor/2019/05/07/typescriptexploding/?utm_source=rss&utm_medium=rss&utm_campaign=typescriptexploding" target="_blank" rel="noopener">RedMonk</a>和 <a href="https://octoverse.github.com/" target="_blank" rel="noopener">GitHub</a> （如下图，上升至第七名）的十月报告 TypeScript 排名都是严重上升的。去年夏天，TIOBE 就表示，TypeScript 已经开始侵吞 JavaScript 的市场份额。</p><p><img src="https://oscimg.oschina.net/oscnet/b036983a1d5e98be8b291b0b4df808806f0.jpg" alt></p><p>不管你是否相信，TypeScript 是一种新的、改进的 JavaScript，它将取代这个更老的语言，而且许多技术专业人士认为 TypeScript 在未来几年里还有发展的空间。</p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.oschina.net/news/109114/dice-consider-five-language-great-future" target="_blank" rel="noopener"><img src="https://static.oschina.net/new-osc/img/logo_osc_new.svg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上个月，我们曾报道过一篇”&lt;a href=&quot;https://www.policx.com/news/DiceInsightsA&quot;&gt;Dice 称这 5 种编程语言可能衰落&lt;/a&gt;“的文章，它基于 RedMonk 和 TIOBE 等公司的数据推测的，结果引起了广泛讨论。&lt;a href=&quot;https://insights.dice.com/2019/08/12/5-programming-languages-future-greatness/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dice Insights&lt;/a&gt; 是为北美的科技专业人士提供见解和分析的网站，目的是帮助他们找到工作和发展事业，并且报道就业趋势、新技术等内容。经过了半个月，Dice 依靠更大的数据趋势来做出预测，又发布一个更大胆的预测续集，关于 5 种在未来可能会有更多使用的编程语言。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="program" scheme="https://www.policx.com/tags/program/"/>
    
  </entry>
  
  <entry>
    <title>善用佳软--aiXcoder</title>
    <link href="https://www.policx.com/Software/aixcoder/"/>
    <id>https://www.policx.com/Software/aixcoder/</id>
    <published>2019-08-15T12:55:41.000Z</published>
    <updated>2019-08-15T13:43:41.434Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p> 从程序员到数据工程师，编写程序代码是一项基本功，但是编写冗长代码的过程也极大地消耗了开发者的耐心。近来，有不少关于代码补全工具的消息爆出，例如，来自美国的 Kite，来自加拿大的 TabNine 等，一时间获得了不少程序员的关注。但其实很多人还并不知道，在这些国外产品不断被媒体推送的背后，有一款能力更为强大、更早将深度学习应用于代码补全的产品，一款源自中国的工具——aiXcoder，它的研发者们来自于北京大学。</p></blockquote><a id="more"></a><p>在本文中，机器之心采访了项目总负责人北京大学计算机科学技术系副教授李戈，请他为读者朋友解读自动代码补全背后的技术，以及 aiXcoder 背后的技术特性和优势。aiXcoder 官网：<a href="https://www.aixcoder.com/#/" target="_blank" rel="noopener">https://www.aixcoder.com/#/</a></p><p><strong>aiXcoder 的代码补全效果</strong></p><p>我们先看看写 TensorFlow 时的代码补全效果：</p><p><img src="https://gitee.com/policx/im/raw/master/images/i4YcMg.jpg" alt></p><p>如上所示，aiXcoder 在 TensorFlow 的代码环境下能够直接「猜测」到模型建立后的一系列代码流程。例如，在定义了 loss 之后需要定义 optimizer，之后需要 train_op、init 方法，然后最终定义模型的保存方式 saver，以及开始运行计算图。这样一个流程基本上是深度学习开发者所知晓的，但是按照流程写下来非常繁琐。在 aiXcoder 的提示下，开发速度得到了提升。</p><p>aiXcoder 支持 Java、C++/C、Python、PHP、JavaScript 等语言，以插件的方式集成到现有的 IDE 中，如 Pycharm、Android Studio、VS Code、Eclipse、Webstorm、Sublime 等，插件的背后是一个强大的云端深度学习引擎。</p><p>针对开发者，该产品目前分为社区版、专业版和企业版。社区版是完全免费的，专业版也可以通过分享而免费获得。它们间的不同之处在于模型会不会继续学习，社区版主要利用事先训练好的公用模型做预测，而专业版则会根据用户的代码习惯及结构作进一步的调整。企业版是 aiXcoder 功能最为强大的版本，它能够在企业内部的私有云中进行部署，并能够利用企业自己的代码来进行模型的优化训练，从而具有更高的准确率和运行性能。</p><p><strong>aiXcoder 用起来怎么样</strong></p><p>百闻不如一见，机器之心也对 aiXocder 进行了使用测试。</p><p>机器之心在 Pycharm 上试用了社区版/专业版，它们都是需要在线推断。不同的地方在于专业版还需要额外的内存，因为每一个 Pro 用户都需要额外的缓冲区来储存模型「学到的」用户习惯。当然，Pro 用户的缓冲区是是只有该插件能访问的。</p><p><strong>使用体会</strong></p><p>一般而言，当我们选择 Python 和 PyCharm 时，代码补全就自然用 IDE 自带的工具。使用 aiXcoder 第一个感受是它比自带的补全工具灵活得多，因为以前的补全主要体现在 Python 函数或其它包的 API，而 aiXcoder 还会预测变量名是什么、运算是什么、想调用的函数又是什么。</p><p>虽然代码补全的推断过程全是在云端完成的，但在我们的使用中，一般网络环境甚至 4G 都能有实时的反馈，所以补全速度上基本和 Pycharm 自带的工具差不多。李戈教授表示，目前 aiXcoder 绝大多数都能在 200ms 左右得到反馈，有部分地区的用户由于网络延迟问题可能会感觉到卡顿，aiXcoder 正在全国各个主要城市部署服务器，以提升用户体验。同时，aiXcoder 团队也特别关注模型压缩技术，希望把基于 CPU 的推理运算时间压缩到可接受的程度，从而推出能够在 CPU 上运行的本地版。</p><p>总体而言，aiXcoder 提供的补全功能在预测变量名、函数名或关键字等效果上确实非常灵活，而且它还会学习开发者的代码风格与编程模式，因此效果还是挺好的。</p><p>如下是自动补全的一些候选，一些函数名称可能是开发者之间经常使用的，因此得到了推荐：</p><p><img src="https://gitee.com/policx/im/raw/master/images/Wb3qeB.jpg" alt></p><p>对于一些变量，aiXcoder 可根据变量类型提出该变量可能的操作，比如，对于下图的变量「m」，aiXcoder 提出了一个对字符串进行增加的代码：<br><img src="https://gitee.com/policx/im/raw/master/images/odcZX3.jpg" alt="pic"></p><p><strong>对比测评</strong></p><p><img src="https://gitee.com/policx/im/raw/master/images/17llLZ.jpg" alt="pic"></p><p>aiXcoder 官方也将产品和其他代码补全工具进行了对比，包括 Kite 和 TabNine 等。</p><p>在对比过程中，aiXcoder 会使用 Kite 或 TabNine 官方提供的示例代码，并测试完成这段代码到底需要多少次按键。结果表明，aiXcoder 较其他插件在效率上提升 1.5 倍以上。</p><p><strong>aiXcoder 是如何打造的</strong></p><p>能够实现高效代码补全的 aiXcoder，背后有着强大的技术支撑。据李戈教授介绍，aiXcoder 很早就试过了语言模型，将代码视为一种语言从而直接建模，这就和 Deep TabNine 一样。但是研究者很快发现，只有语言模型是行不通的，它总会提出一些毫无意义、很不科学的补全建议。为此，aiXcoder 融合了基于序列的程序代码语言模型、基于抽象语法树和程序逻辑关系的图神经网络等方法，共同打造一个完整的系统。</p><p><strong>为什么直接生成代码是困难的</strong></p><p>如果深度学习模型能根据开发者的意图，以端到端的方式直接生成对应的代码，那么这样的模型会很「优雅」。但是经过研究发现，这样的任务需求是很难实现的，这和任务本身所依赖的数据的性质有关系。</p><p>李戈教授从机器学习所依赖的数据性质的角度，对代码生成任务和传统的图像处理任务、自然语言处理任务的不同，给出一种较为形象化的解释。</p><p><img src="https://gitee.com/policx/im/raw/master/images/uynX38.jpg" alt="pic"></p><p>对于图像识别或图像分类任务而言，机器学习的目标是建立一个连续的数据集（图像数据）到一个近乎连续的、有着接近清晰边界的数据集（标签）之间的映射关系。</p><p>这样一来，由于图像数据异常的稠密，而标签集又有足够清晰的边界，那么这就相当于一个标签拥有大量的数据可以学习。这样的映射关系是比较容易建立的，这也是机器学习中和图像相关的任务相对较为容易完成的原因。</p><p><img src="https://gitee.com/policx/im/raw/master/images/X6IyEn.jpg" alt="pic"></p><p>对于自然语言处理任务而言，机器学习需要从一个较为连续的（离散度高于图像）、有着较清晰边界的数据集建立与另一个较为连续的、有着较清晰的边界的数据集之间的映射关系。</p><p>而由于自然语言处理中的文本数据相比图像数据更为稀疏，因此自然语言处理相关的任务更难取得较好的模型性能。</p><p><img src="https://gitee.com/policx/im/raw/master/images/Ezm4TN.jpg" alt="pic"></p><p>但是在代码生成方面，从编程者的意图（intent）生成程序代码的问题，可以看做是「程序员意图空间」到「程序代码空间」的映射，其中意图可以是由自然语言描述的信息。如上图所示，这是从一个较为连续的、有着较清晰边界的数据集，向一个更加离散而没有清晰边界的数据集进行映射。</p><p>换句话说，尽管代码生成的意图较为清楚，但是实现该意图的代码数据却比较稀疏，而且即便对于相同的意图，其对应的实现代码之间仍存在较大差距，因此这样的任务是非常难学习的。</p><p>为此，在 aiXcoder 的实际实现中，对不同应用领域的代码都采用了特定的模型，它们仅使用该领域的数据进行训练。例如，对 TensorFlow 或 PyTorch 等框架也有其特定的代码补全模型。这样做的主要目的就是加强程序分布的稠密性，在特定领域下，代码分布更加接近连续性。可见，根据编程者的「意图」来「直接」生成完整代码是非常困难的，但李戈教授表示，可以用类似的技术来辅助人类程序员来编写代码，我们可以从程序员已经写下的代码中获取程序员的「编程意图」，然后综合分析代码，的结构信息、变量引用信息、API 序列信息、继承关系信息等等，以自动生成后续代码。然而，在这个过程中，只有语言模型是远远不够的，还需要对很多其它代码特征进行分析，才能做好生成式的代码补全。 <strong>单纯的预训练语言模型又怎么样？</strong></p><p>提起代码补全，有些人可能会下意识的认为这仅仅是一个普通的语言建模任务，模型只需要根据开发者之前写的代码预测之后的代码即可。因此使用最先进的预训练语言模型，再在代码数据上进行微调说不定是一种好方法。</p><p>但是李戈教授表示，这样的想法是远远不够的。预训练语言模型在代码补全任务中效果不佳，主要是因为代码补全任务本身存在诸多不同于自然语言分析任务的挑战。</p><p>首先是代码文本中存在的语义抽象性问题。代码的语义（功能语义）与其字面表示之间存在更大的差距。我们无法根据字面确定代码的准确语义。例如，在代码中，只改变一个字符就有可能完全改变整行代码的功能，因此处理代码的语言并准确提取其含义相比自然语言处理任务更棘手。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;word_ids.txt&apos;,&apos;r&apos;)f = open(&apos;word_ids.txt&apos;,&apos;w&apos;)</span><br></pre></td></tr></table></figure><p><em>上图所示，在 Python 代码中，打开某个文件时使用「r」和「w」会实现完全不同的功能。</em></p><p>此外，代码的功能语义难以进行具体的表达和刻画，而且代码功能语义的表达方式多种多样。例如，有多种代码的形式文本用于实现某个功能，不能说某一种代码是对的而另一种是错的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_a = [] for i in items:     result = test(i)     list_a.append(result) list_a = [test(i) for i in items]</span><br></pre></td></tr></table></figure><p><em>如图所示，实现 list_a 的代码可以是多种多样的，但语言模型会将它们学习为完全不同的表征。</em></p><p>同时，代码文本本身的结构非常复杂。例如，代码的语义与代码结构（如行与行的缩进）之间存在较大的关联性，代码语义依赖于代码结构进行表达。这是预训练语言模型难以表示的特征。</p><p>最后，代码具有演化性的特征。代码较自然语言的迭代速度更快，因此预训练语言模型不能够及时捕捉演化特征。</p><p>考虑到代码语言中的诸多特性，单纯的预训练语言模型无法得到非常好的效果。</p><p><strong>核心技术</strong></p><p>既然单独的语言模型不行，那么 aiXcoder 又结合了哪些技术，它又是靠什么来补全代码的？总体而言，aiXcoder 主要依赖于其特有的对程序代码进行学习的深度神经网络模型，该模型能够对程序的如下几类特征进行分析：</p><ol><li>程序的结构语义特征：程序语言是一种结构性很强的语言，程序的结构信息也体现着程序的语义。例如，抽象语法树是对代码进行解析的一种较为通用的结构，它体现了代码的语义特征，aiXcoder 便充分利用了抽象语法树，对程序员已经写下的代码的语义进行解读。</li></ol><ol start="2"><li>程序元素间的逻辑关系：程序代码的不同元素之间存在着不同的关系，例如程序变量之间的引用关系、类之间的继承关系、方法与参数之间的调用关系等等。程序本身又可以表示为多种图，例如控制流图、数据流图、调用关系图等等。aiXcoder 借助图神经网络能够对程序元素之间的多种关系进行建模，从而能够对程序元素之间的复杂关系进行分析和推理。</li></ol><p><img src="https://gitee.com/policx/im/raw/master/images/Trw7pQ.jpg" alt="pic"></p><ol start="3"><li>程序语言序列模型：当然，程序语言也具有与自然语言相似的一面，因此可以利用程序标识符之间的序列关系建立程序语言模型。aiXcoder 也使用了最新的深度学习语言模型对程序中的序列信息进行建模。</li></ol><p><img src="https://gitee.com/policx/im/raw/master/images/n3jWGe.jpg" alt="pic"></p><p>在获得程序代码的各种特征之后，就该把这些特征输入深度神经网络进行分析了，但这并不容易，因为在输入神经网络之前需要把这些特征进行向量化表示。在研究过程中，北京大学提出了一系列解决程序语言成分相量化的办法，并且在国际上最早发表了相关的论文，这些都为 aiXcoder 的构造打下了基础。</p><p><strong>团队介绍</strong></p><p>李戈教授所在的北京大学高可信软件技术教育部重点实验室是国内顶尖的软件科学研究团队，是北京大学计算机软件与理论全国重点学科的主要支撑，其建设历史可以追溯到 1955 年，至今已有 60 多年的学术沉淀和积累。该团队在著名软件科学家杨芙清院士和梅宏院士的带领下，已经成长为该领域国际领先的研究团队。<br><img src="https://i.loli.net/2019/08/15/eMlOtfEGvjDLcy7.jpg" alt="pic"><br>基于深度学习的代码分析与生成一直是李戈教授的研究方向，也是北大高可信软件技术教育部重点实验室重点关注的领域，他们从 2013 年开始就开展了基于深度学习的代码分析研究，从 2015 年开始就将深度学习用于代码生成，是最开始进行相关研究的团队之一。该团队在 AAAI/IJCAI/ACL 等顶会上发表过很多代码生成的相关论文，这也是一大笔技术累积。</p><p>李戈教授是 aiXcoder 创始人，北京大学计算机科学技术系副教授，CCF 软件工程专委会秘书长，斯坦福大学计算机系人工智能实验室访问副教授。主要研究方向：程序分析，程序生成，深度学习。所在研究团队聚焦于基于机器学习概率模型的程序语言处理，在代码功能分析、代码自动补全、代码缺陷检测等方面取得并保持了国际上领先的研究成果。</p><table><thead><tr><th>机器之心原创 👇 <br> <strong>作者：思源、一鸣</strong><br></th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/NCwBMAkC3uAS9Zr7Olcp7w" target="_blank" rel="noopener"><img src="https://gitee.com/policx/im/raw/master/images/osSojv.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 从程序员到数据工程师，编写程序代码是一项基本功，但是编写冗长代码的过程也极大地消耗了开发者的耐心。近来，有不少关于代码补全工具的消息爆出，例如，来自美国的 Kite，来自加拿大的 TabNine 等，一时间获得了不少程序员的关注。但其实很多人还并不知道，在这些国外产品不断被媒体推送的背后，有一款能力更为强大、更早将深度学习应用于代码补全的产品，一款源自中国的工具——aiXcoder，它的研发者们来自于北京大学。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>HarmonyOS 鸿蒙</title>
    <link href="https://www.policx.com/news/HarmonyOS/"/>
    <id>https://www.policx.com/news/HarmonyOS/</id>
    <published>2019-08-10T15:28:21.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p> <strong>鸿蒙</strong>，中国神话传说的远古时代，传说在盘古昆仑山开天辟地之前，世界是一团混沌的元气，这种自然的元气叫做鸿蒙，因此把那个时代称作鸿蒙时代，后来此一词也常被用来泛指称远古时代。</p><a id="more"></a><h4 id="华为开发者大会于8月9日-8月11日举行，华为消费者业务-CEO、华为技术有限公司常务董事余承东以《全场景时代新体验与新生态》为题发表演讲，正式宣布自有操作系统：鸿蒙。据余承东介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。"><a href="#华为开发者大会于8月9日-8月11日举行，华为消费者业务-CEO、华为技术有限公司常务董事余承东以《全场景时代新体验与新生态》为题发表演讲，正式宣布自有操作系统：鸿蒙。据余承东介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。" class="headerlink" title="华为开发者大会于8月9日-8月11日举行，华为消费者业务 CEO、华为技术有限公司常务董事余承东以《全场景时代新体验与新生态》为题发表演讲，正式宣布自有操作系统：鸿蒙。据余承东介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。"></a>华为开发者大会于8月9日-8月11日举行，华为消费者业务 CEO、华为技术有限公司常务董事余承东以《全场景时代新体验与新生态》为题发表演讲，正式宣布自有操作系统：鸿蒙。据余承东介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。</h4><p><a href="https://static.cnbetacdn.com/article/2019/0809/cb92bd466924d81.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/cb92bd466924d81.jpg" alt></a></p><h5 id="根据余承东的说法，安卓有超过1亿行代码，内核就超过2000万行，但一般用户用到的代码不到8-，整体比较冗余，在IoT时代这既没必要也不需要。"><a href="#根据余承东的说法，安卓有超过1亿行代码，内核就超过2000万行，但一般用户用到的代码不到8-，整体比较冗余，在IoT时代这既没必要也不需要。" class="headerlink" title="根据余承东的说法，安卓有超过1亿行代码，内核就超过2000万行，但一般用户用到的代码不到8%，整体比较冗余，在IoT时代这既没必要也不需要。"></a>根据余承东的说法，安卓有超过1亿行代码，内核就超过2000万行，但一般用户用到的代码不到8%，整体比较冗余，在IoT时代这既没必要也不需要。</h5><h5 id="由此他提出了”微内核”的概念，也是鸿蒙OS的特点之一。区别于”宏内核”，微内核采用同一套操作平台，针对不同硬件能力的产品进行部署，并采用分布式架构，提升效率。"><a href="#由此他提出了”微内核”的概念，也是鸿蒙OS的特点之一。区别于”宏内核”，微内核采用同一套操作平台，针对不同硬件能力的产品进行部署，并采用分布式架构，提升效率。" class="headerlink" title="由此他提出了”微内核”的概念，也是鸿蒙OS的特点之一。区别于”宏内核”，微内核采用同一套操作平台，针对不同硬件能力的产品进行部署，并采用分布式架构，提升效率。"></a>由此他提出了”微内核”的概念，也是鸿蒙OS的特点之一。区别于”宏内核”，微内核采用同一套操作平台，针对不同硬件能力的产品进行部署，并采用分布式架构，提升效率。</h5><p><img src="https://static.cnbetacdn.com/article/2019/0809/3195a18e81ef714.png" alt></p><h5 id="也就是说，手机和车载设备的用途不同，灌入同样系统无必要，但它们可以采用同样的内核，部署不同的界面或功能。"><a href="#也就是说，手机和车载设备的用途不同，灌入同样系统无必要，但它们可以采用同样的内核，部署不同的界面或功能。" class="headerlink" title="也就是说，手机和车载设备的用途不同，灌入同样系统无必要，但它们可以采用同样的内核，部署不同的界面或功能。"></a>也就是说，<a href="https://c.duomai.com/track.php?site_id=242986&euid=&t=https://shouji.jd.com/" target="_blank" rel="noopener">手机</a>和车载设备的用途不同，灌入同样系统无必要，但它们可以采用同样的内核，部署不同的界面或功能。</h5><h5 id="余承东表示，希望未来的操作系统，都使用微内核。据介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。"><a href="#余承东表示，希望未来的操作系统，都使用微内核。据介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。" class="headerlink" title="余承东表示，希望未来的操作系统，都使用微内核。据介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。"></a>余承东表示，希望未来的操作系统，都使用微内核。据介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/cc82956876a1115.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/cc82956876a1115.jpg" alt></a></p><p><strong>余承东介绍了鸿蒙OS的四大技术特性。</strong></p><p><strong>首先，分布式架构首次用于终端OS，实现跨终端无缝协同体验。</strong></p><h5 id="鸿蒙OS的”分布式OS架构”和”分布式软总线技术”通过公共通信平台，分布式数据管理，分布式能力调度和虚拟外设四大能力，将相应分布式应用的底层技术实现难度对应用开发者屏蔽，使开发者能够聚焦自身业务逻辑，像开发同一终端一样开发跨终端分布式应用，也使最终消费者享受到强大的跨终端业务协同能力为各使用场景带来的无缝体验。"><a href="#鸿蒙OS的”分布式OS架构”和”分布式软总线技术”通过公共通信平台，分布式数据管理，分布式能力调度和虚拟外设四大能力，将相应分布式应用的底层技术实现难度对应用开发者屏蔽，使开发者能够聚焦自身业务逻辑，像开发同一终端一样开发跨终端分布式应用，也使最终消费者享受到强大的跨终端业务协同能力为各使用场景带来的无缝体验。" class="headerlink" title="鸿蒙OS的”分布式OS架构”和”分布式软总线技术”通过公共通信平台，分布式数据管理，分布式能力调度和虚拟外设四大能力，将相应分布式应用的底层技术实现难度对应用开发者屏蔽，使开发者能够聚焦自身业务逻辑，像开发同一终端一样开发跨终端分布式应用，也使最终消费者享受到强大的跨终端业务协同能力为各使用场景带来的无缝体验。"></a>鸿蒙OS的”分布式OS架构”和”分布式软总线技术”通过公共通信平台，分布式数据管理，分布式能力调度和虚拟外设四大能力，将相应分布式应用的底层技术实现难度对应用开发者屏蔽，使开发者能够聚焦自身业务逻辑，像开发同一终端一样开发跨终端分布式应用，也使最终消费者享受到强大的跨终端业务协同能力为各使用场景带来的无缝体验。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/0da3b9acacd6566.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/0da3b9acacd6566.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/2ca308ed3de5059.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/2ca308ed3de5059.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/4987e4d24c572f6.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/4987e4d24c572f6.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/bb2b308fb2c4863.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/bb2b308fb2c4863.jpg" alt></a></p><p><strong>第二， 确定时延引擎和高性能IPC技术实现系统流畅。</strong></p><h5 id="鸿蒙OS通过使用确定时延引擎和高性能IPC两大技术解决现有系统性能不足的问题。确定时延引擎可在任务执行前分配系统中任务执行优先级及时限进行调度处理，优先级高的任务资源将优先保障调度，应用响应时延降低25-7-。鸿蒙微内核结构小巧的特性使IPC（进程间通信）性能大大提高，进程通信效率较现有系统提升5倍。"><a href="#鸿蒙OS通过使用确定时延引擎和高性能IPC两大技术解决现有系统性能不足的问题。确定时延引擎可在任务执行前分配系统中任务执行优先级及时限进行调度处理，优先级高的任务资源将优先保障调度，应用响应时延降低25-7-。鸿蒙微内核结构小巧的特性使IPC（进程间通信）性能大大提高，进程通信效率较现有系统提升5倍。" class="headerlink" title="鸿蒙OS通过使用确定时延引擎和高性能IPC两大技术解决现有系统性能不足的问题。确定时延引擎可在任务执行前分配系统中任务执行优先级及时限进行调度处理，优先级高的任务资源将优先保障调度，应用响应时延降低25.7%。鸿蒙微内核结构小巧的特性使IPC（进程间通信）性能大大提高，进程通信效率较现有系统提升5倍。"></a>鸿蒙OS通过使用确定时延引擎和高性能IPC两大技术解决现有系统性能不足的问题。确定时延引擎可在任务执行前分配系统中任务执行优先级及时限进行调度处理，优先级高的任务资源将优先保障调度，应用响应时延降低25.7%。鸿蒙微内核结构小巧的特性使IPC（进程间通信）性能大大提高，进程通信效率较现有系统提升5倍。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/e0b747fb52cb77d.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/e0b747fb52cb77d.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/8207bd44e2eb60b.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/8207bd44e2eb60b.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/9a8f4828c279726.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/9a8f4828c279726.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/cdad2d91becd4e3.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/cdad2d91becd4e3.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/8c0a561069fb0c4.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/8c0a561069fb0c4.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/7d7e3e9c5c6ca43.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/7d7e3e9c5c6ca43.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/fa8032646a56bd3.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/fa8032646a56bd3.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/5f7aa22198a6ce2.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/5f7aa22198a6ce2.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/72f9cea20b6e7b8.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/72f9cea20b6e7b8.jpg" alt></a></p><p><strong>第三，基于微内核架构重塑终端设备可信安全。</strong></p><h5 id="鸿蒙OS采用全新的微内核设计，拥有更强的安全特性和低时延等特点。微内核设计的基本思想是简化内核功能，在内核之外的用户态尽可能多地实现系统服务，同时加入相互之间的安全保护。微内核只提供最基础的服务，比如多进程调度和多进程通信等。"><a href="#鸿蒙OS采用全新的微内核设计，拥有更强的安全特性和低时延等特点。微内核设计的基本思想是简化内核功能，在内核之外的用户态尽可能多地实现系统服务，同时加入相互之间的安全保护。微内核只提供最基础的服务，比如多进程调度和多进程通信等。" class="headerlink" title="鸿蒙OS采用全新的微内核设计，拥有更强的安全特性和低时延等特点。微内核设计的基本思想是简化内核功能，在内核之外的用户态尽可能多地实现系统服务，同时加入相互之间的安全保护。微内核只提供最基础的服务，比如多进程调度和多进程通信等。"></a>鸿蒙OS采用全新的微内核设计，拥有更强的安全特性和低时延等特点。微内核设计的基本思想是简化内核功能，在内核之外的用户态尽可能多地实现系统服务，同时加入相互之间的安全保护。微内核只提供最基础的服务，比如多进程调度和多进程通信等。</h5><h5 id="另外，鸿蒙OS将微内核技术应用于可信执行环境（TEE），通过形式化方法，重塑可信安全。"><a href="#另外，鸿蒙OS将微内核技术应用于可信执行环境（TEE），通过形式化方法，重塑可信安全。" class="headerlink" title="另外，鸿蒙OS将微内核技术应用于可信执行环境（TEE），通过形式化方法，重塑可信安全。"></a>另外，鸿蒙OS将微内核技术应用于可信执行环境（TEE），通过形式化方法，重塑可信安全。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/5f367f2b16631d9.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/5f367f2b16631d9.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/02e885fbf4b0f3c.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/02e885fbf4b0f3c.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/037bb5fc6cf3389.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/037bb5fc6cf3389.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/aa0a3edfb8b5a47.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/aa0a3edfb8b5a47.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/2c7ce2b7bea4e02.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/2c7ce2b7bea4e02.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/0c452598463f956.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/0c452598463f956.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/10e961b6228d627.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/10e961b6228d627.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/39602f71577fc48.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/39602f71577fc48.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/042bce1a1b0ca03.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/042bce1a1b0ca03.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/f97e2fbbe1787c5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/f97e2fbbe1787c5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/7887c4d8d1fe8c5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/7887c4d8d1fe8c5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/02e885fbf4b0f3c.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/02e885fbf4b0f3c.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/037bb5fc6cf3389.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/037bb5fc6cf3389.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/aa0a3edfb8b5a47.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/aa0a3edfb8b5a47.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/2c7ce2b7bea4e02.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/2c7ce2b7bea4e02.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/0c452598463f956.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/0c452598463f956.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/10e961b6228d627.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/10e961b6228d627.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/39602f71577fc48.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/39602f71577fc48.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/042bce1a1b0ca03.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/042bce1a1b0ca03.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/f97e2fbbe1787c5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/f97e2fbbe1787c5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/7887c4d8d1fe8c5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/7887c4d8d1fe8c5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/9cc5cc84c9d6090.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/9cc5cc84c9d6090.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/ff6d7bcc4ef22b4.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/ff6d7bcc4ef22b4.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/a481130adebdfed.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/a481130adebdfed.jpg" alt></a></p><p><strong>第四，通过统一IDE支撑一次开发，多端部署，实现跨终端生态共享。</strong></p><h5 id="鸿蒙OS凭借多终端开发IDE，多语言统一编译，分布式架构Kit提供屏幕布局控件以及交互的自动适配，支持控件拖拽，面向预览的可视化编程，从而使开发者可以基于同一工程高效构建多端自动运行App，实现真正的一次开发，多端部署，在跨设备之间实现共享生态。"><a href="#鸿蒙OS凭借多终端开发IDE，多语言统一编译，分布式架构Kit提供屏幕布局控件以及交互的自动适配，支持控件拖拽，面向预览的可视化编程，从而使开发者可以基于同一工程高效构建多端自动运行App，实现真正的一次开发，多端部署，在跨设备之间实现共享生态。" class="headerlink" title="鸿蒙OS凭借多终端开发IDE，多语言统一编译，分布式架构Kit提供屏幕布局控件以及交互的自动适配，支持控件拖拽，面向预览的可视化编程，从而使开发者可以基于同一工程高效构建多端自动运行App，实现真正的一次开发，多端部署，在跨设备之间实现共享生态。"></a>鸿蒙OS凭借多终端开发IDE，多语言统一编译，分布式架构Kit提供屏幕布局控件以及交互的自动适配，支持控件拖拽，面向预览的可视化编程，从而使开发者可以基于同一工程高效构建多端自动运行App，实现真正的一次开发，多端部署，在跨设备之间实现共享生态。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/e6c0d84b5fd05d5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/e6c0d84b5fd05d5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/8f86d51780a690f.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/8f86d51780a690f.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/314f0188c7b1f16.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/314f0188c7b1f16.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/592701bf2e13602.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/592701bf2e13602.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/99afde8e0be800f.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/99afde8e0be800f.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/bbca58d91073c75.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/bbca58d91073c75.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/f364929dc284706.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/f364929dc284706.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/12dc73398ee3945.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/12dc73398ee3945.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/32a9393836a2e79.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/32a9393836a2e79.jpg" alt></a></p><h5 id="据介绍，华为将在今年首发的智慧屏产品中率先使用鸿蒙-OS-1-0。未来三年，除完善相关技术外，鸿蒙OS会逐步应用在可穿戴、智慧屏、车机等更多智能设备中。"><a href="#据介绍，华为将在今年首发的智慧屏产品中率先使用鸿蒙-OS-1-0。未来三年，除完善相关技术外，鸿蒙OS会逐步应用在可穿戴、智慧屏、车机等更多智能设备中。" class="headerlink" title="据介绍，华为将在今年首发的智慧屏产品中率先使用鸿蒙 OS 1.0。未来三年，除完善相关技术外，鸿蒙OS会逐步应用在可穿戴、智慧屏、车机等更多智能设备中。"></a>据介绍，<a href="https://c.duomai.com/track.php?k=WP0ZSPklWdlZyN4MTPklWYmYDO5IDNy0DZp9VZ0l2cmYiRyUSbvNmLsxWYtZnL3d3dGJTJGJTJBNTJzBHd0h" target="_blank" rel="noopener">华为</a>将在今年首发的智慧屏产品中率先使用鸿蒙 OS 1.0。未来三年，除完善相关技术外，鸿蒙OS会逐步应用在可穿戴、智慧屏、车机等更多智能设备中。</h5><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.cnbeta.com/articles/tech/876919.htm" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/policx/talk/gh-pages/images/LmADop.jpg" alt="policx"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;鸿蒙&lt;/strong&gt;，中国神话传说的远古时代，传说在盘古昆仑山开天辟地之前，世界是一团混沌的元气，这种自然的元气叫做鸿蒙，因此把那个时代称作鸿蒙时代，后来此一词也常被用来泛指称远古时代。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>Dice 称这 5 种编程语言可能衰落</title>
    <link href="https://www.policx.com/news/DiceInsightsA/"/>
    <id>https://www.policx.com/news/DiceInsightsA/</id>
    <published>2019-08-10T08:14:18.000Z</published>
    <updated>2019-08-16T09:00:26.297Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Dice Insights 是为北美的科技专业人士提供见解和分析的网站，目的是帮助他们找到工作和发展事业，并且报道就业趋势、新技术等内容。</p><p>根据 <a href="https://insights.dice.com/2019/07/29/5-programming-languages-probably-doomed/" target="_blank" rel="noopener">Dice</a> 报道，并不是所有的编程语言都永远存在，因为新一代的开发人员会接受他们觉得更容易使用的其他语言和框架。为了确定哪种编程语言可能在中长期内注定失败，他们查看了 TIOBE 和 RedMonk 的受欢迎程度排名，以及 Dice 自己的职务公告数据库。列出以下语言：</p><a id="more"></a><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a><strong>Ruby</strong></h3><p><img src="https://images.pexels.com/photos/1121123/pexels-photo-1121123.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260" alt="Ruby"><br>很久以前，Ruby 很受欢迎。这是 Tiobe 月刊上的前十名语言，开发人员称赞它学习起来有多么容易。但是在过去的 18 个月里，Tiobe 的排名从第 9 位下降到了第 12 位。</p><p>另外发现，对 Dice 过去一年发布的招聘数据的分析显示，寻找精通 Ruby 的技术专业人员的公司数量大幅下降。2018 年，Ruby 的就业数量下降了 56%。这是一个巨大的警告信号，表明很多公司正在放弃 Ruby，如果是这样的话，该语言的用户基础可能会迅速减少到几乎一无所有。</p><h3 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a><strong>Haskell</strong></h3><p><img src="https://gitee.com/policx/im/raw/master/images/OjslKj.png" alt="Haskell"><br>据说，Haskell 即将在 2020 年进行重大更新。有很多巨头公司和项目（Facebook、GitHub 等）曾经使用 Haskell 开发过一些重要项目。不过，Haskell 在 RedMonk 语言排行榜上的表现一直很平淡，这表明没有更多的开发者在关注这门语言。这意味着它正在死亡还是完全死了？</p><h3 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a><strong>Objective-C</strong></h3><p><img src="https://img.ithome.com/newsuploadfiles/2019/8/20190808_084451_983.png" alt="Object-C"><br>苹果的 Object-C 已是 35 岁，很明显，苹果公司想让它自生自灭了。五年前，苹果公司的高管们登上舞台，为其软件生态系统推出 Swift，这是一种新的、经过改进的编程语言。毫无疑问，开发者会很快接受 Swift。</p><p>公平地说，更多的开发人员已经开始使用 Swift (特别是在功能变得更加丰富的情况下)，但是 Object-C 并没有像一些人所期望的那样在流行语言排名中崩溃，可能只是许多开发人员更喜欢使用他们一直使用的语言。</p><p>不过，到某一时刻，Object-C 很可能会完全消失。Swift 正在成为一种非常有效的语言，用于构建 iOS、MacOS 和不久的跨平台应用程序。</p><h3 id="R"><a href="#R" class="headerlink" title="R"></a><strong>R</strong></h3><p><img src="https://atts.w3cschool.cn/attachments/cover/cover_r.png?t=1542021188&imageView2/1/w/150/h/84" alt><br>早在当时，R 是一种越来越流行的数据分析语言。然而，Python 似乎正在迅速吞噬 R 的市场份额。尽管 R 仍然被学者和数据科学家所使用，但对数据分析感兴趣的公司正转向 Python，因为它的可伸缩性和易用性。因此，R 降低了 TIOBE 的编程语言流行指数，而其他研究显示，R 的使用率下降缓慢，有利于 Python。</p><p>如果 R 要以任何形式存在，那是因为数据分析人员可能最终会将其与 Python 结合使用。首席技术官 Enriko Aryanto 今年早些时候对 Dice 表示（他是加州红木城(Redwood City)的联合创始人之一，总部位于加州的匡蒂明德是一家智能营销数据平台）：</p><blockquote><p>把 R 和 Python 结合起来既合理又可行，我们在内部数据科学平台上运行它们，但如果我今天要重新开始我的职业生涯，我可能会考虑专注于 Python 而不是 R。它是一种更通用的语言，有更广泛的应用程序。</p></blockquote><h3 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a><strong>Perl</strong></h3><p><img src="https://www.runoob.com/wp-content/uploads/2016/06/0020_999_1373967199_perl_256.png" alt><br>即使 RedMonk 的 Perl 受欢迎程度下降，考虑到仍然有大量的遗留网站使用它的代码，该语言还需要很长一段时间才能完全变平。尽管如此，开发人员普遍支持其他语言，比如构建网站，这意味着 Perl 将陷入越来越多的废弃状态。</p><p>在本文的早期版本中，我们说过 Perl 几乎没有活跃的开发。正如一些有帮助的评论者指出的那样，事实并非如此：它每年更新一次。然而，鉴于它在 RedMonk 和 TIOBE 上的衰落，他们仍然认为这是一种衰落的语言。</p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.oschina.net/news/108665/5-programming-languages-probably-doomed" target="_blank" rel="noopener"><img src="https://static.oschina.net/new-osc/img/logo_osc_new.svg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dice Insights 是为北美的科技专业人士提供见解和分析的网站，目的是帮助他们找到工作和发展事业，并且报道就业趋势、新技术等内容。&lt;/p&gt;
&lt;p&gt;根据 &lt;a href=&quot;https://insights.dice.com/2019/07/29/5-programming-languages-probably-doomed/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dice&lt;/a&gt; 报道，并不是所有的编程语言都永远存在，因为新一代的开发人员会接受他们觉得更容易使用的其他语言和框架。为了确定哪种编程语言可能在中长期内注定失败，他们查看了 TIOBE 和 RedMonk 的受欢迎程度排名，以及 Dice 自己的职务公告数据库。列出以下语言：&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="program" scheme="https://www.policx.com/tags/program/"/>
    
  </entry>
  
  <entry>
    <title>appleCard</title>
    <link href="https://www.policx.com/news/appleCard/"/>
    <id>https://www.policx.com/news/appleCard/</id>
    <published>2019-08-05T09:42:00.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>免年费的钛金卡，办一张来收藏也不错。</p><a id="more"></a><p><img src="https://i.loli.net/2019/08/05/bf9BtCq2kErvRGY.jpg" alt="appleCard"><br><img src="https://gitee.com/policx/im/raw/master/images/btDbRs.jpg" alt="appleCard"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;免年费的钛金卡，办一张来收藏也不错。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>善用佳软 uPic</title>
    <link href="https://www.policx.com/Software/uPic/"/>
    <id>https://www.policx.com/Software/uPic/</id>
    <published>2019-07-27T04:11:04.000Z</published>
    <updated>2019-08-15T01:17:12.453Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>对于markdown重度用户而言，一款好用的图床工具能够有效提升效率。从Windows到Mac，笔者也算是辗转用过多款图床客户端，包括iPic、PicGo等等。而自从更换新的工作环境之后，笔者对于图床客户端又有了新的需求——自定义图床。</p><a id="more"></a><p>幸好，一次机缘巧合让笔者遇到了uPic，除了支持微博、SM.MS、七牛云、腾讯云等图床之外，还可以自定义配置图床。 </p><blockquote><p>uPic下载地址：<a href="https://github.com/gee1k/uPic/releases" target="_blank" rel="noopener">https://github.com/gee1k/uPic/releases</a> </p></blockquote><p>笔者目前工作所用的编辑器，既不支持外链，也不支持图片粘贴后自动上传，一旦涉及多图文章，光上传图片就浪费不少时间。因此，笔者萌生了构建自定义图床的想法，更幸运的是，笔者公司对于图片上传服务并没有做太多的限制，也让这种想法成为可能。 </p><p>uPic是一款开源简洁的图床客户端，方便用户直接上传图片到指定的存储空间，并获取有效的markdown图片地址，其默认图床为SM.MS，当然也支持配置腾讯云、七牛云、又拍云等常见的对象存储。最关键的是支持图床自定义配置，也让我毅然抛弃了一直以来付费使用的iPic。<br><img src="https://i.loli.net/2019/07/27/5d3bd2c197d8592897.jpg" alt></p><p>其实起初并不顺利，刚上手的uPic（大概是v0.7.0版本），自定义图床配置并不适用于笔者常用的编辑器环境。好在软件开发者@svend足够热心，在了解了笔者的需求及编辑环境之后，重构了自定义图床，使得笔者的想法得以实现，包括大家在反馈群里提出的一些建议，也都及时采纳并更新。 </p><p>直到最新发布的v0.8.0版本，uPic已经成为一款非常成熟且强大的图床客户端，且安装包大小也不过才10.5M。 </p><p>好了，啰嗦了这么多，也该进入正题了。 </p><p>uPic目前仅支持Mac端，默认上传到SM.MS匿名图床，除此之外还支持微博、码云、Github以及腾讯云、阿里云、又拍云、七牛云总共八个图床。其中，由于微博近期已经陆续开启防盗链，笔者不建议在个人博客中使用。<br><img src="https://i.loli.net/2019/07/27/5d3bd288ac38618894.jpg" alt><br>在上传方式上，uPic支持本地选择/复制文件上传、截图上传，甚至可直接拖动文件到菜单栏uPic图标上完成上传动作。<br><img src="https://i.loli.net/2019/07/27/5d3bd3727bf6963617.gif" alt="640"></p><p>在最新更新v0.8.0版本之后，uPic新增支持直接从浏览器中复制或者拖动在线图片上传到指定图床，这样就不用下载到本地再进行上传。<br><img src="https://gitee.com/policx/im/raw/master/images/GoRrBa.gif" alt></p><p>不过需要注意的是，GIF动图不大一样，直接从浏览器中复制或者拖动GIF上传至uPic图床，可能最终上传的只是GIF图中一帧的画面，所以对于GIF最好还是先下载到本地，然后使用uPic上传到图床。 </p><p>在“设置——拓展——访达拓展”中勾选uPic一项，即可开启本地文件右键菜单中“使用uPic上传”的功能，也算是比较方便的一种本地文件上传方式。<br><img src="https://i.loli.net/2019/07/27/5d3bdbd03d58f62506.jpg" alt><br><img src="https://gitee.com/policx/im/raw/master/images/mOO863.jpg" alt></p><p>一旦完成上传动作，所输出的文件链接会自动复制到剪切板，直接在文档中粘贴即可，在输出链接格式上可根据需求选择URL、HTML、Markdown三种。<br><img src="https://gitee.com/policx/im/raw/master/images/Y0lYcO.jpg" alt></p><p>点击菜单栏uPic图标，还可以查看最近十条上传记录，同时可以预览上传内容缩略图，以便选择重新复制。<br><img src="https://gitee.com/policx/im/raw/master/images/Ze9ScG.jpg" alt><br>熟练使用快捷键操作，可以进一步提升使用效率。uPic支持三种上传方式的自定义快捷键。基本不用点击菜单了去选择，即可完成上传动作。<br><img src="https://gitee.com/policx/im/raw/master/images/MqUOQy.jpg" alt><br>例如，通过设定好的快捷键完成截图上传操作，按住鼠标框选所需区域，松开鼠标之后即完成截图并直接上传到图床（注意没有确认截图的过程哦～）。<br><img src="https://gitee.com/policx/im/raw/master/images/k0GikB.gif" alt><br>使用这段时间，笔者感觉uPic已经足够成为一款高效、简洁的图床客户端，支持强大的自定义图床配置，支持复制/拖动上传以及快捷键操作。不过在部分体验上iPic依然值得uPic借鉴，例如复制图片后点击菜单栏的iPic，能够比较直观地看到已复制图片及近期上传图片的预览，体验更加直观。<br><img src="https://gitee.com/policx/im/raw/master/images/dLyZLX.jpg" alt="a"><br>不得不提的是，开发者@svend虽然只利用业余时间更新维护，同样保持了较高的更新频率，发现bug或者其他不稳定的因素更是会连夜修复，并且会及时反馈用户的意见。作为一款免费的Mac图床客户端，uPic已经赢得了越来越多的用户亲睐。 </p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/WcchsHp007SswWr2qHGxTQ" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/27/5d3bcf474c70088570.jpg" alt="wechat"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于markdown重度用户而言，一款好用的图床工具能够有效提升效率。从Windows到Mac，笔者也算是辗转用过多款图床客户端，包括iPic、PicGo等等。而自从更换新的工作环境之后，笔者对于图床客户端又有了新的需求——自定义图床。&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>「拖放」Mac 的底层能力，也是效率神技</title>
    <link href="https://www.policx.com/Software/DragAndDrop/"/>
    <id>https://www.policx.com/Software/DragAndDrop/</id>
    <published>2019-07-26T14:19:21.000Z</published>
    <updated>2019-08-15T01:18:15.665Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>个人惯用 Mac 拖放，但每每身边同事看我的操作习惯，都大惊失色，感叹 Mac 还有这种操作，所以决定单独讲一篇 Mac 拖放。</p><a id="more"></a><p>Mac的拖放几乎是全局的，比如你可以将图片文件从应用拖到 Finder，同样可以将文件从 Finder 拖至应用内，甚至从应用A拖拽至应用B。</p><p>总之，基于 Finder 的文件拖拽，让系统和应用、应用和应用协同起来，大大提速。以下是一些示例。</p><blockquote><p>应用-&gt;Finder</p></blockquote><p>1.微信-&gt;Finder<br><img src="https://i.loli.net/2019/07/27/5d3c5f3ea1d9e89990.gif" alt></p><p>2.浏览器-&gt;Finder<br><img src="https://gitee.com/policx/im/raw/master/images/Xfj58J.gif" alt></p><p>出于版权安全的考虑，以及前端技术的极速革新，部分网站已不再支持将图片拖拽至 Finder，但多数网站仍然支持。</p><p>3.PDF-&gt;Finder<br><img src="https://gitee.com/policx/im/raw/master/images/wEnYQa.gif" alt="pic"></p><p>如果你只需要 PDF 20P中的1P，可以单独拖拽至Finder。</p><blockquote><p>Finder-&gt;应用</p></blockquote><p>1.Finder-&gt;微信<br><img src="https://gitee.com/policx/im/raw/master/images/H2aKxW.gif" alt="pic"></p><p>2.Finder-&gt;办公套件<br><img src="https://gitee.com/policx/im/raw/master/images/Pc9jOK.gif" alt="pic"></p><p>3.Finder-&gt;PDF<br><img src="https://gitee.com/policx/im/raw/master/images/Hi56sE.gif" alt="pic"></p><blockquote><p>应用-&gt;应用</p></blockquote><p>1.浏览器-&gt;微信<br><img src="https://gitee.com/policx/im/raw/master/images/6whkO3.gif" alt="pic"></p><p>2.微信-&gt;办公套件<br><img src="https://gitee.com/policx/im/raw/master/images/37ryoD.gif" alt="pic"></p><p>除了以上”应用-&gt;Finder，Finder-&gt;应用，应用-&gt;应用”几种拖放，Mac 还有其他很多地方支持此操作，比如文件拖拽至垃圾桶、应用拖拽至Docker、文件拖拽至 Docker 上应用图标即可打开……  </p><p>使用拖拽，还是复制粘贴，或是通过各个应用的菜单完成操作，都没什么问题，如果你知道了 MacOS 的一项新能力，不妨试试。</p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/DPhrXF5qfPEMrEGimslh1w" target="_blank" rel="noopener"><img src="https://gitee.com/policx/im/raw/master/images/Z2gkII.png" alt="pic"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人惯用 Mac 拖放，但每每身边同事看我的操作习惯，都大惊失色，感叹 Mac 还有这种操作，所以决定单独讲一篇 Mac 拖放。&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>Python导图</title>
    <link href="https://www.policx.com/program/Python/mind/"/>
    <id>https://www.policx.com/program/Python/mind/</id>
    <published>2019-07-21T06:03:24.000Z</published>
    <updated>2019-08-15T01:53:53.033Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>推荐：<strong>XMind</strong> 一个全功能的思维导图和头脑风暴软件。</p></blockquote><a id="more"></a><h2 id="Python-系列-一-核心知识"><a href="#Python-系列-一-核心知识" class="headerlink" title="Python 系列 (一)  核心知识"></a>Python 系列 (一)  核心知识</h2><p><img src="/mindImage/0%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80.png" alt><br><img src="/mindImage/2Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80.png" alt><br><img src="/mindImage/3%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%B8%80)%E6%95%B0%E5%80%BC%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88.png" alt><br><img src="/mindImage/4%E6%A0%87%E5%87%86%E7%B1%BB%E5%9E%8B%E8%A1%A5%E5%85%85.png" alt><br><img src="/mindImage/5%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%BA%8C)%E5%BA%8F%E5%88%97%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/6%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%B8%89)%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt><br><img src="/mindImage/7%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/8%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/9%E5%87%BD%E6%95%B0%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/10%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E5%87%BD%E6%95%B0.png" alt><br><img src="/mindImage/11%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/12%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/13%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/14%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/15%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/16%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt><br><img src="/mindImage/17%E6%B5%8B%E8%AF%95%E8%B0%83%E8%AF%95.png" alt></p><h2 id="Python系列-一-基础编程"><a href="#Python系列-一-基础编程" class="headerlink" title="Python系列 (一) 基础编程"></a>Python系列 (一) 基础编程</h2><p><img src="/mindImage/1Python%E7%B3%BB%E5%88%97(%E4%B8%80)%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861.png" alt><br><img src="/mindImage/3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862.png" alt><br><img src="/mindImage/4%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt><br><img src="/mindImage/5%E5%BA%8F%E5%88%97.png" alt><br><img src="/mindImage/6%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt><br><img src="/mindImage/7%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84.png" alt><br><img src="/mindImage/8%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88.png" alt><br><img src="/mindImage/9%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/10%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/11%E9%94%99%E8%AF%AF%EF%BC%86%E5%BC%82%E5%B8%B8.png" alt><br><img src="/mindImage/12%E5%87%BD%E6%95%B0%E4%B8%80.png" alt><br><img src="/mindImage/13%E5%87%BD%E6%95%B0%E4%BA%8C.png" alt><br><img src="/mindImage/14%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/15%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt></p><h2 id="Python系列-二-常用标准库及拓展知识"><a href="#Python系列-二-常用标准库及拓展知识" class="headerlink" title="Python系列(二)常用标准库及拓展知识"></a>Python系列(二)常用标准库及拓展知识</h2><p><img src="/mindImage/0%E3%80%90%E7%9B%AE%E5%BD%95%E3%80%91Python%E7%B3%BB%E5%88%97(%E4%BA%8C)%E5%B8%B8%E7%94%A8%E6%A0%87%E5%87%86%E5%BA%93%E5%8F%8A%E6%8B%93%E5%B1%95%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/1%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%BF%B0.png" alt><br><img src="/mindImage/2%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt><br><img src="/mindImage/3%E6%97%A5%E6%9C%9F&%E6%97%B6%E9%97%B4.png" alt><br><img src="/mindImage/4%E7%B3%BB%E7%BB%9F&%E6%96%87%E4%BB%B6.png" alt><br><img src="/mindImage/5%E8%BF%9B%E7%A8%8B&%E7%BA%BF%E7%A8%8B.png" alt><br><img src="/mindImage/6%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt><br><img src="/mindImage/7%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97&%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt></p><h2 id="Python应用领域和数据结构"><a href="#Python应用领域和数据结构" class="headerlink" title="Python应用领域和数据结构"></a>Python应用领域和数据结构</h2><p><a href="https://www.jianshu.com/p/66f6d9a434f9" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/21/5d3400422503e26621.jpg" alt="Python数据结构"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;推荐：&lt;strong&gt;XMind&lt;/strong&gt; 一个全功能的思维导图和头脑风暴软件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《Python札记》1_列表list</title>
    <link href="https://www.policx.com/program/Python/python3-notes01/"/>
    <id>https://www.policx.com/program/Python/python3-notes01/</id>
    <published>2019-07-18T14:55:41.000Z</published>
    <updated>2019-08-15T01:53:53.034Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="写于开始之前"><a href="#写于开始之前" class="headerlink" title="写于开始之前"></a>写于开始之前</h3><p>笔者即将开始写一个系列的《<code>Python</code>札记》。本系列的札记主要是自学<code>齐伟</code>老师《跟老齐学<code>Python</code>轻松入门》一书整理而来。书第一遍断断续续花了5个月，第二遍边看边整理，保守3个月。</p><a id="more"></a><p><strong>在此深深感谢齐伟老师带我入门<code>Python</code></strong>。<strong>工欲善其事，必先利其器</strong>，本札记的学习环境为：<code>Python3.7.2 + pycharm + jupyter notebook</code>： </p><ul><li><code>Python3</code>取代了<code>Python2</code>，成为主流</li><li>针对<code>Python</code>语言，<code>Pycharm</code>是最好的<code>IDE</code></li><li><code>Jupyter notebook</code>是利用<code>Python</code>进行机器学习的强大利器</li></ul><p><strong>本札记一定会在2个月之内完成</strong>，主要内容包含： </p><ul><li>学习笔记整理</li><li>代码实战练习</li><li>各种练习题</li><li>利用<code>Python</code>实现常用算法 <a href="https://www.jianshu.com/c/7287d92c5db4" target="_blank" rel="noopener">机器学习_Python算法</a></li></ul><p><strong>希望对<code>Python</code>感兴趣的朋友有所帮助，自己也在努力学习中，将来主要方向是：<code>机器学习+数据挖掘+量化投资</code></strong></p><h4 id="良好的开始是成功的一半！Let-s-go-go-go"><a href="#良好的开始是成功的一半！Let-s-go-go-go" class="headerlink" title="良好的开始是成功的一半！Let`s go go go!!!"></a>良好的开始是成功的一半！Let`s go go go!!!</h4><hr><blockquote><p>列表是<code>Python</code>中使用非常广泛的一种对象，用方括号<code>[ ]</code>来表示。括号里面可以是数字，字符串或者<code>True</code>，<code>False</code>的布尔值，或者是多种不同类型的对象，里面也可以嵌套列表。如果列表是空的，用<code>bool()</code>来进行判断，会返回 <code>False</code>。 </p></blockquote><hr><h3 id="一、索引、切片、反转"><a href="#一、索引、切片、反转" class="headerlink" title="一、索引、切片、反转"></a>一、索引、切片、反转</h3><p>列表和字符串一样，都是序列，里面的元素是有序的，也有索引和切片。索引<code>index</code>左边从<code>0</code>开始，右边从<code>-1</code>开始，<code>index()</code>函数可以查看某个元素的索引编号。 </p><p><strong>索引</strong></p><ul><li>左边0开始，右边-1开始</li><li>通过<code>index()</code>函数查看索引编号</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># lang = ['python', 'java', 'html']</span></span><br><span class="line"><span class="hljs-comment"># lang.index('python')</span></span><br><span class="line"><span class="hljs-number">0</span>  <span class="hljs-comment"># 索引从0开始</span></span><br><span class="line"><span class="hljs-comment"># lang.index('html')</span></span><br><span class="line"><span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><p><strong>切片</strong></p><ul><li>索引左边从0开始，右边-1开始</li><li>含头不含尾</li><li>步长可正可负</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">print(lst[:])     <span class="hljs-comment">#  相当于是复制 lst</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">print(lst[::<span class="hljs-number">2</span>])  <span class="hljs-comment">#  步长是2    [开始:结束:步长]</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(lst[<span class="hljs-number">-3</span>:<span class="hljs-number">-1</span>])</span><br><span class="line"></span><br><span class="line">lst = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]</span><br><span class="line">print(lst[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])     <span class="hljs-comment"># 常规用法</span></span><br><span class="line">print(lst[<span class="hljs-number">-5</span>:<span class="hljs-number">-2</span>:<span class="hljs-number">2</span>])   <span class="hljs-comment"># 标号-5代表的是元素2，标号-2代表的是5，步长为2</span></span><br><span class="line">print(lst[<span class="hljs-number">-5</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>])</span><br><span class="line">print(lst[<span class="hljs-number">1</span>:<span class="hljs-number">-2</span>:<span class="hljs-number">2</span>])</span><br><span class="line">[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]</span><br></pre></td></tr></table></figure><p><strong>反转</strong></p><ul><li>通过步长-1进行反转，[::-1]</li><li>通过<code>reversed()</code>进行反转，得到的是<strong>可迭代对象</strong>，并且将迭代对象转为为<code>列表显示</code></li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 反转1</span></span><br><span class="line">print(lst[::<span class="hljs-number">-1</span>])  <span class="hljs-comment"># 通过步长为-1进行反转</span></span><br><span class="line">print(lst)   <span class="hljs-comment"># 不影响原来对象</span></span><br><span class="line">[<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 反转2</span></span><br><span class="line">print(list(reversed(lst)))  <span class="hljs-comment"># 通过reversed函数进行反转</span></span><br><span class="line">[<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">print(list(reversed(<span class="hljs-string">'abcde'</span>)))    <span class="hljs-comment"># 对字符串进行反转，列表显示</span></span><br><span class="line">[<span class="hljs-string">'e'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'a'</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="二、操作列表"><a href="#二、操作列表" class="headerlink" title="二、操作列表"></a>二、操作列表</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>len()：求长度</li><li>+：连接两个序列</li><li>*：复制序列</li><li>in：判断元素是否在列表中</li><li>max()、min()：按照元素的字典顺序进行排序</li></ul><p><strong>1、修改元素</strong></p><blockquote><p><strong>列表</strong>中的元素可以进行<strong>修改</strong>，但是字符串中的不能进行修改。列表中修改的时候，直接通过索引号进行指定： </p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst[<span class="hljs-number">2</span>] = <span class="hljs-number">7</span>   <span class="hljs-comment"># 指定第三个元素为7</span></span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br></pre></td></tr></table></figure><p><strong>2、增加元素</strong><br>追加元素的方法有两种，都是追加在<strong>末尾</strong></p><ul><li>append()函数进行追加</li><li>切片的方式进行追加：a[len(a):] = [ x ]</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst.append(<span class="hljs-number">8</span>)  </span><br><span class="line">lst[len(lst):] = [<span class="hljs-number">8</span>]</span><br><span class="line">print(lst)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]   <span class="hljs-comment"># 例子承接上面，第三个元素为7，不是3</span></span><br></pre></td></tr></table></figure><p><strong>3、列表函数</strong></p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>append</td><td>将单个元素追加到列表的<strong>最右边</strong>，即末尾部分；<strong>list[len(list):] = [x]</strong>，x是待追加的元素；  <strong>没有返回值None</strong></td></tr><tr><td>extend</td><td>将<strong>两个列表进行合并</strong>，扩充列表的作用；  参数必须是<strong>可迭代对象</strong>；  <strong>list[len(list):] = L</strong>，L是待并入的列表；  完成追加过程，列表L不变，list发生变化；  <strong>没有返回值None</strong></td></tr><tr><td>insert</td><td>指定位置添加元素  格式：list.insert(i,x)，i是插入的位置，x是待追加元素 ；  i如果是0，相当于是插在首位；i如果是len(list)，相当于是插在最后面，则等价于append()函数</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># extend()函数</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</span><br><span class="line">print(id(lst))   <span class="hljs-comment"># 查看lst的内存地址</span></span><br><span class="line">lst1 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line">lst.extend(lst1)</span><br><span class="line">print(id(lst))   <span class="hljs-comment"># 查看追加列表之后的内存地址，与原来系相同的</span></span><br><span class="line">print(<span class="hljs-string">"lst:"</span>, lst)</span><br><span class="line">print(<span class="hljs-string">"lst1:"</span>, lst1)</span><br><span class="line"></span><br><span class="line"><span class="hljs-number">2435334264968</span></span><br><span class="line"><span class="hljs-number">2435334264968</span></span><br><span class="line">lst: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line">lst1: [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># append与extend区别</span></span><br><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst2 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]</span><br><span class="line">lst1.append(lst2)</span><br><span class="line">print(lst1)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]]   <span class="hljs-comment"># 整建制，将lst2当做一个整体</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst2 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]</span><br><span class="line">lst1.extend(lst2)</span><br><span class="line">print(lst1)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]   <span class="hljs-comment"># 个体化，将lst2的每个元素进行追加</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li>列表是可以进行<strong>修改</strong>的，原地修改</li><li>append是将一个元素加到列表的末尾，<strong>整建制追加</strong></li><li>extend将两个列表进行合并，<strong>个体化扩编</strong></li><li>extend方法执行之后，<strong>内存中id不变</strong>，只是在该id上的内容发生了变化</li><li>insert()函数中的i如果超过最大索引值，则自动追加到末尾，相当于是append()函数的作用</li><li>三种方法均是原地修改，无返回值</li></ul><hr><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>count</td><td>查看元素重复出现的次数  <strong>如果不存在，返回0</strong>，而不是报错</td></tr><tr><td>index</td><td>查看索引编号，不存在则报错  检索的是元素<strong>第一次</strong>出现的位置</td></tr><tr><td>remove</td><td>删除元素，原地修改，无返回值；  list.remove(x)：如果x不存在，则会报错；  如果x出现多次，<strong>删除第一个x，剩下不变</strong></td></tr><tr><td>pop</td><td>pop([i]):参数是可选的；  为空，<strong>默认删除最后一个</strong>，并且将该元素作为返回值；  如果不为空，<strong>可删除索引为i的元素</strong>，并且将该元素作为返回值</td></tr><tr><td>reverse</td><td>原地反转，没有生成新的列表，没有返回值</td></tr><tr><td>reversed</td><td>类似reverse，区别：生成的列表能够<strong>用于迭代</strong></td></tr></tbody></table><p><strong>remove和pop的区别</strong></p><ul><li>remove 没有返回值，pop有返回值</li><li>remove的参数是元素，pop的参数是索引</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">lst1.remove(<span class="hljs-number">2</span>)</span><br><span class="line">print(lst1)</span><br><span class="line"><span class="hljs-comment"># lst1.remove(7)</span></span><br><span class="line"><span class="hljs-comment"># print(lst1)   ValueError: list.remove(x): x not in list</span></span><br><span class="line">lst1.pop(<span class="hljs-number">2</span>)</span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]   <span class="hljs-comment"># 将元素2删除掉</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]      <span class="hljs-comment">#  将索引为2的元素3删除掉，本步骤是接在上面的执行，即在列表[1, 3, 4, 5, 6] 中删除4</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关于反转</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(lst[::<span class="hljs-number">-1</span>])   <span class="hljs-comment"># 反转实现1</span></span><br><span class="line">print(lst)          <span class="hljs-comment"># 原来的列表对象不改变</span></span><br><span class="line">lst.reverse()    <span class="hljs-comment"># 反转实现2</span></span><br><span class="line">print(lst)          <span class="hljs-comment"># 原来的列表变成反转之后的新列表</span></span><br><span class="line">lst1= reversed(lst)</span><br><span class="line">print(lst1)       <span class="hljs-comment"># lst1是一个列表反转迭代器对象：&lt;list_reverseiterator object at 0x00000233C677F320&gt;</span></span><br><span class="line">print(list(lst1))    <span class="hljs-comment"># 用list函数显示lst1的内容</span></span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>sort</td><td>排序函数，用于<code>列表list</code>中，<strong>原地修改没有返回值</strong>；  <strong>默认从小到大</strong>；将<strong>reverse=True</strong>则变成从大到小排序sort(self, /, *, key=None, reverse=False)</td></tr><tr><td>sorted</td><td>对<code>所有可迭代对象</code>进行操作，返回一个新的 <code>list</code>，不是在原来的list上进行操作  sorted(iterable[, cmp[, key[, reverse]]])</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># sort()</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst.sort()</span><br><span class="line">print(lst)</span><br><span class="line">lst1 = [<span class="hljs-string">'python'</span>, ‘Java’, <span class="hljs-string">'html'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'php'</span>]</span><br><span class="line">lst1.sort(key=len)  <span class="hljs-comment"># 列表中的字符串进行排序；如果长度相同，则按照出现的先后顺序</span></span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</span><br><span class="line">[<span class="hljs-string">'c'</span>, <span class="hljs-string">'php'</span>, <span class="hljs-string">'Java'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'python'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># sorted()</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst1 = sorted(lst)</span><br><span class="line">print(lst)  <span class="hljs-comment"># 原对象不变</span></span><br><span class="line">print(lst1) <span class="hljs-comment"># 新列表为排序后的对象</span></span><br><span class="line"></span><br><span class="line">lst2 =[(<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>),(<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>),(<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>),(<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>)]</span><br><span class="line">lst3 = sorted(lst2, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])   <span class="hljs-comment"># 由元组构成的复合列表，按照元组的第二个元素进行排序，通过匿名函数lamba()</span></span><br><span class="line">print(lst3)</span><br><span class="line">[(<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>)]</span><br><span class="line"></span><br><span class="line">lst4 = sorted(lst2, key=<span class="hljs-keyword">lambda</span> x: len(x[<span class="hljs-number">0</span>]))   <span class="hljs-comment"># 通过元组中第一个元素的长度进行排序</span></span><br><span class="line">print(lst4)</span><br><span class="line">[(<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>), (<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>)]</span><br></pre></td></tr></table></figure><h4 id="自定义类中的元素进行排序"><a href="#自定义类中的元素进行排序" class="headerlink" title="自定义类中的元素进行排序"></a>自定义类中的元素进行排序</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, age, grade)</span>:</span></span><br><span class="line">        self.name =  name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.grade = grade</span><br><span class="line">        </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span>  repr((self.name, self.grade, self.age))</span><br><span class="line">    </span><br><span class="line">students_objects = [</span><br><span class="line">    Student(<span class="hljs-string">'Tom'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-number">12</span>),</span><br><span class="line">    Student(<span class="hljs-string">'xiaoming'</span>,<span class="hljs-string">'A'</span>,<span class="hljs-number">17</span>),</span><br><span class="line">    Student(<span class="hljs-string">'xiaohong'</span>, <span class="hljs-string">'C'</span>, <span class="hljs-number">12</span>),</span><br><span class="line">    Student(<span class="hljs-string">'Peter'</span>, <span class="hljs-string">'D'</span>, <span class="hljs-number">8</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">lst5 = sorted(students_objects, key=<span class="hljs-keyword">lambda</span> t:t.age)   <span class="hljs-comment"># 自定义类中，按照年龄进行排序</span></span><br><span class="line">print(lst5)</span><br><span class="line">lst6 = sorted(students_objects, key=<span class="hljs-keyword">lambda</span> t:(t.age, t.grade))   <span class="hljs-comment"># 使用元组，先根据年龄排序，若年龄相同按照grade排序</span></span><br><span class="line">print(lst6)</span><br><span class="line"></span><br><span class="line">[(<span class="hljs-string">'xiaoming'</span>, <span class="hljs-number">17</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'Tom'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'xiaohong'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'Peter'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'D'</span>)]</span><br><span class="line">[(<span class="hljs-string">'xiaoming'</span>, <span class="hljs-number">17</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'Tom'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'xiaohong'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'Peter'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'D'</span>)]</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.jianshu.com/c/ab55c73e0037?utm_source=desktop&utm_medium=notes-included-collection" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/20/5d32f16d5b0bf92604.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写于开始之前&quot;&gt;&lt;a href=&quot;#写于开始之前&quot; class=&quot;headerlink&quot; title=&quot;写于开始之前&quot;&gt;&lt;/a&gt;写于开始之前&lt;/h3&gt;&lt;p&gt;笔者即将开始写一个系列的《&lt;code&gt;Python&lt;/code&gt;札记》。本系列的札记主要是自学&lt;code&gt;齐伟&lt;/code&gt;老师《跟老齐学&lt;code&gt;Python&lt;/code&gt;轻松入门》一书整理而来。书第一遍断断续续花了5个月，第二遍边看边整理，保守3个月。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>超时空从犯</title>
    <link href="https://www.policx.com/label/Accomplice/"/>
    <id>https://www.policx.com/label/Accomplice/</id>
    <published>2019-07-18T02:18:06.000Z</published>
    <updated>2019-08-15T01:26:29.762Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><input checked disabled type="checkbox"> 你回头看了我一眼</li></ul><a id="more"></a><ul><li><input disabled type="checkbox"> 我觉得那很久很久</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;input checked disabled type=&quot;checkbox&quot;&gt; 你回头看了我一眼&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="label" scheme="https://www.policx.com/categories/label/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter的环境配置 for Mac</title>
    <link href="https://www.policx.com/program/flutter/"/>
    <id>https://www.policx.com/program/flutter/</id>
    <published>2019-07-16T10:14:18.000Z</published>
    <updated>2019-08-15T01:53:53.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 </p><a id="more"></a><h2 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装Flutter</h2><p>首先我们可以在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fdocs%2Fget-started%2Finstall" target="_blank" rel="noopener">Flutter官网</a>上面看到一些配置环境的步骤。这里就直接开干了，走起。 </p><h3 id="1、配置HomeBrew"><a href="#1、配置HomeBrew" class="headerlink" title="1、配置HomeBrew"></a>1、配置HomeBrew</h3><p>我们在去配置Flutter的环境之前，需要先检查一下HomeBrew是不是最新的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br></pre></td></tr></table></figure><p>如果没有brew的话，可以去<a href="https://link.juejin.im?target=https%3A%2F%2Fbrew.sh%2F" target="_blank" rel="noopener">HomeBrew官网</a>自行下载。这里就不赘述了，这里如果重新下载的话，看到下面的打印信息就说明下载完毕了。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3aad595f24923.jpg" alt></p><h3 id="2、下载SDK"><a href="#2、下载SDK" class="headerlink" title="2、下载SDK"></a>2、下载SDK</h3><p>接下来就是去官网下载SDK了。注意，这里下载SDK有两种方法：</p><ul><li>一是直接<code>git clone -b beta https://github.com/flutter/flutter.git</code>下载</li><li>二是自己在官网下载下来，如下图<br><img src="https://i.loli.net/2019/07/16/5d2db40e0aecc50465.jpg" alt></li></ul><p>这里我两种方法都试过了一遍，第一种方法实在是太慢了，在经历了耗费一个半小时下载到94%，最后提示失败了的过程之后，我决定还是用第二种方法，整个过程只用了3分钟的样子，相当满意。下载完之后，是一个名字叫<code>flutter_macos_v1.5.4-hotfix.2-stable.zip</code>的压缩包。 然后我们解压这个zip包，把解压出来的<strong>flutter</strong>文件放到根目录下即可。 </p><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p>因为Flutter的SDK中包含了很多的命令行工具。我们就需要配置环境变量，所以我直接就安装到了根目录下了。</p><p><strong>配置镜像</strong></p><p>因为Flutter在运行的时候，就需要去官网下载一些需要的资源，但是因为天国特色的wall的原因，我们就需要镜像服务器，这个在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fcommunity%2Fchina" target="_blank" rel="noopener">官网</a>上面有写的很明白，而且这是一个临时的镜像，后面还要以官网的镜像地址为准。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3f2c1f4f64480.jpg" alt></p><p>我们跳转到根目录 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>就能找到这个<code>.bash_profile</code>隐藏文件，我们用vim打开这个文件 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后需要输入就把A键按一下进入编辑模式，把下面三个环境变量配置进去 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line">export PATH=/Users/xueliheng/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>注意下，第三个环境变量这里<code>/Users/xueliheng/</code>是我的根目录，然后<code>/flutter/</code>是我们刚刚解压的的zip包里面的<code>flutter</code>文件夹。上面两个环境变量是两个镜像地址，上文中也有说过。 接着<code>shift+：</code>然后输入<code>wq</code>保存并退出vim。输入如下命令： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>最后我们就可以验证一下flutter环境有没有配置成功了。输入： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure><p>看到如下如的打印信息就是配置成功了<br><img src="https://i.loli.net/2019/07/16/5d2db44407fa682753.jpg" alt></p><h3 id="4、配置Android-Studio"><a href="#4、配置Android-Studio" class="headerlink" title="4、配置Android Studio"></a>4、配置Android Studio</h3><p>如果没有下载<strong>Android Studio</strong>的话，就去<a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.android.google.cn%2Fstudio" target="_blank" rel="noopener">官网</a>去下载一下。 我们用<code>flutter doctor</code>命令去检查一下flutter的环境配置，我们可以看到如下打印 </p><p><img src="https://i.loli.net/2019/07/16/5d2db4676ec3a36838.jpg" alt></p><p>这里的每个<code>✗</code>都是我们要去解决的问题。不过他有告诉你应该怎么做。比如第一个提示： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices</span><br><span class="line">    ✗ Unable to locate Android SDK.</span><br></pre></td></tr></table></figure><p>这就是让你去下载Android Studio。我们在下载完成之后，打开AS让他去下载一些应该下载的东西。 如果这里有提示你 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices (Android SDK version 24.0.2)</span><br><span class="line">    ✗ Flutter requires Android SDK 28 and the Android BuildTools 28.0.3</span><br></pre></td></tr></table></figure><p>这就是在提示让你去升级一下SDK，然后命令如下 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;/Users/xueliheng/Library/Android/sdk/tools/bin/sdkmanager&quot; &quot;platforms;android-28&quot; &quot;build-tools;28.0.3&quot;</span><br></pre></td></tr></table></figure><p>注意一下，这个地方的升级是需要”科学上网“的，如果有的小伙伴没有这个条件的话，我这边百度云上面给大家准备了一个<a href="https://link.juejin.im?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F10yp8PuRXxk7YvcNR_dTy8Q" target="_blank" rel="noopener">链接</a>，提取码: e48c，大家可以下载下来。下载下来之后解压到<code>/Users/Library/Android/</code>这个文件夹。把原先的SDK直接覆盖就行了，就已经是最新的SDK了。 </p><p>接下来我们配置一下安卓的环境变量，还是在根目录下找到<code>.bash_profile</code>文件，并在其中添加四个环境变量 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=~/Library/Android/sdk</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/emulator</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br></pre></td></tr></table></figure><p>分别是： </p><ul><li>安卓sdk的路径</li><li>安卓的模拟器路径</li><li>安卓tools路径</li><li>安卓平台工具</li></ul><p>接下来我们再用<code>flutter doctor</code>检查的时候，显示的信息如下图<br><img src="https://i.loli.net/2019/07/16/5d2db4964a70b73490.jpg" alt></p><p>意思就是让我们去下载iOS的相关环境，我们先暂时放放，下面还有一个关于<strong>Android Studio</strong>的没有解决完</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">✗ Dart plugin not installed; this adds Dart specific functionality.</span><br></pre></td></tr></table></figure><p>这个就是缺少Flutter插件的意思，那么我们就去AS里面去配置一下好了。打开AS的<code>Preferences</code>，点击<code>Plugins</code>，在搜索栏中输入<code>flutter</code>，找到相应的插件，然后<code>Install</code>。当跳出安装Dart插件的提示界面时，记得点击Yes进行安装。安装完毕之后<code>restart IDE</code>重启AS。 重启之后就能看到多了一个这个东西<br><img src="https://i.loli.net/2019/07/16/5d2db4b731cbd14001.jpg" alt></p><p>我们再用<code>flutter doctor</code>检测一下<br><img src="https://i.loli.net/2019/07/16/5d2db4cdc6dd137908.jpg" alt></p><p>现在终于ok了。我们看到<code>[✓]Android Studio</code>说明，安卓的环境基本上配置成功，接下来我们就配置一下安卓的模拟器就好了。 </p><h3 id="5、安卓模拟器配置"><a href="#5、安卓模拟器配置" class="headerlink" title="5、安卓模拟器配置"></a>5、安卓模拟器配置</h3><p>在AS中找到模拟器配置如下图并选择<br><img src="https://i.loli.net/2019/07/16/5d2db4dacfde455330.jpg" alt></p><p>接着就创建设备，选择设备<br><img src="https://i.loli.net/2019/07/16/5d2db4e68a2ed68879.jpg" alt></p><p>选择系统<br><img src="https://i.loli.net/2019/07/16/5d2db4f6cdc5889902.jpg" alt></p><p>最后点击下载就完成了。 </p><h3 id="6、配置iOS环境"><a href="#6、配置iOS环境" class="headerlink" title="6、配置iOS环境"></a>6、配置iOS环境</h3><p>我们配置完了安卓的环境，再来<code>flutter doctor</code>检测一下。<br><img src="https://i.loli.net/2019/07/16/5d2db50ad75eb82331.jpg" alt></p><p>情况是这样的。目前1.5.4版本的Flutter需要匹配新版本的Xcode10.2.1。按照他提示的来试试，提示我Xcode版本太低了，需要升级Xcode<br><img src="https://i.loli.net/2019/07/16/5d2db5275c8f825074.jpg" alt></p><p>更新到最新的之后，继续走下面的步骤依旧会报错。那么我们可以试试下面的这个办法： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew link pkg-config</span><br><span class="line">$ brew install --HEAD usbmuxd</span><br><span class="line">$ brew unlink usbmuxd</span><br><span class="line">$ brew link usbmuxd</span><br><span class="line">$ brew install --HEAD libimobiledevice</span><br><span class="line">$ brew install ideviceinstaller</span><br></pre></td></tr></table></figure><p>这些执行完之后执行一下<code>flutter doctor</code><br><img src="https://i.loli.net/2019/07/16/5d2db5515858b19228.jpg" alt></p><p>最后还真是没错，全部配置完成了！那么我们就把iOS的也配置完毕了。</p><h3 id="7、VSCode的使用"><a href="#7、VSCode的使用" class="headerlink" title="7、VSCode的使用"></a>7、VSCode的使用</h3><p>VSCode上面使用的话，就简单多了，这里我就简答的赘述一下。 只需要将<code>Dart</code>和<code>Flutter</code>插件都下载下来<br><img src="https://i.loli.net/2019/07/16/5d2db5643b08597602.jpg" alt></p><p>然后<code>command+shift+p</code>输入<code>flutter</code>，选择<code>Flutter：New Project</code><br><img src="https://i.loli.net/2019/07/16/5d2db576e145096766.jpg" alt></p><p>输入要创建的项目的名称和存放项目的地址。如果提示需要指明flutter的SDK的路径，那就选择根目录那个经过解压得来的flutter的文件夹就好了。 接下来是这样一个界面<br><img src="https://i.loli.net/2019/07/16/5d2db588f1b5152482.jpg" alt></p><p>接下来我们选择<code>View-&gt;Start Debugging</code>来运行项目。<br><img src="https://i.loli.net/2019/07/16/5d2db59bb3b3338193.jpg" alt></p><p>当然这个过程需要你把Xcode的模拟器打开。运行完之后就能看到这个界面，也就是你的第一个Flutter工程啦！<br><img src="https://i.loli.net/2019/07/16/5d2db5ad5eaf434960.jpg" alt></p><h3 id="8、Hot-reload的使用"><a href="#8、Hot-reload的使用" class="headerlink" title="8、Hot reload的使用"></a>8、Hot reload的使用</h3><p>我们打开<code>lib/main.dart</code>文件，然后在其中找到 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have pushed the button this many times:</span><br></pre></td></tr></table></figure><p>并把这个改为 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have clicked the button this many times:</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2db5cc5b4f279074.jpg" alt><br>那么我们就能看到界面上多了一个小闪电<br><img src="https://i.loli.net/2019/07/16/5d2db5f044c0553935.jpg" alt></p><p>我们现在如果<code>command+s</code>保存一下更改的话，就能很快的在模拟器上面看到相应的更改，不需要再重新去编译一边。这一点简直是太棒了！解决了iOS开发者一个大痛点啊！！！ </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，flutter的环境搭建工作基本上就进行完毕了，整个过程大概耗时接近2个小时，这期间包括采坑、查资料、下载、科学上网…等等很蛋疼的事情。当然网速基本上是最大的障碍，浪费了很多的时间。所以也是需要一定的耐心来完成的。 后面的文章也会持续的更新，最近有点懈怠，OpenGL系列的文章有点拖更的节奏，这个后面会补起来。Flutter我也才刚刚接手，也是慢慢的来采坑，也会以此来记录自己的学习经历，也希望能多多跟大家交流。 再次我附上自己的邮箱<code>coderspr1nghall@gmail.com</code>欢迎讨论交流。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://juejin.im/post/5d0508d56fb9a07ec373eb9e" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2dbb03b8ef977558.jpg" alt></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 &lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://www.policx.com/program/Python/spider/"/>
    <id>https://www.policx.com/program/Python/spider/</id>
    <published>2019-07-15T02:06:04.000Z</published>
    <updated>2019-08-15T01:53:53.034Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。</p><a id="more"></a><p>其实爬虫这个概念很简单，基本可以分成以下几个步骤：</p><ul><li><p>发起网络请求</p></li><li><p>获取网页</p></li><li><p>解析网页获取数据</p></li></ul><p>发起网络请求这个步骤常用的类库有标准库urllib以及Python上常用的requests库。解析网页常用的类库有的BeautifulSoup。另外requests的作者还开发了另一个很好用的库requests-html，提供了发起请求和解析网页的二合一功能，开发小型爬虫非常方便。另外还有一些专业的爬虫类库，其中比较出名的就是scrapy。本文将会简单介绍一下这些类库，之后还会专门写一篇文章介绍scrapy的用法。</p><h2 id="标准库urllib"><a href="#标准库urllib" class="headerlink" title="标准库urllib"></a><strong>标准库urllib</strong></h2><p>首先先来看标准库urllib。标准库的优点是Python自带的，不需要安装任何第三方库，缺点就是urllib属于偏底层的库，使用起来比较麻烦。下面是urllib发起请求的一个简单例子，大家看看就好。可以看到为了发起一个简单的请求，我们需要创建opener、request、ProxyHandler等好几个对象，比较麻烦。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> urllib.request <span class="hljs-keyword">as</span> request</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="hljs-string">'https'</span>: <span class="hljs-string">'https://127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="hljs-string">'http'</span>: <span class="hljs-string">'http://127.0.0.1:1080'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'--------------使用urllib--------------'</span>)</span><br><span class="line">url = <span class="hljs-string">'http://www.google.com'</span></span><br><span class="line">opener = request.build_opener(request.ProxyHandler(proxies))</span><br><span class="line">request.install_opener(opener)</span><br><span class="line">req = request.Request(url, headers=headers)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a><strong>requests</strong></h2><p>requests是Kenneth Reitz大神的著名作品之一，优点就是极度简单和好用。首先来安装requests。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>下面是一个简单的例子，和上面urllib示例代码实现的功能相同，但是代码量少多了，也更易读。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="hljs-string">'--------------使用requests--------------'</span>)</span><br><span class="line">response = requests.get(<span class="hljs-string">'https://www.google.com'</span>, headers=headers, proxies=proxies)</span><br><span class="line">response.encoding = <span class="hljs-string">'utf8'</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>requests还可以方便的发送表单数据，模拟用户登录。返回的Response对象还包含了状态码、header、raw、cookies等很多有用的信息。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="hljs-string">'name'</span>: <span class="hljs-string">'yitian'</span>,</span><br><span class="line">    <span class="hljs-string">'age'</span>: <span class="hljs-number">22</span>,</span><br><span class="line">    <span class="hljs-string">'friends'</span>: [<span class="hljs-string">'zhang3'</span>, <span class="hljs-string">'li4'</span>]</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="hljs-string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">pprint(response.__dict__)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>关于requests我就不多做介绍了，因为它有中文文档，虽然比官方落后几个小版本号，不过无伤大雅，大家可以放心参阅。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://cn.python-requests.org/zh_CN/latest/</span><br></pre></td></tr></table></figure><h2 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a><strong>beautifulsoup</strong></h2><p>利用前面介绍的requests类库，我们可以轻易地获取HTML代码，但是为了从HTML中找到所需的数据，我们还需要HTML/XML解析库，BeautifulSoup就是这么一个常用的库。首先先来安装它：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>这次就用我简书主页作为例子，爬取一下我简书的文章列表。首先先用requests获取到网页内容。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"><span class="hljs-keyword">import</span> bs4</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><p>然后就是BeautifulSoup的代码了。在使用BeautifulSoup的时候首先需要创建一个HTML树，然后从树中查找节点。BeautifulSoup主要有两种查找节点的办法，第一种是使用find和find_all方法，第二种方法是使用select方法用css选择器。拿到节点之后，用contents去获取它的子节点，如果子节点是文本，就会拿到文本值，注意这个属性返回的是列表，所以要加[0]。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html = bs4.BeautifulSoup(response.text, features=<span class="hljs-string">'lxml'</span>)</span><br><span class="line">note_list = html.find_all(<span class="hljs-string">'ul'</span>, class_=<span class="hljs-string">'note-list'</span>, limit=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.select(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.contents[<span class="hljs-number">0</span>]</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>BeautifulSoup也有中文文档，同样也是稍微落后两个小版本，影响不大。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</span><br></pre></td></tr></table></figure><h2 id="requests-html"><a href="#requests-html" class="headerlink" title="requests-html"></a><strong>requests-html</strong></h2><p>这个类库是requests的兄弟，同样也是Kenneth Reitz大神的作品。它将请求网页和解析网页结合到了一起。本来如果你用requests的话只能请求网页，为了解析网页还得使用BeautifulSoup这样的解析库。现在只需要requests-html一个库就可以办到。<br>首先先来安装。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests-html</span><br></pre></td></tr></table></figure><p>然后我们来看看用requests-html如何重写上面这个例子。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line">note_list = r.html.find(<span class="hljs-string">'ul.note-list'</span>, first=<span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.find(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html除了可以使用css选择器来搜索以外，还可以使用xpath来查找。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html还有一个很有用的特性就是浏览器渲染。有些网页是异步加载的，直接用爬虫去爬只能得到一个空页面，因为数据是靠浏览器运行JS脚本异步加载的，这时候就需要浏览器渲染了。而浏览器渲染用requests-html做非常简单，只要多调用一个render函数即可。render函数有两个参数，分别指定页面下滑次数和暂停时间。render函数第一次运行的时候，requests-html会下载一个chromium浏览器，然后用它渲染页面。<br>简书的个人文章页面也是一个异步加载的例子，默认只会显示最近几篇文章，通过浏览器渲染模拟页面下滑，我们可以得到所有文章列表。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line"><span class="hljs-comment"># render函数指示requests-html用chromium浏览器渲染页面</span></span><br><span class="line">r.html.render(scrolldown=<span class="hljs-number">50</span>, sleep=<span class="hljs-number">0.2</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>类似的，今日头条的个人页面也是异步加载的，所以也得调用render函数。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">        <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(<span class="hljs-string">'https://www.toutiao.com/c/user/6662330738/#mid=1620400303194116'</span>, headers=headers)</span><br><span class="line">r.html.render()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r.html.find(<span class="hljs-string">'div.rbox-inner a'</span>):</span><br><span class="line">    title = i.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.toutiao.com<span class="hljs-subst">&#123;i.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》 <span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>最后是requests-html的官网地址以及中文文档。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://html.python-requests.org/</span><br><span class="line">https://cncert.github.io/requests-html-doc-cn/</span><br></pre></td></tr></table></figure><h2 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a><strong>scrapy</strong></h2><p>以上介绍的几个框架都是各自有各自的作用，把它们结合起来可以达到编写爬虫的目的，但是要说专业的爬虫框架，还是得谈谈scrapy。作为一个著名的爬虫框架，scrapy将爬虫模型框架化和模块化，利用scrapy，我们可以迅速生成功能强大的爬虫。<br>不过scrapy概念众多，要仔细说还得专门开篇文章，这里就只简单演示一下。首先安装scrapy，如果是Windows系统，还需要安装pypiwin32。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy  </span><br><span class="line">pip install pypiwin32</span><br></pre></td></tr></table></figure><p>然后创建scrapy项目并添加一个新爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject myproject</span><br><span class="line">cd myproject</span><br><span class="line">scrapy genspider my jianshu.com</span><br></pre></td></tr></table></figure><p>打开配置文件settings.py，设置用户代理，否则会遇到403错误。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br></pre></td></tr></table></figure><p>然后修改一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JianshuSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="hljs-string">'jianshu'</span></span><br><span class="line">    allowed_domains = [<span class="hljs-string">'jianshu.com'</span>]</span><br><span class="line">    start_urls = [<span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">'div.content'</span>):</span><br><span class="line">            <span class="hljs-keyword">yield</span> &#123;</span><br><span class="line">                <span class="hljs-string">'title'</span>: article.css(<span class="hljs-string">'a.title::text'</span>).get(),</span><br><span class="line">                <span class="hljs-string">'link'</span>: <span class="hljs-string">'https://www.jianshu.com'</span> + article.xpath(<span class="hljs-string">'a[@class="title"]/@href'</span>).get()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>最后运行一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl my</span><br></pre></td></tr></table></figure><br><table><thead><tr><th>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1563247765&ver=1731&signature=gm2iTUKE3itOZzvlz9SUtKCYNv*PqEYt2C7ReV7kd47e2ZAWPvG5GRXZUJsiRIde34Uh5FznBslw4hHhXmHQXyV3yz0tTdgds1RMCdai6Oyy98w2-iTBRWeJlpm3cWa8&new=1" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2d4c5ba835e96705.jpg" alt="Python"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>DDoS（分布式拒绝服务）攻击是无解的吗？</title>
    <link href="https://www.policx.com/news/ddos/"/>
    <id>https://www.policx.com/news/ddos/</id>
    <published>2019-07-14T07:26:43.000Z</published>
    <updated>2019-08-15T01:24:56.404Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>“</strong></p><p>DDOS？ </p><p>一言难尽啊！ </p><p>”</p><a id="more"></a><p>先说结论，DDoS是近年来网络攻击中的一棵“常青树”，的确很难缠，但说它是无解的，那也有点太看得起它了。虽然DDoS在对很多大平台的攻击中出尽了风头，但在现在互联网的解决方案中，并不缺乏应对DDoS的解决方案。 </p><p>说起DDoS攻击，我脑海里能够想到的全都是中国民间俗语，什么“双拳难敌四手，好汉架不住人多”，什么“千斤拨四两”，什么“乱拳打死老师傅”等等等等。 </p><p>之前有朋友跑来问我DDoS是个什么东西，为什么这么多互联网巨头都被搞得没有脾气，我记得我当时我是这么举的例子： </p><p>我们这一代人小的时候，自助餐开始在中国内地风行，那会儿这个行业里为了打击竞争对手，对手最惯常使用的阴招是雇佣很多五大三粗的人，给他们钱去对方的店里一通猛吃，杯盘狼藉之下，用不了几天这家自助餐就能给吃黄了。 </p><p>而DDoS攻击比这种还阴损，如果你开了一家餐馆，你的对手如果想搞你，最好的办法就是找一堆地痞流氓到你的店里坐的满满一屋子，你如果上前问，他们就一直跟你扯淡找麻烦，导致真正想吃饭的顾客一看这个情形，掉头就走了。 </p><p>用不了多久，你的餐馆就会开不下去，而你的竞争对手就会趁机蚕食掉你的市场份额，而放在网络语境里，这就是DDoS攻击的最基本原理。 </p><p>而这件事之所以难缠在于，一两个无赖根本成不了气候，想要耍流氓必须要有很多个无赖集结在一起。<strong>所以和现实世界中的无赖一样，DDoS真正的杀手锏在于利用能够发动的汹涌的流量，可以瞬间冲垮被攻击网站的服务器。</strong></p><p>如果我们回溯一下历史的话，会发现黑客组织之所以会有组织有预谋的发起DDoS攻击，基本上都是基于以下几个原因： </p><ul><li><p>有些行业如果网站被恶意攻击，会造成很难估量的损失，这个时候黑客发动DDoS攻击的初衷一般是出于敲诈勒索，为了保证企业的正常运转，他们通常愿意向黑客付高额的赎金； </p></li><li><p>行业内血海一片，DDoS是恶意竞争的屠刀。这个现象从逻辑上，其实雇佣无赖去占领对手餐馆的原理是一毛一样的，而且DDOS攻击早已产业化，现在中国的DDOS黑市，出钱请黑客打1G的流量到一个网吧或网站，市场价只要不到50块钱，但对于一个创业公司或者干脆就是一个小网吧来说，这已经算是可以灭顶的无妄之灾了。 </p></li><li><p>DDoS攻击往往成为掩盖真实网络攻击的烟雾弹，在遭受DDoS攻击的企业中，部分企业还伴随数据丢失的现象，黑客利用DDoS攻击掩盖其窃取用户隐私的真实目的，这种攻击行为在社交网站、金融领域等用户隐私高价值的行业尤为高发。 </p></li></ul><p>比如说，去年年初的时候，荷兰第一大银行荷兰商业银行于2018年1月28日晚间遭到DDoS攻击；第二大银行荷兰合作银行的网银服务29日早晨遭到攻击；第三大银行荷兰银行在那一周内共遭到7次网络攻击，仅周末就有3次。 </p><p>不过这一次发生在荷兰的针对银行系统的攻击并没有造成用户隐私的泄露，原因在于这仅仅是一次来自俄罗斯一个网络间谍组织Cozy Bear对荷兰情报组织AIVD侵犯其计算机的“单纯”的报复行为。<strong>但并不是所有黑客组织发起的DDoS攻击都如此单纯。</strong></p><p>2018年年底时万豪酒店发布了一则公告，称其旗下喜达屋酒店的5亿人次的信息被泄露，共计3.27亿人，泄露信息包括姓名、邮寄地址、电话号码、电子邮件昂面地址、护照号码、出生日期、性别等等入住信息，更糟糕的是万豪无法确定，侵入酒店系统的第三方黑客，在窃取的信息中是否包含客人的银行卡号和密码。（此案例和DDOS攻击无关，建议采用其他案例，比如2011年4月20日至26日，索尼遭受DDoS攻击，目的是为了掩盖盗取索尼PS的用户数据。） </p><p>而游戏领域，则是DDoS攻击的另一个重灾区，不光是刚才前文中提到的暴雪，包括索尼、金山、网易在内的众多知名游戏公司都曾数次遭受攻击，可以说DDoS攻击是游戏企业的噩梦。 </p><p>许多刚创业的游戏公司，可能刚上线就被打死，而一些处在融资阶段的游戏公司，由于遭遇攻击而被迫停服，则很大程度上会调低投资人的预期，甚至导致融资失败。 </p><p>而这些因素，都是竞对打压或者敲诈勒索的绝对软肋。 </p><p>从以上的几个案例我们不难看出，和现实中的耍流氓和敲诈勒索相比，通过网络手段进行攻击的风险和成本更低，坏蛋的嘴脸也更穷凶极恶一点，无论是政府机构还是企业平台，无论你是巨头还是小蚂蚁，只要你身上有羊毛可以薅，你都时刻面临着被洗劫的风险 </p><p>不过刚在开头我也讲了，虽然DDoS很难缠很让人头痛，但本质上图并不是无解的。 </p><p>回到我最开始讲的那个例子。 </p><p>你是一个餐馆老板，过去三十年一直是个老老实实的厨子，突然面对五十个臭流氓到你店里耍无赖的时候，你最好的应对方法，应该是什么？ </p><p>自己组建一支人马，和这些臭流氓正面刚？这恐怕不行，因为你不是臭流氓，你没有相应的作战经验。 </p><p>报警请人民警察来帮忙处理？这恐怕也不行，人家在你店里没有打砸抢，只是“温和的”非暴力不合作，警察来了也只能当民事调解，并且人家马仔众多，明天再换一拨新面孔来，玩的你一点脾气都没有。 </p><p>这就是面对DDoS时，无论是巨头还是小蚂蚁，他们的实实在在的困境。 </p><p>但正所谓“道高一尺魔高一丈”，你在云上和我耍流氓，那我就在云上回击。 </p><p><strong>“云”的事儿，不如还交还给云来处理。</strong>我认为就目前DDoS的在攻击量级上的疯狂进击的前提下，云计算服务厂商或许是狙击它们的最有效手段。 </p><p>2018年年初，峰值1.35TB/秒的流量冲击了开发者平台 GitHub。这是第一次TB量级的DDoS攻击。GitHub 受到攻击后，服务器断断续续，无法访问。攻击发生 10 分钟后，GitHub 向CDN 服务商 Akamai 请求协助，访问 GitHub 的流量已经由后者接管并在15分钟之内完成了防御。 </p><p>Akamai的相关负责人在接受采访时说，我们是基于迄今为止最大规模 DDoS 攻击五倍的峰值而做的相应准备，所以 1.3T 对我们来说是小意思。 </p><p>在关于流量峰值这一点上，我认为饱受双11、双12、618等全民购物狂欢的电商巨头们更有发言权，就拿京东举例子好了。 </p><p>京东云在之前发布的高防版的DDoS服务中，展示出了非常明确的信心是，在多年的电商狂欢流量对抗中，京东云已经在实战中建立了一套完备的防御机制，无论是在流量峰值的建模上，还是在DDoS的防御算法上，它的部署都远远不是纸上谈兵，而是拳拳到肉的经受住了实战的洗礼。要知道，全世界每年有超过5成的DDoS攻击都来自中国，而我们的国家也是全世界超过美国的第一大“肉鸡”市场，由电商大数据加持演化而来的京东云，它在云安全的理解上可以说是非常深刻了。 </p><p>所以说，如果说一定要有一个结论，我想说“上帝的归上帝，而云上的归云上”，像京东云这样的基于电商大数据考验的云计算平台，或许才是对抗DDoS的最终答案。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f3adcbb2ed60428.png" alt="jd"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;“&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DDOS？ &lt;/p&gt;
&lt;p&gt;一言难尽啊！ &lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.policx.com/program/JavaScript/node/"/>
    <id>https://www.policx.com/program/JavaScript/node/</id>
    <published>2019-07-13T16:06:04.000Z</published>
    <updated>2019-08-15T01:53:53.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/15/5d2c47df96f5d45317.jpg" alt="Node.js"></p><p>能方便地搭建响应速度快、易于扩展的网络应用，Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>中文：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org</a>、<a href="https://nodejs.cn/" target="_blank" rel="noopener">https://nodejs.cn</a></p><p>简单说Node.js就是运行在服务器端的JavaScript，是现在流行的语言中能同时运行在前端与后台的程序语言，你可以把JavaScript想像成Java与C#。相关技术：</p><p>数据库：MongoDB，非关系型数据库，NoSQL（Not only SQL）</p><p>MVC框架：AngularJS</p><p>Web服务器：Express</p><p>模板引擎：jade、ejs、htmljs、swig、hogan.js</p><h1 id="二、搭建Node-js开发环境"><a href="#二、搭建Node-js开发环境" class="headerlink" title="二、搭建Node.js开发环境"></a>二、搭建Node.js开发环境</h1><h2 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h2><p>去官网下下载最新版本的Node.js一步一步按提示安装即可，如果安装失败就手动安装，将Node.js的安装位置配置到环境变量的path中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装完成后启动命令行，测试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="三、第一个Node-js程序"><a href="#三、第一个Node-js程序" class="headerlink" title="三、第一个Node.js程序"></a>三、第一个Node.js程序</h1><p>在上面的示例中，我们是通过IDE完成编译与运行的，其实手动运行也可以，比如编写一段代码如下：</p><blockquote><p>server.js</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//依赖一个http模块，相当于java中的import，与C#中的using</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">//创建一个服务器对象</span><br><span class="line">server = http.createServer(function (req, res) &#123;</span><br><span class="line">//设置请求成功时响应头部的MIME为纯文本</span><br><span class="line">res.writeHeader(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">//向客户端输出字符</span><br><span class="line">res.end(&quot;Hello World\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//让服务器监听本地8000端口开始运行</span><br><span class="line">server.listen(8000,&apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server is runing at 127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>在node环境下解释运行：<br><img src="https://i.loli.net/2019/07/14/5d2af984d2fae77488.jpg" alt></p><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2af89c2b5b226144.jpg" alt></p><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。<br>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。<br>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</p><h1 id="四、NPM（Node-js包管理器）"><a href="#四、NPM（Node-js包管理器）" class="headerlink" title="四、NPM（Node.js包管理器）"></a>四、NPM（Node.js包管理器）</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：  </p><ul><li>a)、允许用户从NPM服务器下载别人编写的第三方包到本地使用。  </li><li>b)、允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。  </li><li>c)、允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><h2 id="4-1、查看npm版本"><a href="#4-1、查看npm版本" class="headerlink" title="4.1、查看npm版本"></a>4.1、查看npm版本</h2><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p><h2 id="4-2、升级npm"><a href="#4-2、升级npm" class="headerlink" title="4.2、升级npm"></a>4.2、升级npm</h2><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="4-3、安装模块"><a href="#4-3、安装模块" class="headerlink" title="4.3、安装模块"></a>4.3、安装模块</h2><blockquote><p>npm install <module name> -参数</module></p></blockquote><p>如果带参数-g表示全局安装，否则只是安装到某个目录下。</p><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install express -g</span><br></pre></td></tr></table></figure><h2 id="4-4、卸载模块"><a href="#4-4、卸载模块" class="headerlink" title="4.4、卸载模块"></a>4.4、卸载模块</h2><p>我们可以使用以下命令来卸载 Node.js 模块。  </p><blockquote><p>sudo npm uninstall <module name></module></p></blockquote><p>如先使用安装指令安装bootstrap:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>再使用卸载指令删除模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall bootstrap</span><br></pre></td></tr></table></figure><p>可以到 /node_modules/ 目录下查看包是否还存在</p><h2 id="4-5、模块列表"><a href="#4-5、模块列表" class="headerlink" title="4.5、模块列表"></a>4.5、模块列表</h2><p>使用模块列表命令可以方便的看到当前项目中依赖的包：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h2 id="4-6、更新模块"><a href="#4-6、更新模块" class="headerlink" title="4.6、更新模块"></a>4.6、更新模块</h2><p>我们可以使用以下命令更新模块：<br><code>npm update</code>模块名称<br><code>npm up -g</code> 模块名称</p><h2 id="4-7、搜索模块"><a href="#4-7、搜索模块" class="headerlink" title="4.7、搜索模块"></a>4.7、搜索模块</h2><p><code>npm search</code>模块名称</p><h2 id="4-8、NPM-常用命令"><a href="#4-8、NPM-常用命令" class="headerlink" title="4.8、NPM 常用命令"></a>4.8、NPM 常用命令</h2><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。<br>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。<br>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。<br>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。<br>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。<br>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></package></package></p><h2 id="4-9、更换NPM-镜像"><a href="#4-9、更换NPM-镜像" class="headerlink" title="4.9、更换NPM 镜像"></a>4.9、更换NPM 镜像</h2><p>因为npm的服务器在国外，在网络状态不好的情况下引入一个模块会因为网络延迟而失败，可以更换成国内速度更快的镜像服务器，这里以使用淘宝 NPM 镜像（<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>）为例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/15/5d2c481d14f7270384.jpg" alt></p><p>这样就可以使用 cnpm 命令来安装模块了：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＄ cnpm install [name]</span><br></pre></td></tr></table></figure><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><p>如是安装失败，可以试试：</p><figure class="highlight zsh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">alias</span> cnpm=<span class="hljs-string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">--cache=<span class="hljs-variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">--userconfig=<span class="hljs-variable">$HOME</span>/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">  --userconfig=$HOME/.cnpmrc"'</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。使用Node.js作为AngularJS开发Web服务器的最佳方式是使用Express模块。</p><p>Express官网： <a href="https://expressjs.com/" target="_blank" rel="noopener">https://expressjs.com/</a></p><p>Express4.x API：<a href="https://expressjs.com/zh-cn/4x/api.html" target="_blank" rel="noopener">https://expressjs.com/zh-cn/4x/api.html</a></p><p><img src="https://i.loli.net/2019/07/15/5d2c484698cd427801.jpg" alt></p><h2 id="5-2、Express框架核心特性"><a href="#5-2、Express框架核心特性" class="headerlink" title="5.2、Express框架核心特性"></a><strong>5.2、Express框架核心特性</strong></h2><p>可以设置中间件来响应 HTTP 请求。</p><p>定义了路由表用于执行不同的 HTTP 请求动作。</p><p>可以通过向模板传递参数来动态渲染 HTML 页面。</p><p>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。</p><p>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p><h2 id="5-3、安装-Express"><a href="#5-3、安装-Express" class="headerlink" title="5.3、安装 Express"></a><strong>5.3、安装 Express</strong></h2><p>安装 Express 并将其保存到依赖列表中：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>以上命令全局安装express。也可安装时指定安装中间件。</p><p><em>body-parser</em> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</p><p><em>cookie-parser</em> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p><p><em>multer</em> - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">＄ npm install body-parser --save  </span><br><span class="line">＄ npm install cookie-parser --save  </span><br><span class="line">＄ npm install multer --save</span><br></pre></td></tr></table></figure><p>默认这些模块都已经添加。</p><h2 id="5-4、第一个Express框架实例"><a href="#5-4、第一个Express框架实例" class="headerlink" title="5.4、第一个Express框架实例"></a>5.4、第一个Express框架实例</h2><p>接下来我们使用 Express 框架来输出 “Hello World”。<br>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。</p><p>创建一个目录，如Project，进入命令行：</p><p>使用npm install express 导入express模块。</p><p>在目录下创建hello.js文件，如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//引入express模块</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">//创建一个app对象，类似一个web 应用（网站）</span><br><span class="line">var app = express();</span><br><span class="line">//接受指定路径的请求，指定回调函数</span><br><span class="line">app.get(&apos;/&apos;, function (req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//创建一个web服务器，可以认为就是web服务器对象</span><br><span class="line">//监听8081端口，当监听成功时回调</span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">   var host = server.address().address;  //地址</span><br><span class="line">   var port = server.address().port;  //端口</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-5、开发Express项目"><a href="#5-5、开发Express项目" class="headerlink" title="5.5、开发Express项目"></a>5.5、开发Express项目</h2><p><img src="https://i.loli.net/2019/07/14/5d2b00e97910997783.jpg" alt></p><p>创建好的项目如下：<br><img src="https://i.loli.net/2019/07/14/5d2b02dad205355700.jpg" alt></p><p>app.js是网站：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><p>bin\www是web服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">/**</span><br><span class="line"> * 依赖模块，导入</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;nodejsexpress:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从上下文环境中获得监听端口，如果空则3000</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Web服务器</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开始监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);  //指定发生错误时的事件</span><br><span class="line">server.on(&apos;listening&apos;, onListening);  //当监听成功时的回调</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 规范化端口</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *错误事件监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  //错误处理</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);  //结束程序</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当用户访问服务器成功时的回调</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/index.js路由，有点类似控制器或Servlet：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 获得首页 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>views/index.ejs首页视图：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在www上右键选择“运行方式”-&gt;Run ‘/bin/www’ 运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b034bcca6187136.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b044c2b12347829.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b041724d6091090.jpg" alt></p><h3 id="5-5-1、request对象"><a href="#5-5-1、request对象" class="headerlink" title="5.5.1、request对象"></a>5.5.1、request对象</h3><p>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ul><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ul><h3 id="5-5-2、response对象"><a href="#5-5-2、response对象" class="headerlink" title="5.5.2、response对象"></a>5.5.2、response对象</h3><p>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.app：同req.app一样</span><br><span class="line">res.append()：追加指定HTTP头</span><br><span class="line">res.set()在res.append()后将重置之前设置的头</span><br><span class="line">res.cookie(name，value [，option])：设置Cookie</span><br><span class="line">opition: domain / expires / httpOnly / maxAge / path / secure / signed</span><br><span class="line">res.clearCookie()：清除Cookie</span><br><span class="line">res.download()：传送指定路径的文件</span><br><span class="line">res.get()：返回指定的HTTP头</span><br><span class="line">res.json()：传送JSON响应</span><br><span class="line">res.jsonp()：传送JSONP响应</span><br><span class="line">res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</span><br><span class="line">res.redirect()：设置响应的Location HTTP头，并且设置状态码302</span><br><span class="line">res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</span><br><span class="line">res.send()：传送HTTP响应</span><br><span class="line">res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</span><br><span class="line">res.set()：设置HTTP头，传入object可以一次设置多个头</span><br><span class="line">res.status()：设置HTTP状态码</span><br><span class="line">res.type()：设置Content-Type的MIME类型</span><br></pre></td></tr></table></figure><h3 id="5-5-3、express获取参数有三种方法"><a href="#5-5-3、express获取参数有三种方法" class="headerlink" title="5.5.3、express获取参数有三种方法"></a>5.5.3、express获取参数有三种方法</h3><p>req.query 适合 <a href="https://localhost:3000/form?num=8888" target="_blank" rel="noopener">https://localhost:3000/form?num=8888</a><br>req.body 适合<a href="https://localhost:3000/form，Post请求中的参数" target="_blank" rel="noopener">https://localhost:3000/form，Post请求中的参数</a><br>req.params 适合获取form后的num：<a href="https://localhost:3000/form/num" target="_blank" rel="noopener">https://localhost:3000/form/num</a>  </p><p>（一）、GET</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = req.query.num;</span><br><span class="line">res.send(&quot;你获取的get数据为:&quot; + num);</span><br></pre></td></tr></table></figure><p>（二）、POST</p><p>解析post数据需要用到body-parser</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">//引入body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">//需要use的</span><br><span class="line">app.use(bodyParser.json()); // for parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">extended: true</span><br><span class="line">&#125;)); // for parsing application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.post(&apos;/form&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.body.num;</span><br><span class="line">res.send(&quot;你获取的post数据为:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>public/test.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"tinyphp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（三）、获取路径参数</p><p>app.js  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.get(&apos;/form/:num&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.params.num;</span><br><span class="line">res.send(&quot;你获取到form/后的参数:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="5-6-ejs基础"><a href="#5-6-ejs基础" class="headerlink" title="5.6 ejs基础"></a>5.6 ejs基础</h2><p>ejs是一个Express Web应用的模板引擎，在NodeJS开发中可以选择的模板引擎可能是所有Web应用开发中范围最广的，如jade、ejs、htmljs、swig、hogan.js，但ejs是最容易上手的，与jsp,asp,php的原始模板引擎风格很像。</p><p>官网：<a href="https://www.embeddedjs.com/" target="_blank" rel="noopener">https://www.embeddedjs.com/</a></p><p>添加一个<code>product.js</code>路由：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  var products=[];</span><br><span class="line">  products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">  //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">  res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>在views目录下添加<code>product.ejs</code>视图，这里是一个简单的MVC：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span> - 产品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"80%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%pdts.forEach(function(pdt,index)&#123;%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=index+1%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.name%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.price%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%&#125;);%</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">%=pdts[i].name%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改app，注册定义好的模块product：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> index = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/index'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/users'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> pdts = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/product'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//指定视图引擎为ejs</span></span><br><span class="line">app.set(<span class="hljs-string">'views'</span>, path.join(__dirname, <span class="hljs-string">'views'</span>));</span><br><span class="line">app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="hljs-comment">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class="line">app.use(logger(<span class="hljs-string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="hljs-string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/'</span>, index);</span><br><span class="line">app.use(<span class="hljs-string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="hljs-string">'/pdt'</span>, pdts);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b092ca2eb115835.jpg" alt></p><blockquote><p>原因：没有安装ejs模块<br>解决办法：进入到项目目录，安装ejs</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save ejs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b09efe80ba53992.jpg" alt></p></blockquote><p>重新运行：<br><img src="https://i.loli.net/2019/07/14/5d2b0a951a09231745.jpg" alt></p><h2 id="5-7、lodash"><a href="#5-7、lodash" class="headerlink" title="5.7、lodash"></a>5.7、lodash</h2><p>这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。可以非常方便的操作json。</p><p>官网：<a href="https://lodashjs.com/" target="_blank" rel="noopener">https://lodashjs.com/</a></p><p>安装：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash</span><br></pre></td></tr></table></figure><p>安装时先用cd切换到当前项目下。</p><p>如果浏览器使用可以直接引入：</p><script src="lodash.js"></script><p>添加lodash依赖：<br><img src="https://i.loli.net/2019/07/14/5d2b0c4c7c14a17367.jpg" alt></p><p>依赖成功后会在package.json中添加引用：<br><img src="https://i.loli.net/2019/07/14/5d2b0c9e03f1844597.jpg" alt></p><p>后台Node.js使用，可以引入模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//导入lodash模块</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var products=[];</span><br><span class="line">products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">//1、取出第一个元素</span><br><span class="line">var obj1=_.first(products);</span><br><span class="line">console.log(obj1.name);  //ZTE U880</span><br><span class="line"></span><br><span class="line">//2、取出最后一个元素</span><br><span class="line">var obj2=_.last(products);</span><br><span class="line">console.log(obj2.name);  //iPhone 7 Plus 128G</span><br><span class="line"></span><br><span class="line">//3、指定查找条件返回符合条件的索引</span><br><span class="line">var obj3=_.findIndex(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj3);  //2</span><br><span class="line"></span><br><span class="line">//4、指定查找条件返回查找到的对象</span><br><span class="line">var obj4=_.find(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj4);  //&#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;</span><br><span class="line"></span><br><span class="line">//5、排序</span><br><span class="line">var obj5=_.orderBy(products,[&quot;price&quot;,&quot;name&quot;],[&quot;desc&quot;,&quot;asc&quot;]);</span><br><span class="line">console.log(obj5);</span><br><span class="line"></span><br><span class="line">//[ &#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;HuWei 荣耀8&apos;, price: 1899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;ZTE U880&apos;, price: 899.8 &#125; ]</span><br><span class="line"></span><br><span class="line">//6、查找价格为1899.8的产品的key</span><br><span class="line">var obj6=_.findKey(products,&#123;price:1899.8&#125;);</span><br><span class="line">console.log(obj6);   //1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/14/5d2b0f023a83710965.jpg" alt></p><p>API的使用非常简单，但需要注意版本，可以现查现用，API地址：<a href="https://lodash.com/docs/4.17.2%20" target="_blank" rel="noopener">https://lodash.com/docs/4.17.2 </a></p><h2 id="5-8、参数"><a href="#5-8、参数" class="headerlink" title="5.8、参数"></a>5.8、参数</h2><h3 id="5-8-1、URL中的参数占位"><a href="#5-8-1、URL中的参数占位" class="headerlink" title="5.8.1、URL中的参数占位"></a>5.8.1、URL中的参数占位</h3><p>Checks route params (req.params), ex: /user/:id</p><p>127.0.0.1:3000/index，这种情况下，我们为了得到index，我们可以通过使用req.params得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式；</p><p><code>http://127.0.0.1:3000/pdt/9527/phone</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得产品根据Id</span><br><span class="line">router.get(&apos;/:id/:category&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(request.params.id+&quot;,&quot;+request.params.category);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b10e8e678f43145.jpg" alt></p><h3 id="5-8-2、URL中的QueryString"><a href="#5-8-2、URL中的QueryString" class="headerlink" title="5.8.2、URL中的QueryString"></a>5.8.2、URL中的QueryString</h3><p>Checks query string params (req.query), ex: ?id=12</p><p>127.0.0.1:3000/index?id=12，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用req.query.id就可以获得，类似于PHP的get方法；</p><p><code>http://127.0.0.1:3000/pdt/9527?name=jobs</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(&quot;name:&quot;+request.query.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b12be0371490358.jpg" alt></p><h3 id="5-8-3、HTTP正文中的参数"><a href="#5-8-3、HTTP正文中的参数" class="headerlink" title="5.8.3、HTTP正文中的参数"></a>5.8.3、HTTP正文中的参数</h3><p>在post请求中获得表单中的数据。</p><p>Checks urlencoded body params (req.body), ex: id=</p><p>127.0.0.1：300/index，然后post了一个id=2的值，这种方式是获取客户端post过来的数据，可以通过req.body.id获取，类似于PHP的post方法；</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222150412682-243382356.png" alt></p><p>页面：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &lt;%= title %&gt;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%pdts.forEach(function(pdt,index)&#123;%&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=index+1%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.name%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.price%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%&#125;);%&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=pdts[i].name%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            &lt;%if(typeof msg!=&quot;undefined&quot;)&#123;%&gt;</span><br><span class="line">                &lt;%=msg%&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">        &lt;form action=&quot;pdt/add&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                名称：&lt;input name=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                价格：&lt;input name=&quot;price&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/add&apos;,function(request,res,next)&#123;</span><br><span class="line">    var entity=&#123;name:request.body.name,price:request.body.price&#125;;</span><br><span class="line">    products.push(entity);</span><br><span class="line">      //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">      res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products,msg:&quot;添加成功&quot;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151340745-1374859267.png" alt></p><h2 id="5-9、JSON"><a href="#5-9、JSON" class="headerlink" title="5.9、JSON"></a>5.9、JSON</h2><p>如果需要Node.js向外提供返回JSON的接口，Express也是非常方便的，可以使用原来在浏览器中使用到的JSON对象，这是一个浏览器内置对象在服务可以直接使用：</p><p>将对象序列化成字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象</span><br><span class="line">var rose=&#123;&quot;name&quot;:&quot;Rose&quot;,&quot;weight&quot;:&quot;65&quot;&#125;;</span><br><span class="line">            //序列化成字符串</span><br><span class="line">            var str=JSON.stringify(rose);</span><br><span class="line">            alert(str);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151858839-27300214.png" alt></p><p>反序列化，将字符转换成对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成JavaScript对象</span><br><span class="line">var markStr=&apos;&#123;&quot;name&quot;:&quot;mark&quot;,&quot;weight&quot;:&quot;188&quot;&#125;&apos;;</span><br><span class="line">            var mark=JSON.parse(markStr);</span><br><span class="line">            alert(mark.name+&quot;，&quot;+mark.weight);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222152634417-1260078212.png" alt></p><p>Express已经封装了一个json方法，直接调用该方法就可以序列化对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/rest&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(products);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、RESTful（表述性状态转移）"><a href="#六、RESTful（表述性状态转移）" class="headerlink" title="六、RESTful（表述性状态转移）"></a>六、RESTful（表述性状态转移）</h1><p>REST是英文Representational State Transfer的缩写，中文称之为“表述性状态转移” 基于HTTP协议，是另一种服务架构，传递是JSON、POX（Plain Old XML）而不是SOAP格式的数据，充分利用HTTP谓词（Verb），侧重数据的传输，业务逻辑交给客户端自行处理</p><p>REST是一种分布式服务架构的风格约束，像Java、.Net（WCF、WebAPI）都有对该约束的实现，使URL变得更加有意义，更加简洁明了，如：</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>get请求 表示获得所有产品的第1个</p><p><a href="https://www.zhangguo.com/products/product" target="_blank" rel="noopener">https://www.zhangguo.com/products/product</a><br>post请求 表示添加一个产品</p><p><a href="https://www.zhangguo.com/products/1/price" target="_blank" rel="noopener">https://www.zhangguo.com/products/1/price</a><br>get请求 表示获得第1个产品的价格</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>delete请求 删除编号为1的产品</p><p>REST设计需要遵循的原则<br>网络上的所有事物都被抽象为资源（resource）；<br>每个资源对应一个唯一的资源标识符（resource identifier）；<br>通过通用的连接器接口（generic connector interface）对资源进行操作；<br>对资源的各种操作不会改变资源标识符；<br>所有的操作都是无状态的（stateless）</p><p>谓词<br><strong>GET</strong><br>表示查询操作，相当于Retrieve、Select操作<br><strong>POST</strong><br>表示插入操作，相当于Create，Insert操作<br><strong>PUT</strong><br>表示修改操作，相当于Update操作<br><strong>DELETE</strong><br>表示删除操作，相当于Delete操作</p><p>其它还有：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161223101344557-1727952968.png" alt></p><p>NodeJS+Express可以很容易的实现REST</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>application/json</li><li>res.setHeader(‘Content-Type’, ‘application/json;charset=utf-8’);</li></ul><p>示例代码cars.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var cars=[];</span><br><span class="line">cars.push(&#123;id:201701,name:&quot;BMW&quot;,price:190,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201702,name:&quot;BYD&quot;,price:25,speed:&quot;160km/h&quot;,color:&quot;红色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201703,name:&quot;Benz&quot;,price:300,speed:&quot;215km/h&quot;,color:&quot;蓝色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201704,name:&quot;Honda&quot;,price:190,speed:&quot;170km/h&quot;,color:&quot;黑色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201705,name:&quot;QQ&quot;,price:130,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line"></span><br><span class="line">/* Get */</span><br><span class="line">/*获得所有汽车*/</span><br><span class="line">/*url /cars/*/</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.json(cars);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Get*/</span><br><span class="line">/*获得汽车通过id*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">     //从路径中映射参数，转换成数字</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var car=_.find(cars,&#123;id:id&#125;);</span><br><span class="line">      res.json(car);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Post*/</span><br><span class="line">/*添加汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.post(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      car.id=_.last(cars).id+1;  //将编号修改为最后一辆车的编号+1</span><br><span class="line">      cars.push(car);  //将汽车对象添加到集合中</span><br><span class="line">      res.json(car);  //将添加成功的车以json的形式返回</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Put*/</span><br><span class="line">/*修改汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.put(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      console.log(req.body);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:parseInt(car.id)&#125;);  //根据id获得车在集合中的下标</span><br><span class="line"></span><br><span class="line">      cars[index]=car;  //替换原对象</span><br><span class="line">      //res.json(car);  //将修改后的车以json的形式返回</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;更新成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Delete*/</span><br><span class="line">/*删除汽车*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.delete(&apos;/id/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">      //获得url中的编号参数</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:id&#125;);  //根据id获得车在集合中的下标</span><br><span class="line">      cars.splice(index,1);   //在cars数组中删除下标从index开始的1条数据</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;删除成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>示例代码app.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line">var pdts = require(&apos;./routes/product&apos;);</span><br><span class="line">var task = require(&apos;./routes/task&apos;);</span><br><span class="line">var cars = require(&apos;./routes/cars&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line">app.use(&apos;/pdt&apos;, pdts);</span><br><span class="line">app.use(&quot;/task&quot;,task);</span><br><span class="line">app.use(&quot;/cars&quot;,cars);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得所有汽车  </li><li>url /cars/</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b27eb42dea22132.jpg" alt></p><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得汽车通过id</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b28e456cdf58111.jpg" alt></p><blockquote><p><strong>Post</strong></p></blockquote><ul><li>添加汽车  </li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b30e46f28836556.jpg" alt></p><p>参数中的json格式一定要使用标准格式，注意引号，注意Content-Type，默认的Content-Type类型是：application/x-www-form-urlencoded</p><blockquote><p><strong>Put</strong></p></blockquote><ul><li>修改汽车</li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3434410e778260.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b344cd080581595.jpg" alt></p><blockquote><p><strong>Delete</strong>  </p></blockquote><ul><li>删除汽车</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3526d5bff57574.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b35474e9c447189.jpg" alt></p><p><strong>node.js跨域</strong></p><p>修改app.js文件拦截所有的请求，修改头部</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">app.all(&apos;*&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">    res.header(&quot;X-Powered-By&quot;, &apos; 3.2.1&apos;);</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);</span><br><span class="line">    if(req.method == &quot;OPTIONS&quot;) &#123;</span><br><span class="line">        res.send(&quot;200&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2017.cnblogs.com/blog/63651/201801/63651-20180108142729785-1121920664.png" alt></p><h1 id="九、视频"><a href="#九、视频" class="headerlink" title="九、视频"></a>九、<a href="https://www.bilibili.com/video/av17977069" target="_blank" rel="noopener">视频</a></h1><p>From: <a href="https://www.cnblogs.com/best/p/6204116.html" target="_blank" rel="noopener">https://www.cnblogs.com/best/p/6204116.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Node.js" scheme="https://www.policx.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hexo front-matter 怎么写？</title>
    <link href="https://www.policx.com/blog/front-matter/"/>
    <id>https://www.policx.com/blog/front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-08-15T14:03:39.978Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr><tr><td>link</td><td>点击文章跳转地址</td><td></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/news/iOSYear/"/>
    <id>https://www.policx.com/news/iOSYear/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-08-15T01:48:07.226Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">hackernoon</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/news/BitTorrent/"/>
    <id>https://www.policx.com/news/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/notes/partner/"/>
    <id>https://www.policx.com/notes/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-08-15T01:05:38.683Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
      <category term="notes" scheme="https://www.policx.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/news/harddisk/"/>
    <id>https://www.policx.com/news/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/news/2019/"/>
    <id>https://www.policx.com/news/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
</feed>
