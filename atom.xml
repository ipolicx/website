<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://im.policx.com/"/>
  <updated>2019-07-08T15:20:42.744Z</updated>
  <id>https://im.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://im.policx.com/2019/07/05/BitTorrent/"/>
    <id>https://im.policx.com/2019/07/05/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-08T15:20:42.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://im.policx.com/2019/07/04/partner/"/>
    <id>https://im.policx.com/2019/07/04/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-08T03:27:19.057Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://im.policx.com/2019/06/18/harddisk/"/>
    <id>https://im.policx.com/2019/06/18/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-08T15:20:35.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://im.policx.com/2019/06/05/2019/"/>
    <id>https://im.policx.com/2019/06/05/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-09T16:25:59.146Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="https://www.policx.com/talk/images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://im.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://im.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://im.policx.com/2019/05/01/netlify/"/>
    <id>https://im.policx.com/2019/05/01/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-09T14:42:24.647Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。</p><div id="bushu"></div># 部署进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。接下来我分步骤的跟大家来介绍我的部署方案。<h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://im.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://im.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://im.policx.com/2019/05/01/hexo-theme-icarus/"/>
    <id>https://im.policx.com/2019/05/01/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-09T14:25:12.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><ul><li>原文链接—&gt; <a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">easyhexo.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://im.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://im.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="https://im.policx.com/2018/09/17/git-del/"/>
    <id>https://im.policx.com/2018/09/17/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-07T04:27:26.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://im.policx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="https://im.policx.com/2018/06/19/python-excel/"/>
    <id>https://im.policx.com/2018/06/19/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-07T04:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://im.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="https://im.policx.com/2018/06/17/python-writer/"/>
    <id>https://im.policx.com/2018/06/17/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-07T04:36:07.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://im.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="https://im.policx.com/2018/06/05/2018/"/>
    <id>https://im.policx.com/2018/06/05/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-09T16:25:08.105Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="https://www.policx.com/talk/images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://im.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://im.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="https://im.policx.com/2018/05/02/pymongo/"/>
    <id>https://im.policx.com/2018/05/02/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-07T04:35:29.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://im.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://im.policx.com/2018/05/02/mongodb/"/>
    <id>https://im.policx.com/2018/05/02/mongodb/</id>
    <published>2018-05-02T06:11:11.000Z</published>
    <updated>2019-07-07T04:23:34.820Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。</p><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库。</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。通常情况下，在一个集合中的所有文件都是类似或相关目的。</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。<br>下面给出的示例显示了一个博客网站，仅仅是一个逗号分隔的键值对的文档结构。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorial&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,20,2,15),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My second comments&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,25,7,45),</span><br><span class="line">         like: 5</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>MongoDB use DATABASE_NAME 用于创建数据库。该命令如果数据库不存在，将创建一个新的数据库， 否则将返回现有的数据库。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>use DATABASE语句的基本语法如下：<br><code>use DATABASE_NAME</code></p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">如果想创建一个数据库名称为 &lt;mydb&gt;, 那么 use DATABASE 语句应该如下：</span><br><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line"></span><br><span class="line">要检查当前选择的数据库使用命令 db</span><br><span class="line">&gt;db</span><br><span class="line">mydb</span><br><span class="line"></span><br><span class="line">如果想查询数据库列表，那么使用命令 show dbs.</span><br><span class="line">&gt;show dbs</span><br><span class="line">local     0.78125GB</span><br><span class="line">test      0.23012GB</span><br><span class="line"></span><br><span class="line">所创建的数据库（mydb）不存在于列表中。要显示的数据库，需要至少插入一个文档进去。</span><br><span class="line">&gt;db.movie.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;)</span><br><span class="line">&gt;show dbs</span><br><span class="line">local      0.78125GB</span><br><span class="line">mydb       0.23012GB</span><br><span class="line">test       0.23012GB</span><br></pre></td></tr></table></figure><p>MongoDB的默认数据库是test。 如果没有创建任何数据库，那么集合将被保存在测试数据库。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>MongoDB db.dropDatabase() 命令用于删除现有的数据库。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>dropDatabase()指令的基本语法如下：<br><code>db.dropDatabase()</code></p><p>这将删除选定的数据库。如果没有选择任何数据库，那么它会删除默认的“test”数据库</p><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>如果想删除新的数据库 <mydb>, 那么 dropDatabase() 命令将如下所示：</mydb></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;&#123; &quot;dropped&quot; : &quot;mydb&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>MongoDB 的 db.createCollection(name, options) 用于创建集合。 在命令中, name 是要创建集合的名称。 Options 是一个文档，用于指定集合的配置</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>String</td><td>要创建的集合的名称</td></tr><tr><td>Options</td><td>Document</td><td>（可选）指定有关内存大小和索引选项</td></tr></tbody></table><p>选项参数是可选的，所以需要指定集合的唯一名字。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>createCollection()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt;db.createCollection(&quot;mycollection&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以通过使用 show collections 命令来检查创建的集合</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;show collections</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><h3 id="选项列表"><a href="#选项列表" class="headerlink" title="选项列表"></a>选项列表</h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。</td></tr><tr><td>autoIndexID</td><td>Boolean</td><td>（可选）如果为true，自动创建索引_id字段。默认的值是 false.</td></tr><tr><td>size</td><td>number</td><td>（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。</td></tr><tr><td>max</td><td>number</td><td>（可选）指定上限集合允许的最大文件数。</td></tr></tbody></table><p>尽管插入文档，MongoDB首先检查字段集合的上限大小，那么它会检查最大字段。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法 :"></a>语法 :</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexID : true, size : 6142800, max : 10000 &#125; )</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.yiibai.insert(&#123;&quot;name&quot; : &quot;yiibai&quot;&#125;)</span><br><span class="line">&gt;show collections</span><br><span class="line">mycol</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br><span class="line">yiibai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>MongoDB 的 db.collection.drop() 用于从数据库中删除集合。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>drop() 命令的基本语法如下<br><code>db.COLLECTION_NAME.drop()</code></p><h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>下面给出的例子将删除给定名称的集合：mycollection</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.mycollection.drop()</span><br><span class="line">true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p>将数据插入到MongoDB集合，需要使用MongoDB 的 insert() 方法。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>insert()命令的基本语法如下：<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.insert(&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c),</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里 mycol 是我们的集合名称，它是在之前的教程中创建。如果集合不存在于数据库中，那么MongoDB创建此集合，然后插入文档进去。</p><p>在如果我们不指定_id参数插入的文档，那么 MongoDB 将为文档分配一个唯一的ObjectId。</p><p>_id 是12个字节十六进制数在一个集合的每个文档是唯一的。 12个字节被划分如下：<br>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</p><p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.post.insert([</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;NoSQL Database&apos;, </span><br><span class="line">   description: &apos;NoSQL database doesn&apos;t have tables&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 20, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p>要从集合查询MongoDB数据，需要使用MongoDB的 find()方法。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find()</code><br>find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p><code>&gt;db.mycol.find().pretty()</code></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>除了find()方法还有findOne()方法，仅返回一个文档。</p><h3 id="RDBMS-Where子句等效于MongoDB"><a href="#RDBMS-Where子句等效于MongoDB" class="headerlink" title="RDBMS Where子句等效于MongoDB"></a>RDBMS Where子句等效于MongoDB</h3><p>查询文档在一些条件的基础上，可以使用下面的操作</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>Equality</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td>db.mycol.find({“by”:”yiibai tutorials”}).pretty()</td><td>where by = ‘yiibai tutorials’</td></tr><tr><td>Less Than</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>Less Than Equals</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>Greater Than</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>Greater Than Equals</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>Not Equals</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="AND-在-MongoDB"><a href="#AND-在-MongoDB" class="headerlink" title="AND 在 MongoDB"></a>AND 在 MongoDB</h4><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>在 find()方法，如果您传递多个键通过”,”将它们分开，那么MongoDB对待它就如AND条件一样。基本语法如下所示：<br><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有教程含“yiibai tutorials”和其标题是“MongoDB Overview”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;yiibai tutorials&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>对于上面给出的例子相当于where子句：’ where by=’yiibai tutorials’ AND title=’MongoDB Overview’ ‘。可以传递任何数目的键-值对在find子句。</p><h4 id="OR-在-MongoDB"><a href="#OR-在-MongoDB" class="headerlink" title="OR 在 MongoDB"></a>OR 在 MongoDB</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><p>要查询基于OR条件的文件，需要使用$or关键字。OR的基本语法如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有撰写含有 ‘yiibai tutorials’ 或是标题为 ‘MongoDB Overview’ 的教程</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-AND-和-OR-在一起"><a href="#使用-AND-和-OR-在一起" class="headerlink" title="使用 AND 和 OR 在一起"></a>使用 AND 和 OR 在一起</h4><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子显示有喜欢数大于100 的文档，其标题要么是 ‘MongoDB Overview’ 或 ‘yiibai tutorials’. 等效于SQL的where子句：’where likes&gt;10 AND (by = ‘yiibai tutorials’ OR title = ‘MongoDB Overview’)’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai tutorials&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>MongoDB的update()和save()方法用于更新文档到一个集合。 update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。</p><h4 id="MongoDB-Update-方法"><a href="#MongoDB-Update-方法" class="headerlink" title="MongoDB Update() 方法"></a>MongoDB Update() 方法</h4><h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><p>update()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br></pre></td></tr></table></figure><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将设置其标题“MongoDB Overview”的文件为新标题为“New MongoDB Tutorial”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Tutorial Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 ‘multi’ 设置为 true。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="MongoDB-Save-方法"><a href="#MongoDB-Save-方法" class="headerlink" title="MongoDB Save() 方法"></a>MongoDB Save() 方法</h4><p>save() 方法取代，通过新文档到 save()方法</p><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><p>mongodb 的 save()方法如下所示的基本语法：<br><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><p>下面的例子将替换该文件_id ‘5983548781331adf45ec7’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.save(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>MongoDB 的 remove()方法用于从集合中删除文档。remove()方法接受两个参数。一个是标准缺失，第二是justOne标志<br>deletion criteria : 根据文件（可选）删除条件将被删除。<br>justOne : （可选）如果设置为true或1，然后取出只有一个文档。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>remove()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p><h6 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h6><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将删除所有的文件，其标题为 ‘MongoDB Overview’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Toturials Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="只删除一个"><a href="#只删除一个" class="headerlink" title="只删除一个"></a>只删除一个</h5><p>如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。<br><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p><h5 id="删除所有文件"><a href="#删除所有文件" class="headerlink" title="删除所有文件"></a>删除所有文件</h5><p>如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove()</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="MongoDB投影"><a href="#MongoDB投影" class="headerlink" title="MongoDB投影"></a>MongoDB投影</h4><p>mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。</p><p>MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。</p><p>语法</p><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find({},{KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示文档的标题，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意在执行find()方法时_id字段始终显示，如果不想要显示这个字段，那么需要将其设置为0</p><h5 id="限制文档"><a href="#限制文档" class="headerlink" title="限制文档"></a>限制文档</h5><p>MongoDB Limit() 方法</p><p>要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p>limit()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER)</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将只显示2个文档，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>如果不指定 limit()方法的参数数量，然后它会显示集合中的所有文档。</p><p>MongoDB Skip() 方法</p><p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。</p><p>语法</p><p>skip() 方法的基础语法如下所示：<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p><p>例子：</p><p>下面的例子将仅显示第二个文档。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，skip() 方法的默认值是 0</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p>要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。</p><p>语法</p><p>sort()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().sort({KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有如下数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示的文件排序按标题降序排序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;title&quot;:-1&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果不指定排序类型，那么 sort() 方法将以升序排列文档。</p><h4 id="MongoDB索引"><a href="#MongoDB索引" class="headerlink" title="MongoDB索引"></a>MongoDB索引</h4><p>索引支持查询高效率执行。如果没有索引，MongoDB必须扫描集合中的每一个文档，然后选择那些符合查询语句的文档。若需要 mongod 来处理大量数据，扫描是非常低效的。</p><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。</p><p>要创建索引，需要使用MongoDB的ensureIndex()方法。</p><p>语法</p><p>ensureIndex()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code></p><p>这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.</p><p>例子</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">在 ensureIndex()方法，可以通过多个字段，来创建多个字段索引。</span><br><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法还接受选项列表（这是可选），其列表如下：<br><img src="https://policx.github.io/post-images/1561132706992.png" alt></p><h4 id="MongoDB-聚合"><a href="#MongoDB-聚合" class="headerlink" title="MongoDB 聚合"></a>MongoDB 聚合</h4><p>聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。 在SQL中的count(*)，使用group by 与mongodb的聚合是等效的。 对于MongoDB的聚合，使用的是aggregate()方法。</p><p>语法</p><p>aggregate()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p><p>例子：</p><p>在集合中有以下数据：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai &apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;, </span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;, </span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;http://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在从上面的集合，如果想知道每一个用户编写的教程是多少，那么使用aggregate()方法，如下图所示的列表：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Yiibai Yiibai&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>用于上述用途将等效于sql查询： select by_user, count(*) from mycol group by by_user</code></pre><p>另外，在上述例子中，我们已经使用字段by_user进行分组并计算总和，也就是by_user 出现各个次数。一个列表中可用的聚集表达式。<br>    <img src="https://policx.github.io/post-images/1561132965786.png" alt></p><h4 id="MongoDB-复制"><a href="#MongoDB-复制" class="headerlink" title="MongoDB 复制"></a>MongoDB 复制</h4><p>复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。</p><h6 id="为什么要复制？"><a href="#为什么要复制？" class="headerlink" title="为什么要复制？"></a>为什么要复制？</h6><blockquote><pre><code>为了让数据安全数据的高（24*7）可用性灾难恢复无停机维护（如备份，索引重建，压缩）读取缩放（额外的副本来读取）副本集是透明的应用</code></pre></blockquote><h5 id="MongoDB复制的工作原理"><a href="#MongoDB复制的工作原理" class="headerlink" title="MongoDB复制的工作原理"></a>MongoDB复制的工作原理</h5><p>MongoDB通过使用副本集的复制来实现。副本集是一组承载同一个数据集的mongod实例。在副本的一个节点是接收所有的写操作主节点。所有的实例，次级，应用操作从主以便它们具有相同的数据集。副本集只能有一个主节点。</p><blockquote><pre><code>副本集是一组两个或更多个节点（通常至少3节点是必需的）。在副本集一个节点是主节点和其余的节点都是次要的。所有的数据复制是从主到次节点。在自动故障转移或维护时，选建立了主要和一个新的主节点被选择。故障节点的恢复后，再次加入副本集，并可以作为一个辅助节点。</code></pre></blockquote><p>mongodb复制的典型图如下图，其中客户端应用程序总是与主节点和主节点交互，然后将数据复制到辅助节点。<br><img src="https://policx.github.io/post-images/1561133216694.png" alt><br>副本集特征</p><ul><li>N个节点的集群</li><li>任何节点可为原发/主节点</li><li>所有的写操作进入到主节点</li><li>自动故障转移</li><li>自动恢复</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://im.policx.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MySQL 之间的交互</title>
    <link href="https://im.policx.com/2018/05/02/pymysql/"/>
    <id>https://im.policx.com/2018/05/02/pymysql/</id>
    <published>2018-05-02T03:14:27.000Z</published>
    <updated>2019-07-07T04:35:38.926Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是-PyMySQL？"><a href="#什么是-PyMySQL？" class="headerlink" title="什么是 PyMySQL？"></a>什么是 PyMySQL？</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><a id="more"></a> <h2 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h2><p>在文件中引入模块</p><p><code>import pymysql</code></p><h3 id="1-Connection对象"><a href="#1-Connection对象" class="headerlink" title="1.Connection对象"></a>1.Connection对象</h3><p>•  用于建立与数据库的连接<br>•  创建对象：调用connect()方法<br>conn=connect(参数列表)<br>•  参数host：连接的mysql主机，如果本机是’localhost’<br>•  参数port：连接的mysql主机的端口，默认是3306<br>•  参数db：数据库的名称<br>•  参数user：连接的用户名<br>•  参数password：连接的密码<br>•  参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</p><h3 id="2-对象的方法"><a href="#2-对象的方法" class="headerlink" title="2.对象的方法"></a>2.对象的方法</h3><p>•  close()关闭连接<br>•  commit()事务，所以需要提交才会生效<br>•  rollback()事务，放弃之前的操作<br>•  cursor()返回Cursor对象，用于执行sql语句并获得结果</p><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><p>•  执行sql语句<br>•  创建对象：调用Connection对象的cursor()方法<br>cursor1=conn.cursor()</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>•  close()关闭<br>•  execute(operation [, parameters ])执行语句，返回受影响的行数<br>•  fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组<br>•  next()执行查询语句时，获取当前行的下一行<br>•  fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回<br>•  scroll(value[,mode])将行指针移动到某个位置<br>•  mode表示移动的方式<br>•  mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动。相对的<br>•  mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0，绝对的。</p><h4 id="举个例子便于理解"><a href="#举个例子便于理解" class="headerlink" title="举个例子便于理解"></a>举个例子便于理解</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 导入python操作mysql的模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> pymysql</span><br><span class="line"><span class="hljs-comment"># 获取连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="hljs-string">'127.0.0.1'</span>, user=<span class="hljs-string">'root'</span>, password=<span class="hljs-string">'123456'</span>, database=<span class="hljs-string">'python01'</span>, port=<span class="hljs-number">3306</span>, charset=<span class="hljs-string">'utf8'</span>)</span><br><span class="line"><span class="hljs-comment"># 获取执行工具</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="hljs-comment"># sql语句,增删改</span></span><br><span class="line"><span class="hljs-comment">#sql = 'select birthday from t_user'</span></span><br><span class="line">sql = <span class="hljs-string">'select id,name,pwd,birthday from t_user'</span></span><br><span class="line"><span class="hljs-comment"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span></span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(<span class="hljs-string">'查询的结果有%s条数据'</span>%count)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取第一行</span></span><br><span class="line">dateOne = cur.fetchone()</span><br><span class="line">print(dateOne)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向上移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向下移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'absolute'</span>)   绝对的，这里指的是第一行</span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'relative'</span>)   相对的</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取所有行的数据</span></span><br><span class="line">dataAll = cur.fetchall()</span><br><span class="line">print(dataAll)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">     print(temp)</span><br><span class="line">     print(dataAll[<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])      <span class="hljs-comment">#dataAll[-1]得到的是一个用户所有的信息，dataAll[-1][2]获取最后一个人的密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> cur:</span><br><span class="line">     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-string">'id:%s,name:%s,pwd:%s,birthday:%s'</span></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">    print(s%(temp[<span class="hljs-number">0</span>],temp[<span class="hljs-number">1</span>],temp[<span class="hljs-number">2</span>],temp[<span class="hljs-number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-对象的属性"><a href="#3-对象的属性" class="headerlink" title="3.对象的属性"></a>3.对象的属性</h3><p>•  rowcount只读属性，表示最近一次execute()执行后受影响的行数<br>•  connection获得当前连接对象</p><h3 id="2-增删改查-CRUD"><a href="#2-增删改查-CRUD" class="headerlink" title="2.增删改查(CRUD)"></a>2.增删改查(CRUD)</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>•  创建testInsert.py文件，向学生表中插入一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;insert into students(sname) values(&apos;张良&apos;)&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p>•  创建testUpdate.py文件，修改学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;update students set sname=&apos;刘邦&apos; where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>•  创建testDelete.py文件，删除学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8 import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;delete from students where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>•  创建testSelectOne.py文件，查询一条学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Pymysql try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>•  创建testSelectMany.py文件，查询全部学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf8 import Pymysql</span><br><span class="line">try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="实例一：参数"><a href="#实例一：参数" class="headerlink" title="实例一：参数"></a>实例一：参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改，sql注入</span><br><span class="line">sql = &apos;insert into t_user(name,pwd,birthday) values(%s,%s,%s)&apos;</span><br><span class="line"># 参数列表</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = input(&apos;输入生日:&apos;)     # 2017年10月01日--&gt;日期struct_time(---&gt;2017-10-01)</span><br><span class="line">birthday = time.strptime(birthday,&apos;%Y年%m月%d日&apos;)      #这里我们就用到了时间与字符串的相互转换(详情见MySQL高级)</span><br><span class="line"></span><br><span class="line">params = [name,pwd,birthday]</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql,params)</span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">print(&apos;受影响的行数:%s&apos;%count)</span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例二：抛出异常"><a href="#实例二：抛出异常" class="headerlink" title="实例二：抛出异常"></a>实例二：抛出异常</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    conn = None</span><br><span class="line">    cur = None</span><br><span class="line">    # 获取连接对象</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">                           user=&apos;root&apos;,</span><br><span class="line">                           password=&apos;123456&apos;,</span><br><span class="line">                           database=&apos;python01&apos;,</span><br><span class="line">                           port=3306,</span><br><span class="line">                           charset=&apos;utf8&apos;)</span><br><span class="line">    # 模拟异常</span><br><span class="line">    # a = 1 / 0</span><br><span class="line">    # 获取执行工具</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    # sql语句,增删改</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd,birthday) values(&quot;小伊&quot;,&quot;123456&quot;,str_to_date(&quot;2017年10月20日&quot;,&quot;%Y年%m月%d日&quot;))&apos;</span><br><span class="line">    # 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">    count = cur.execute(sql)</span><br><span class="line">    # 提交</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(&apos;受影响的行数:%s&apos; % count)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    # 打印异常信息，测试时候使用，项目上线，去掉</span><br><span class="line">    print(str(ex))</span><br><span class="line">    # 将异常继续抛出</span><br><span class="line">    # raise</span><br><span class="line">finally:</span><br><span class="line">    if cur != None:</span><br><span class="line">        cur.close()</span><br><span class="line">    if conn != None:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例三："><a href="#实例三：" class="headerlink" title="实例三："></a>实例三：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改</span><br><span class="line">#sql = &apos;select birthday from t_user&apos;</span><br><span class="line">sql = &apos;select id,name,pwd,birthday from t_user&apos;</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(&apos;查询的结果有%s条数据&apos;%count)</span><br><span class="line"></span><br><span class="line">#获取第一行</span><br><span class="line"># dateOne = cur.fetchone()</span><br><span class="line"># print(dateOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for temp in cur:</span><br><span class="line">#     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;id:%s,name:%s,pwd:%s,birthday:%s&apos;</span><br><span class="line">for temp in dataAll:</span><br><span class="line">    print(s%(temp[0],temp[1],temp[2],temp[3]))</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h3><p>这个库的名字：mySqlHelper</p><p> python操作mysql进行增删改查的封装</p><pre><code>1、增删改，代码类似2、查询代码分析1、获取连接对象2、sql语句不同，参数不同3、获取执行对象    增删改    查询        1、fetchone        2、fetchall4、处理结果5、关闭</code></pre><h4 id="面向对象-建立类，封装属性和函数"><a href="#面向对象-建立类，封装属性和函数" class="headerlink" title="面向对象  建立类，封装属性和函数"></a>面向对象  建立类，封装属性和函数</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">class MysqlHelper:</span><br><span class="line">    &apos;&apos;&apos;python操作mysql的增删改查的封装&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, host, user, password, database, port=3306, charset=&apos;utf8&apos;):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化参数</span><br><span class="line">        :param host:        主机</span><br><span class="line">        :param user:        用户名</span><br><span class="line">        :param password:    密码</span><br><span class="line">        :param database:    数据库</span><br><span class="line">        :param port:        端口号，默认是3306</span><br><span class="line">        :param charset:     编码，默认是utf8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        获取连接对象和执行对象</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.conn = pymysql.connect(host=self.host,</span><br><span class="line">                                    user=self.user,</span><br><span class="line">                                    password=self.password,</span><br><span class="line">                                    database=self.database,</span><br><span class="line">                                    port=self.port,</span><br><span class="line">                                    charset=self.charset)</span><br><span class="line"></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    def fetchone(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数元组，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataOne = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataOne = self.cur.fetchone()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataOne</span><br><span class="line"></span><br><span class="line">    def fetchall(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数列表，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataall = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataall = self.cur.fetchall()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataall</span><br><span class="line"></span><br><span class="line">    def __item(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行增删改</span><br><span class="line">        :param sql:           sql语句</span><br><span class="line">        :param params:        sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:              受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        count = 0</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行修改</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def insert(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行新增</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def delete(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行删除</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        关闭执行工具和连接对象</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if self.cur != None:</span><br><span class="line">            self.cur.close()</span><br><span class="line">        if self.conn != None:</span><br><span class="line">            self.conn.close()</span><br></pre></td></tr></table></figure><h4 id="1-测试查询多条数据"><a href="#1-测试查询多条数据" class="headerlink" title="1.测试查询多条数据"></a>1.测试查询多条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where name = %s and id &gt; %s&apos;</span><br><span class="line"># params</span><br><span class="line">params = [&apos;小茗&apos;,1]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchall(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    for temp in data:</span><br><span class="line">        print(temp)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br><span class="line"></span><br><span class="line">helper.close()</span><br></pre></td></tr></table></figure><h4 id="2-测试查询一条数据"><a href="#2-测试查询一条数据" class="headerlink" title="2.测试查询一条数据"></a>2.测试查询一条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where id = %s&apos;</span><br><span class="line">#sql = &apos;select * from t_user where id = 1&apos;</span><br><span class="line"># params</span><br><span class="line">params = [2]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchone(sql, params)</span><br><span class="line">#data = helper.fetchone(sql)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    print(data)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br></pre></td></tr></table></figure><h4 id="3-测试增删改"><a href="#3-测试增删改" class="headerlink" title="3.测试增删改"></a>3.测试增删改</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;update t_user set name =%s,pwd=%s,birthday=%s where id=%s&apos;</span><br><span class="line"># params</span><br><span class="line">id = input(&apos;输入编号:&apos;)</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = time.strptime(input(&apos;输入生日:&apos;), &apos;%Y年%m月%d日&apos;)</span><br><span class="line">params = [name, pwd, birthday,id]</span><br><span class="line"># 执行</span><br><span class="line">count = helper.update(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if count:</span><br><span class="line">    print(&apos;操作成功.&apos;)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;操作失败.&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-登录和注册"><a href="#4-登录和注册" class="headerlink" title="4.登录和注册"></a>4.登录和注册</h4><p>登录和注册的时候需要对密码进行加密</p><p>注意：</p><p>•  需要对密码进行加密<br>•  如果使用md5加密，则密码包含32个字符<br>•  如果使用sha1加密，则密码包含40个字符，这里使用这种方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table userinfos(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    uname varchar(20),</span><br><span class="line">    upwd char(40),</span><br><span class="line">    isdelete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">ret = doPwd(&apos;123&apos;)</span><br><span class="line">print(ret)</span><br><span class="line">结果：40bd001563085fc35165329ea1ff5c5ecbdbbeef</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">-- 插入如下数据，用户名为123,密码为123,这是sha1加密后的值</span><br><span class="line"></span><br><span class="line">insert into userinfos </span><br><span class="line">values(1,&apos;123&apos;,&apos;40bd001563085fc35165329ea1ff5c5ecbdbbeef&apos;,0);</span><br></pre></td></tr></table></figure><h4 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from mysqlHelper import MysqlHelper</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    &apos;&apos;&apos;登录&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    #加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;select * from t_user where name=%s and pwd=%s&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    data = helper.fetchone(sql, params)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;登录成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;登录失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doPwd(pwd):</span><br><span class="line">    &apos;&apos;&apos;sha1编码&apos;&apos;&apos;</span><br><span class="line">    mysha1 = hashlib.sha1()</span><br><span class="line">    mysha1.update(pwd.encode(&apos;utf-8&apos;))</span><br><span class="line">    pwd = mysha1.hexdigest()</span><br><span class="line">    return pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    &apos;&apos;&apos;注册&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    # 加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd) values(%s,%s)&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    count = helper.insert(sql, params)</span><br><span class="line">    if count:</span><br><span class="line">        print(&apos;操作成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;操作失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #register()</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PyMySQL？&quot;&gt;&lt;a href=&quot;#什么是-PyMySQL？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PyMySQL？&quot;&gt;&lt;/a&gt;什么是 PyMySQL？&lt;/h2&gt;&lt;p&gt;PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。&lt;/p&gt;
&lt;p&gt;PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://im.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django笔记</title>
    <link href="https://im.policx.com/2018/04/18/django-bi-ji/"/>
    <id>https://im.policx.com/2018/04/18/django-bi-ji/</id>
    <published>2018-04-17T17:00:16.000Z</published>
    <updated>2019-07-09T16:34:34.179Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p><a id="more"></a><h2 id="一-版本选择"><a href="#一-版本选择" class="headerlink" title="一. 版本选择"></a>一. 版本选择</h2><p>Django 2.0.x 支持 Python 3.4, 3.5 和 3.6 （注意，不再支持 Python 2）   </p><h2 id="二-安装-Django"><a href="#二-安装-Django" class="headerlink" title="二. 安装 Django"></a><strong>二. 安装 Django</strong></h2><p><strong>2.1. 用 pip 来安装</strong></p><p><strong>2.1.1 需要先安装pip</strong></p><p>(1). Linux, Mac OSX, Windows 下都可用 get-pip.py 来安装<br>pip：<a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/installing.html</a>  </p><p>或者直接下载：<a href="https://bootstrap.pypa.io/get-pip.py" title="get-pip.py" target="_blank" rel="noopener">get-pip.py</a> 然后运行在终端运行 <strong>python get-pip.py 就可以安装 pip。</strong></p><p>Note: 也可以下载 pip 源码包，运行 <strong>python setup.py install</strong> 进行安装 </p><p><strong>2.1.2 利用 pip 安装 Django</strong></p><p><code>（sudo) pip install Django    或者(sudo) pip install Django==1.8.16 或者 pip install Django==1.11.8</code>    </p><p>如果想升级 pip 可以用： </p><pre><code>(sudo) pip install --upgrade pip</code></pre><p><strong>2.2. 下载源码安装</strong>  </p><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">https://www.djangoproject.com/download/</a></p><p>如果是源码包, 比如 django-1.11.8.tar.gz </p><p><strong>2.2.1 Linux 或 Mac 下</strong></p><pre><code>tar -xvf django-1.11.8.tar.gzcd django-1.11.8(sudo) python setup.py install</code></pre><h2 id="三-检查是否安装成功"><a href="#三-检查是否安装成功" class="headerlink" title="三. 检查是否安装成功"></a><strong>三. 检查是否安装成功</strong></h2><p>终端上输入 python ,点击 Enter，进行 python 环境</p><pre><code>&gt;&gt;&gt; import django&gt;&gt;&gt; django.VERSION(1, 11, 8, &apos;final&apos;, 0)&gt;&gt;&gt; &gt;&gt;&gt; django.get_version()&apos;1.11.8&apos;</code></pre><p>如果运行后看到版本号，就证明安装成功了！ </p><h2 id="四-搭建多个互不干扰的开发环境（可选）"><a href="#四-搭建多个互不干扰的开发环境（可选）" class="headerlink" title="四. 搭建多个互不干扰的开发环境（可选）"></a><strong>四. 搭建多个互不干扰的开发环境（可选）</strong></h2><p>我们有的时候会发现，一个电脑上有多个项目，一个依赖 Django 1.8，另一个比较旧的项目又要用 Django 1.5，这时候怎么办呢？ </p><p>我们需要一个依赖包管理的工具来处理不同的环境。 </p><h3 id="4-1-虚拟环境依赖安装"><a href="#4-1-虚拟环境依赖安装" class="headerlink" title="4.1 虚拟环境依赖安装"></a>4.1 虚拟环境依赖安装</h3><p>开发会用 virtualenv 来管理多个开发环境 </p><p><strong>Linux/MacOS 下</strong></p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了 </p><pre><code># 安装:(sudo) pip install virtualenv virtualenvwrapper</code></pre><p>修改~/.bash_profile或其它环境变量相关文件(如 .bashrc 或用 ZSH 之后的 .zshrc)，添加以下语句  </p><pre><code>export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/workspacesource /usr/local/bin/virtualenvwrapper.sh</code></pre><p>修改后使之立即生效(也可以重启终端使之生效)： </p><pre><code>source ~/.bash_profile</code></pre><h3 id="4-2-虚拟环境使用方法："><a href="#4-2-虚拟环境使用方法：" class="headerlink" title="4.2 虚拟环境使用方法："></a><strong>4.2 虚拟环境使用方法：</strong></h3><p><strong>mkvirtualenv zqxt：创建运行环境zqxt</strong></p><p><strong>workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境</strong></p><p><strong>deactivate</strong>: 退出终端环境</p><p><strong>其它的：</strong></p><p><strong>rmvirtualenv</strong> ENV：删除运行环境ENV </p><p><strong>mkproject</strong> mic：创建mic项目和运行环境mic </p><p><strong>mktmpenv</strong>：创建临时运行环境 </p><p><strong>lsvirtualenv</strong>: 列出可用的运行环境 </p><p><strong>lssitepackages</strong>: 列出当前环境安装了的包 </p><p>创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://im.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://im.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django部署——uwsgi+Nginx</title>
    <link href="https://im.policx.com/2018/04/17/django/"/>
    <id>https://im.policx.com/2018/04/17/django/</id>
    <published>2018-04-17T09:42:04.000Z</published>
    <updated>2019-07-09T16:34:50.272Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!</p><a id="more"></a><p><img src="https://policx.github.io/post-images/1560768371650.png" alt><br>环境：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3.6</span><br><span class="line">centos 7</span><br><span class="line">Django1.11</span><br></pre></td></tr></table></figure><h2 id="1、本地跑起来Django"><a href="#1、本地跑起来Django" class="headerlink" title="1、本地跑起来Django"></a>1、本地跑起来Django</h2><p>这里不讲Django项目实施过程，假设你已经写了一个Django项目，并且在本地127.0.0.1:8000能够跑起来。喏，给你个参考，项目大概长这样：<br><img src="https://policx.github.io/post-images/1560764670814.png" alt></p><ul><li>kindle目录为我创建的Django App</li></ul><h2 id="2、修改项目配置"><a href="#2、修改项目配置" class="headerlink" title="2、修改项目配置"></a>2、修改项目配置</h2><p>也就是项目目录下的settings.py文件，主要强调几个地方：</p><p>①关闭DEBUG模式：<br><img src="https://policx.github.io/post-images/1560764736238.png" alt><br>②修改ALLOWED_HOSTS：<br><img src="https://policx.github.io/post-images/1560764863424.png" alt><br>③配置静态文件存放路径：<br><img src="https://policx.github.io/post-images/1560764833026.png" alt></p><p>修改好配置之后执行:<br><code>python manage.py collectstatic</code><br>将项目用到的静态文件复制到项目根目录下的static文件中<br><img src="https://policx.github.io/post-images/1560764930146.png" alt></p><h2 id="3、安装uwsgi和Nginx"><a href="#3、安装uwsgi和Nginx" class="headerlink" title="3、安装uwsgi和Nginx"></a>3、安装uwsgi和Nginx</h2><p>这个没什么说的。。。在自己的云服务器上装好这两个工具<br>安装好uwsgi后最好验证一下，验证方法：<br>创建一个test.py文件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)])</span><br><span class="line">    return [b&apos;Hello world!&apos;]    #python3</span><br><span class="line">    # return [&apos;Hello world!&apos;]    #python2</span><br></pre></td></tr></table></figure><p>启动uwsgi服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --wsgi-file test.py</span><br></pre></td></tr></table></figure><p>如果可以正常启动而不报错那就应该没问题，不放心的话再在终端验证一下：<br><code>wget http://127.0.0.1:8000</code><br>看一下能否正确获取内容</p><h2 id="4、配置项目的uwsgi"><a href="#4、配置项目的uwsgi" class="headerlink" title="4、配置项目的uwsgi"></a>4、配置项目的uwsgi</h2><p>在项目所在文件夹下创建uwsgi.ini配置文件，也就是这里:<br><img src="https://policx.github.io/post-images/1560765049955.png" alt><br>在uwsgi.ini里进行如下配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># Django-related settings</span><br><span class="line"> </span><br><span class="line"># 这里的端口可以根据自己需要设定</span><br><span class="line">socket = 127.0.0.1:8001        </span><br><span class="line"> </span><br><span class="line"># the base directory (full path)</span><br><span class="line"># 这个是Django项目的根目录，也就是包含App的那个目录，仔细对照上图</span><br><span class="line">chdir           = /home/python/book2kindle</span><br><span class="line"> </span><br><span class="line"># Django s wsgi file</span><br><span class="line"># 这里是项目名(不是App名).wsgi</span><br><span class="line">module          = book2kindle.wsgi</span><br><span class="line"> </span><br><span class="line"># process-related settings</span><br><span class="line"># master</span><br><span class="line">master          = true</span><br><span class="line"> </span><br><span class="line"># maximum number of worker processes</span><br><span class="line">processes       = 32</span><br><span class="line"> </span><br><span class="line"># ... with appropriate permissions - may be needed</span><br><span class="line"># chmod-socket    = 664</span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum          = true</span><br><span class="line"> </span><br><span class="line">plugin python = true</span><br><span class="line"> </span><br><span class="line"># 这个是项目的虚拟python环境，如果没用虚拟环境，可以不设定</span><br><span class="line">home = /home/python/book2kindle_env</span><br></pre></td></tr></table></figure><h2 id="5、配置项目的nginx"><a href="#5、配置项目的nginx" class="headerlink" title="5、配置项目的nginx"></a>5、配置项目的nginx</h2><p>找到nginx的配置文件夹，centos7的nginx配置文件在/etc/nginx下，该路径下有一个nginx.conf总配置文件，还有两个文件夹./conf.d、./default.d，我们将nginx.conf复制一份到conf.d文件夹下，命名为nginx.conf（或者项目名.conf）进行如下修改（根据中文注释进行相应配置即可）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream django &#123;</span><br><span class="line">        # 注意这里的server要和uwsgi.ini配置文件中的socket保持一致</span><br><span class="line">        server 127.0.0.1:8002; # for a web port socket</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  xxx.com;  # 这里填自己的域名或者服务器的ip（决定你今后访问网站的方式）</span><br><span class="line">        charset      utf-8;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        location / &#123;</span><br><span class="line">        root        /home/python/book2kindle/kindle;  # 这是Django App的路径</span><br><span class="line">            uwsgi_pass  django;</span><br><span class="line">            include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">        &#125;</span><br><span class="line">        location /static &#123;</span><br><span class="line">            # Django项目静态文件的路径</span><br><span class="line">            alias /home/python/book2kindle/static; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、启动uwsgi和nginx"><a href="#6、启动uwsgi和nginx" class="headerlink" title="6、启动uwsgi和nginx"></a>6、启动uwsgi和nginx</h2><p>进入uwsgi.ini文件夹下执行：<br><code>uwsgi --ini uwsgi.ini</code><br>在终端执行：<br><code>service nginx restart</code><br>然后就可以根据域名（前提是要将域名解析到服务器ip地址）或者服务器ip来访问网站了！</p><p>OK，完事！就是这么简单！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://im.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://im.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>2018创业记：如何选择合伙人？</title>
    <link href="https://im.policx.com/2018/03/25/chuangye/"/>
    <id>https://im.policx.com/2018/03/25/chuangye/</id>
    <published>2018-03-25T13:02:42.000Z</published>
    <updated>2019-07-07T04:22:05.224Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><a id="more"></a><h2 id="创业路上危机四伏，如何破局？"><a href="#创业路上危机四伏，如何破局？" class="headerlink" title="创业路上危机四伏，如何破局？"></a>创业路上危机四伏，如何破局？</h2></li></ul><p>很多朋友在2018年做出了改变，迈出了新的一步。比如身边几位朋友正摩拳擦掌准备创业。然而，看别人创业和自己创业完全是两回事儿，见得再多，自己趟水时也难免有所顾虑。</p><p>在跟他们聊过之后，我们发现了他们普遍面临的一个课题：如何选择合伙人?这是身经百战的连续创业者也很难驾轻就熟的一个课题，今天我们就来一起聊聊。本文将从能不能和朋友一起创业、合伙人应该与我互补还是相似、如何判断双方是否志同道合、如何应对常见的分歧几个部分展开来说。</p><p>风物长宜放眼量，抱持开阔的胸襟、敏锐的判断、坚韧的意志，相信大家能够与志同道合的伙伴一起，越过山丘，携手站上梦想之巅。</p><h2 id="能不能和朋友一起创业？"><a href="#能不能和朋友一起创业？" class="headerlink" title="能不能和朋友一起创业？"></a>能不能和朋友一起创业？</h2><p>在创业初期，创业者选择合伙人往往会从身边的朋友“下手”。</p><p>一起创业可以说是认清一个朋友的最好方式。一篇名为《友谊的代价》的论文，考察了3510个风险投资者，以及他们在1975-2003年间11895个投资项目。</p><p>论文写道，有的人选择与自己能力相当的人合作，比如同是名校毕业；但更多的人选择与自己的熟人合作，比如曾经的同学或同事。结果表明，按能力搭档可以增加投资的成功概率，而找熟人搭档，则会明显降低成功的可能性。</p><p>所有人都喜欢强联系，但关系是关系，工作归工作。现在社会学已经有了足够多的证据说明：对工作来说，同乡会和校友录并不是扩展人脉的好地方。《中国合伙人》这部电影上映后，“千万别跟好朋友合伙开公司”也成了热议话题。电影的最后，三位合伙人分道扬镳，而剧本的原型——新东方的三位创始人也以“分家”收场。</p><p>当然，朋友合伙创业成功的案例也不在少数，况且，长期的伙伴关系更有助于共同面对创业过程中的艰难险阻，团队也更容易在创业初期获得投资人的青睐。如果在寻找合伙人的过程中，你觉得还是某个朋友更适合，那么一定要在合作之前约法三章，考虑到最坏的情况，提前用书面合同的方式确定双方的责权利，用规章制度来约束指导双方的行为，而不是靠人情关系。</p><p>中间一旦觉得发生了问题，你就必须考虑一下能否继续合作下去。其实，很多合作者走不到最后就是因为中间的小问题没有解决，一点一点积累最后爆发出来。</p><p>因此，能否和朋友一起创业这个问题，需要辩证思考。如果朋友间相互了解对方的个性和能力，工作中能做到分工明确，用规章制度来规范双方的行为，及时解决小矛盾，相互照顾，一起分担，共同奋斗，那么创业成功就会成为大概率事件。</p><h2 id="合伙人应该与我互补还是相似？"><a href="#合伙人应该与我互补还是相似？" class="headerlink" title="合伙人应该与我互补还是相似？"></a>合伙人应该与我互补还是相似？</h2><p>一个较为合理的答案是：理念和价值观上要相似，能力和经验上要互补。</p><p>理念和价值观上的相近，可以保证你们在重大原则问题上的判断是比较一致的，不至于出现根本性的冲突。这些重大的原则问题包括企业的战略方向、利益分配机制、做事的基本底线等等。</p><p>在这些问题上出现不同意见，通常很难取得共识。因为个性和价值观的形成，通常都不是一朝一夕的事情，也就是我们常说的“江山易改，本性难移”。如果在创业的艰难环境下，双方还要来磨合这个层面的东西，就会非常痛苦。</p><p>能力和经验上的互补相对更好理解。你擅长产品，他专于研发；你有丰富的运营经验，他则对于商业模式的建立更有心得；你对数字不敏感，他则是投资和财务领域的资深人士。这些都是很好的互补。</p><p>互补可以让你们在具体事情的推进中事半功倍，并建立起对于对方在专业领域的依靠和信任。人不可能是全能的，如果一切未知的领域都需要你自己来摸索，费时费力不说，风险还很大。</p><p>对于相似还是互补这个问题的解读，还可以反向进行。比如你们是能力经验上的相近，而在理念上互补，你可以想象一下是个什么局面，一定是你不会的他也不会，你觉得对的他觉得不对，那就真的很难合作下去了。</p><h2 id="如何判断双方是否志同道合？"><a href="#如何判断双方是否志同道合？" class="headerlink" title="如何判断双方是否志同道合？"></a>如何判断双方是否志同道合？</h2><p>对于这个问题，不同的人可能会给出非常不同的答案。雷军就曾说过，他找人有两个要素：“一要最专业，小米的合伙人都是各管一块，这样能保证整个决策非常快，把业务交给他，要能实打实做出成绩来；二要最合适，主要是指要有创业心态，对所做的事要极度喜欢，有共同的愿景，这样就会有很强的驱动力。”</p><p>雷军说，他在三个月的时间里见了超过100位做硬件的人选，终于找到了负责硬件的联合创始人周光平博士，两人第一次见面就谈了12个小时。</p><p>而周鸿祎表示，他会选择具备这四种素质的合伙人：首先应该有创业精神；其次要有很强的学习能力；第三，要有很好的开放合作心态；此外，还要能自我激励，自我驱动，同样一件事，用打工的心态和用创业的心态做，效果完全不一样。</p><p>虽然答案因人而异，但仍然可以总结出一些判断标准，以下几条可为你选择合伙人时提供参考。</p><h3 id="1、关系有一定的深度和广度，彼此信任"><a href="#1、关系有一定的深度和广度，彼此信任" class="headerlink" title="1、关系有一定的深度和广度，彼此信任"></a>1、关系有一定的深度和广度，彼此信任</h3><p>共事且维持朋友关系多年的创业团队关系更深，有可能经受住紧张和冲突的考验。合伙人未必需要成为最要好的朋友，但如果他们相互喜欢的话事情可能会更好办些。更重要的是，创始人之间应该尊重彼此以及他们给团队带来的不同能力。不信任合伙人的能力会导致手伸过头，还可能会导致控制权之争。在这种窝里斗的情况下大部分的合作关系都无法维系。</p><h3 id="2、了解彼此的优势和劣势，分工明确"><a href="#2、了解彼此的优势和劣势，分工明确" class="headerlink" title="2、了解彼此的优势和劣势，分工明确"></a>2、了解彼此的优势和劣势，分工明确</h3><p>尊重彼此的技能和优势并不意味着创始人就不需要审视合伙人的弱点了。友谊更久自然也会更了解某人的特长和技能。这些不同的技能有助于创始人团队自然地分清责任、角色，在某些情况下还可以分清头衔。根据每一位合伙人的技能明确划分职责，对创业的帮助很大。做事的时候每个人要有独立的角色，但同时永远要对其他合伙人的反馈持开放态度。</p><h3 id="3、确保所有合伙人对成功和失败的定义一致"><a href="#3、确保所有合伙人对成功和失败的定义一致" class="headerlink" title="3、确保所有合伙人对成功和失败的定义一致"></a>3、确保所有合伙人对成功和失败的定义一致</h3><p>韧性最强的创始人不会从财务的角度去衡量自己的初创企业是否成功，相反，他们会从使命的角度去衡量。他们的初创企业只是追求实现使命的手段。但是，并不是所有的创始人都这么看，甚至一开始关注使命的创始人有时候到后面也会转向考虑财务方面的事情。</p><p>有的创始人可能志存高远，为了尽快做大愿意烧很多钱，而有的人希望逐步打磨产品，限制人数规模和保留现金尺度。不仅对成功的认知会影响运营决策，对失败的认知同样会起作用。</p><p>在创业过程中，其中一位合伙人急着退出的故事屡见不鲜，因此这个教训值得一提再提。对于拥有成功企业的创始人来说，避免在这个问题上发生冲突的关键是定期讨论这件事。应该在公司早期就设定好目标，并且对这个话题进行定期复议。</p><h3 id="4、所有合伙人均应对股权分配满意"><a href="#4、所有合伙人均应对股权分配满意" class="headerlink" title="4、所有合伙人均应对股权分配满意"></a>4、所有合伙人均应对股权分配满意</h3><p>哈佛教授Wasserman发现，73%的联合创业团队一般在公司成立30天内就确定了如何进行股权分配。股权分配当然是任何共同创业的人都要首先考虑的事情之一，但事实上在那个时候，没人知道谁干活最卖力，谁对初创企业的贡献最有价值。过早确定股权分配会导致后面发生问题。如果可以的话，最好等到你有机会了解大家一起工作会是什么个情况后再正式分蛋糕。话虽如此，这件事情还是不要拖太久，围绕股权的分歧最好在公司早期就解决掉。</p><h3 id="5、永远要相互支持"><a href="#5、永远要相互支持" class="headerlink" title="5、永远要相互支持"></a>5、永远要相互支持</h3><p>这话听上去似乎太空泛，但是合伙人的关系也可能会反复无常，尤其是在受到不同观点、董事会成员等的影响下。合伙人之间的相互支持可带来信心，确保合伙人和员工都有共同的使命感。</p><p>团队应该早点理解一件事，任何情况下合伙人之间都应该背靠背相互支持，所以合伙人要尽量避免当着员工、董事会等人的面互相拆台，这样能够让公司其他人感觉到他们友情之牢固，让每一位合伙人都能保持镇定，因为他们知道对方一定会支持自己的。</p><h2 id="如何应对常见的分歧？"><a href="#如何应对常见的分歧？" class="headerlink" title="如何应对常见的分歧？"></a>如何应对常见的分歧？</h2><h3 id="1、公司走向的歧见"><a href="#1、公司走向的歧见" class="headerlink" title="1、公司走向的歧见"></a>1、公司走向的歧见</h3><p>在0到1的探索期，公司的走向往往是由合伙人一起决定的。但进入1到100的扩张期，一个年轻企业通常会开始有董事会以及重要的供应、通路伙伴。久而久之，合伙人对于公司未来走向的看法，常常会越来越变得分歧。</p><p>防范这个陷阱要从根源开始：每当CEO有了新的资讯、成长、学习、领悟，应该积极地与合伙人分享，协助他们获得与你类似的成长。同时，你应该把小范围的决策授权出去，让他们也能继续主导公司某一部分的走向。最后，你应该积极管理大家对决策的期望值，新创公司必须在“快”与“好”之间做出平衡，因此决策求的是多数对，而不是样样对。</p><h3 id="2、无法适应制度"><a href="#2、无法适应制度" class="headerlink" title="2、无法适应制度"></a>2、无法适应制度</h3><p>0到1的新创团队求快，因此不会有太多制度。进入1到100阶段，公司势必要开始建立一些管理系统，以在风险与发展中间取得平衡。</p><p>有些习惯了说干就干的合伙人，在此时会产生严重的不适应，时间一长甚至会觉得公司背离了创办的初衷。要解决这个问题，除了及早发现及早辅导外，请他们参与、主导制度的设计，也是协助合伙人适应新制度的方法。</p><h3 id="3、越权管理"><a href="#3、越权管理" class="headerlink" title="3、越权管理"></a>3、越权管理</h3><p>当公司开始有部门、部门主管，合伙人还是习惯看不顺眼就管，容易造成经理人的困扰。更有甚者，造成合伙人对经理人不信任，反而让经理人没有足够的时间、空间去适应、学习。这个问题通常是惯性使然，重点就是要打破它。所以，看到这样的行为要赶快提醒伙伴们注意。</p><h3 id="4、无法跟上公司成长的需要"><a href="#4、无法跟上公司成长的需要" class="headerlink" title="4、无法跟上公司成长的需要"></a>4、无法跟上公司成长的需要</h3><p>在公司快速扩张期，一个3人产品团队可能在一年内成长为30人，而两者之间管理上的不同，常常会让本来擅长技术、产品，但从来没有管理中大型团队经验的合伙人一时间跟不上公司发展的步伐。</p><p>回到扩张前，你应该早早找到好的CTO Mentor，在扩张中，经常鼓励他在管理知识与能力上精进。扩张后，如果他真的无法适应，也比较能够接受去寻找更有经验的CTO，而自己退居部门二把手、三把手。</p><h3 id="5、利益分配"><a href="#5、利益分配" class="headerlink" title="5、利益分配"></a>5、利益分配</h3><p>当公司越来越成功、越赚钱、离IPO越近，股权与利益的问题就会越容易产生。尤其当初的股权分配如果没有彰显每个合伙人的相对价值，那团队中可能酝酿出不良情绪。</p><p>比较好的方法当然是早期就把这个问题解决掉，因为到了后期，你的工具会越来越有限。但也不是没有机会修正，如果有合伙人离开，你可以收回他的股权来重新分配。如果有B、C、D轮增资，你可以跟投资人要求“期权池”(ESOP)，通过发放新的选择权来平衡。最后，如果真的过于集中，负责任的CEO，甚至会拿出自己的股权分配给伙伴们。</p><p>选择合伙人未必有一定之规，创业路上可能遇到的危机也远远不止上述这些，希望这篇文章能对你有所裨益，助你在创业路上少走弯路，也祝愿创业者们在2018年博得好彩头，大鹏一日同风起，扶摇直上九万里。</p><p>本文来源：<a href="http://www.sohu.com/a/225670991_100064845" target="_blank" rel="noopener">联想之星</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="life" scheme="https://im.policx.com/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown 的设计哲学</title>
    <link href="https://im.policx.com/2018/03/22/markdown/"/>
    <id>https://im.policx.com/2018/03/22/markdown/</id>
    <published>2018-03-22T11:32:01.000Z</published>
    <updated>2019-07-07T04:34:16.836Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 </p><a id="more"></a><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote><h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown<em>是什么</em>？</h4><h4 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h4><h4 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h4><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><em>怎么</em>使用？</h4><h4 id="谁在用？"><a href="#谁在用？" class="headerlink" title="谁在用？"></a><em>谁</em>在用？</h4><h4 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h4></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p><h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/" target="_blank" rel="noopener"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p><p>他有着足以让你跪拜的人生经历：    </p><ul><li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li><li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li><li><strong>2005</strong>年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。   </li><li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li><li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li><li><strong>2013</strong>年1月自杀身亡。    </li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz"></p><p>天才都有早逝的归途。</p><h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h3><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p><p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\</code></strong>，<strong>符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p><p>代码区块：</p><pre><code>void main(){    printf(&quot;Hello, Markdown.&quot;);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格<em>或</em>制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code>    </p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul><li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错   </li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。    </li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><hr><p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><hr><p>以上基本是所有traditonal markdown的语法。</p><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><hr><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p><video src="http://structr.learn-anything.cn/video/道理/陈铭：像我这种老好人，根本没什么真朋友！不jue亲戚的人，根本没什么真亲戚！.mp4" width="320" height="180" controls="controls"></video> </p><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="https://im.policx.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>数据类型和变量</title>
    <link href="https://im.policx.com/2018/03/01/python-type/"/>
    <id>https://im.policx.com/2018/03/01/python-type/</id>
    <published>2018-02-28T20:28:19.000Z</published>
    <updated>2019-07-07T04:35:56.433Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python 数据类型和变量</p><a id="more"></a> <h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：</p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</p><p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。如果’本身也是一个字符，那就可以用””括起来，比如”I’m OK”包含的字符是I，’，m，空格，O，K这6个字符。</p><p>如果字符串内部既包含’又包含”怎么办？可以用转义字符\来标识，比如：</p><p><code>&#39;I\&#39;m \&quot;OK\&quot;!&#39;</code><br>表示的字符串内容是：</p><p><code>I&#39;m &quot;OK&quot;!</code><br>转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\表示的字符就是\，可以在Python的交互式命令行用print()打印字符串看看：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;I\&apos;m ok.&apos;)</span><br><span class="line">I&apos;m ok.</span><br><span class="line">&gt;&gt;&gt; print(&apos;I\&apos;m learning\nPython.&apos;)</span><br><span class="line">I&apos;m learning</span><br><span class="line">Python.</span><br><span class="line">&gt;&gt;&gt; print(&apos;\\\n\\&apos;)</span><br><span class="line"></span><br><span class="line">\</span><br><span class="line">\</span><br></pre></td></tr></table></figure><p>如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义，可以自己试试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&apos;\\\t\\&apos;)</span><br><span class="line">\       \</span><br><span class="line">&gt;&gt;&gt; print(r&apos;\\\t\\&apos;)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure><p>如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，可以自己试试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;&apos;&apos;line1</span><br><span class="line">... line2</span><br><span class="line">... line3&apos;&apos;&apos;)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure><p>上面是在交互式命令行内输入，注意在输入多行内容时，提示符由&gt;&gt;&gt;变为…，提示你可以接着上一行输入，注意…是提示符，不是代码的一部分：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt - python                           _ □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│&gt;&gt;&gt; print(&apos;&apos;&apos;line1                                      │</span><br><span class="line">│... line2                                               │</span><br><span class="line">│... line3&apos;&apos;&apos;)                                           │</span><br><span class="line">│line1                                                   │</span><br><span class="line">│line2                                                   │</span><br><span class="line">│line3                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│&gt;&gt;&gt; _                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>当输入完结束符<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果写成程序并存为.py文件，就是：</span><br></pre></td></tr></table></figure></p><p>print(‘’’line1<br>line2<br>line3’’’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多行字符串&apos;&apos;&apos;...&apos;&apos;&apos;还可以在前面加上r使用，请自行测试：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>print(r’’’hello,\n<br>world’’’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">### 布尔值</span><br><span class="line">布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True<br>True<br>False<br>False<br>3 &gt; 2<br>True<br>3 &gt; 5<br>False</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">布尔值可以用and、or和not运算。</span><br><span class="line"></span><br><span class="line">#### and运算是与运算，只有所有都为True，and运算结果才是True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True and True<br>True<br>True and False<br>False<br>False and False<br>False<br>5 &gt; 3 and 3 &gt; 1<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### or运算是或运算，只要其中有一个为True，or运算结果就是True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True or True<br>True<br>True or False<br>True<br>False or False<br>False<br>5 &gt; 3 or 1 &gt; 3<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### not运算是非运算，它是一个单目运算符，把True变成False，False变成True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>not True<br>False<br>not False<br>True<br>not 1 &gt; 2<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">布尔值经常用在条件判断中，比如：</span><br></pre></td></tr></table></figure><p>if age &gt;= 18:<br>    print(‘adult’)<br>else:<br>    print(‘teenager’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">### 空值</span><br><span class="line">空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</span><br><span class="line"></span><br><span class="line">此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。</span><br><span class="line"></span><br><span class="line">### 变量</span><br><span class="line">变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</span><br><span class="line"></span><br><span class="line">变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头，比如：</span><br><span class="line"></span><br><span class="line">`a = 1`</span><br><span class="line">变量a是一个整数。</span><br><span class="line"></span><br><span class="line">`t_007 = &apos;T007&apos;`</span><br><span class="line">变量t_007是一个字符串。</span><br><span class="line"></span><br><span class="line">`Answer = True`</span><br><span class="line">变量Answer是一个布尔值True。</span><br><span class="line"></span><br><span class="line">在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>a = 123 # a是整数<br>print(a)<br>a = ‘ABC’ # a变为字符串<br>print(a)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</span><br></pre></td></tr></table></figure><p>int a = 123; // a是整数类型变量<br>a = “ABC”; // 错误：不能把字符串赋给整型变量</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">和静态语言相比，动态语言更灵活，就是这个原因。</span><br><span class="line"></span><br><span class="line">请不要把赋值语句的等号等同于数学的等号。比如下面的代码：</span><br></pre></td></tr></table></figure><p>x = 10<br>x = x + 2</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果从数学上理解x = x + 2那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。</span><br><span class="line"></span><br><span class="line">最后，理解变量在计算机内存中的表示也非常重要。当我们写：</span><br><span class="line"></span><br><span class="line">`a = &apos;ABC&apos;`</span><br><span class="line">时，Python解释器干了两件事情：</span><br><span class="line"></span><br><span class="line">在内存中创建了一个&apos;ABC&apos;的字符串；</span><br><span class="line"></span><br><span class="line">在内存中创建了一个名为a的变量，并把它指向&apos;ABC&apos;。</span><br><span class="line"></span><br><span class="line">也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据，例如下面的代码：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>a = ‘ABC’<br>b = a<br>a = ‘XYZ’<br>print(b)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">最后一行打印出变量b的内容到底是&apos;ABC&apos;呢还是&apos;XYZ&apos;？如果从数学意义上理解，就会错误地得出b和a相同，也应该是&apos;XYZ&apos;，但实际上b的值是&apos;ABC&apos;，让我们一行一行地执行代码，就可以看到到底发生了什么事：</span><br><span class="line"></span><br><span class="line">执行a = &apos;ABC&apos;，解释器创建了字符串&apos;ABC&apos;和变量a，并把a指向&apos;ABC&apos;：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923791878255456/0)</span><br><span class="line"></span><br><span class="line">执行b = a，解释器创建了变量b，并把b指向a指向的字符串&apos;ABC&apos;：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923792058613440/0)</span><br><span class="line"></span><br><span class="line">执行a = &apos;XYZ&apos;，解释器创建了字符串&apos;XYZ&apos;，并把a的指向改为&apos;XYZ&apos;，但b并没有更改：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923792191637760/0)</span><br><span class="line"></span><br><span class="line">所以，最后打印变量b的结果自然是&apos;ABC&apos;了。</span><br><span class="line"></span><br><span class="line">### 常量</span><br><span class="line">所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：</span><br><span class="line"></span><br><span class="line">`PI = 3.14159265359`</span><br><span class="line">但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。</span><br><span class="line"></span><br><span class="line">最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是/：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 / 3<br>3.3333333333333335</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>9 / 3<br>3.0</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还有一种除法是//，称为地板除，两个整数的除法仍然是整数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 // 3<br>3</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你没有看错，整数的地板除//永远是整数，即使除不尽。要做精确的除法，使用/就可以。</span><br><span class="line"></span><br><span class="line">因为//除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 % 3<br>1</p><pre><code>无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</code></pre></blockquote></blockquote></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。</p><p>对变量赋值x = y是把变量x指向真正的对象，该对象是变量y所指向的。随后对变量y的赋值不影响变量x的指向。</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在-2147483648-2147483647。<br>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 数据类型和变量&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://im.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>字典、列表、数组和字符串</title>
    <link href="https://im.policx.com/2018/02/16/python/"/>
    <id>https://im.policx.com/2018/02/16/python/</id>
    <published>2018-02-16T04:28:24.000Z</published>
    <updated>2019-07-07T04:36:14.193Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python 字典、列表、数组和字符串</p><a id="more"></a><p>字典</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">dict_1 = &#123;<span class="hljs-string">'1'</span>: <span class="hljs-string">'a'</span>, <span class="hljs-string">'2'</span>: <span class="hljs-string">'b'</span>, <span class="hljs-string">'3'</span>: <span class="hljs-string">'c'</span>&#125;</span><br><span class="line">print(dict_1)  <span class="hljs-comment"># 打印字典</span></span><br><span class="line">print(type(dict_1))  <span class="hljs-comment"># 打印新赋值的字典的类型</span></span><br><span class="line">print(str(dict_1), end=<span class="hljs-string">'字符串\n'</span>)  <span class="hljs-comment"># 把字典转化成字符串后打印</span></span><br><span class="line">print(tuple(dict_1), end=<span class="hljs-string">'元组\n'</span>)  <span class="hljs-comment"># 把字典转化为元组后打印</span></span><br><span class="line">print(list(dict_1), end=<span class="hljs-string">'列表\n'</span>)  <span class="hljs-comment"># 把字典转化为列表后打印</span></span><br></pre></td></tr></table></figure><p>元组</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">tuple_1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)</span><br><span class="line">print(tuple_1)  <span class="hljs-comment"># 打印元组</span></span><br><span class="line">print(type(tuple_1))  <span class="hljs-comment"># 打印新赋值的元祖的类型</span></span><br><span class="line">print(str(tuple_1), end=<span class="hljs-string">'字符串\n'</span>)  <span class="hljs-comment"># 把元组转化成字符串后打印</span></span><br><span class="line">print(list(tuple_1), end=<span class="hljs-string">'列表\n'</span>)  <span class="hljs-comment"># 把元组转化为列表后打印</span></span><br></pre></td></tr></table></figure><h3 id="元组不可转化为字典"><a href="#元组不可转化为字典" class="headerlink" title="元组不可转化为字典"></a>元组不可转化为字典</h3><p>列表</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">list_1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(list_1)  <span class="hljs-comment"># 打印列表</span></span><br><span class="line">print(type(list_1))  <span class="hljs-comment"># 打印新赋值的列表的类型</span></span><br><span class="line">print(str(list_1), end=<span class="hljs-string">'字符串\n'</span>)  <span class="hljs-comment"># 把列表转化成字符串后打印</span></span><br><span class="line">print(tuple(list_1), end=<span class="hljs-string">'元组\n'</span>)  <span class="hljs-comment"># 把列表转化为元组后打印</span></span><br></pre></td></tr></table></figure><h3 id="元组不可转化为字典-1"><a href="#元组不可转化为字典-1" class="headerlink" title="元组不可转化为字典"></a>元组不可转化为字典</h3><p>字符串</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">string_1 = <span class="hljs-string">'(1, 2, 3, 4, 5)'</span></span><br><span class="line">print(string_1)  <span class="hljs-comment"># 打印字符串</span></span><br><span class="line">print(type(string_1))  <span class="hljs-comment"># 打印新赋值的字符串</span></span><br><span class="line">print(tuple(eval(string_1)), end=<span class="hljs-string">'元组\n'</span>)  <span class="hljs-comment"># 把字符串转化成元组后输出</span></span><br><span class="line">print(list(eval(string_1)), end=<span class="hljs-string">'列表\n'</span>)  <span class="hljs-comment"># 把字符串转化成列表后输出</span></span><br></pre></td></tr></table></figure><h3 id="只有特殊字符串才能转化为字典"><a href="#只有特殊字符串才能转化为字典" class="headerlink" title="只有特殊字符串才能转化为字典"></a>只有特殊字符串才能转化为字典</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string_2 = <span class="hljs-string">'&#123;"name":"tom","age":6&#125;'</span></span><br><span class="line">print(string_2)  <span class="hljs-comment"># 打印新赋值的字符串</span></span><br><span class="line">print(type(string_2))  <span class="hljs-comment"># 打印新赋值的字符串的类型</span></span><br><span class="line">print(dict(eval(string_2)), end=<span class="hljs-string">'字典\n'</span>)  <span class="hljs-comment"># 把字符串转化为字典后打印</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 字典、列表、数组和字符串&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://im.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>大话Socket</title>
    <link href="https://im.policx.com/2018/02/06/socket/"/>
    <id>https://im.policx.com/2018/02/06/socket/</id>
    <published>2018-02-06T10:30:55.000Z</published>
    <updated>2019-07-07T04:39:01.279Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>要了解Socket首先要了解 TCP，他们两个的关系可以说是：</p><p>Socket 是抽象出来的使用 TCP/UDP 的概念模型，屏蔽掉了晦涩的底层协议的实现，是一个接口。</p><a id="more"></a><p>最近看到了一张如此详细的 TCP 三次握手和四次挥手，打印一张放工位！摘自《图解网络硬件》249页 图5-11 《TCP的三次握手》<br><img src="https://camo.githubusercontent.com/23dfbddfdd1d08dfda64dc13436030d947ebd62b/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f36346466643834396a7731663275646676363638706a32306d30306e6d343463" alt><br><img src="https://camo.githubusercontent.com/dc8cf3d1737ae2148250573fae94d2eea4eaba3d/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f36356534663165366a773166377532786a6f6361746a32306a383064627134362e6a7067" alt><br>所谓的X、X+1、Y、Y+1<br>对应于你收到了没、我收到了、你收到’我收到’没、我收到了不用回了,为什么用+1表示呢？那是因为前两个指的是一个人，后两个指的是一个人。<br>四组是三个连接，每个连接的序号依次是X、Y、Z。</p><p>TCP的连接过程就像两个人的对话：</p><p>想象一下，每次这俩儿人聊天，都要像下面这样一来一回三次，接下来他们才能【好好聊天了。。。】真是有点“作”。。。</p><p>我是客户端，树懒是服务端，演示三次握手、数据传输步骤<br><img src="https://camo.githubusercontent.com/83074c55d42ddfa4775100aed25d906410581346/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f36346466643834396a77316632756467393761796d6a32306d38316d636b316c" alt><br>其实有个问题，为什么连接的时候是三次握手，关闭的时候却是四次挥手？</p><p>因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p><p>而这一设计，主要是因为“服务器不是你想关就能关”。。。</p><p>比如说两个热恋中的人正在QQ上发送一个传mp4格式的文件，</p><p>A说，我要下QQ了，</p><p>B说：我知道了，你下吧。</p><p>A说，那我关了，（想关）</p><p>但是当A尝试关闭QQ的时候，QQ弹窗说“正在传输文件，传输完成后自动关闭QQ？”</p><p>这时候A对B说，呀，正在传东西，等传完了，我就关吧。（不能关）</p><p>B说：行。既然关不掉，不行再聊会儿呗？</p><p>A：聊吧。。。传完了啊，下了啊（传输结束了–能关）</p><p>B：下吧。我也下了。。。</p><p>就是多了一个Finish报文。</p><p>或者简单点表示是这样的：<br><img src="https://camo.githubusercontent.com/770f483cf985366a20e6dafde1e355bc691f2041/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f36346466643834396a77316632756a7067346235716a32307969317063716470" alt><br>图片演示了四次挥手，与三次握手相比，只多了一个被动方确认自身任务Finish的动作。<br><img src="https://camo.githubusercontent.com/101010aedc39b107a8615e6c26281e2e848dbbb1/687474703a2f2f7777322e73696e61696d672e636e2f6c617267652f36356534663165366a773166377532786a73676e386a32306a3630646b7461682e6a7067" alt><br>总结下相关的函数：</p><p>创建套接字</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Socket(af,type,protocol)</span><br></pre></td></tr></table></figure><p>建立地址和套接字的联系</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind(sockid, local addr, addrlen)</span><br></pre></td></tr></table></figure><p>服务器端侦听客户端的请求</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen( Sockid ,quenlen)</span><br></pre></td></tr></table></figure><p>建立服务器/客户端的连接 (面向连接TCP）</p><p>客户端请求连接</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connect(sockid, destaddr, addrlen)</span><br></pre></td></tr></table></figure><p>服务器端等待从编号为Sockid的Socket上接收客户连接请求</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newsockid=accept(Sockid，Clientaddr, paddrlen)</span><br></pre></td></tr></table></figure><p>发送/接收数据</p><p>面向连接：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">send(sockid, buff, bufflen) </span><br><span class="line">recv( )</span><br></pre></td></tr></table></figure><p>面向无连接：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sendto(sockid,buff,…,addrlen) </span><br><span class="line">recvfrom( )</span><br></pre></td></tr></table></figure><p>释放套接字</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">close(sockid)</span><br></pre></td></tr></table></figure><p>至于为什么是三次握手，而不是二次握手，还有四次握手，可以看看下面的类比：</p><table><thead><tr><th>三次握手</th><th>二次握手</th><th>四次握手</th></tr></thead><tbody><tr><td><img src="https://camo.githubusercontent.com/9bf301327a629211d40aadd6e8ec65c80e242511/687474703a2f2f7777322e73696e61696d672e636e2f6c617267652f36356534663165366a77316637753536776678687a6a32307969317063337a762e6a7067" alt></td><td><img src="https://camo.githubusercontent.com/a6d5cce9b79a51f18b7c2f14b149f5416c1d5e3a/687474703a2f2f7777332e73696e61696d672e636e2f6c617267652f36356534663165366a7731663775347a6433306e706a323079693170637161642e6a7067" alt></td><td><img src="https://camo.githubusercontent.com/8f98f53f7acc4a9a8954c11b885a58f7a0d71a90/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f36356534663165366a7731663775347861736d61306a323079693170636163622e6a7067" alt></td></tr></tbody></table><p>参考：<a href="http://zhihu.com/question/24853633/answer/114872771" target="_blank" rel="noopener">知乎</a></p><p>三次握手的对话，也挺像这个的，哈哈：</p><ul><li>A: How are you?</li><li>B: I’m fine, thanks,and you?</li><li>A: I’m fine too.</li></ul><hr><p>Posted by <a href="http://weibo.com/luohanchenyilong/" target="_blank" rel="noopener">微博@iOS程序犭袁</a><br>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank" rel="noopener">Creative Commons BY-NC-ND 3.0</a></p><p align="center"><a href="http://weibo.com/u/1692391497?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/1692391497/b46c844b/1.png"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要了解Socket首先要了解 TCP，他们两个的关系可以说是：&lt;/p&gt;
&lt;p&gt;Socket 是抽象出来的使用 TCP/UDP 的概念模型，屏蔽掉了晦涩的底层协议的实现，是一个接口。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
