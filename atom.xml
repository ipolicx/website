<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-07-17T08:24:20.372Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter的环境配置 for Mac</title>
    <link href="https://www.policx.com/2019/07/16/flutter/"/>
    <id>https://www.policx.com/2019/07/16/flutter/</id>
    <published>2019-07-16T10:14:18.000Z</published>
    <updated>2019-07-17T08:24:20.372Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 </p><a id="more"></a><h2 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装Flutter</h2><p>首先我们可以在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fdocs%2Fget-started%2Finstall" target="_blank" rel="noopener">Flutter官网</a>上面看到一些配置环境的步骤。这里就直接开干了，走起。 </p><h3 id="1、配置HomeBrew"><a href="#1、配置HomeBrew" class="headerlink" title="1、配置HomeBrew"></a>1、配置HomeBrew</h3><p>我们在去配置Flutter的环境之前，需要先检查一下HomeBrew是不是最新的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br></pre></td></tr></table></figure><p>如果没有brew的话，可以去<a href="https://link.juejin.im?target=https%3A%2F%2Fbrew.sh%2F" target="_blank" rel="noopener">HomeBrew官网</a>自行下载。这里就不赘述了，这里如果重新下载的话，看到下面的打印信息就说明下载完毕了。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3aad595f24923.jpg" alt></p><h3 id="2、下载SDK"><a href="#2、下载SDK" class="headerlink" title="2、下载SDK"></a>2、下载SDK</h3><p>接下来就是去官网下载SDK了。注意，这里下载SDK有两种方法：</p><ul><li>一是直接<code>git clone -b beta https://github.com/flutter/flutter.git</code>下载</li><li>二是自己在官网下载下来，如下图<br><img src="https://i.loli.net/2019/07/16/5d2db40e0aecc50465.jpg" alt></li></ul><p>这里我两种方法都试过了一遍，第一种方法实在是太慢了，在经历了耗费一个半小时下载到94%，最后提示失败了的过程之后，我决定还是用第二种方法，整个过程只用了3分钟的样子，相当满意。下载完之后，是一个名字叫<code>flutter_macos_v1.5.4-hotfix.2-stable.zip</code>的压缩包。 然后我们解压这个zip包，把解压出来的<strong>flutter</strong>文件放到根目录下即可。 </p><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p>因为Flutter的SDK中包含了很多的命令行工具。我们就需要配置环境变量，所以我直接就安装到了根目录下了。</p><p><strong>配置镜像</strong></p><p>因为Flutter在运行的时候，就需要去官网下载一些需要的资源，但是因为天国特色的wall的原因，我们就需要镜像服务器，这个在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fcommunity%2Fchina" target="_blank" rel="noopener">官网</a>上面有写的很明白，而且这是一个临时的镜像，后面还要以官网的镜像地址为准。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3f2c1f4f64480.jpg" alt></p><p>我们跳转到根目录 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>就能找到这个<code>.bash_profile</code>隐藏文件，我们用vim打开这个文件 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后需要输入就把A键按一下进入编辑模式，把下面三个环境变量配置进去 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line">export PATH=/Users/xueliheng/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>注意下，第三个环境变量这里<code>/Users/xueliheng/</code>是我的根目录，然后<code>/flutter/</code>是我们刚刚解压的的zip包里面的<code>flutter</code>文件夹。上面两个环境变量是两个镜像地址，上文中也有说过。 接着<code>shift+：</code>然后输入<code>wq</code>保存并退出vim。输入如下命令： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>最后我们就可以验证一下flutter环境有没有配置成功了。输入： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure><p>看到如下如的打印信息就是配置成功了<br><img src="https://i.loli.net/2019/07/16/5d2db44407fa682753.jpg" alt></p><h3 id="4、配置Android-Studio"><a href="#4、配置Android-Studio" class="headerlink" title="4、配置Android Studio"></a>4、配置Android Studio</h3><p>如果没有下载<strong>Android Studio</strong>的话，就去<a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.android.google.cn%2Fstudio" target="_blank" rel="noopener">官网</a>去下载一下。 我们用<code>flutter doctor</code>命令去检查一下flutter的环境配置，我们可以看到如下打印 </p><p><img src="https://i.loli.net/2019/07/16/5d2db4676ec3a36838.jpg" alt></p><p>这里的每个<code>✗</code>都是我们要去解决的问题。不过他有告诉你应该怎么做。比如第一个提示： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices</span><br><span class="line">    ✗ Unable to locate Android SDK.</span><br></pre></td></tr></table></figure><p>这就是让你去下载Android Studio。我们在下载完成之后，打开AS让他去下载一些应该下载的东西。 如果这里有提示你 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices (Android SDK version 24.0.2)</span><br><span class="line">    ✗ Flutter requires Android SDK 28 and the Android BuildTools 28.0.3</span><br></pre></td></tr></table></figure><p>这就是在提示让你去升级一下SDK，然后命令如下 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;/Users/xueliheng/Library/Android/sdk/tools/bin/sdkmanager&quot; &quot;platforms;android-28&quot; &quot;build-tools;28.0.3&quot;</span><br></pre></td></tr></table></figure><p>注意一下，这个地方的升级是需要”科学上网“的，如果有的小伙伴没有这个条件的话，我这边百度云上面给大家准备了一个<a href="https://link.juejin.im?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F10yp8PuRXxk7YvcNR_dTy8Q" target="_blank" rel="noopener">链接</a>，提取码: e48c，大家可以下载下来。下载下来之后解压到<code>/Users/Library/Android/</code>这个文件夹。把原先的SDK直接覆盖就行了，就已经是最新的SDK了。 </p><p>接下来我们配置一下安卓的环境变量，还是在根目录下找到<code>.bash_profile</code>文件，并在其中添加四个环境变量 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=~/Library/Android/sdk</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/emulator</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br></pre></td></tr></table></figure><p>分别是： </p><ul><li>安卓sdk的路径</li><li>安卓的模拟器路径</li><li>安卓tools路径</li><li>安卓平台工具</li></ul><p>接下来我们再用<code>flutter doctor</code>检查的时候，显示的信息如下图<br><img src="https://i.loli.net/2019/07/16/5d2db4964a70b73490.jpg" alt></p><p>意思就是让我们去下载iOS的相关环境，我们先暂时放放，下面还有一个关于<strong>Android Studio</strong>的没有解决完</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">✗ Dart plugin not installed; this adds Dart specific functionality.</span><br></pre></td></tr></table></figure><p>这个就是缺少Flutter插件的意思，那么我们就去AS里面去配置一下好了。打开AS的<code>Preferences</code>，点击<code>Plugins</code>，在搜索栏中输入<code>flutter</code>，找到相应的插件，然后<code>Install</code>。当跳出安装Dart插件的提示界面时，记得点击Yes进行安装。安装完毕之后<code>restart IDE</code>重启AS。 重启之后就能看到多了一个这个东西<br><img src="https://i.loli.net/2019/07/16/5d2db4b731cbd14001.jpg" alt></p><p>我们再用<code>flutter doctor</code>检测一下<br><img src="https://i.loli.net/2019/07/16/5d2db4cdc6dd137908.jpg" alt></p><p>现在终于ok了。我们看到<code>[✓]Android Studio</code>说明，安卓的环境基本上配置成功，接下来我们就配置一下安卓的模拟器就好了。 </p><h3 id="5、安卓模拟器配置"><a href="#5、安卓模拟器配置" class="headerlink" title="5、安卓模拟器配置"></a>5、安卓模拟器配置</h3><p>在AS中找到模拟器配置如下图并选择<br><img src="https://i.loli.net/2019/07/16/5d2db4dacfde455330.jpg" alt></p><p>接着就创建设备，选择设备<br><img src="https://i.loli.net/2019/07/16/5d2db4e68a2ed68879.jpg" alt></p><p>选择系统<br><img src="https://i.loli.net/2019/07/16/5d2db4f6cdc5889902.jpg" alt></p><p>最后点击下载就完成了。 </p><h3 id="6、配置iOS环境"><a href="#6、配置iOS环境" class="headerlink" title="6、配置iOS环境"></a>6、配置iOS环境</h3><p>我们配置完了安卓的环境，再来<code>flutter doctor</code>检测一下。<br><img src="https://i.loli.net/2019/07/16/5d2db50ad75eb82331.jpg" alt></p><p>情况是这样的。目前1.5.4版本的Flutter需要匹配新版本的Xcode10.2.1。按照他提示的来试试，提示我Xcode版本太低了，需要升级Xcode<br><img src="https://i.loli.net/2019/07/16/5d2db5275c8f825074.jpg" alt></p><p>更新到最新的之后，继续走下面的步骤依旧会报错。那么我们可以试试下面的这个办法： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew link pkg-config</span><br><span class="line">$ brew install --HEAD usbmuxd</span><br><span class="line">$ brew unlink usbmuxd</span><br><span class="line">$ brew link usbmuxd</span><br><span class="line">$ brew install --HEAD libimobiledevice</span><br><span class="line">$ brew install ideviceinstaller</span><br></pre></td></tr></table></figure><p>这些执行完之后执行一下<code>flutter doctor</code><br><img src="https://i.loli.net/2019/07/16/5d2db5515858b19228.jpg" alt></p><p>最后还真是没错，全部配置完成了！那么我们就把iOS的也配置完毕了。</p><h3 id="7、VSCode的使用"><a href="#7、VSCode的使用" class="headerlink" title="7、VSCode的使用"></a>7、VSCode的使用</h3><p>VSCode上面使用的话，就简单多了，这里我就简答的赘述一下。 只需要将<code>Dart</code>和<code>Flutter</code>插件都下载下来<br><img src="https://i.loli.net/2019/07/16/5d2db5643b08597602.jpg" alt></p><p>然后<code>command+shift+p</code>输入<code>flutter</code>，选择<code>Flutter：New Project</code><br><img src="https://i.loli.net/2019/07/16/5d2db576e145096766.jpg" alt></p><p>输入要创建的项目的名称和存放项目的地址。如果提示需要指明flutter的SDK的路径，那就选择根目录那个经过解压得来的flutter的文件夹就好了。 接下来是这样一个界面<br><img src="https://i.loli.net/2019/07/16/5d2db588f1b5152482.jpg" alt></p><p>接下来我们选择<code>View-&gt;Start Debugging</code>来运行项目。<br><img src="https://i.loli.net/2019/07/16/5d2db59bb3b3338193.jpg" alt></p><p>当然这个过程需要你把Xcode的模拟器打开。运行完之后就能看到这个界面，也就是你的第一个Flutter工程啦！<br><img src="https://i.loli.net/2019/07/16/5d2db5ad5eaf434960.jpg" alt></p><h3 id="8、Hot-reload的使用"><a href="#8、Hot-reload的使用" class="headerlink" title="8、Hot reload的使用"></a>8、Hot reload的使用</h3><p>我们打开<code>lib/main.dart</code>文件，然后在其中找到 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have pushed the button this many times:</span><br></pre></td></tr></table></figure><p>并把这个改为 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have clicked the button this many times:</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2db5cc5b4f279074.jpg" alt><br>那么我们就能看到界面上多了一个小闪电<br><img src="https://i.loli.net/2019/07/16/5d2db5f044c0553935.jpg" alt></p><p>我们现在如果<code>command+s</code>保存一下更改的话，就能很快的在模拟器上面看到相应的更改，不需要再重新去编译一边。这一点简直是太棒了！解决了iOS开发者一个大痛点啊！！！ </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，flutter的环境搭建工作基本上就进行完毕了，整个过程大概耗时接近2个小时，这期间包括采坑、查资料、下载、科学上网…等等很蛋疼的事情。当然网速基本上是最大的障碍，浪费了很多的时间。所以也是需要一定的耐心来完成的。 后面的文章也会持续的更新，最近有点懈怠，OpenGL系列的文章有点拖更的节奏，这个后面会补起来。Flutter我也才刚刚接手，也是慢慢的来采坑，也会以此来记录自己的学习经历，也希望能多多跟大家交流。 再次我附上自己的邮箱<code>coderspr1nghall@gmail.com</code>欢迎讨论交流。 </p><p><a href="https://juejin.im/post/5d0508d56fb9a07ec373eb9e" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2dbb03b8ef977558.jpg" alt></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://www.policx.com/2019/07/15/spider/"/>
    <id>https://www.policx.com/2019/07/15/spider/</id>
    <published>2019-07-15T02:06:04.000Z</published>
    <updated>2019-07-17T08:22:37.946Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。</p><a id="more"></a><p>其实爬虫这个概念很简单，基本可以分成以下几个步骤：</p><ul><li><p>发起网络请求</p></li><li><p>获取网页</p></li><li><p>解析网页获取数据</p></li></ul><p>发起网络请求这个步骤常用的类库有标准库urllib以及Python上常用的requests库。解析网页常用的类库有的BeautifulSoup。另外requests的作者还开发了另一个很好用的库requests-html，提供了发起请求和解析网页的二合一功能，开发小型爬虫非常方便。另外还有一些专业的爬虫类库，其中比较出名的就是scrapy。本文将会简单介绍一下这些类库，之后还会专门写一篇文章介绍scrapy的用法。</p><h2 id="标准库urllib"><a href="#标准库urllib" class="headerlink" title="标准库urllib"></a><strong>标准库urllib</strong></h2><p>首先先来看标准库urllib。标准库的优点是Python自带的，不需要安装任何第三方库，缺点就是urllib属于偏底层的库，使用起来比较麻烦。下面是urllib发起请求的一个简单例子，大家看看就好。可以看到为了发起一个简单的请求，我们需要创建opener、request、ProxyHandler等好几个对象，比较麻烦。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> urllib.request <span class="hljs-keyword">as</span> request</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="hljs-string">'https'</span>: <span class="hljs-string">'https://127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="hljs-string">'http'</span>: <span class="hljs-string">'http://127.0.0.1:1080'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'--------------使用urllib--------------'</span>)</span><br><span class="line">url = <span class="hljs-string">'http://www.google.com'</span></span><br><span class="line">opener = request.build_opener(request.ProxyHandler(proxies))</span><br><span class="line">request.install_opener(opener)</span><br><span class="line">req = request.Request(url, headers=headers)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a><strong>requests</strong></h2><p>requests是Kenneth Reitz大神的著名作品之一，优点就是极度简单和好用。首先来安装requests。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>下面是一个简单的例子，和上面urllib示例代码实现的功能相同，但是代码量少多了，也更易读。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="hljs-string">'--------------使用requests--------------'</span>)</span><br><span class="line">response = requests.get(<span class="hljs-string">'https://www.google.com'</span>, headers=headers, proxies=proxies)</span><br><span class="line">response.encoding = <span class="hljs-string">'utf8'</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>requests还可以方便的发送表单数据，模拟用户登录。返回的Response对象还包含了状态码、header、raw、cookies等很多有用的信息。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="hljs-string">'name'</span>: <span class="hljs-string">'yitian'</span>,</span><br><span class="line">    <span class="hljs-string">'age'</span>: <span class="hljs-number">22</span>,</span><br><span class="line">    <span class="hljs-string">'friends'</span>: [<span class="hljs-string">'zhang3'</span>, <span class="hljs-string">'li4'</span>]</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="hljs-string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">pprint(response.__dict__)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>关于requests我就不多做介绍了，因为它有中文文档，虽然比官方落后几个小版本号，不过无伤大雅，大家可以放心参阅。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://cn.python-requests.org/zh_CN/latest/</span><br></pre></td></tr></table></figure><h2 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a><strong>beautifulsoup</strong></h2><p>利用前面介绍的requests类库，我们可以轻易地获取HTML代码，但是为了从HTML中找到所需的数据，我们还需要HTML/XML解析库，BeautifulSoup就是这么一个常用的库。首先先来安装它：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>这次就用我简书主页作为例子，爬取一下我简书的文章列表。首先先用requests获取到网页内容。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"><span class="hljs-keyword">import</span> bs4</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><p>然后就是BeautifulSoup的代码了。在使用BeautifulSoup的时候首先需要创建一个HTML树，然后从树中查找节点。BeautifulSoup主要有两种查找节点的办法，第一种是使用find和find_all方法，第二种方法是使用select方法用css选择器。拿到节点之后，用contents去获取它的子节点，如果子节点是文本，就会拿到文本值，注意这个属性返回的是列表，所以要加[0]。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html = bs4.BeautifulSoup(response.text, features=<span class="hljs-string">'lxml'</span>)</span><br><span class="line">note_list = html.find_all(<span class="hljs-string">'ul'</span>, class_=<span class="hljs-string">'note-list'</span>, limit=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.select(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.contents[<span class="hljs-number">0</span>]</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>BeautifulSoup也有中文文档，同样也是稍微落后两个小版本，影响不大。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</span><br></pre></td></tr></table></figure><h2 id="requests-html"><a href="#requests-html" class="headerlink" title="requests-html"></a><strong>requests-html</strong></h2><p>这个类库是requests的兄弟，同样也是Kenneth Reitz大神的作品。它将请求网页和解析网页结合到了一起。本来如果你用requests的话只能请求网页，为了解析网页还得使用BeautifulSoup这样的解析库。现在只需要requests-html一个库就可以办到。<br>首先先来安装。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests-html</span><br></pre></td></tr></table></figure><p>然后我们来看看用requests-html如何重写上面这个例子。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line">note_list = r.html.find(<span class="hljs-string">'ul.note-list'</span>, first=<span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.find(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html除了可以使用css选择器来搜索以外，还可以使用xpath来查找。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html还有一个很有用的特性就是浏览器渲染。有些网页是异步加载的，直接用爬虫去爬只能得到一个空页面，因为数据是靠浏览器运行JS脚本异步加载的，这时候就需要浏览器渲染了。而浏览器渲染用requests-html做非常简单，只要多调用一个render函数即可。render函数有两个参数，分别指定页面下滑次数和暂停时间。render函数第一次运行的时候，requests-html会下载一个chromium浏览器，然后用它渲染页面。<br>简书的个人文章页面也是一个异步加载的例子，默认只会显示最近几篇文章，通过浏览器渲染模拟页面下滑，我们可以得到所有文章列表。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line"><span class="hljs-comment"># render函数指示requests-html用chromium浏览器渲染页面</span></span><br><span class="line">r.html.render(scrolldown=<span class="hljs-number">50</span>, sleep=<span class="hljs-number">0.2</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>类似的，今日头条的个人页面也是异步加载的，所以也得调用render函数。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">        <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(<span class="hljs-string">'https://www.toutiao.com/c/user/6662330738/#mid=1620400303194116'</span>, headers=headers)</span><br><span class="line">r.html.render()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r.html.find(<span class="hljs-string">'div.rbox-inner a'</span>):</span><br><span class="line">    title = i.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.toutiao.com<span class="hljs-subst">&#123;i.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》 <span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>最后是requests-html的官网地址以及中文文档。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://html.python-requests.org/</span><br><span class="line">https://cncert.github.io/requests-html-doc-cn/</span><br></pre></td></tr></table></figure><h2 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a><strong>scrapy</strong></h2><p>以上介绍的几个框架都是各自有各自的作用，把它们结合起来可以达到编写爬虫的目的，但是要说专业的爬虫框架，还是得谈谈scrapy。作为一个著名的爬虫框架，scrapy将爬虫模型框架化和模块化，利用scrapy，我们可以迅速生成功能强大的爬虫。<br>不过scrapy概念众多，要仔细说还得专门开篇文章，这里就只简单演示一下。首先安装scrapy，如果是Windows系统，还需要安装pypiwin32。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy  </span><br><span class="line">pip install pypiwin32</span><br></pre></td></tr></table></figure><p>然后创建scrapy项目并添加一个新爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject myproject</span><br><span class="line">cd myproject</span><br><span class="line">scrapy genspider my jianshu.com</span><br></pre></td></tr></table></figure><p>打开配置文件settings.py，设置用户代理，否则会遇到403错误。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br></pre></td></tr></table></figure><p>然后修改一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JianshuSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="hljs-string">'jianshu'</span></span><br><span class="line">    allowed_domains = [<span class="hljs-string">'jianshu.com'</span>]</span><br><span class="line">    start_urls = [<span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">'div.content'</span>):</span><br><span class="line">            <span class="hljs-keyword">yield</span> &#123;</span><br><span class="line">                <span class="hljs-string">'title'</span>: article.css(<span class="hljs-string">'a.title::text'</span>).get(),</span><br><span class="line">                <span class="hljs-string">'link'</span>: <span class="hljs-string">'https://www.jianshu.com'</span> + article.xpath(<span class="hljs-string">'a[@class="title"]/@href'</span>).get()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>最后运行一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl my</span><br></pre></td></tr></table></figure><br><p><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1563247765&ver=1731&signature=gm2iTUKE3itOZzvlz9SUtKCYNv*PqEYt2C7ReV7kd47e2ZAWPvG5GRXZUJsiRIde34Uh5FznBslw4hHhXmHQXyV3yz0tTdgds1RMCdai6Oyy98w2-iTBRWeJlpm3cWa8&new=1" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2d4c5ba835e96705.jpg" alt="Python"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DDoS（分布式拒绝服务）攻击是无解的吗？</title>
    <link href="https://www.policx.com/2019/07/14/ddos/"/>
    <id>https://www.policx.com/2019/07/14/ddos/</id>
    <published>2019-07-14T07:26:43.000Z</published>
    <updated>2019-07-14T08:41:14.777Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>“</p><p>DDOS？ </p><p>一言难尽啊！ </p><p>”</p><a id="more"></a><p>先说结论，DDoS是近年来网络攻击中的一棵“常青树”，的确很难缠，但说它是无解的，那也有点太看得起它了。虽然DDoS在对很多大平台的攻击中出尽了风头，但在现在互联网的解决方案中，并不缺乏应对DDoS的解决方案。 </p><p>说起DDoS攻击，我脑海里能够想到的全都是中国民间俗语，什么“双拳难敌四手，好汉架不住人多”，什么“千斤拨四两”，什么“乱拳打死老师傅”等等等等。 </p><p>之前有朋友跑来问我DDoS是个什么东西，为什么这么多互联网巨头都被搞得没有脾气，我记得我当时我是这么举的例子： </p><p>我们这一代人小的时候，自助餐开始在中国内地风行，那会儿这个行业里为了打击竞争对手，对手最惯常使用的阴招是雇佣很多五大三粗的人，给他们钱去对方的店里一通猛吃，杯盘狼藉之下，用不了几天这家自助餐就能给吃黄了。 </p><p>而DDoS攻击比这种还阴损，如果你开了一家餐馆，你的对手如果想搞你，最好的办法就是找一堆地痞流氓到你的店里坐的满满一屋子，你如果上前问，他们就一直跟你扯淡找麻烦，导致真正想吃饭的顾客一看这个情形，掉头就走了。 </p><p>用不了多久，你的餐馆就会开不下去，而你的竞争对手就会趁机蚕食掉你的市场份额，而放在网络语境里，这就是DDoS攻击的最基本原理。 </p><p>而这件事之所以难缠在于，一两个无赖根本成不了气候，想要耍流氓必须要有很多个无赖集结在一起。<strong>所以和现实世界中的无赖一样，DDoS真正的杀手锏在于利用能够发动的汹涌的流量，可以瞬间冲垮被攻击网站的服务器。</strong></p><p>如果我们回溯一下历史的话，会发现黑客组织之所以会有组织有预谋的发起DDoS攻击，基本上都是基于以下几个原因： </p><ul><li><p>有些行业如果网站被恶意攻击，会造成很难估量的损失，这个时候黑客发动DDoS攻击的初衷一般是出于敲诈勒索，为了保证企业的正常运转，他们通常愿意向黑客付高额的赎金； </p></li><li><p>行业内血海一片，DDoS是恶意竞争的屠刀。这个现象从逻辑上，其实雇佣无赖去占领对手餐馆的原理是一毛一样的，而且DDOS攻击早已产业化，现在中国的DDOS黑市，出钱请黑客打1G的流量到一个网吧或网站，市场价只要不到50块钱，但对于一个创业公司或者干脆就是一个小网吧来说，这已经算是可以灭顶的无妄之灾了。 </p></li><li><p>DDoS攻击往往成为掩盖真实网络攻击的烟雾弹，在遭受DDoS攻击的企业中，部分企业还伴随数据丢失的现象，黑客利用DDoS攻击掩盖其窃取用户隐私的真实目的，这种攻击行为在社交网站、金融领域等用户隐私高价值的行业尤为高发。 </p></li></ul><p>比如说，去年年初的时候，荷兰第一大银行荷兰商业银行于2018年1月28日晚间遭到DDoS攻击；第二大银行荷兰合作银行的网银服务29日早晨遭到攻击；第三大银行荷兰银行在那一周内共遭到7次网络攻击，仅周末就有3次。 </p><p>不过这一次发生在荷兰的针对银行系统的攻击并没有造成用户隐私的泄露，原因在于这仅仅是一次来自俄罗斯一个网络间谍组织Cozy Bear对荷兰情报组织AIVD侵犯其计算机的“单纯”的报复行为。<strong>但并不是所有黑客组织发起的DDoS攻击都如此单纯。</strong></p><p>2018年年底时万豪酒店发布了一则公告，称其旗下喜达屋酒店的5亿人次的信息被泄露，共计3.27亿人，泄露信息包括姓名、邮寄地址、电话号码、电子邮件昂面地址、护照号码、出生日期、性别等等入住信息，更糟糕的是万豪无法确定，侵入酒店系统的第三方黑客，在窃取的信息中是否包含客人的银行卡号和密码。（此案例和DDOS攻击无关，建议采用其他案例，比如2011年4月20日至26日，索尼遭受DDoS攻击，目的是为了掩盖盗取索尼PS的用户数据。） </p><p>而游戏领域，则是DDoS攻击的另一个重灾区，不光是刚才前文中提到的暴雪，包括索尼、金山、网易在内的众多知名游戏公司都曾数次遭受攻击，可以说DDoS攻击是游戏企业的噩梦。 </p><p>许多刚创业的游戏公司，可能刚上线就被打死，而一些处在融资阶段的游戏公司，由于遭遇攻击而被迫停服，则很大程度上会调低投资人的预期，甚至导致融资失败。 </p><p>而这些因素，都是竞对打压或者敲诈勒索的绝对软肋。 </p><p>从以上的几个案例我们不难看出，和现实中的耍流氓和敲诈勒索相比，通过网络手段进行攻击的风险和成本更低，坏蛋的嘴脸也更穷凶极恶一点，无论是政府机构还是企业平台，无论你是巨头还是小蚂蚁，只要你身上有羊毛可以薅，你都时刻面临着被洗劫的风险 </p><p>不过刚在开头我也讲了，虽然DDoS很难缠很让人头痛，但本质上图并不是无解的。 </p><p>回到我最开始讲的那个例子。 </p><p>你是一个餐馆老板，过去三十年一直是个老老实实的厨子，突然面对五十个臭流氓到你店里耍无赖的时候，你最好的应对方法，应该是什么？ </p><p>自己组建一支人马，和这些臭流氓正面刚？这恐怕不行，因为你不是臭流氓，你没有相应的作战经验。 </p><p>报警请人民警察来帮忙处理？这恐怕也不行，人家在你店里没有打砸抢，只是“温和的”非暴力不合作，警察来了也只能当民事调解，并且人家马仔众多，明天再换一拨新面孔来，玩的你一点脾气都没有。 </p><p>这就是面对DDoS时，无论是巨头还是小蚂蚁，他们的实实在在的困境。 </p><p>但正所谓“道高一尺魔高一丈”，你在云上和我耍流氓，那我就在云上回击。 </p><p><strong>“云”的事儿，不如还交还给云来处理。</strong>我认为就目前DDoS的在攻击量级上的疯狂进击的前提下，云计算服务厂商或许是狙击它们的最有效手段。 </p><p>2018年年初，峰值1.35TB/秒的流量冲击了开发者平台 GitHub。这是第一次TB量级的DDoS攻击。GitHub 受到攻击后，服务器断断续续，无法访问。攻击发生 10 分钟后，GitHub 向CDN 服务商 Akamai 请求协助，访问 GitHub 的流量已经由后者接管并在15分钟之内完成了防御。 </p><p>Akamai的相关负责人在接受采访时说，我们是基于迄今为止最大规模 DDoS 攻击五倍的峰值而做的相应准备，所以 1.3T 对我们来说是小意思。 </p><p>在关于流量峰值这一点上，我认为饱受双11、双12、618等全民购物狂欢的电商巨头们更有发言权，就拿京东举例子好了。 </p><p>京东云在之前发布的高防版的DDoS服务中，展示出了非常明确的信心是，在多年的电商狂欢流量对抗中，京东云已经在实战中建立了一套完备的防御机制，无论是在流量峰值的建模上，还是在DDoS的防御算法上，它的部署都远远不是纸上谈兵，而是拳拳到肉的经受住了实战的洗礼。要知道，全世界每年有超过5成的DDoS攻击都来自中国，而我们的国家也是全世界超过美国的第一大“肉鸡”市场，由电商大数据加持演化而来的京东云，它在云安全的理解上可以说是非常深刻了。 </p><p>所以说，如果说一定要有一个结论，我想说“上帝的归上帝，而云上的归云上”，像京东云这样的基于电商大数据考验的云计算平台，或许才是对抗DDoS的最终答案。 </p><p>From: <a href="https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA</a></p><p><strong>内容整理自：知乎@例不虚发探花郎</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“&lt;/p&gt;
&lt;p&gt;DDOS？ &lt;/p&gt;
&lt;p&gt;一言难尽啊！ &lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.policx.com/2019/07/14/node/"/>
    <id>https://www.policx.com/2019/07/14/node/</id>
    <published>2019-07-13T16:06:04.000Z</published>
    <updated>2019-07-15T09:40:32.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/15/5d2c47df96f5d45317.jpg" alt="Node.js"></p><p>能方便地搭建响应速度快、易于扩展的网络应用，Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>中文：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org</a>、<a href="https://nodejs.cn/" target="_blank" rel="noopener">https://nodejs.cn</a></p><p>简单说Node.js就是运行在服务器端的JavaScript，是现在流行的语言中能同时运行在前端与后台的程序语言，你可以把JavaScript想像成Java与C#。相关技术：</p><p>数据库：MongoDB，非关系型数据库，NoSQL（Not only SQL）</p><p>MVC框架：AngularJS</p><p>Web服务器：Express</p><p>模板引擎：jade、ejs、htmljs、swig、hogan.js</p><h1 id="二、搭建Node-js开发环境"><a href="#二、搭建Node-js开发环境" class="headerlink" title="二、搭建Node.js开发环境"></a>二、搭建Node.js开发环境</h1><h2 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h2><p>去官网下下载最新版本的Node.js一步一步按提示安装即可，如果安装失败就手动安装，将Node.js的安装位置配置到环境变量的path中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装完成后启动命令行，测试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="三、第一个Node-js程序"><a href="#三、第一个Node-js程序" class="headerlink" title="三、第一个Node.js程序"></a>三、第一个Node.js程序</h1><p>在上面的示例中，我们是通过IDE完成编译与运行的，其实手动运行也可以，比如编写一段代码如下：</p><blockquote><p>server.js</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//依赖一个http模块，相当于java中的import，与C#中的using</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">//创建一个服务器对象</span><br><span class="line">server = http.createServer(function (req, res) &#123;</span><br><span class="line">//设置请求成功时响应头部的MIME为纯文本</span><br><span class="line">res.writeHeader(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">//向客户端输出字符</span><br><span class="line">res.end(&quot;Hello World\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//让服务器监听本地8000端口开始运行</span><br><span class="line">server.listen(8000,&apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server is runing at 127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>在node环境下解释运行：<br><img src="https://i.loli.net/2019/07/14/5d2af984d2fae77488.jpg" alt></p><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2af89c2b5b226144.jpg" alt></p><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。<br>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。<br>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</p><h1 id="四、NPM（Node-js包管理器）"><a href="#四、NPM（Node-js包管理器）" class="headerlink" title="四、NPM（Node.js包管理器）"></a>四、NPM（Node.js包管理器）</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：  </p><ul><li>a)、允许用户从NPM服务器下载别人编写的第三方包到本地使用。  </li><li>b)、允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。  </li><li>c)、允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><h2 id="4-1、查看npm版本"><a href="#4-1、查看npm版本" class="headerlink" title="4.1、查看npm版本"></a>4.1、查看npm版本</h2><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p><h2 id="4-2、升级npm"><a href="#4-2、升级npm" class="headerlink" title="4.2、升级npm"></a>4.2、升级npm</h2><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="4-3、安装模块"><a href="#4-3、安装模块" class="headerlink" title="4.3、安装模块"></a>4.3、安装模块</h2><blockquote><p>npm install <module name> -参数</module></p></blockquote><p>如果带参数-g表示全局安装，否则只是安装到某个目录下。</p><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install express -g</span><br></pre></td></tr></table></figure><h2 id="4-4、卸载模块"><a href="#4-4、卸载模块" class="headerlink" title="4.4、卸载模块"></a>4.4、卸载模块</h2><p>我们可以使用以下命令来卸载 Node.js 模块。  </p><blockquote><p>sudo npm uninstall <module name></module></p></blockquote><p>如先使用安装指令安装bootstrap:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>再使用卸载指令删除模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall bootstrap</span><br></pre></td></tr></table></figure><p>可以到 /node_modules/ 目录下查看包是否还存在</p><h2 id="4-5、模块列表"><a href="#4-5、模块列表" class="headerlink" title="4.5、模块列表"></a>4.5、模块列表</h2><p>使用模块列表命令可以方便的看到当前项目中依赖的包：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h2 id="4-6、更新模块"><a href="#4-6、更新模块" class="headerlink" title="4.6、更新模块"></a>4.6、更新模块</h2><p>我们可以使用以下命令更新模块：<br><code>npm update</code>模块名称<br><code>npm up -g</code> 模块名称</p><h2 id="4-7、搜索模块"><a href="#4-7、搜索模块" class="headerlink" title="4.7、搜索模块"></a>4.7、搜索模块</h2><p><code>npm search</code>模块名称</p><h2 id="4-8、NPM-常用命令"><a href="#4-8、NPM-常用命令" class="headerlink" title="4.8、NPM 常用命令"></a>4.8、NPM 常用命令</h2><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。<br>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。<br>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。<br>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。<br>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。<br>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></package></package></p><h2 id="4-9、更换NPM-镜像"><a href="#4-9、更换NPM-镜像" class="headerlink" title="4.9、更换NPM 镜像"></a>4.9、更换NPM 镜像</h2><p>因为npm的服务器在国外，在网络状态不好的情况下引入一个模块会因为网络延迟而失败，可以更换成国内速度更快的镜像服务器，这里以使用淘宝 NPM 镜像（<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>）为例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/15/5d2c481d14f7270384.jpg" alt></p><p>这样就可以使用 cnpm 命令来安装模块了：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＄ cnpm install [name]</span><br></pre></td></tr></table></figure><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><p>如是安装失败，可以试试：</p><figure class="highlight zsh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">alias</span> cnpm=<span class="hljs-string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">--cache=<span class="hljs-variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">--userconfig=<span class="hljs-variable">$HOME</span>/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">  --userconfig=$HOME/.cnpmrc"'</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。使用Node.js作为AngularJS开发Web服务器的最佳方式是使用Express模块。</p><p>Express官网： <a href="https://expressjs.com/" target="_blank" rel="noopener">https://expressjs.com/</a></p><p>Express4.x API：<a href="https://expressjs.com/zh-cn/4x/api.html" target="_blank" rel="noopener">https://expressjs.com/zh-cn/4x/api.html</a></p><p><img src="https://i.loli.net/2019/07/15/5d2c484698cd427801.jpg" alt></p><h2 id="5-2、Express框架核心特性"><a href="#5-2、Express框架核心特性" class="headerlink" title="5.2、Express框架核心特性"></a><strong>5.2、Express框架核心特性</strong></h2><p>可以设置中间件来响应 HTTP 请求。</p><p>定义了路由表用于执行不同的 HTTP 请求动作。</p><p>可以通过向模板传递参数来动态渲染 HTML 页面。</p><p>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。</p><p>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p><h2 id="5-3、安装-Express"><a href="#5-3、安装-Express" class="headerlink" title="5.3、安装 Express"></a><strong>5.3、安装 Express</strong></h2><p>安装 Express 并将其保存到依赖列表中：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>以上命令全局安装express。也可安装时指定安装中间件。</p><p><em>body-parser</em> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</p><p><em>cookie-parser</em> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p><p><em>multer</em> - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">＄ npm install body-parser --save  </span><br><span class="line">＄ npm install cookie-parser --save  </span><br><span class="line">＄ npm install multer --save</span><br></pre></td></tr></table></figure><p>默认这些模块都已经添加。</p><h2 id="5-4、第一个Express框架实例"><a href="#5-4、第一个Express框架实例" class="headerlink" title="5.4、第一个Express框架实例"></a>5.4、第一个Express框架实例</h2><p>接下来我们使用 Express 框架来输出 “Hello World”。<br>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。</p><p>创建一个目录，如Project，进入命令行：</p><p>使用npm install express 导入express模块。</p><p>在目录下创建hello.js文件，如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//引入express模块</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">//创建一个app对象，类似一个web 应用（网站）</span><br><span class="line">var app = express();</span><br><span class="line">//接受指定路径的请求，指定回调函数</span><br><span class="line">app.get(&apos;/&apos;, function (req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//创建一个web服务器，可以认为就是web服务器对象</span><br><span class="line">//监听8081端口，当监听成功时回调</span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">   var host = server.address().address;  //地址</span><br><span class="line">   var port = server.address().port;  //端口</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-5、开发Express项目"><a href="#5-5、开发Express项目" class="headerlink" title="5.5、开发Express项目"></a>5.5、开发Express项目</h2><p><img src="https://i.loli.net/2019/07/14/5d2b00e97910997783.jpg" alt></p><p>创建好的项目如下：<br><img src="https://i.loli.net/2019/07/14/5d2b02dad205355700.jpg" alt></p><p>app.js是网站：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><p>bin\www是web服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">/**</span><br><span class="line"> * 依赖模块，导入</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;nodejsexpress:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从上下文环境中获得监听端口，如果空则3000</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Web服务器</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开始监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);  //指定发生错误时的事件</span><br><span class="line">server.on(&apos;listening&apos;, onListening);  //当监听成功时的回调</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 规范化端口</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *错误事件监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  //错误处理</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);  //结束程序</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当用户访问服务器成功时的回调</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/index.js路由，有点类似控制器或Servlet：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 获得首页 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>views/index.ejs首页视图：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在www上右键选择“运行方式”-&gt;Run ‘/bin/www’ 运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b034bcca6187136.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b044c2b12347829.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b041724d6091090.jpg" alt></p><h3 id="5-5-1、request对象"><a href="#5-5-1、request对象" class="headerlink" title="5.5.1、request对象"></a>5.5.1、request对象</h3><p>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ul><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ul><h3 id="5-5-2、response对象"><a href="#5-5-2、response对象" class="headerlink" title="5.5.2、response对象"></a>5.5.2、response对象</h3><p>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.app：同req.app一样</span><br><span class="line">res.append()：追加指定HTTP头</span><br><span class="line">res.set()在res.append()后将重置之前设置的头</span><br><span class="line">res.cookie(name，value [，option])：设置Cookie</span><br><span class="line">opition: domain / expires / httpOnly / maxAge / path / secure / signed</span><br><span class="line">res.clearCookie()：清除Cookie</span><br><span class="line">res.download()：传送指定路径的文件</span><br><span class="line">res.get()：返回指定的HTTP头</span><br><span class="line">res.json()：传送JSON响应</span><br><span class="line">res.jsonp()：传送JSONP响应</span><br><span class="line">res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</span><br><span class="line">res.redirect()：设置响应的Location HTTP头，并且设置状态码302</span><br><span class="line">res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</span><br><span class="line">res.send()：传送HTTP响应</span><br><span class="line">res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</span><br><span class="line">res.set()：设置HTTP头，传入object可以一次设置多个头</span><br><span class="line">res.status()：设置HTTP状态码</span><br><span class="line">res.type()：设置Content-Type的MIME类型</span><br></pre></td></tr></table></figure><h3 id="5-5-3、express获取参数有三种方法"><a href="#5-5-3、express获取参数有三种方法" class="headerlink" title="5.5.3、express获取参数有三种方法"></a>5.5.3、express获取参数有三种方法</h3><p>req.query 适合 <a href="https://localhost:3000/form?num=8888" target="_blank" rel="noopener">https://localhost:3000/form?num=8888</a><br>req.body 适合<a href="https://localhost:3000/form，Post请求中的参数" target="_blank" rel="noopener">https://localhost:3000/form，Post请求中的参数</a><br>req.params 适合获取form后的num：<a href="https://localhost:3000/form/num" target="_blank" rel="noopener">https://localhost:3000/form/num</a>  </p><p>（一）、GET</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = req.query.num;</span><br><span class="line">res.send(&quot;你获取的get数据为:&quot; + num);</span><br></pre></td></tr></table></figure><p>（二）、POST</p><p>解析post数据需要用到body-parser</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">//引入body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">//需要use的</span><br><span class="line">app.use(bodyParser.json()); // for parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">extended: true</span><br><span class="line">&#125;)); // for parsing application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.post(&apos;/form&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.body.num;</span><br><span class="line">res.send(&quot;你获取的post数据为:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>public/test.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"tinyphp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（三）、获取路径参数</p><p>app.js  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.get(&apos;/form/:num&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.params.num;</span><br><span class="line">res.send(&quot;你获取到form/后的参数:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="5-6-ejs基础"><a href="#5-6-ejs基础" class="headerlink" title="5.6 ejs基础"></a>5.6 ejs基础</h2><p>ejs是一个Express Web应用的模板引擎，在NodeJS开发中可以选择的模板引擎可能是所有Web应用开发中范围最广的，如jade、ejs、htmljs、swig、hogan.js，但ejs是最容易上手的，与jsp,asp,php的原始模板引擎风格很像。</p><p>官网：<a href="https://www.embeddedjs.com/" target="_blank" rel="noopener">https://www.embeddedjs.com/</a></p><p>添加一个<code>product.js</code>路由：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  var products=[];</span><br><span class="line">  products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">  //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">  res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>在views目录下添加<code>product.ejs</code>视图，这里是一个简单的MVC：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span> - 产品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"80%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%pdts.forEach(function(pdt,index)&#123;%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=index+1%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.name%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.price%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%&#125;);%</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">%=pdts[i].name%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改app，注册定义好的模块product：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> index = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/index'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/users'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> pdts = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/product'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//指定视图引擎为ejs</span></span><br><span class="line">app.set(<span class="hljs-string">'views'</span>, path.join(__dirname, <span class="hljs-string">'views'</span>));</span><br><span class="line">app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="hljs-comment">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class="line">app.use(logger(<span class="hljs-string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="hljs-string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/'</span>, index);</span><br><span class="line">app.use(<span class="hljs-string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="hljs-string">'/pdt'</span>, pdts);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b092ca2eb115835.jpg" alt></p><blockquote><p>原因：没有安装ejs模块<br>解决办法：进入到项目目录，安装ejs</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save ejs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b09efe80ba53992.jpg" alt></p></blockquote><p>重新运行：<br><img src="https://i.loli.net/2019/07/14/5d2b0a951a09231745.jpg" alt></p><h2 id="5-7、lodash"><a href="#5-7、lodash" class="headerlink" title="5.7、lodash"></a>5.7、lodash</h2><p>这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。可以非常方便的操作json。</p><p>官网：<a href="https://lodashjs.com/" target="_blank" rel="noopener">https://lodashjs.com/</a></p><p>安装：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash</span><br></pre></td></tr></table></figure><p>安装时先用cd切换到当前项目下。</p><p>如果浏览器使用可以直接引入：</p><script src="lodash.js"></script><p>添加lodash依赖：<br><img src="https://i.loli.net/2019/07/14/5d2b0c4c7c14a17367.jpg" alt></p><p>依赖成功后会在package.json中添加引用：<br><img src="https://i.loli.net/2019/07/14/5d2b0c9e03f1844597.jpg" alt></p><p>后台Node.js使用，可以引入模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//导入lodash模块</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var products=[];</span><br><span class="line">products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">//1、取出第一个元素</span><br><span class="line">var obj1=_.first(products);</span><br><span class="line">console.log(obj1.name);  //ZTE U880</span><br><span class="line"></span><br><span class="line">//2、取出最后一个元素</span><br><span class="line">var obj2=_.last(products);</span><br><span class="line">console.log(obj2.name);  //iPhone 7 Plus 128G</span><br><span class="line"></span><br><span class="line">//3、指定查找条件返回符合条件的索引</span><br><span class="line">var obj3=_.findIndex(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj3);  //2</span><br><span class="line"></span><br><span class="line">//4、指定查找条件返回查找到的对象</span><br><span class="line">var obj4=_.find(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj4);  //&#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;</span><br><span class="line"></span><br><span class="line">//5、排序</span><br><span class="line">var obj5=_.orderBy(products,[&quot;price&quot;,&quot;name&quot;],[&quot;desc&quot;,&quot;asc&quot;]);</span><br><span class="line">console.log(obj5);</span><br><span class="line"></span><br><span class="line">//[ &#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;HuWei 荣耀8&apos;, price: 1899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;ZTE U880&apos;, price: 899.8 &#125; ]</span><br><span class="line"></span><br><span class="line">//6、查找价格为1899.8的产品的key</span><br><span class="line">var obj6=_.findKey(products,&#123;price:1899.8&#125;);</span><br><span class="line">console.log(obj6);   //1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/14/5d2b0f023a83710965.jpg" alt></p><p>API的使用非常简单，但需要注意版本，可以现查现用，API地址：<a href="https://lodash.com/docs/4.17.2%20" target="_blank" rel="noopener">https://lodash.com/docs/4.17.2 </a></p><h2 id="5-8、参数"><a href="#5-8、参数" class="headerlink" title="5.8、参数"></a>5.8、参数</h2><h3 id="5-8-1、URL中的参数占位"><a href="#5-8-1、URL中的参数占位" class="headerlink" title="5.8.1、URL中的参数占位"></a>5.8.1、URL中的参数占位</h3><p>Checks route params (req.params), ex: /user/:id</p><p>127.0.0.1:3000/index，这种情况下，我们为了得到index，我们可以通过使用req.params得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式；</p><p><code>http://127.0.0.1:3000/pdt/9527/phone</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得产品根据Id</span><br><span class="line">router.get(&apos;/:id/:category&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(request.params.id+&quot;,&quot;+request.params.category);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b10e8e678f43145.jpg" alt></p><h3 id="5-8-2、URL中的QueryString"><a href="#5-8-2、URL中的QueryString" class="headerlink" title="5.8.2、URL中的QueryString"></a>5.8.2、URL中的QueryString</h3><p>Checks query string params (req.query), ex: ?id=12</p><p>127.0.0.1:3000/index?id=12，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用req.query.id就可以获得，类似于PHP的get方法；</p><p><code>http://127.0.0.1:3000/pdt/9527?name=jobs</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(&quot;name:&quot;+request.query.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b12be0371490358.jpg" alt></p><h3 id="5-8-3、HTTP正文中的参数"><a href="#5-8-3、HTTP正文中的参数" class="headerlink" title="5.8.3、HTTP正文中的参数"></a>5.8.3、HTTP正文中的参数</h3><p>在post请求中获得表单中的数据。</p><p>Checks urlencoded body params (req.body), ex: id=</p><p>127.0.0.1：300/index，然后post了一个id=2的值，这种方式是获取客户端post过来的数据，可以通过req.body.id获取，类似于PHP的post方法；</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222150412682-243382356.png" alt></p><p>页面：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &lt;%= title %&gt;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%pdts.forEach(function(pdt,index)&#123;%&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=index+1%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.name%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.price%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%&#125;);%&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=pdts[i].name%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            &lt;%if(typeof msg!=&quot;undefined&quot;)&#123;%&gt;</span><br><span class="line">                &lt;%=msg%&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">        &lt;form action=&quot;pdt/add&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                名称：&lt;input name=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                价格：&lt;input name=&quot;price&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/add&apos;,function(request,res,next)&#123;</span><br><span class="line">    var entity=&#123;name:request.body.name,price:request.body.price&#125;;</span><br><span class="line">    products.push(entity);</span><br><span class="line">      //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">      res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products,msg:&quot;添加成功&quot;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151340745-1374859267.png" alt></p><h2 id="5-9、JSON"><a href="#5-9、JSON" class="headerlink" title="5.9、JSON"></a>5.9、JSON</h2><p>如果需要Node.js向外提供返回JSON的接口，Express也是非常方便的，可以使用原来在浏览器中使用到的JSON对象，这是一个浏览器内置对象在服务可以直接使用：</p><p>将对象序列化成字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象</span><br><span class="line">var rose=&#123;&quot;name&quot;:&quot;Rose&quot;,&quot;weight&quot;:&quot;65&quot;&#125;;</span><br><span class="line">            //序列化成字符串</span><br><span class="line">            var str=JSON.stringify(rose);</span><br><span class="line">            alert(str);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151858839-27300214.png" alt></p><p>反序列化，将字符转换成对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成JavaScript对象</span><br><span class="line">var markStr=&apos;&#123;&quot;name&quot;:&quot;mark&quot;,&quot;weight&quot;:&quot;188&quot;&#125;&apos;;</span><br><span class="line">            var mark=JSON.parse(markStr);</span><br><span class="line">            alert(mark.name+&quot;，&quot;+mark.weight);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222152634417-1260078212.png" alt></p><p>Express已经封装了一个json方法，直接调用该方法就可以序列化对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/rest&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(products);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、RESTful（表述性状态转移）"><a href="#六、RESTful（表述性状态转移）" class="headerlink" title="六、RESTful（表述性状态转移）"></a>六、RESTful（表述性状态转移）</h1><p>REST是英文Representational State Transfer的缩写，中文称之为“表述性状态转移” 基于HTTP协议，是另一种服务架构，传递是JSON、POX（Plain Old XML）而不是SOAP格式的数据，充分利用HTTP谓词（Verb），侧重数据的传输，业务逻辑交给客户端自行处理</p><p>REST是一种分布式服务架构的风格约束，像Java、.Net（WCF、WebAPI）都有对该约束的实现，使URL变得更加有意义，更加简洁明了，如：</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>get请求 表示获得所有产品的第1个</p><p><a href="https://www.zhangguo.com/products/product" target="_blank" rel="noopener">https://www.zhangguo.com/products/product</a><br>post请求 表示添加一个产品</p><p><a href="https://www.zhangguo.com/products/1/price" target="_blank" rel="noopener">https://www.zhangguo.com/products/1/price</a><br>get请求 表示获得第1个产品的价格</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>delete请求 删除编号为1的产品</p><p>REST设计需要遵循的原则<br>网络上的所有事物都被抽象为资源（resource）；<br>每个资源对应一个唯一的资源标识符（resource identifier）；<br>通过通用的连接器接口（generic connector interface）对资源进行操作；<br>对资源的各种操作不会改变资源标识符；<br>所有的操作都是无状态的（stateless）</p><p>谓词<br><strong>GET</strong><br>表示查询操作，相当于Retrieve、Select操作<br><strong>POST</strong><br>表示插入操作，相当于Create，Insert操作<br><strong>PUT</strong><br>表示修改操作，相当于Update操作<br><strong>DELETE</strong><br>表示删除操作，相当于Delete操作</p><p>其它还有：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161223101344557-1727952968.png" alt></p><p>NodeJS+Express可以很容易的实现REST</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>application/json</li><li>res.setHeader(‘Content-Type’, ‘application/json;charset=utf-8’);</li></ul><p>示例代码cars.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var cars=[];</span><br><span class="line">cars.push(&#123;id:201701,name:&quot;BMW&quot;,price:190,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201702,name:&quot;BYD&quot;,price:25,speed:&quot;160km/h&quot;,color:&quot;红色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201703,name:&quot;Benz&quot;,price:300,speed:&quot;215km/h&quot;,color:&quot;蓝色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201704,name:&quot;Honda&quot;,price:190,speed:&quot;170km/h&quot;,color:&quot;黑色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201705,name:&quot;QQ&quot;,price:130,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line"></span><br><span class="line">/* Get */</span><br><span class="line">/*获得所有汽车*/</span><br><span class="line">/*url /cars/*/</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.json(cars);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Get*/</span><br><span class="line">/*获得汽车通过id*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">     //从路径中映射参数，转换成数字</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var car=_.find(cars,&#123;id:id&#125;);</span><br><span class="line">      res.json(car);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Post*/</span><br><span class="line">/*添加汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.post(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      car.id=_.last(cars).id+1;  //将编号修改为最后一辆车的编号+1</span><br><span class="line">      cars.push(car);  //将汽车对象添加到集合中</span><br><span class="line">      res.json(car);  //将添加成功的车以json的形式返回</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Put*/</span><br><span class="line">/*修改汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.put(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      console.log(req.body);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:parseInt(car.id)&#125;);  //根据id获得车在集合中的下标</span><br><span class="line"></span><br><span class="line">      cars[index]=car;  //替换原对象</span><br><span class="line">      //res.json(car);  //将修改后的车以json的形式返回</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;更新成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Delete*/</span><br><span class="line">/*删除汽车*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.delete(&apos;/id/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">      //获得url中的编号参数</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:id&#125;);  //根据id获得车在集合中的下标</span><br><span class="line">      cars.splice(index,1);   //在cars数组中删除下标从index开始的1条数据</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;删除成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>示例代码app.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line">var pdts = require(&apos;./routes/product&apos;);</span><br><span class="line">var task = require(&apos;./routes/task&apos;);</span><br><span class="line">var cars = require(&apos;./routes/cars&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line">app.use(&apos;/pdt&apos;, pdts);</span><br><span class="line">app.use(&quot;/task&quot;,task);</span><br><span class="line">app.use(&quot;/cars&quot;,cars);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得所有汽车  </li><li>url /cars/</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b27eb42dea22132.jpg" alt></p><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得汽车通过id</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b28e456cdf58111.jpg" alt></p><blockquote><p><strong>Post</strong></p></blockquote><ul><li>添加汽车  </li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b30e46f28836556.jpg" alt></p><p>参数中的json格式一定要使用标准格式，注意引号，注意Content-Type，默认的Content-Type类型是：application/x-www-form-urlencoded</p><blockquote><p><strong>Put</strong></p></blockquote><ul><li>修改汽车</li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3434410e778260.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b344cd080581595.jpg" alt></p><blockquote><p><strong>Delete</strong>  </p></blockquote><ul><li>删除汽车</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3526d5bff57574.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b35474e9c447189.jpg" alt></p><p><strong>node.js跨域</strong></p><p>修改app.js文件拦截所有的请求，修改头部</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">app.all(&apos;*&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">    res.header(&quot;X-Powered-By&quot;, &apos; 3.2.1&apos;);</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);</span><br><span class="line">    if(req.method == &quot;OPTIONS&quot;) &#123;</span><br><span class="line">        res.send(&quot;200&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2017.cnblogs.com/blog/63651/201801/63651-20180108142729785-1121920664.png" alt></p><h1 id="九、视频"><a href="#九、视频" class="headerlink" title="九、视频"></a>九、<a href="https://www.bilibili.com/video/av17977069" target="_blank" rel="noopener">视频</a></h1><p>From: <a href="https://www.cnblogs.com/best/p/6204116.html" target="_blank" rel="noopener">https://www.cnblogs.com/best/p/6204116.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>front-matter</title>
    <link href="https://www.policx.com/2019/07/11/Front-matter/"/>
    <id>https://www.policx.com/2019/07/11/Front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-14T08:55:47.989Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/2019/07/11/CSDNnews/"/>
    <id>https://www.policx.com/2019/07/11/CSDNnews/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-15T06:15:13.802Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">hackernoon</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/2019/07/05/BitTorrent/"/>
    <id>https://www.policx.com/2019/07/05/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-08T15:20:42.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/2019/07/04/partner/"/>
    <id>https://www.policx.com/2019/07/04/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-12T09:50:03.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/2019/06/18/harddisk/"/>
    <id>https://www.policx.com/2019/06/18/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-08T15:20:35.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/2019/06/05/2019/"/>
    <id>https://www.policx.com/2019/06/05/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-12T09:40:14.384Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/2019/05/01/netlify/"/>
    <id>https://www.policx.com/2019/05/01/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-13T15:48:09.150Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。<br><img src="https://githubpage-1255710107.cos.ap-shanghai.myqcloud.com/static/images/KNN/hexo.png" alt></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。<br>那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。<br>接下来我分步骤的跟大家来介绍我的部署方案。</p><h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/2019/05/01/hexo-theme-icarus/"/>
    <id>https://www.policx.com/2019/05/01/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-09T14:25:12.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><ul><li>原文链接—&gt; <a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">easyhexo.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="https://www.policx.com/2018/09/17/git-del/"/>
    <id>https://www.policx.com/2018/09/17/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-13T08:10:24.253Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://www.policx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="https://www.policx.com/2018/06/19/python-excel/"/>
    <id>https://www.policx.com/2018/06/19/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-07T04:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="https://www.policx.com/2018/06/17/python-writer/"/>
    <id>https://www.policx.com/2018/06/17/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-07T04:36:07.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="https://www.policx.com/2018/06/05/2018/"/>
    <id>https://www.policx.com/2018/06/05/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-12T10:08:35.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="/post-images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymongo/"/>
    <id>https://www.policx.com/2018/05/02/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-07T04:35:29.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://www.policx.com/2018/05/02/mongodb/"/>
    <id>https://www.policx.com/2018/05/02/mongodb/</id>
    <published>2018-05-02T06:11:11.000Z</published>
    <updated>2019-07-13T08:11:55.980Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。</p><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库。</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。通常情况下，在一个集合中的所有文件都是类似或相关目的。</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。<br>下面给出的示例显示了一个博客网站，仅仅是一个逗号分隔的键值对的文档结构。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorial&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,20,2,15),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My second comments&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,25,7,45),</span><br><span class="line">         like: 5</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>MongoDB use DATABASE_NAME 用于创建数据库。该命令如果数据库不存在，将创建一个新的数据库， 否则将返回现有的数据库。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>use DATABASE语句的基本语法如下：<br><code>use DATABASE_NAME</code></p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">如果想创建一个数据库名称为 &lt;mydb&gt;, 那么 use DATABASE 语句应该如下：</span><br><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line"></span><br><span class="line">要检查当前选择的数据库使用命令 db</span><br><span class="line">&gt;db</span><br><span class="line">mydb</span><br><span class="line"></span><br><span class="line">如果想查询数据库列表，那么使用命令 show dbs.</span><br><span class="line">&gt;show dbs</span><br><span class="line">local     0.78125GB</span><br><span class="line">test      0.23012GB</span><br><span class="line"></span><br><span class="line">所创建的数据库（mydb）不存在于列表中。要显示的数据库，需要至少插入一个文档进去。</span><br><span class="line">&gt;db.movie.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;)</span><br><span class="line">&gt;show dbs</span><br><span class="line">local      0.78125GB</span><br><span class="line">mydb       0.23012GB</span><br><span class="line">test       0.23012GB</span><br></pre></td></tr></table></figure><p>MongoDB的默认数据库是test。 如果没有创建任何数据库，那么集合将被保存在测试数据库。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>MongoDB db.dropDatabase() 命令用于删除现有的数据库。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>dropDatabase()指令的基本语法如下：<br><code>db.dropDatabase()</code></p><p>这将删除选定的数据库。如果没有选择任何数据库，那么它会删除默认的“test”数据库</p><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>如果想删除新的数据库 <mydb>, 那么 dropDatabase() 命令将如下所示：</mydb></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;&#123; &quot;dropped&quot; : &quot;mydb&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>MongoDB 的 db.createCollection(name, options) 用于创建集合。 在命令中, name 是要创建集合的名称。 Options 是一个文档，用于指定集合的配置</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>String</td><td>要创建的集合的名称</td></tr><tr><td>Options</td><td>Document</td><td>（可选）指定有关内存大小和索引选项</td></tr></tbody></table><p>选项参数是可选的，所以需要指定集合的唯一名字。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>createCollection()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt;db.createCollection(&quot;mycollection&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以通过使用 show collections 命令来检查创建的集合</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;show collections</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><h3 id="选项列表"><a href="#选项列表" class="headerlink" title="选项列表"></a>选项列表</h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。</td></tr><tr><td>autoIndexID</td><td>Boolean</td><td>（可选）如果为true，自动创建索引_id字段。默认的值是 false.</td></tr><tr><td>size</td><td>number</td><td>（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。</td></tr><tr><td>max</td><td>number</td><td>（可选）指定上限集合允许的最大文件数。</td></tr></tbody></table><p>尽管插入文档，MongoDB首先检查字段集合的上限大小，那么它会检查最大字段。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法 :"></a>语法 :</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexID : true, size : 6142800, max : 10000 &#125; )</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.yiibai.insert(&#123;&quot;name&quot; : &quot;yiibai&quot;&#125;)</span><br><span class="line">&gt;show collections</span><br><span class="line">mycol</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br><span class="line">yiibai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>MongoDB 的 db.collection.drop() 用于从数据库中删除集合。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>drop() 命令的基本语法如下<br><code>db.COLLECTION_NAME.drop()</code></p><h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>下面给出的例子将删除给定名称的集合：mycollection</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.mycollection.drop()</span><br><span class="line">true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p>将数据插入到MongoDB集合，需要使用MongoDB 的 insert() 方法。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>insert()命令的基本语法如下：<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.insert(&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c),</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里 mycol 是我们的集合名称，它是在之前的教程中创建。如果集合不存在于数据库中，那么MongoDB创建此集合，然后插入文档进去。</p><p>在如果我们不指定_id参数插入的文档，那么 MongoDB 将为文档分配一个唯一的ObjectId。</p><p>_id 是12个字节十六进制数在一个集合的每个文档是唯一的。 12个字节被划分如下：<br>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</p><p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.post.insert([</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;NoSQL Database&apos;, </span><br><span class="line">   description: &apos;NoSQL database doesn&apos;t have tables&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 20, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p>要从集合查询MongoDB数据，需要使用MongoDB的 find()方法。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find()</code><br>find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p><code>&gt;db.mycol.find().pretty()</code></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>除了find()方法还有findOne()方法，仅返回一个文档。</p><h3 id="RDBMS-Where子句等效于MongoDB"><a href="#RDBMS-Where子句等效于MongoDB" class="headerlink" title="RDBMS Where子句等效于MongoDB"></a>RDBMS Where子句等效于MongoDB</h3><p>查询文档在一些条件的基础上，可以使用下面的操作</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>Equality</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td>db.mycol.find({“by”:”yiibai tutorials”}).pretty()</td><td>where by = ‘yiibai tutorials’</td></tr><tr><td>Less Than</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>Less Than Equals</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>Greater Than</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>Greater Than Equals</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>Not Equals</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="AND-在-MongoDB"><a href="#AND-在-MongoDB" class="headerlink" title="AND 在 MongoDB"></a>AND 在 MongoDB</h4><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>在 find()方法，如果您传递多个键通过”,”将它们分开，那么MongoDB对待它就如AND条件一样。基本语法如下所示：<br><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有教程含“yiibai tutorials”和其标题是“MongoDB Overview”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;yiibai tutorials&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>对于上面给出的例子相当于where子句：’ where by=’yiibai tutorials’ AND title=’MongoDB Overview’ ‘。可以传递任何数目的键-值对在find子句。</p><h4 id="OR-在-MongoDB"><a href="#OR-在-MongoDB" class="headerlink" title="OR 在 MongoDB"></a>OR 在 MongoDB</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><p>要查询基于OR条件的文件，需要使用$or关键字。OR的基本语法如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有撰写含有 ‘yiibai tutorials’ 或是标题为 ‘MongoDB Overview’ 的教程</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-AND-和-OR-在一起"><a href="#使用-AND-和-OR-在一起" class="headerlink" title="使用 AND 和 OR 在一起"></a>使用 AND 和 OR 在一起</h4><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子显示有喜欢数大于100 的文档，其标题要么是 ‘MongoDB Overview’ 或 ‘yiibai tutorials’. 等效于SQL的where子句：’where likes&gt;10 AND (by = ‘yiibai tutorials’ OR title = ‘MongoDB Overview’)’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai tutorials&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>MongoDB的update()和save()方法用于更新文档到一个集合。 update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。</p><h4 id="MongoDB-Update-方法"><a href="#MongoDB-Update-方法" class="headerlink" title="MongoDB Update() 方法"></a>MongoDB Update() 方法</h4><h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><p>update()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br></pre></td></tr></table></figure><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将设置其标题“MongoDB Overview”的文件为新标题为“New MongoDB Tutorial”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Tutorial Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 ‘multi’ 设置为 true。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="MongoDB-Save-方法"><a href="#MongoDB-Save-方法" class="headerlink" title="MongoDB Save() 方法"></a>MongoDB Save() 方法</h4><p>save() 方法取代，通过新文档到 save()方法</p><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><p>mongodb 的 save()方法如下所示的基本语法：<br><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><p>下面的例子将替换该文件_id ‘5983548781331adf45ec7’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.save(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>MongoDB 的 remove()方法用于从集合中删除文档。remove()方法接受两个参数。一个是标准缺失，第二是justOne标志<br>deletion criteria : 根据文件（可选）删除条件将被删除。<br>justOne : （可选）如果设置为true或1，然后取出只有一个文档。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>remove()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p><h6 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h6><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将删除所有的文件，其标题为 ‘MongoDB Overview’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Toturials Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="只删除一个"><a href="#只删除一个" class="headerlink" title="只删除一个"></a>只删除一个</h5><p>如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。<br><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p><h5 id="删除所有文件"><a href="#删除所有文件" class="headerlink" title="删除所有文件"></a>删除所有文件</h5><p>如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove()</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="MongoDB投影"><a href="#MongoDB投影" class="headerlink" title="MongoDB投影"></a>MongoDB投影</h4><p>mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。</p><p>MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。</p><p>语法</p><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find({},{KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示文档的标题，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意在执行find()方法时_id字段始终显示，如果不想要显示这个字段，那么需要将其设置为0</p><h5 id="限制文档"><a href="#限制文档" class="headerlink" title="限制文档"></a>限制文档</h5><p>MongoDB Limit() 方法</p><p>要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p>limit()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER)</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将只显示2个文档，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>如果不指定 limit()方法的参数数量，然后它会显示集合中的所有文档。</p><p>MongoDB Skip() 方法</p><p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。</p><p>语法</p><p>skip() 方法的基础语法如下所示：<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p><p>例子：</p><p>下面的例子将仅显示第二个文档。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，skip() 方法的默认值是 0</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p>要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。</p><p>语法</p><p>sort()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().sort({KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有如下数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示的文件排序按标题降序排序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;title&quot;:-1&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果不指定排序类型，那么 sort() 方法将以升序排列文档。</p><h4 id="MongoDB索引"><a href="#MongoDB索引" class="headerlink" title="MongoDB索引"></a>MongoDB索引</h4><p>索引支持查询高效率执行。如果没有索引，MongoDB必须扫描集合中的每一个文档，然后选择那些符合查询语句的文档。若需要 mongod 来处理大量数据，扫描是非常低效的。</p><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。</p><p>要创建索引，需要使用MongoDB的ensureIndex()方法。</p><p>语法</p><p>ensureIndex()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code></p><p>这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.</p><p>例子</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">在 ensureIndex()方法，可以通过多个字段，来创建多个字段索引。</span><br><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法还接受选项列表（这是可选），其列表如下：<br><img src="/post-images/1561132706992.png" alt></p><h4 id="MongoDB-聚合"><a href="#MongoDB-聚合" class="headerlink" title="MongoDB 聚合"></a>MongoDB 聚合</h4><p>聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。 在SQL中的count(*)，使用group by 与mongodb的聚合是等效的。 对于MongoDB的聚合，使用的是aggregate()方法。</p><p>语法</p><p>aggregate()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p><p>例子：</p><p>在集合中有以下数据：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai &apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;, </span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;, </span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;https://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在从上面的集合，如果想知道每一个用户编写的教程是多少，那么使用aggregate()方法，如下图所示的列表：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Yiibai Yiibai&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>用于上述用途将等效于sql查询： select by_user, count(*) from mycol group by by_user</code></pre><p>另外，在上述例子中，我们已经使用字段by_user进行分组并计算总和，也就是by_user 出现各个次数。一个列表中可用的聚集表达式。<br>    <img src="/post-images/1561132965786.png" alt></p><h4 id="MongoDB-复制"><a href="#MongoDB-复制" class="headerlink" title="MongoDB 复制"></a>MongoDB 复制</h4><p>复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。</p><h6 id="为什么要复制？"><a href="#为什么要复制？" class="headerlink" title="为什么要复制？"></a>为什么要复制？</h6><blockquote><pre><code>为了让数据安全数据的高（24*7）可用性灾难恢复无停机维护（如备份，索引重建，压缩）读取缩放（额外的副本来读取）副本集是透明的应用</code></pre></blockquote><h5 id="MongoDB复制的工作原理"><a href="#MongoDB复制的工作原理" class="headerlink" title="MongoDB复制的工作原理"></a>MongoDB复制的工作原理</h5><p>MongoDB通过使用副本集的复制来实现。副本集是一组承载同一个数据集的mongod实例。在副本的一个节点是接收所有的写操作主节点。所有的实例，次级，应用操作从主以便它们具有相同的数据集。副本集只能有一个主节点。</p><blockquote><pre><code>副本集是一组两个或更多个节点（通常至少3节点是必需的）。在副本集一个节点是主节点和其余的节点都是次要的。所有的数据复制是从主到次节点。在自动故障转移或维护时，选建立了主要和一个新的主节点被选择。故障节点的恢复后，再次加入副本集，并可以作为一个辅助节点。</code></pre></blockquote><p>mongodb复制的典型图如下图，其中客户端应用程序总是与主节点和主节点交互，然后将数据复制到辅助节点。<br><img src="/post-images/1561133216694.png" alt><br>副本集特征</p><ul><li>N个节点的集群</li><li>任何节点可为原发/主节点</li><li>所有的写操作进入到主节点</li><li>自动故障转移</li><li>自动恢复</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.policx.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MySQL 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymysql/"/>
    <id>https://www.policx.com/2018/05/02/pymysql/</id>
    <published>2018-05-02T03:14:27.000Z</published>
    <updated>2019-07-13T08:15:01.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是-PyMySQL？"><a href="#什么是-PyMySQL？" class="headerlink" title="什么是 PyMySQL？"></a>什么是 PyMySQL？</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><a id="more"></a> <h2 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h2><p>在文件中引入模块</p><p><code>import pymysql</code></p><h3 id="1-Connection对象"><a href="#1-Connection对象" class="headerlink" title="1.Connection对象"></a>1.Connection对象</h3><p>•  用于建立与数据库的连接<br>•  创建对象：调用connect()方法<br>conn=connect(参数列表)<br>•  参数host：连接的mysql主机，如果本机是’localhost’<br>•  参数port：连接的mysql主机的端口，默认是3306<br>•  参数db：数据库的名称<br>•  参数user：连接的用户名<br>•  参数password：连接的密码<br>•  参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</p><h3 id="2-对象的方法"><a href="#2-对象的方法" class="headerlink" title="2.对象的方法"></a>2.对象的方法</h3><p>•  close()关闭连接<br>•  commit()事务，所以需要提交才会生效<br>•  rollback()事务，放弃之前的操作<br>•  cursor()返回Cursor对象，用于执行sql语句并获得结果</p><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><p>•  执行sql语句<br>•  创建对象：调用Connection对象的cursor()方法<br>cursor1=conn.cursor()</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>•  close()关闭<br>•  execute(operation [, parameters ])执行语句，返回受影响的行数<br>•  fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组<br>•  next()执行查询语句时，获取当前行的下一行<br>•  fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回<br>•  scroll(value[,mode])将行指针移动到某个位置<br>•  mode表示移动的方式<br>•  mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动。相对的<br>•  mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0，绝对的。</p><h4 id="举个例子便于理解"><a href="#举个例子便于理解" class="headerlink" title="举个例子便于理解"></a>举个例子便于理解</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 导入python操作mysql的模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> pymysql</span><br><span class="line"><span class="hljs-comment"># 获取连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="hljs-string">'127.0.0.1'</span>, user=<span class="hljs-string">'root'</span>, password=<span class="hljs-string">'123456'</span>, database=<span class="hljs-string">'python01'</span>, port=<span class="hljs-number">3306</span>, charset=<span class="hljs-string">'utf8'</span>)</span><br><span class="line"><span class="hljs-comment"># 获取执行工具</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="hljs-comment"># sql语句,增删改</span></span><br><span class="line"><span class="hljs-comment">#sql = 'select birthday from t_user'</span></span><br><span class="line">sql = <span class="hljs-string">'select id,name,pwd,birthday from t_user'</span></span><br><span class="line"><span class="hljs-comment"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span></span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(<span class="hljs-string">'查询的结果有%s条数据'</span>%count)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取第一行</span></span><br><span class="line">dateOne = cur.fetchone()</span><br><span class="line">print(dateOne)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向上移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向下移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'absolute'</span>)   绝对的，这里指的是第一行</span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'relative'</span>)   相对的</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取所有行的数据</span></span><br><span class="line">dataAll = cur.fetchall()</span><br><span class="line">print(dataAll)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">     print(temp)</span><br><span class="line">     print(dataAll[<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])      <span class="hljs-comment">#dataAll[-1]得到的是一个用户所有的信息，dataAll[-1][2]获取最后一个人的密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> cur:</span><br><span class="line">     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-string">'id:%s,name:%s,pwd:%s,birthday:%s'</span></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">    print(s%(temp[<span class="hljs-number">0</span>],temp[<span class="hljs-number">1</span>],temp[<span class="hljs-number">2</span>],temp[<span class="hljs-number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-对象的属性"><a href="#3-对象的属性" class="headerlink" title="3.对象的属性"></a>3.对象的属性</h3><p>•  rowcount只读属性，表示最近一次execute()执行后受影响的行数<br>•  connection获得当前连接对象</p><h3 id="2-增删改查-CRUD"><a href="#2-增删改查-CRUD" class="headerlink" title="2.增删改查(CRUD)"></a>2.增删改查(CRUD)</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>•  创建testInsert.py文件，向学生表中插入一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;insert into students(sname) values(&apos;张良&apos;)&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p>•  创建testUpdate.py文件，修改学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;update students set sname=&apos;刘邦&apos; where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>•  创建testDelete.py文件，删除学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8 import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;delete from students where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>•  创建testSelectOne.py文件，查询一条学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Pymysql try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>•  创建testSelectMany.py文件，查询全部学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf8 import Pymysql</span><br><span class="line">try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="实例一：参数"><a href="#实例一：参数" class="headerlink" title="实例一：参数"></a>实例一：参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改，sql注入</span><br><span class="line">sql = &apos;insert into t_user(name,pwd,birthday) values(%s,%s,%s)&apos;</span><br><span class="line"># 参数列表</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = input(&apos;输入生日:&apos;)     # 2017年10月01日--&gt;日期struct_time(---&gt;2017-10-01)</span><br><span class="line">birthday = time.strptime(birthday,&apos;%Y年%m月%d日&apos;)      #这里我们就用到了时间与字符串的相互转换(详情见MySQL高级)</span><br><span class="line"></span><br><span class="line">params = [name,pwd,birthday]</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql,params)</span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">print(&apos;受影响的行数:%s&apos;%count)</span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例二：抛出异常"><a href="#实例二：抛出异常" class="headerlink" title="实例二：抛出异常"></a>实例二：抛出异常</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    conn = None</span><br><span class="line">    cur = None</span><br><span class="line">    # 获取连接对象</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">                           user=&apos;root&apos;,</span><br><span class="line">                           password=&apos;123456&apos;,</span><br><span class="line">                           database=&apos;python01&apos;,</span><br><span class="line">                           port=3306,</span><br><span class="line">                           charset=&apos;utf8&apos;)</span><br><span class="line">    # 模拟异常</span><br><span class="line">    # a = 1 / 0</span><br><span class="line">    # 获取执行工具</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    # sql语句,增删改</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd,birthday) values(&quot;小伊&quot;,&quot;123456&quot;,str_to_date(&quot;2017年10月20日&quot;,&quot;%Y年%m月%d日&quot;))&apos;</span><br><span class="line">    # 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">    count = cur.execute(sql)</span><br><span class="line">    # 提交</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(&apos;受影响的行数:%s&apos; % count)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    # 打印异常信息，测试时候使用，项目上线，去掉</span><br><span class="line">    print(str(ex))</span><br><span class="line">    # 将异常继续抛出</span><br><span class="line">    # raise</span><br><span class="line">finally:</span><br><span class="line">    if cur != None:</span><br><span class="line">        cur.close()</span><br><span class="line">    if conn != None:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例三："><a href="#实例三：" class="headerlink" title="实例三："></a>实例三：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改</span><br><span class="line">#sql = &apos;select birthday from t_user&apos;</span><br><span class="line">sql = &apos;select id,name,pwd,birthday from t_user&apos;</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(&apos;查询的结果有%s条数据&apos;%count)</span><br><span class="line"></span><br><span class="line">#获取第一行</span><br><span class="line"># dateOne = cur.fetchone()</span><br><span class="line"># print(dateOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for temp in cur:</span><br><span class="line">#     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;id:%s,name:%s,pwd:%s,birthday:%s&apos;</span><br><span class="line">for temp in dataAll:</span><br><span class="line">    print(s%(temp[0],temp[1],temp[2],temp[3]))</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h3><p>这个库的名字：mySqlHelper</p><p> python操作mysql进行增删改查的封装</p><pre><code>1、增删改，代码类似2、查询代码分析1、获取连接对象2、sql语句不同，参数不同3、获取执行对象    增删改    查询        1、fetchone        2、fetchall4、处理结果5、关闭</code></pre><h4 id="面向对象-建立类，封装属性和函数"><a href="#面向对象-建立类，封装属性和函数" class="headerlink" title="面向对象  建立类，封装属性和函数"></a>面向对象  建立类，封装属性和函数</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">class MysqlHelper:</span><br><span class="line">    &apos;&apos;&apos;python操作mysql的增删改查的封装&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, host, user, password, database, port=3306, charset=&apos;utf8&apos;):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化参数</span><br><span class="line">        :param host:        主机</span><br><span class="line">        :param user:        用户名</span><br><span class="line">        :param password:    密码</span><br><span class="line">        :param database:    数据库</span><br><span class="line">        :param port:        端口号，默认是3306</span><br><span class="line">        :param charset:     编码，默认是utf8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        获取连接对象和执行对象</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.conn = pymysql.connect(host=self.host,</span><br><span class="line">                                    user=self.user,</span><br><span class="line">                                    password=self.password,</span><br><span class="line">                                    database=self.database,</span><br><span class="line">                                    port=self.port,</span><br><span class="line">                                    charset=self.charset)</span><br><span class="line"></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    def fetchone(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数元组，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataOne = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataOne = self.cur.fetchone()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataOne</span><br><span class="line"></span><br><span class="line">    def fetchall(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数列表，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataall = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataall = self.cur.fetchall()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataall</span><br><span class="line"></span><br><span class="line">    def __item(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行增删改</span><br><span class="line">        :param sql:           sql语句</span><br><span class="line">        :param params:        sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:              受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        count = 0</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行修改</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def insert(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行新增</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def delete(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行删除</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        关闭执行工具和连接对象</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if self.cur != None:</span><br><span class="line">            self.cur.close()</span><br><span class="line">        if self.conn != None:</span><br><span class="line">            self.conn.close()</span><br></pre></td></tr></table></figure><h4 id="1-测试查询多条数据"><a href="#1-测试查询多条数据" class="headerlink" title="1.测试查询多条数据"></a>1.测试查询多条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where name = %s and id &gt; %s&apos;</span><br><span class="line"># params</span><br><span class="line">params = [&apos;小茗&apos;,1]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchall(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    for temp in data:</span><br><span class="line">        print(temp)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br><span class="line"></span><br><span class="line">helper.close()</span><br></pre></td></tr></table></figure><h4 id="2-测试查询一条数据"><a href="#2-测试查询一条数据" class="headerlink" title="2.测试查询一条数据"></a>2.测试查询一条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where id = %s&apos;</span><br><span class="line">#sql = &apos;select * from t_user where id = 1&apos;</span><br><span class="line"># params</span><br><span class="line">params = [2]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchone(sql, params)</span><br><span class="line">#data = helper.fetchone(sql)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    print(data)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br></pre></td></tr></table></figure><h4 id="3-测试增删改"><a href="#3-测试增删改" class="headerlink" title="3.测试增删改"></a>3.测试增删改</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;update t_user set name =%s,pwd=%s,birthday=%s where id=%s&apos;</span><br><span class="line"># params</span><br><span class="line">id = input(&apos;输入编号:&apos;)</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = time.strptime(input(&apos;输入生日:&apos;), &apos;%Y年%m月%d日&apos;)</span><br><span class="line">params = [name, pwd, birthday,id]</span><br><span class="line"># 执行</span><br><span class="line">count = helper.update(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if count:</span><br><span class="line">    print(&apos;操作成功.&apos;)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;操作失败.&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-登录和注册"><a href="#4-登录和注册" class="headerlink" title="4.登录和注册"></a>4.登录和注册</h4><p>登录和注册的时候需要对密码进行加密</p><p>注意：</p><p>•  需要对密码进行加密<br>•  如果使用md5加密，则密码包含32个字符<br>•  如果使用sha1加密，则密码包含40个字符，这里使用这种方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table userinfos(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    uname varchar(20),</span><br><span class="line">    upwd char(40),</span><br><span class="line">    isdelete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">ret = doPwd(&apos;123&apos;)</span><br><span class="line">print(ret)</span><br><span class="line">结果：40bd001563085fc35165329ea1ff5c5ecbdbbeef</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">-- 插入如下数据，用户名为123,密码为123,这是sha1加密后的值</span><br><span class="line"></span><br><span class="line">insert into userinfos </span><br><span class="line">values(1,&apos;123&apos;,&apos;40bd001563085fc35165329ea1ff5c5ecbdbbeef&apos;,0);</span><br></pre></td></tr></table></figure><h4 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from mysqlHelper import MysqlHelper</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    &apos;&apos;&apos;登录&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    #加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;select * from t_user where name=%s and pwd=%s&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    data = helper.fetchone(sql, params)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;登录成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;登录失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doPwd(pwd):</span><br><span class="line">    &apos;&apos;&apos;sha1编码&apos;&apos;&apos;</span><br><span class="line">    mysha1 = hashlib.sha1()</span><br><span class="line">    mysha1.update(pwd.encode(&apos;utf-8&apos;))</span><br><span class="line">    pwd = mysha1.hexdigest()</span><br><span class="line">    return pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    &apos;&apos;&apos;注册&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    # 加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd) values(%s,%s)&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    count = helper.insert(sql, params)</span><br><span class="line">    if count:</span><br><span class="line">        print(&apos;操作成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;操作失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #register()</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PyMySQL？&quot;&gt;&lt;a href=&quot;#什么是-PyMySQL？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PyMySQL？&quot;&gt;&lt;/a&gt;什么是 PyMySQL？&lt;/h2&gt;&lt;p&gt;PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。&lt;/p&gt;
&lt;p&gt;PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django笔记</title>
    <link href="https://www.policx.com/2018/04/18/django-bi-ji/"/>
    <id>https://www.policx.com/2018/04/18/django-bi-ji/</id>
    <published>2018-04-17T17:00:16.000Z</published>
    <updated>2019-07-12T10:07:09.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p><a id="more"></a><h2 id="一-版本选择"><a href="#一-版本选择" class="headerlink" title="一. 版本选择"></a>一. 版本选择</h2><p>Django 2.0.x 支持 Python 3.4, 3.5 和 3.6 （注意，不再支持 Python 2）   </p><h2 id="二-安装-Django"><a href="#二-安装-Django" class="headerlink" title="二. 安装 Django"></a><strong>二. 安装 Django</strong></h2><p><strong>2.1. 用 pip 来安装</strong></p><p><strong>2.1.1 需要先安装pip</strong></p><p>(1). Linux, Mac OSX, Windows 下都可用 get-pip.py 来安装<br>pip：<a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/installing.html</a>  </p><p>或者直接下载：<a href="https://bootstrap.pypa.io/get-pip.py" title="get-pip.py" target="_blank" rel="noopener">get-pip.py</a> 然后运行在终端运行 <strong>python get-pip.py 就可以安装 pip。</strong></p><p>Note: 也可以下载 pip 源码包，运行 <strong>python setup.py install</strong> 进行安装 </p><p><strong>2.1.2 利用 pip 安装 Django</strong></p><p><code>（sudo) pip install Django    或者(sudo) pip install Django==1.8.16 或者 pip install Django==1.11.8</code>    </p><p>如果想升级 pip 可以用： </p><pre><code>(sudo) pip install --upgrade pip</code></pre><p><strong>2.2. 下载源码安装</strong>  </p><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">https://www.djangoproject.com/download/</a></p><p>如果是源码包, 比如 django-1.11.8.tar.gz </p><p><strong>2.2.1 Linux 或 Mac 下</strong></p><pre><code>tar -xvf django-1.11.8.tar.gzcd django-1.11.8(sudo) python setup.py install</code></pre><h2 id="三-检查是否安装成功"><a href="#三-检查是否安装成功" class="headerlink" title="三. 检查是否安装成功"></a><strong>三. 检查是否安装成功</strong></h2><p>终端上输入 python ,点击 Enter，进行 python 环境</p><pre><code>&gt;&gt;&gt; import django&gt;&gt;&gt; django.VERSION(1, 11, 8, &apos;final&apos;, 0)&gt;&gt;&gt; &gt;&gt;&gt; django.get_version()&apos;1.11.8&apos;</code></pre><p>如果运行后看到版本号，就证明安装成功了！ </p><h2 id="四-搭建多个互不干扰的开发环境（可选）"><a href="#四-搭建多个互不干扰的开发环境（可选）" class="headerlink" title="四. 搭建多个互不干扰的开发环境（可选）"></a><strong>四. 搭建多个互不干扰的开发环境（可选）</strong></h2><p>我们有的时候会发现，一个电脑上有多个项目，一个依赖 Django 1.8，另一个比较旧的项目又要用 Django 1.5，这时候怎么办呢？ </p><p>我们需要一个依赖包管理的工具来处理不同的环境。 </p><h3 id="4-1-虚拟环境依赖安装"><a href="#4-1-虚拟环境依赖安装" class="headerlink" title="4.1 虚拟环境依赖安装"></a>4.1 虚拟环境依赖安装</h3><p>开发会用 virtualenv 来管理多个开发环境 </p><p><strong>Linux/MacOS 下</strong></p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了 </p><pre><code># 安装:(sudo) pip install virtualenv virtualenvwrapper</code></pre><p>修改~/.bash_profile或其它环境变量相关文件(如 .bashrc 或用 ZSH 之后的 .zshrc)，添加以下语句  </p><pre><code>export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/workspacesource /usr/local/bin/virtualenvwrapper.sh</code></pre><p>修改后使之立即生效(也可以重启终端使之生效)： </p><pre><code>source ~/.bash_profile</code></pre><h3 id="4-2-虚拟环境使用方法："><a href="#4-2-虚拟环境使用方法：" class="headerlink" title="4.2 虚拟环境使用方法："></a><strong>4.2 虚拟环境使用方法：</strong></h3><p><strong>mkvirtualenv zqxt：创建运行环境zqxt</strong></p><p><strong>workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境</strong></p><p><strong>deactivate</strong>: 退出终端环境</p><p><strong>其它的：</strong></p><p><strong>rmvirtualenv</strong> ENV：删除运行环境ENV </p><p><strong>mkproject</strong> mic：创建mic项目和运行环境mic </p><p><strong>mktmpenv</strong>：创建临时运行环境 </p><p><strong>lsvirtualenv</strong>: 列出可用的运行环境 </p><p><strong>lssitepackages</strong>: 列出当前环境安装了的包 </p><p>创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
</feed>
