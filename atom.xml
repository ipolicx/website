<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>River and lake</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-07T15:43:34.134Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="http://yoursite.com/2019/07/07/hexo-theme-icarus/"/>
    <id>http://yoursite.com/2019/07/07/hexo-theme-icarus/</id>
    <published>2019-07-07T12:37:10.000Z</published>
    <updated>2019-07-07T15:43:34.134Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><ul><li>原文链接—&gt; <a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">easyhexo.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="http://yoursite.com/2019/07/05/BitTorrent/"/>
    <id>http://yoursite.com/2019/07/05/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-08T15:02:07.475Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="http://yoursite.com/2019/07/04/partner/"/>
    <id>http://yoursite.com/2019/07/04/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-08T03:27:19.057Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="http://yoursite.com/2019/06/18/harddisk/"/>
    <id>http://yoursite.com/2019/06/18/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-08T15:18:39.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="http://yoursite.com/2019/06/05/2019/"/>
    <id>http://yoursite.com/2019/06/05/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-07T12:07:13.363Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="https://www.policx.com/talk/images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="http://yoursite.com/categories/news/"/>
    
    
      <category term="" scheme="http://yoursite.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="http://yoursite.com/2018/09/17/git-del/"/>
    <id>http://yoursite.com/2018/09/17/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-07T04:27:26.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="http://yoursite.com/2018/06/19/python-excel/"/>
    <id>http://yoursite.com/2018/06/19/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-07T04:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="http://yoursite.com/2018/06/17/python-writer/"/>
    <id>http://yoursite.com/2018/06/17/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-07T04:36:07.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="http://yoursite.com/2018/06/05/2018/"/>
    <id>http://yoursite.com/2018/06/05/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-04T01:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="https://www.policx.com/talk/images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="http://yoursite.com/categories/news/"/>
    
    
      <category term="" scheme="http://yoursite.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="http://yoursite.com/2018/05/02/pymongo/"/>
    <id>http://yoursite.com/2018/05/02/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-07T04:35:29.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="http://yoursite.com/2018/05/02/mongodb/"/>
    <id>http://yoursite.com/2018/05/02/mongodb/</id>
    <published>2018-05-02T06:11:11.000Z</published>
    <updated>2019-07-07T04:23:34.820Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。</p><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库。</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。通常情况下，在一个集合中的所有文件都是类似或相关目的。</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。<br>下面给出的示例显示了一个博客网站，仅仅是一个逗号分隔的键值对的文档结构。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorial&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,20,2,15),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My second comments&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,25,7,45),</span><br><span class="line">         like: 5</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>MongoDB use DATABASE_NAME 用于创建数据库。该命令如果数据库不存在，将创建一个新的数据库， 否则将返回现有的数据库。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>use DATABASE语句的基本语法如下：<br><code>use DATABASE_NAME</code></p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">如果想创建一个数据库名称为 &lt;mydb&gt;, 那么 use DATABASE 语句应该如下：</span><br><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line"></span><br><span class="line">要检查当前选择的数据库使用命令 db</span><br><span class="line">&gt;db</span><br><span class="line">mydb</span><br><span class="line"></span><br><span class="line">如果想查询数据库列表，那么使用命令 show dbs.</span><br><span class="line">&gt;show dbs</span><br><span class="line">local     0.78125GB</span><br><span class="line">test      0.23012GB</span><br><span class="line"></span><br><span class="line">所创建的数据库（mydb）不存在于列表中。要显示的数据库，需要至少插入一个文档进去。</span><br><span class="line">&gt;db.movie.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;)</span><br><span class="line">&gt;show dbs</span><br><span class="line">local      0.78125GB</span><br><span class="line">mydb       0.23012GB</span><br><span class="line">test       0.23012GB</span><br></pre></td></tr></table></figure><p>MongoDB的默认数据库是test。 如果没有创建任何数据库，那么集合将被保存在测试数据库。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>MongoDB db.dropDatabase() 命令用于删除现有的数据库。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>dropDatabase()指令的基本语法如下：<br><code>db.dropDatabase()</code></p><p>这将删除选定的数据库。如果没有选择任何数据库，那么它会删除默认的“test”数据库</p><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>如果想删除新的数据库 <mydb>, 那么 dropDatabase() 命令将如下所示：</mydb></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;&#123; &quot;dropped&quot; : &quot;mydb&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>MongoDB 的 db.createCollection(name, options) 用于创建集合。 在命令中, name 是要创建集合的名称。 Options 是一个文档，用于指定集合的配置</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>String</td><td>要创建的集合的名称</td></tr><tr><td>Options</td><td>Document</td><td>（可选）指定有关内存大小和索引选项</td></tr></tbody></table><p>选项参数是可选的，所以需要指定集合的唯一名字。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>createCollection()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt;db.createCollection(&quot;mycollection&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以通过使用 show collections 命令来检查创建的集合</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;show collections</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><h3 id="选项列表"><a href="#选项列表" class="headerlink" title="选项列表"></a>选项列表</h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。</td></tr><tr><td>autoIndexID</td><td>Boolean</td><td>（可选）如果为true，自动创建索引_id字段。默认的值是 false.</td></tr><tr><td>size</td><td>number</td><td>（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。</td></tr><tr><td>max</td><td>number</td><td>（可选）指定上限集合允许的最大文件数。</td></tr></tbody></table><p>尽管插入文档，MongoDB首先检查字段集合的上限大小，那么它会检查最大字段。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法 :"></a>语法 :</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexID : true, size : 6142800, max : 10000 &#125; )</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.yiibai.insert(&#123;&quot;name&quot; : &quot;yiibai&quot;&#125;)</span><br><span class="line">&gt;show collections</span><br><span class="line">mycol</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br><span class="line">yiibai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>MongoDB 的 db.collection.drop() 用于从数据库中删除集合。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>drop() 命令的基本语法如下<br><code>db.COLLECTION_NAME.drop()</code></p><h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>下面给出的例子将删除给定名称的集合：mycollection</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.mycollection.drop()</span><br><span class="line">true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p>将数据插入到MongoDB集合，需要使用MongoDB 的 insert() 方法。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>insert()命令的基本语法如下：<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.insert(&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c),</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里 mycol 是我们的集合名称，它是在之前的教程中创建。如果集合不存在于数据库中，那么MongoDB创建此集合，然后插入文档进去。</p><p>在如果我们不指定_id参数插入的文档，那么 MongoDB 将为文档分配一个唯一的ObjectId。</p><p>_id 是12个字节十六进制数在一个集合的每个文档是唯一的。 12个字节被划分如下：<br>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</p><p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.post.insert([</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;NoSQL Database&apos;, </span><br><span class="line">   description: &apos;NoSQL database doesn&apos;t have tables&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 20, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p>要从集合查询MongoDB数据，需要使用MongoDB的 find()方法。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find()</code><br>find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p><code>&gt;db.mycol.find().pretty()</code></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>除了find()方法还有findOne()方法，仅返回一个文档。</p><h3 id="RDBMS-Where子句等效于MongoDB"><a href="#RDBMS-Where子句等效于MongoDB" class="headerlink" title="RDBMS Where子句等效于MongoDB"></a>RDBMS Where子句等效于MongoDB</h3><p>查询文档在一些条件的基础上，可以使用下面的操作</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>Equality</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td>db.mycol.find({“by”:”yiibai tutorials”}).pretty()</td><td>where by = ‘yiibai tutorials’</td></tr><tr><td>Less Than</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>Less Than Equals</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>Greater Than</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>Greater Than Equals</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>Not Equals</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="AND-在-MongoDB"><a href="#AND-在-MongoDB" class="headerlink" title="AND 在 MongoDB"></a>AND 在 MongoDB</h4><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>在 find()方法，如果您传递多个键通过”,”将它们分开，那么MongoDB对待它就如AND条件一样。基本语法如下所示：<br><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有教程含“yiibai tutorials”和其标题是“MongoDB Overview”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;yiibai tutorials&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>对于上面给出的例子相当于where子句：’ where by=’yiibai tutorials’ AND title=’MongoDB Overview’ ‘。可以传递任何数目的键-值对在find子句。</p><h4 id="OR-在-MongoDB"><a href="#OR-在-MongoDB" class="headerlink" title="OR 在 MongoDB"></a>OR 在 MongoDB</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><p>要查询基于OR条件的文件，需要使用$or关键字。OR的基本语法如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有撰写含有 ‘yiibai tutorials’ 或是标题为 ‘MongoDB Overview’ 的教程</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-AND-和-OR-在一起"><a href="#使用-AND-和-OR-在一起" class="headerlink" title="使用 AND 和 OR 在一起"></a>使用 AND 和 OR 在一起</h4><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子显示有喜欢数大于100 的文档，其标题要么是 ‘MongoDB Overview’ 或 ‘yiibai tutorials’. 等效于SQL的where子句：’where likes&gt;10 AND (by = ‘yiibai tutorials’ OR title = ‘MongoDB Overview’)’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai tutorials&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>MongoDB的update()和save()方法用于更新文档到一个集合。 update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。</p><h4 id="MongoDB-Update-方法"><a href="#MongoDB-Update-方法" class="headerlink" title="MongoDB Update() 方法"></a>MongoDB Update() 方法</h4><h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><p>update()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br></pre></td></tr></table></figure><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将设置其标题“MongoDB Overview”的文件为新标题为“New MongoDB Tutorial”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Tutorial Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 ‘multi’ 设置为 true。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="MongoDB-Save-方法"><a href="#MongoDB-Save-方法" class="headerlink" title="MongoDB Save() 方法"></a>MongoDB Save() 方法</h4><p>save() 方法取代，通过新文档到 save()方法</p><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><p>mongodb 的 save()方法如下所示的基本语法：<br><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><p>下面的例子将替换该文件_id ‘5983548781331adf45ec7’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.save(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>MongoDB 的 remove()方法用于从集合中删除文档。remove()方法接受两个参数。一个是标准缺失，第二是justOne标志<br>deletion criteria : 根据文件（可选）删除条件将被删除。<br>justOne : （可选）如果设置为true或1，然后取出只有一个文档。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>remove()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p><h6 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h6><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将删除所有的文件，其标题为 ‘MongoDB Overview’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Toturials Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="只删除一个"><a href="#只删除一个" class="headerlink" title="只删除一个"></a>只删除一个</h5><p>如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。<br><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p><h5 id="删除所有文件"><a href="#删除所有文件" class="headerlink" title="删除所有文件"></a>删除所有文件</h5><p>如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove()</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="MongoDB投影"><a href="#MongoDB投影" class="headerlink" title="MongoDB投影"></a>MongoDB投影</h4><p>mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。</p><p>MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。</p><p>语法</p><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find({},{KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示文档的标题，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意在执行find()方法时_id字段始终显示，如果不想要显示这个字段，那么需要将其设置为0</p><h5 id="限制文档"><a href="#限制文档" class="headerlink" title="限制文档"></a>限制文档</h5><p>MongoDB Limit() 方法</p><p>要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p>limit()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER)</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将只显示2个文档，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>如果不指定 limit()方法的参数数量，然后它会显示集合中的所有文档。</p><p>MongoDB Skip() 方法</p><p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。</p><p>语法</p><p>skip() 方法的基础语法如下所示：<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p><p>例子：</p><p>下面的例子将仅显示第二个文档。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，skip() 方法的默认值是 0</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p>要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。</p><p>语法</p><p>sort()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().sort({KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有如下数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示的文件排序按标题降序排序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;title&quot;:-1&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果不指定排序类型，那么 sort() 方法将以升序排列文档。</p><h4 id="MongoDB索引"><a href="#MongoDB索引" class="headerlink" title="MongoDB索引"></a>MongoDB索引</h4><p>索引支持查询高效率执行。如果没有索引，MongoDB必须扫描集合中的每一个文档，然后选择那些符合查询语句的文档。若需要 mongod 来处理大量数据，扫描是非常低效的。</p><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。</p><p>要创建索引，需要使用MongoDB的ensureIndex()方法。</p><p>语法</p><p>ensureIndex()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code></p><p>这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.</p><p>例子</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">在 ensureIndex()方法，可以通过多个字段，来创建多个字段索引。</span><br><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法还接受选项列表（这是可选），其列表如下：<br><img src="https://policx.github.io/post-images/1561132706992.png" alt></p><h4 id="MongoDB-聚合"><a href="#MongoDB-聚合" class="headerlink" title="MongoDB 聚合"></a>MongoDB 聚合</h4><p>聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。 在SQL中的count(*)，使用group by 与mongodb的聚合是等效的。 对于MongoDB的聚合，使用的是aggregate()方法。</p><p>语法</p><p>aggregate()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p><p>例子：</p><p>在集合中有以下数据：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai &apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;, </span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;, </span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;http://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在从上面的集合，如果想知道每一个用户编写的教程是多少，那么使用aggregate()方法，如下图所示的列表：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Yiibai Yiibai&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>用于上述用途将等效于sql查询： select by_user, count(*) from mycol group by by_user</code></pre><p>另外，在上述例子中，我们已经使用字段by_user进行分组并计算总和，也就是by_user 出现各个次数。一个列表中可用的聚集表达式。<br>    <img src="https://policx.github.io/post-images/1561132965786.png" alt></p><h4 id="MongoDB-复制"><a href="#MongoDB-复制" class="headerlink" title="MongoDB 复制"></a>MongoDB 复制</h4><p>复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。</p><h6 id="为什么要复制？"><a href="#为什么要复制？" class="headerlink" title="为什么要复制？"></a>为什么要复制？</h6><blockquote><pre><code>为了让数据安全数据的高（24*7）可用性灾难恢复无停机维护（如备份，索引重建，压缩）读取缩放（额外的副本来读取）副本集是透明的应用</code></pre></blockquote><h5 id="MongoDB复制的工作原理"><a href="#MongoDB复制的工作原理" class="headerlink" title="MongoDB复制的工作原理"></a>MongoDB复制的工作原理</h5><p>MongoDB通过使用副本集的复制来实现。副本集是一组承载同一个数据集的mongod实例。在副本的一个节点是接收所有的写操作主节点。所有的实例，次级，应用操作从主以便它们具有相同的数据集。副本集只能有一个主节点。</p><blockquote><pre><code>副本集是一组两个或更多个节点（通常至少3节点是必需的）。在副本集一个节点是主节点和其余的节点都是次要的。所有的数据复制是从主到次节点。在自动故障转移或维护时，选建立了主要和一个新的主节点被选择。故障节点的恢复后，再次加入副本集，并可以作为一个辅助节点。</code></pre></blockquote><p>mongodb复制的典型图如下图，其中客户端应用程序总是与主节点和主节点交互，然后将数据复制到辅助节点。<br><img src="https://policx.github.io/post-images/1561133216694.png" alt><br>副本集特征</p><ul><li>N个节点的集群</li><li>任何节点可为原发/主节点</li><li>所有的写操作进入到主节点</li><li>自动故障转移</li><li>自动恢复</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MySQL 之间的交互</title>
    <link href="http://yoursite.com/2018/05/02/pymysql/"/>
    <id>http://yoursite.com/2018/05/02/pymysql/</id>
    <published>2018-05-02T03:14:27.000Z</published>
    <updated>2019-07-07T04:35:38.926Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是-PyMySQL？"><a href="#什么是-PyMySQL？" class="headerlink" title="什么是 PyMySQL？"></a>什么是 PyMySQL？</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><a id="more"></a> <h2 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h2><p>在文件中引入模块</p><p><code>import pymysql</code></p><h3 id="1-Connection对象"><a href="#1-Connection对象" class="headerlink" title="1.Connection对象"></a>1.Connection对象</h3><p>•  用于建立与数据库的连接<br>•  创建对象：调用connect()方法<br>conn=connect(参数列表)<br>•  参数host：连接的mysql主机，如果本机是’localhost’<br>•  参数port：连接的mysql主机的端口，默认是3306<br>•  参数db：数据库的名称<br>•  参数user：连接的用户名<br>•  参数password：连接的密码<br>•  参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</p><h3 id="2-对象的方法"><a href="#2-对象的方法" class="headerlink" title="2.对象的方法"></a>2.对象的方法</h3><p>•  close()关闭连接<br>•  commit()事务，所以需要提交才会生效<br>•  rollback()事务，放弃之前的操作<br>•  cursor()返回Cursor对象，用于执行sql语句并获得结果</p><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><p>•  执行sql语句<br>•  创建对象：调用Connection对象的cursor()方法<br>cursor1=conn.cursor()</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>•  close()关闭<br>•  execute(operation [, parameters ])执行语句，返回受影响的行数<br>•  fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组<br>•  next()执行查询语句时，获取当前行的下一行<br>•  fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回<br>•  scroll(value[,mode])将行指针移动到某个位置<br>•  mode表示移动的方式<br>•  mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动。相对的<br>•  mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0，绝对的。</p><h4 id="举个例子便于理解"><a href="#举个例子便于理解" class="headerlink" title="举个例子便于理解"></a>举个例子便于理解</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 导入python操作mysql的模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> pymysql</span><br><span class="line"><span class="hljs-comment"># 获取连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="hljs-string">'127.0.0.1'</span>, user=<span class="hljs-string">'root'</span>, password=<span class="hljs-string">'123456'</span>, database=<span class="hljs-string">'python01'</span>, port=<span class="hljs-number">3306</span>, charset=<span class="hljs-string">'utf8'</span>)</span><br><span class="line"><span class="hljs-comment"># 获取执行工具</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="hljs-comment"># sql语句,增删改</span></span><br><span class="line"><span class="hljs-comment">#sql = 'select birthday from t_user'</span></span><br><span class="line">sql = <span class="hljs-string">'select id,name,pwd,birthday from t_user'</span></span><br><span class="line"><span class="hljs-comment"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span></span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(<span class="hljs-string">'查询的结果有%s条数据'</span>%count)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取第一行</span></span><br><span class="line">dateOne = cur.fetchone()</span><br><span class="line">print(dateOne)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向上移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向下移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'absolute'</span>)   绝对的，这里指的是第一行</span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'relative'</span>)   相对的</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取所有行的数据</span></span><br><span class="line">dataAll = cur.fetchall()</span><br><span class="line">print(dataAll)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">     print(temp)</span><br><span class="line">     print(dataAll[<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])      <span class="hljs-comment">#dataAll[-1]得到的是一个用户所有的信息，dataAll[-1][2]获取最后一个人的密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> cur:</span><br><span class="line">     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-string">'id:%s,name:%s,pwd:%s,birthday:%s'</span></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">    print(s%(temp[<span class="hljs-number">0</span>],temp[<span class="hljs-number">1</span>],temp[<span class="hljs-number">2</span>],temp[<span class="hljs-number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-对象的属性"><a href="#3-对象的属性" class="headerlink" title="3.对象的属性"></a>3.对象的属性</h3><p>•  rowcount只读属性，表示最近一次execute()执行后受影响的行数<br>•  connection获得当前连接对象</p><h3 id="2-增删改查-CRUD"><a href="#2-增删改查-CRUD" class="headerlink" title="2.增删改查(CRUD)"></a>2.增删改查(CRUD)</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>•  创建testInsert.py文件，向学生表中插入一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;insert into students(sname) values(&apos;张良&apos;)&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p>•  创建testUpdate.py文件，修改学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;update students set sname=&apos;刘邦&apos; where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>•  创建testDelete.py文件，删除学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8 import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;delete from students where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>•  创建testSelectOne.py文件，查询一条学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Pymysql try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>•  创建testSelectMany.py文件，查询全部学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf8 import Pymysql</span><br><span class="line">try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="实例一：参数"><a href="#实例一：参数" class="headerlink" title="实例一：参数"></a>实例一：参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改，sql注入</span><br><span class="line">sql = &apos;insert into t_user(name,pwd,birthday) values(%s,%s,%s)&apos;</span><br><span class="line"># 参数列表</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = input(&apos;输入生日:&apos;)     # 2017年10月01日--&gt;日期struct_time(---&gt;2017-10-01)</span><br><span class="line">birthday = time.strptime(birthday,&apos;%Y年%m月%d日&apos;)      #这里我们就用到了时间与字符串的相互转换(详情见MySQL高级)</span><br><span class="line"></span><br><span class="line">params = [name,pwd,birthday]</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql,params)</span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">print(&apos;受影响的行数:%s&apos;%count)</span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例二：抛出异常"><a href="#实例二：抛出异常" class="headerlink" title="实例二：抛出异常"></a>实例二：抛出异常</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    conn = None</span><br><span class="line">    cur = None</span><br><span class="line">    # 获取连接对象</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">                           user=&apos;root&apos;,</span><br><span class="line">                           password=&apos;123456&apos;,</span><br><span class="line">                           database=&apos;python01&apos;,</span><br><span class="line">                           port=3306,</span><br><span class="line">                           charset=&apos;utf8&apos;)</span><br><span class="line">    # 模拟异常</span><br><span class="line">    # a = 1 / 0</span><br><span class="line">    # 获取执行工具</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    # sql语句,增删改</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd,birthday) values(&quot;小伊&quot;,&quot;123456&quot;,str_to_date(&quot;2017年10月20日&quot;,&quot;%Y年%m月%d日&quot;))&apos;</span><br><span class="line">    # 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">    count = cur.execute(sql)</span><br><span class="line">    # 提交</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(&apos;受影响的行数:%s&apos; % count)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    # 打印异常信息，测试时候使用，项目上线，去掉</span><br><span class="line">    print(str(ex))</span><br><span class="line">    # 将异常继续抛出</span><br><span class="line">    # raise</span><br><span class="line">finally:</span><br><span class="line">    if cur != None:</span><br><span class="line">        cur.close()</span><br><span class="line">    if conn != None:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例三："><a href="#实例三：" class="headerlink" title="实例三："></a>实例三：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改</span><br><span class="line">#sql = &apos;select birthday from t_user&apos;</span><br><span class="line">sql = &apos;select id,name,pwd,birthday from t_user&apos;</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(&apos;查询的结果有%s条数据&apos;%count)</span><br><span class="line"></span><br><span class="line">#获取第一行</span><br><span class="line"># dateOne = cur.fetchone()</span><br><span class="line"># print(dateOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for temp in cur:</span><br><span class="line">#     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;id:%s,name:%s,pwd:%s,birthday:%s&apos;</span><br><span class="line">for temp in dataAll:</span><br><span class="line">    print(s%(temp[0],temp[1],temp[2],temp[3]))</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h3><p>这个库的名字：mySqlHelper</p><p> python操作mysql进行增删改查的封装</p><pre><code>1、增删改，代码类似2、查询代码分析1、获取连接对象2、sql语句不同，参数不同3、获取执行对象    增删改    查询        1、fetchone        2、fetchall4、处理结果5、关闭</code></pre><h4 id="面向对象-建立类，封装属性和函数"><a href="#面向对象-建立类，封装属性和函数" class="headerlink" title="面向对象  建立类，封装属性和函数"></a>面向对象  建立类，封装属性和函数</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">class MysqlHelper:</span><br><span class="line">    &apos;&apos;&apos;python操作mysql的增删改查的封装&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, host, user, password, database, port=3306, charset=&apos;utf8&apos;):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化参数</span><br><span class="line">        :param host:        主机</span><br><span class="line">        :param user:        用户名</span><br><span class="line">        :param password:    密码</span><br><span class="line">        :param database:    数据库</span><br><span class="line">        :param port:        端口号，默认是3306</span><br><span class="line">        :param charset:     编码，默认是utf8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        获取连接对象和执行对象</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.conn = pymysql.connect(host=self.host,</span><br><span class="line">                                    user=self.user,</span><br><span class="line">                                    password=self.password,</span><br><span class="line">                                    database=self.database,</span><br><span class="line">                                    port=self.port,</span><br><span class="line">                                    charset=self.charset)</span><br><span class="line"></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    def fetchone(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数元组，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataOne = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataOne = self.cur.fetchone()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataOne</span><br><span class="line"></span><br><span class="line">    def fetchall(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数列表，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataall = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataall = self.cur.fetchall()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataall</span><br><span class="line"></span><br><span class="line">    def __item(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行增删改</span><br><span class="line">        :param sql:           sql语句</span><br><span class="line">        :param params:        sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:              受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        count = 0</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行修改</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def insert(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行新增</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def delete(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行删除</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        关闭执行工具和连接对象</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if self.cur != None:</span><br><span class="line">            self.cur.close()</span><br><span class="line">        if self.conn != None:</span><br><span class="line">            self.conn.close()</span><br></pre></td></tr></table></figure><h4 id="1-测试查询多条数据"><a href="#1-测试查询多条数据" class="headerlink" title="1.测试查询多条数据"></a>1.测试查询多条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where name = %s and id &gt; %s&apos;</span><br><span class="line"># params</span><br><span class="line">params = [&apos;小茗&apos;,1]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchall(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    for temp in data:</span><br><span class="line">        print(temp)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br><span class="line"></span><br><span class="line">helper.close()</span><br></pre></td></tr></table></figure><h4 id="2-测试查询一条数据"><a href="#2-测试查询一条数据" class="headerlink" title="2.测试查询一条数据"></a>2.测试查询一条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where id = %s&apos;</span><br><span class="line">#sql = &apos;select * from t_user where id = 1&apos;</span><br><span class="line"># params</span><br><span class="line">params = [2]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchone(sql, params)</span><br><span class="line">#data = helper.fetchone(sql)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    print(data)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br></pre></td></tr></table></figure><h4 id="3-测试增删改"><a href="#3-测试增删改" class="headerlink" title="3.测试增删改"></a>3.测试增删改</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;update t_user set name =%s,pwd=%s,birthday=%s where id=%s&apos;</span><br><span class="line"># params</span><br><span class="line">id = input(&apos;输入编号:&apos;)</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = time.strptime(input(&apos;输入生日:&apos;), &apos;%Y年%m月%d日&apos;)</span><br><span class="line">params = [name, pwd, birthday,id]</span><br><span class="line"># 执行</span><br><span class="line">count = helper.update(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if count:</span><br><span class="line">    print(&apos;操作成功.&apos;)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;操作失败.&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-登录和注册"><a href="#4-登录和注册" class="headerlink" title="4.登录和注册"></a>4.登录和注册</h4><p>登录和注册的时候需要对密码进行加密</p><p>注意：</p><p>•  需要对密码进行加密<br>•  如果使用md5加密，则密码包含32个字符<br>•  如果使用sha1加密，则密码包含40个字符，这里使用这种方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table userinfos(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    uname varchar(20),</span><br><span class="line">    upwd char(40),</span><br><span class="line">    isdelete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">ret = doPwd(&apos;123&apos;)</span><br><span class="line">print(ret)</span><br><span class="line">结果：40bd001563085fc35165329ea1ff5c5ecbdbbeef</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">-- 插入如下数据，用户名为123,密码为123,这是sha1加密后的值</span><br><span class="line"></span><br><span class="line">insert into userinfos </span><br><span class="line">values(1,&apos;123&apos;,&apos;40bd001563085fc35165329ea1ff5c5ecbdbbeef&apos;,0);</span><br></pre></td></tr></table></figure><h4 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from mysqlHelper import MysqlHelper</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    &apos;&apos;&apos;登录&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    #加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;select * from t_user where name=%s and pwd=%s&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    data = helper.fetchone(sql, params)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;登录成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;登录失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doPwd(pwd):</span><br><span class="line">    &apos;&apos;&apos;sha1编码&apos;&apos;&apos;</span><br><span class="line">    mysha1 = hashlib.sha1()</span><br><span class="line">    mysha1.update(pwd.encode(&apos;utf-8&apos;))</span><br><span class="line">    pwd = mysha1.hexdigest()</span><br><span class="line">    return pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    &apos;&apos;&apos;注册&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    # 加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd) values(%s,%s)&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    count = helper.insert(sql, params)</span><br><span class="line">    if count:</span><br><span class="line">        print(&apos;操作成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;操作失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #register()</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PyMySQL？&quot;&gt;&lt;a href=&quot;#什么是-PyMySQL？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PyMySQL？&quot;&gt;&lt;/a&gt;什么是 PyMySQL？&lt;/h2&gt;&lt;p&gt;PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。&lt;/p&gt;
&lt;p&gt;PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django笔记</title>
    <link href="http://yoursite.com/2018/04/18/django-bi-ji/"/>
    <id>http://yoursite.com/2018/04/18/django-bi-ji/</id>
    <published>2018-04-17T17:00:16.000Z</published>
    <updated>2019-07-07T04:26:44.840Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p><a id="more"></a><h2 id="一-版本选择"><a href="#一-版本选择" class="headerlink" title="一. 版本选择"></a>一. 版本选择</h2><p>Django 2.0.x 支持 Python 3.4, 3.5 和 3.6 （注意，不再支持 Python 2）   </p><h2 id="二-安装-Django"><a href="#二-安装-Django" class="headerlink" title="二. 安装 Django"></a><strong>二. 安装 Django</strong></h2><p><strong>2.1. 用 pip 来安装</strong></p><p><strong>2.1.1 需要先安装pip</strong></p><p>(1). Linux, Mac OSX, Windows 下都可用 get-pip.py 来安装<br>pip：<a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/installing.html</a>  </p><p>或者直接下载：<a href="https://bootstrap.pypa.io/get-pip.py" title="get-pip.py" target="_blank" rel="noopener">get-pip.py</a> 然后运行在终端运行 <strong>python get-pip.py 就可以安装 pip。</strong></p><p>Note: 也可以下载 pip 源码包，运行 <strong>python setup.py install</strong> 进行安装 </p><p><strong>2.1.2 利用 pip 安装 Django</strong></p><p><code>（sudo) pip install Django    或者(sudo) pip install Django==1.8.16 或者 pip install Django==1.11.8</code>    </p><p>如果想升级 pip 可以用： </p><pre><code>(sudo) pip install --upgrade pip</code></pre><p><strong>2.2. 下载源码安装</strong>  </p><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">https://www.djangoproject.com/download/</a></p><p>如果是源码包, 比如 django-1.11.8.tar.gz </p><p><strong>2.2.1 Linux 或 Mac 下</strong></p><pre><code>tar -xvf django-1.11.8.tar.gzcd django-1.11.8(sudo) python setup.py install</code></pre><h2 id="三-检查是否安装成功"><a href="#三-检查是否安装成功" class="headerlink" title="三. 检查是否安装成功"></a><strong>三. 检查是否安装成功</strong></h2><p>终端上输入 python ,点击 Enter，进行 python 环境</p><pre><code>&gt;&gt;&gt; import django&gt;&gt;&gt; django.VERSION(1, 11, 8, &apos;final&apos;, 0)&gt;&gt;&gt; &gt;&gt;&gt; django.get_version()&apos;1.11.8&apos;</code></pre><p>如果运行后看到版本号，就证明安装成功了！ </p><h2 id="四-搭建多个互不干扰的开发环境（可选）"><a href="#四-搭建多个互不干扰的开发环境（可选）" class="headerlink" title="四. 搭建多个互不干扰的开发环境（可选）"></a><strong>四. 搭建多个互不干扰的开发环境（可选）</strong></h2><p>我们有的时候会发现，一个电脑上有多个项目，一个依赖 Django 1.8，另一个比较旧的项目又要用 Django 1.5，这时候怎么办呢？ </p><p>我们需要一个依赖包管理的工具来处理不同的环境。 </p><h3 id="4-1-虚拟环境依赖安装"><a href="#4-1-虚拟环境依赖安装" class="headerlink" title="4.1 虚拟环境依赖安装"></a>4.1 虚拟环境依赖安装</h3><p>开发会用 virtualenv 来管理多个开发环境 </p><p><strong>Linux/MacOS 下</strong></p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了 </p><pre><code># 安装:(sudo) pip install virtualenv virtualenvwrapper</code></pre><p>修改~/.bash_profile或其它环境变量相关文件(如 .bashrc 或用 ZSH 之后的 .zshrc)，添加以下语句  </p><pre><code>export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/workspacesource /usr/local/bin/virtualenvwrapper.sh</code></pre><p>修改后使之立即生效(也可以重启终端使之生效)： </p><pre><code>source ~/.bash_profile</code></pre><h3 id="4-2-虚拟环境使用方法："><a href="#4-2-虚拟环境使用方法：" class="headerlink" title="4.2 虚拟环境使用方法："></a><strong>4.2 虚拟环境使用方法：</strong></h3><p><strong>mkvirtualenv zqxt：创建运行环境zqxt</strong></p><p><strong>workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境</strong></p><p><strong>deactivate</strong>: 退出终端环境</p><p><strong>其它的：</strong></p><p><strong>rmvirtualenv</strong> ENV：删除运行环境ENV </p><p><strong>mkproject</strong> mic：创建mic项目和运行环境mic </p><p><strong>mktmpenv</strong>：创建临时运行环境 </p><p><strong>lsvirtualenv</strong>: 列出可用的运行环境 </p><p><strong>lssitepackages</strong>: 列出当前环境安装了的包 </p><p>创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="http://yoursite.com/categories/programing/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django部署——uwsgi+Nginx</title>
    <link href="http://yoursite.com/2018/04/17/django/"/>
    <id>http://yoursite.com/2018/04/17/django/</id>
    <published>2018-04-17T09:42:04.000Z</published>
    <updated>2019-07-07T04:22:37.406Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!</p><a id="more"></a><p><img src="https://policx.github.io/post-images/1560768371650.png" alt><br>环境：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3.6</span><br><span class="line">centos 7</span><br><span class="line">Django1.11</span><br></pre></td></tr></table></figure><h2 id="1、本地跑起来Django"><a href="#1、本地跑起来Django" class="headerlink" title="1、本地跑起来Django"></a>1、本地跑起来Django</h2><p>这里不讲Django项目实施过程，假设你已经写了一个Django项目，并且在本地127.0.0.1:8000能够跑起来。喏，给你个参考，项目大概长这样：<br><img src="https://policx.github.io/post-images/1560764670814.png" alt></p><ul><li>kindle目录为我创建的Django App</li></ul><h2 id="2、修改项目配置"><a href="#2、修改项目配置" class="headerlink" title="2、修改项目配置"></a>2、修改项目配置</h2><p>也就是项目目录下的settings.py文件，主要强调几个地方：</p><p>①关闭DEBUG模式：<br><img src="https://policx.github.io/post-images/1560764736238.png" alt><br>②修改ALLOWED_HOSTS：<br><img src="https://policx.github.io/post-images/1560764863424.png" alt><br>③配置静态文件存放路径：<br><img src="https://policx.github.io/post-images/1560764833026.png" alt></p><p>修改好配置之后执行:<br><code>python manage.py collectstatic</code><br>将项目用到的静态文件复制到项目根目录下的static文件中<br><img src="https://policx.github.io/post-images/1560764930146.png" alt></p><h2 id="3、安装uwsgi和Nginx"><a href="#3、安装uwsgi和Nginx" class="headerlink" title="3、安装uwsgi和Nginx"></a>3、安装uwsgi和Nginx</h2><p>这个没什么说的。。。在自己的云服务器上装好这两个工具<br>安装好uwsgi后最好验证一下，验证方法：<br>创建一个test.py文件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)])</span><br><span class="line">    return [b&apos;Hello world!&apos;]    #python3</span><br><span class="line">    # return [&apos;Hello world!&apos;]    #python2</span><br></pre></td></tr></table></figure><p>启动uwsgi服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --wsgi-file test.py</span><br></pre></td></tr></table></figure><p>如果可以正常启动而不报错那就应该没问题，不放心的话再在终端验证一下：<br><code>wget http://127.0.0.1:8000</code><br>看一下能否正确获取内容</p><h2 id="4、配置项目的uwsgi"><a href="#4、配置项目的uwsgi" class="headerlink" title="4、配置项目的uwsgi"></a>4、配置项目的uwsgi</h2><p>在项目所在文件夹下创建uwsgi.ini配置文件，也就是这里:<br><img src="https://policx.github.io/post-images/1560765049955.png" alt><br>在uwsgi.ini里进行如下配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># Django-related settings</span><br><span class="line"> </span><br><span class="line"># 这里的端口可以根据自己需要设定</span><br><span class="line">socket = 127.0.0.1:8001        </span><br><span class="line"> </span><br><span class="line"># the base directory (full path)</span><br><span class="line"># 这个是Django项目的根目录，也就是包含App的那个目录，仔细对照上图</span><br><span class="line">chdir           = /home/python/book2kindle</span><br><span class="line"> </span><br><span class="line"># Django s wsgi file</span><br><span class="line"># 这里是项目名(不是App名).wsgi</span><br><span class="line">module          = book2kindle.wsgi</span><br><span class="line"> </span><br><span class="line"># process-related settings</span><br><span class="line"># master</span><br><span class="line">master          = true</span><br><span class="line"> </span><br><span class="line"># maximum number of worker processes</span><br><span class="line">processes       = 32</span><br><span class="line"> </span><br><span class="line"># ... with appropriate permissions - may be needed</span><br><span class="line"># chmod-socket    = 664</span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum          = true</span><br><span class="line"> </span><br><span class="line">plugin python = true</span><br><span class="line"> </span><br><span class="line"># 这个是项目的虚拟python环境，如果没用虚拟环境，可以不设定</span><br><span class="line">home = /home/python/book2kindle_env</span><br></pre></td></tr></table></figure><h2 id="5、配置项目的nginx"><a href="#5、配置项目的nginx" class="headerlink" title="5、配置项目的nginx"></a>5、配置项目的nginx</h2><p>找到nginx的配置文件夹，centos7的nginx配置文件在/etc/nginx下，该路径下有一个nginx.conf总配置文件，还有两个文件夹./conf.d、./default.d，我们将nginx.conf复制一份到conf.d文件夹下，命名为nginx.conf（或者项目名.conf）进行如下修改（根据中文注释进行相应配置即可）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream django &#123;</span><br><span class="line">        # 注意这里的server要和uwsgi.ini配置文件中的socket保持一致</span><br><span class="line">        server 127.0.0.1:8002; # for a web port socket</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  xxx.com;  # 这里填自己的域名或者服务器的ip（决定你今后访问网站的方式）</span><br><span class="line">        charset      utf-8;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        location / &#123;</span><br><span class="line">        root        /home/python/book2kindle/kindle;  # 这是Django App的路径</span><br><span class="line">            uwsgi_pass  django;</span><br><span class="line">            include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">        &#125;</span><br><span class="line">        location /static &#123;</span><br><span class="line">            # Django项目静态文件的路径</span><br><span class="line">            alias /home/python/book2kindle/static; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、启动uwsgi和nginx"><a href="#6、启动uwsgi和nginx" class="headerlink" title="6、启动uwsgi和nginx"></a>6、启动uwsgi和nginx</h2><p>进入uwsgi.ini文件夹下执行：<br><code>uwsgi --ini uwsgi.ini</code><br>在终端执行：<br><code>service nginx restart</code><br>然后就可以根据域名（前提是要将域名解析到服务器ip地址）或者服务器ip来访问网站了！</p><p>OK，完事！就是这么简单！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="http://yoursite.com/categories/programing/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>2018创业记：如何选择合伙人？</title>
    <link href="http://yoursite.com/2018/03/25/chuangye/"/>
    <id>http://yoursite.com/2018/03/25/chuangye/</id>
    <published>2018-03-25T13:02:42.000Z</published>
    <updated>2019-07-07T04:22:05.224Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><a id="more"></a><h2 id="创业路上危机四伏，如何破局？"><a href="#创业路上危机四伏，如何破局？" class="headerlink" title="创业路上危机四伏，如何破局？"></a>创业路上危机四伏，如何破局？</h2></li></ul><p>很多朋友在2018年做出了改变，迈出了新的一步。比如身边几位朋友正摩拳擦掌准备创业。然而，看别人创业和自己创业完全是两回事儿，见得再多，自己趟水时也难免有所顾虑。</p><p>在跟他们聊过之后，我们发现了他们普遍面临的一个课题：如何选择合伙人?这是身经百战的连续创业者也很难驾轻就熟的一个课题，今天我们就来一起聊聊。本文将从能不能和朋友一起创业、合伙人应该与我互补还是相似、如何判断双方是否志同道合、如何应对常见的分歧几个部分展开来说。</p><p>风物长宜放眼量，抱持开阔的胸襟、敏锐的判断、坚韧的意志，相信大家能够与志同道合的伙伴一起，越过山丘，携手站上梦想之巅。</p><h2 id="能不能和朋友一起创业？"><a href="#能不能和朋友一起创业？" class="headerlink" title="能不能和朋友一起创业？"></a>能不能和朋友一起创业？</h2><p>在创业初期，创业者选择合伙人往往会从身边的朋友“下手”。</p><p>一起创业可以说是认清一个朋友的最好方式。一篇名为《友谊的代价》的论文，考察了3510个风险投资者，以及他们在1975-2003年间11895个投资项目。</p><p>论文写道，有的人选择与自己能力相当的人合作，比如同是名校毕业；但更多的人选择与自己的熟人合作，比如曾经的同学或同事。结果表明，按能力搭档可以增加投资的成功概率，而找熟人搭档，则会明显降低成功的可能性。</p><p>所有人都喜欢强联系，但关系是关系，工作归工作。现在社会学已经有了足够多的证据说明：对工作来说，同乡会和校友录并不是扩展人脉的好地方。《中国合伙人》这部电影上映后，“千万别跟好朋友合伙开公司”也成了热议话题。电影的最后，三位合伙人分道扬镳，而剧本的原型——新东方的三位创始人也以“分家”收场。</p><p>当然，朋友合伙创业成功的案例也不在少数，况且，长期的伙伴关系更有助于共同面对创业过程中的艰难险阻，团队也更容易在创业初期获得投资人的青睐。如果在寻找合伙人的过程中，你觉得还是某个朋友更适合，那么一定要在合作之前约法三章，考虑到最坏的情况，提前用书面合同的方式确定双方的责权利，用规章制度来约束指导双方的行为，而不是靠人情关系。</p><p>中间一旦觉得发生了问题，你就必须考虑一下能否继续合作下去。其实，很多合作者走不到最后就是因为中间的小问题没有解决，一点一点积累最后爆发出来。</p><p>因此，能否和朋友一起创业这个问题，需要辩证思考。如果朋友间相互了解对方的个性和能力，工作中能做到分工明确，用规章制度来规范双方的行为，及时解决小矛盾，相互照顾，一起分担，共同奋斗，那么创业成功就会成为大概率事件。</p><h2 id="合伙人应该与我互补还是相似？"><a href="#合伙人应该与我互补还是相似？" class="headerlink" title="合伙人应该与我互补还是相似？"></a>合伙人应该与我互补还是相似？</h2><p>一个较为合理的答案是：理念和价值观上要相似，能力和经验上要互补。</p><p>理念和价值观上的相近，可以保证你们在重大原则问题上的判断是比较一致的，不至于出现根本性的冲突。这些重大的原则问题包括企业的战略方向、利益分配机制、做事的基本底线等等。</p><p>在这些问题上出现不同意见，通常很难取得共识。因为个性和价值观的形成，通常都不是一朝一夕的事情，也就是我们常说的“江山易改，本性难移”。如果在创业的艰难环境下，双方还要来磨合这个层面的东西，就会非常痛苦。</p><p>能力和经验上的互补相对更好理解。你擅长产品，他专于研发；你有丰富的运营经验，他则对于商业模式的建立更有心得；你对数字不敏感，他则是投资和财务领域的资深人士。这些都是很好的互补。</p><p>互补可以让你们在具体事情的推进中事半功倍，并建立起对于对方在专业领域的依靠和信任。人不可能是全能的，如果一切未知的领域都需要你自己来摸索，费时费力不说，风险还很大。</p><p>对于相似还是互补这个问题的解读，还可以反向进行。比如你们是能力经验上的相近，而在理念上互补，你可以想象一下是个什么局面，一定是你不会的他也不会，你觉得对的他觉得不对，那就真的很难合作下去了。</p><h2 id="如何判断双方是否志同道合？"><a href="#如何判断双方是否志同道合？" class="headerlink" title="如何判断双方是否志同道合？"></a>如何判断双方是否志同道合？</h2><p>对于这个问题，不同的人可能会给出非常不同的答案。雷军就曾说过，他找人有两个要素：“一要最专业，小米的合伙人都是各管一块，这样能保证整个决策非常快，把业务交给他，要能实打实做出成绩来；二要最合适，主要是指要有创业心态，对所做的事要极度喜欢，有共同的愿景，这样就会有很强的驱动力。”</p><p>雷军说，他在三个月的时间里见了超过100位做硬件的人选，终于找到了负责硬件的联合创始人周光平博士，两人第一次见面就谈了12个小时。</p><p>而周鸿祎表示，他会选择具备这四种素质的合伙人：首先应该有创业精神；其次要有很强的学习能力；第三，要有很好的开放合作心态；此外，还要能自我激励，自我驱动，同样一件事，用打工的心态和用创业的心态做，效果完全不一样。</p><p>虽然答案因人而异，但仍然可以总结出一些判断标准，以下几条可为你选择合伙人时提供参考。</p><h3 id="1、关系有一定的深度和广度，彼此信任"><a href="#1、关系有一定的深度和广度，彼此信任" class="headerlink" title="1、关系有一定的深度和广度，彼此信任"></a>1、关系有一定的深度和广度，彼此信任</h3><p>共事且维持朋友关系多年的创业团队关系更深，有可能经受住紧张和冲突的考验。合伙人未必需要成为最要好的朋友，但如果他们相互喜欢的话事情可能会更好办些。更重要的是，创始人之间应该尊重彼此以及他们给团队带来的不同能力。不信任合伙人的能力会导致手伸过头，还可能会导致控制权之争。在这种窝里斗的情况下大部分的合作关系都无法维系。</p><h3 id="2、了解彼此的优势和劣势，分工明确"><a href="#2、了解彼此的优势和劣势，分工明确" class="headerlink" title="2、了解彼此的优势和劣势，分工明确"></a>2、了解彼此的优势和劣势，分工明确</h3><p>尊重彼此的技能和优势并不意味着创始人就不需要审视合伙人的弱点了。友谊更久自然也会更了解某人的特长和技能。这些不同的技能有助于创始人团队自然地分清责任、角色，在某些情况下还可以分清头衔。根据每一位合伙人的技能明确划分职责，对创业的帮助很大。做事的时候每个人要有独立的角色，但同时永远要对其他合伙人的反馈持开放态度。</p><h3 id="3、确保所有合伙人对成功和失败的定义一致"><a href="#3、确保所有合伙人对成功和失败的定义一致" class="headerlink" title="3、确保所有合伙人对成功和失败的定义一致"></a>3、确保所有合伙人对成功和失败的定义一致</h3><p>韧性最强的创始人不会从财务的角度去衡量自己的初创企业是否成功，相反，他们会从使命的角度去衡量。他们的初创企业只是追求实现使命的手段。但是，并不是所有的创始人都这么看，甚至一开始关注使命的创始人有时候到后面也会转向考虑财务方面的事情。</p><p>有的创始人可能志存高远，为了尽快做大愿意烧很多钱，而有的人希望逐步打磨产品，限制人数规模和保留现金尺度。不仅对成功的认知会影响运营决策，对失败的认知同样会起作用。</p><p>在创业过程中，其中一位合伙人急着退出的故事屡见不鲜，因此这个教训值得一提再提。对于拥有成功企业的创始人来说，避免在这个问题上发生冲突的关键是定期讨论这件事。应该在公司早期就设定好目标，并且对这个话题进行定期复议。</p><h3 id="4、所有合伙人均应对股权分配满意"><a href="#4、所有合伙人均应对股权分配满意" class="headerlink" title="4、所有合伙人均应对股权分配满意"></a>4、所有合伙人均应对股权分配满意</h3><p>哈佛教授Wasserman发现，73%的联合创业团队一般在公司成立30天内就确定了如何进行股权分配。股权分配当然是任何共同创业的人都要首先考虑的事情之一，但事实上在那个时候，没人知道谁干活最卖力，谁对初创企业的贡献最有价值。过早确定股权分配会导致后面发生问题。如果可以的话，最好等到你有机会了解大家一起工作会是什么个情况后再正式分蛋糕。话虽如此，这件事情还是不要拖太久，围绕股权的分歧最好在公司早期就解决掉。</p><h3 id="5、永远要相互支持"><a href="#5、永远要相互支持" class="headerlink" title="5、永远要相互支持"></a>5、永远要相互支持</h3><p>这话听上去似乎太空泛，但是合伙人的关系也可能会反复无常，尤其是在受到不同观点、董事会成员等的影响下。合伙人之间的相互支持可带来信心，确保合伙人和员工都有共同的使命感。</p><p>团队应该早点理解一件事，任何情况下合伙人之间都应该背靠背相互支持，所以合伙人要尽量避免当着员工、董事会等人的面互相拆台，这样能够让公司其他人感觉到他们友情之牢固，让每一位合伙人都能保持镇定，因为他们知道对方一定会支持自己的。</p><h2 id="如何应对常见的分歧？"><a href="#如何应对常见的分歧？" class="headerlink" title="如何应对常见的分歧？"></a>如何应对常见的分歧？</h2><h3 id="1、公司走向的歧见"><a href="#1、公司走向的歧见" class="headerlink" title="1、公司走向的歧见"></a>1、公司走向的歧见</h3><p>在0到1的探索期，公司的走向往往是由合伙人一起决定的。但进入1到100的扩张期，一个年轻企业通常会开始有董事会以及重要的供应、通路伙伴。久而久之，合伙人对于公司未来走向的看法，常常会越来越变得分歧。</p><p>防范这个陷阱要从根源开始：每当CEO有了新的资讯、成长、学习、领悟，应该积极地与合伙人分享，协助他们获得与你类似的成长。同时，你应该把小范围的决策授权出去，让他们也能继续主导公司某一部分的走向。最后，你应该积极管理大家对决策的期望值，新创公司必须在“快”与“好”之间做出平衡，因此决策求的是多数对，而不是样样对。</p><h3 id="2、无法适应制度"><a href="#2、无法适应制度" class="headerlink" title="2、无法适应制度"></a>2、无法适应制度</h3><p>0到1的新创团队求快，因此不会有太多制度。进入1到100阶段，公司势必要开始建立一些管理系统，以在风险与发展中间取得平衡。</p><p>有些习惯了说干就干的合伙人，在此时会产生严重的不适应，时间一长甚至会觉得公司背离了创办的初衷。要解决这个问题，除了及早发现及早辅导外，请他们参与、主导制度的设计，也是协助合伙人适应新制度的方法。</p><h3 id="3、越权管理"><a href="#3、越权管理" class="headerlink" title="3、越权管理"></a>3、越权管理</h3><p>当公司开始有部门、部门主管，合伙人还是习惯看不顺眼就管，容易造成经理人的困扰。更有甚者，造成合伙人对经理人不信任，反而让经理人没有足够的时间、空间去适应、学习。这个问题通常是惯性使然，重点就是要打破它。所以，看到这样的行为要赶快提醒伙伴们注意。</p><h3 id="4、无法跟上公司成长的需要"><a href="#4、无法跟上公司成长的需要" class="headerlink" title="4、无法跟上公司成长的需要"></a>4、无法跟上公司成长的需要</h3><p>在公司快速扩张期，一个3人产品团队可能在一年内成长为30人，而两者之间管理上的不同，常常会让本来擅长技术、产品，但从来没有管理中大型团队经验的合伙人一时间跟不上公司发展的步伐。</p><p>回到扩张前，你应该早早找到好的CTO Mentor，在扩张中，经常鼓励他在管理知识与能力上精进。扩张后，如果他真的无法适应，也比较能够接受去寻找更有经验的CTO，而自己退居部门二把手、三把手。</p><h3 id="5、利益分配"><a href="#5、利益分配" class="headerlink" title="5、利益分配"></a>5、利益分配</h3><p>当公司越来越成功、越赚钱、离IPO越近，股权与利益的问题就会越容易产生。尤其当初的股权分配如果没有彰显每个合伙人的相对价值，那团队中可能酝酿出不良情绪。</p><p>比较好的方法当然是早期就把这个问题解决掉，因为到了后期，你的工具会越来越有限。但也不是没有机会修正，如果有合伙人离开，你可以收回他的股权来重新分配。如果有B、C、D轮增资，你可以跟投资人要求“期权池”(ESOP)，通过发放新的选择权来平衡。最后，如果真的过于集中，负责任的CEO，甚至会拿出自己的股权分配给伙伴们。</p><p>选择合伙人未必有一定之规，创业路上可能遇到的危机也远远不止上述这些，希望这篇文章能对你有所裨益，助你在创业路上少走弯路，也祝愿创业者们在2018年博得好彩头，大鹏一日同风起，扶摇直上九万里。</p><p>本文来源：<a href="http://www.sohu.com/a/225670991_100064845" target="_blank" rel="noopener">联想之星</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>从零搭建博客 教程 Hexo GitHub</title>
    <link href="http://yoursite.com/2018/03/22/hexo-github/"/>
    <id>http://yoursite.com/2018/03/22/hexo-github/</id>
    <published>2018-03-22T11:33:10.000Z</published>
    <updated>2019-07-07T04:27:53.430Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>快速、简洁且高效的博客框架</p><a id="more"></a><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><ul><li>1.在GitHub创建个人仓库「名字必须是user.github.io」</li><li>2.本地安装Git（此处省略，文章底部有教程链接）</li><li>3.本地安装Node.js（此处省略，文章底部有教程链接）</li><li>4.本地安装Hexo</li><li>5.网站推送至github</li><li>6.github绑定域名</li><li>7.更换主题</li><li>8.Hexo高级个性化设置</li></ul><h1 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h1><ul><li>1.Hexo文章的开头</li><li>2.Hexo文章的内容</li><li>2.1MarkDown语法</li><li>2.2寻找图床</li></ul><h2 id="1-搭建博客"><a href="#1-搭建博客" class="headerlink" title="1.搭建博客"></a>1.搭建博客</h2><h3 id="1-1-本地安装Hexo"><a href="#1-1-本地安装Hexo" class="headerlink" title="1.1.本地安装Hexo"></a>1.1.本地安装Hexo</h3><p>下载安装Git与Node.js略过</p><h4 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1.安装hexo"></a>1.安装hexo</h4><p><code>npm install hexo -g #-g表示全局安装, npm默认为当前项目安装</code></p><h4 id="2-Hexo基本命令"><a href="#2-Hexo基本命令" class="headerlink" title="2.Hexo基本命令:"></a>2.Hexo基本命令:</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm update hexo -g  #升级 </span><br><span class="line">hexo init &lt;folder&gt;  #执行init命令初始化hexo到你指定的目录</span><br><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo generate       #自动根据当前目录下文件,生成静态网页 hexo g</span><br><span class="line">hexo server         #运行本地服务 hexo s</span><br><span class="line">hexo clean          #清理</span><br><span class="line">hexo deploy         #部署 hexo d</span><br><span class="line"></span><br><span class="line">hexo server         #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s      #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br></pre></td></tr></table></figure><p>最常用的是</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>这个时候hexo s之后就可以在浏览器<br><code>http://localhost:4000/</code><br>这里看到hexo博客的基本样子了</p><h3 id="1-2-将网站推送至github"><a href="#1-2-将网站推送至github" class="headerlink" title="1.2.将网站推送至github"></a>1.2.将网站推送至github</h3><h4 id="1-首先在本地告诉退给谁"><a href="#1-首先在本地告诉退给谁" class="headerlink" title="1.首先在本地告诉退给谁"></a>1.首先在本地告诉退给谁</h4><p>打开本地博客本目录下的配置文件_config.yml<br>修改最后一行的配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/dongshuyan/dongshuyan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="2-上传github"><a href="#2-上传github" class="headerlink" title="2.上传github"></a>2.上传github</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>若执行hexo g出错则执行<br><code>npm install hexo --save</code><br>若执行hexo d出错则执行<br><code>npm install hexo-deployer-git --save</code><br>错误修正后再次执行hexo g和hexo d上传到服务器。<br>若未关联GitHub，执行hexo d时会提示输入GitHub账号用户名和密码，即:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username for &apos;https://github.com&apos;:</span><br><span class="line">password for &apos;https://github.com&apos;:</span><br></pre></td></tr></table></figure><p>输入你的github账号密码即可。<br>hexo d执行成功后便可通过<a href="https://xxx.github.io访问博客，看到的内容和http://localhost:4000相同。" target="_blank" rel="noopener">https://xxx.github.io访问博客，看到的内容和http://localhost:4000相同。</a></p><h4 id="3-记住github密码"><a href="#3-记住github密码" class="headerlink" title="3.记住github密码"></a>3.记住github密码</h4><p>在github添加ssh key后不需要每次更新博客再输入用户名和密码。首先检查本地是否包含ssh keys。如果存在则直接将ssh key添加到GitHub之中，否则新生成ssh key。</p><p>执行下述命令生成新的ssh key</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@exampl&quot;</span><br></pre></td></tr></table></figure><p>这里需要将<br><code>your_email@example.com</code><br>改成自己注册的GitHub邮箱地址。默认会在~/.ssh/id_rsa.pub中生成id_rsa和id_rsa.pub文件。</p><p>Mac下利用open ~/.ssh打开文件夹，打开id_rsa.pub文件，里面的信息即为ssh key，将此信息复制到GitHub的Add ssh key路径GitHub-&gt;Setting-&gt;SSH keys-&gt;add SSH key中即可。Title里填写任意标题，将复制的内容粘贴到key中，点击Add key完成添加即可记住密码。</p><p>此时本地博客内容便已关联到GitHub之中，本地博客改变之后，通过hexo g和hexo d便可更新到GitHub之中。</p><h3 id="1-3-github绑定域名"><a href="#1-3-github绑定域名" class="headerlink" title="1.3.github绑定域名"></a>1.3.github绑定域名</h3><p>如果你有自己的域名了<br>那么可以把博客与域名关联起来<br>这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析：<br><img src="https://mubu.com/document_image/a949feea-b9d8-4b58-aa3e-b1bca87ebabc-3316715.jpg" alt><br>然后再你本地博客文件夹下的source文件夹里添加一个文件，文件名为”CNAME”，内容为你的域名。<br>例如：<br>baidu.com<br>这里要求一个字符不差。</p><h3 id="1-4-更改主题（以Yilia为例）"><a href="#1-4-更改主题（以Yilia为例）" class="headerlink" title="1.4.更改主题（以Yilia为例）"></a>1.4.更改主题（以Yilia为例）</h3><p>安装yilia<br><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code><br>配置<br>修改hexo根目录下的 _config.yml ： theme: yilia</p><p>更新</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/yilia</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="1-5-Hexo-高级配置"><a href="#1-5-Hexo-高级配置" class="headerlink" title="1.5.Hexo 高级配置"></a>1.5.Hexo 高级配置</h3><p>详见<br>Hexo Yilia 高级配置大全</p><h2 id="2-编写博客"><a href="#2-编写博客" class="headerlink" title="2.编写博客"></a>2.编写博客</h2><h3 id="2-1-Hexo文章的开头"><a href="#2-1-Hexo文章的开头" class="headerlink" title="2.1.Hexo文章的开头"></a>2.1.Hexo文章的开头</h3><p>举例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">title: 从零搭建博客 教程 Hexo GitHub    #文章标题</span><br><span class="line">subtitle:                            #子标题</span><br><span class="line">#categories: 文章                     #文章分類目錄 可以省略    </span><br><span class="line">toc: true                            #目录 需要安装插件或者主题自带</span><br><span class="line">reward: true                         #打赏 需要安装插件或者主题自带</span><br><span class="line">declare: true                        #版权 需要安装插件或者主题自带</span><br><span class="line">date:                                #文章日期 2019/7/1</span><br><span class="line">header-img:                          #顶部背景图片</span><br><span class="line">tags:                                #标签</span><br><span class="line">- 自学</span><br><span class="line">- Blog</span><br><span class="line">- Original</span><br></pre></td></tr></table></figure><h4 id="2-2-Hexo文章的内容"><a href="#2-2-Hexo文章的内容" class="headerlink" title="2.2.Hexo文章的内容"></a>2.2.Hexo文章的内容</h4><h5 id="2-2-1markdown常用语法"><a href="#2-2-1markdown常用语法" class="headerlink" title="2.2.1markdown常用语法"></a>2.2.1<a href="https://www.policx.com/post/markdown/" target="_blank" rel="noopener">markdown常用语法</a></h5><p><a href="http://dongshuyan.com/2016/04/07/%E6%80%8E%E4%B9%88%E5%86%99%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速、简洁且高效的博客框架&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 的设计哲学</title>
    <link href="http://yoursite.com/2018/03/22/markdown/"/>
    <id>http://yoursite.com/2018/03/22/markdown/</id>
    <published>2018-03-22T11:32:01.000Z</published>
    <updated>2019-07-07T04:34:16.836Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 </p><a id="more"></a><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote><h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown<em>是什么</em>？</h4><h4 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h4><h4 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h4><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><em>怎么</em>使用？</h4><h4 id="谁在用？"><a href="#谁在用？" class="headerlink" title="谁在用？"></a><em>谁</em>在用？</h4><h4 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h4></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p><h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/" target="_blank" rel="noopener"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p><p>他有着足以让你跪拜的人生经历：    </p><ul><li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li><li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li><li><strong>2005</strong>年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。   </li><li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li><li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li><li><strong>2013</strong>年1月自杀身亡。    </li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz"></p><p>天才都有早逝的归途。</p><h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h3><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p><p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\</code></strong>，<strong>符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p><p>代码区块：</p><pre><code>void main(){    printf(&quot;Hello, Markdown.&quot;);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格<em>或</em>制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code>    </p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul><li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错   </li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。    </li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><hr><p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><hr><p>以上基本是所有traditonal markdown的语法。</p><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><hr><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p><video src="http://structr.learn-anything.cn/video/道理/陈铭：像我这种老好人，根本没什么真朋友！不jue亲戚的人，根本没什么真亲戚！.mp4" width="320" height="180" controls="controls"></video> </p><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>数据类型和变量</title>
    <link href="http://yoursite.com/2018/03/01/python-type/"/>
    <id>http://yoursite.com/2018/03/01/python-type/</id>
    <published>2018-02-28T20:28:19.000Z</published>
    <updated>2019-07-07T04:35:56.433Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python 数据类型和变量</p><a id="more"></a> <h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：</p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</p><p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。如果’本身也是一个字符，那就可以用””括起来，比如”I’m OK”包含的字符是I，’，m，空格，O，K这6个字符。</p><p>如果字符串内部既包含’又包含”怎么办？可以用转义字符\来标识，比如：</p><p><code>&#39;I\&#39;m \&quot;OK\&quot;!&#39;</code><br>表示的字符串内容是：</p><p><code>I&#39;m &quot;OK&quot;!</code><br>转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\表示的字符就是\，可以在Python的交互式命令行用print()打印字符串看看：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;I\&apos;m ok.&apos;)</span><br><span class="line">I&apos;m ok.</span><br><span class="line">&gt;&gt;&gt; print(&apos;I\&apos;m learning\nPython.&apos;)</span><br><span class="line">I&apos;m learning</span><br><span class="line">Python.</span><br><span class="line">&gt;&gt;&gt; print(&apos;\\\n\\&apos;)</span><br><span class="line"></span><br><span class="line">\</span><br><span class="line">\</span><br></pre></td></tr></table></figure><p>如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义，可以自己试试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&apos;\\\t\\&apos;)</span><br><span class="line">\       \</span><br><span class="line">&gt;&gt;&gt; print(r&apos;\\\t\\&apos;)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure><p>如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，可以自己试试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;&apos;&apos;line1</span><br><span class="line">... line2</span><br><span class="line">... line3&apos;&apos;&apos;)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure><p>上面是在交互式命令行内输入，注意在输入多行内容时，提示符由&gt;&gt;&gt;变为…，提示你可以接着上一行输入，注意…是提示符，不是代码的一部分：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt - python                           _ □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│&gt;&gt;&gt; print(&apos;&apos;&apos;line1                                      │</span><br><span class="line">│... line2                                               │</span><br><span class="line">│... line3&apos;&apos;&apos;)                                           │</span><br><span class="line">│line1                                                   │</span><br><span class="line">│line2                                                   │</span><br><span class="line">│line3                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│&gt;&gt;&gt; _                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>当输入完结束符<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果写成程序并存为.py文件，就是：</span><br></pre></td></tr></table></figure></p><p>print(‘’’line1<br>line2<br>line3’’’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多行字符串&apos;&apos;&apos;...&apos;&apos;&apos;还可以在前面加上r使用，请自行测试：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>print(r’’’hello,\n<br>world’’’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">### 布尔值</span><br><span class="line">布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True<br>True<br>False<br>False<br>3 &gt; 2<br>True<br>3 &gt; 5<br>False</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">布尔值可以用and、or和not运算。</span><br><span class="line"></span><br><span class="line">#### and运算是与运算，只有所有都为True，and运算结果才是True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True and True<br>True<br>True and False<br>False<br>False and False<br>False<br>5 &gt; 3 and 3 &gt; 1<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### or运算是或运算，只要其中有一个为True，or运算结果就是True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True or True<br>True<br>True or False<br>True<br>False or False<br>False<br>5 &gt; 3 or 1 &gt; 3<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### not运算是非运算，它是一个单目运算符，把True变成False，False变成True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>not True<br>False<br>not False<br>True<br>not 1 &gt; 2<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">布尔值经常用在条件判断中，比如：</span><br></pre></td></tr></table></figure><p>if age &gt;= 18:<br>    print(‘adult’)<br>else:<br>    print(‘teenager’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">### 空值</span><br><span class="line">空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</span><br><span class="line"></span><br><span class="line">此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。</span><br><span class="line"></span><br><span class="line">### 变量</span><br><span class="line">变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</span><br><span class="line"></span><br><span class="line">变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头，比如：</span><br><span class="line"></span><br><span class="line">`a = 1`</span><br><span class="line">变量a是一个整数。</span><br><span class="line"></span><br><span class="line">`t_007 = &apos;T007&apos;`</span><br><span class="line">变量t_007是一个字符串。</span><br><span class="line"></span><br><span class="line">`Answer = True`</span><br><span class="line">变量Answer是一个布尔值True。</span><br><span class="line"></span><br><span class="line">在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>a = 123 # a是整数<br>print(a)<br>a = ‘ABC’ # a变为字符串<br>print(a)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</span><br></pre></td></tr></table></figure><p>int a = 123; // a是整数类型变量<br>a = “ABC”; // 错误：不能把字符串赋给整型变量</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">和静态语言相比，动态语言更灵活，就是这个原因。</span><br><span class="line"></span><br><span class="line">请不要把赋值语句的等号等同于数学的等号。比如下面的代码：</span><br></pre></td></tr></table></figure><p>x = 10<br>x = x + 2</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果从数学上理解x = x + 2那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。</span><br><span class="line"></span><br><span class="line">最后，理解变量在计算机内存中的表示也非常重要。当我们写：</span><br><span class="line"></span><br><span class="line">`a = &apos;ABC&apos;`</span><br><span class="line">时，Python解释器干了两件事情：</span><br><span class="line"></span><br><span class="line">在内存中创建了一个&apos;ABC&apos;的字符串；</span><br><span class="line"></span><br><span class="line">在内存中创建了一个名为a的变量，并把它指向&apos;ABC&apos;。</span><br><span class="line"></span><br><span class="line">也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据，例如下面的代码：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>a = ‘ABC’<br>b = a<br>a = ‘XYZ’<br>print(b)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">最后一行打印出变量b的内容到底是&apos;ABC&apos;呢还是&apos;XYZ&apos;？如果从数学意义上理解，就会错误地得出b和a相同，也应该是&apos;XYZ&apos;，但实际上b的值是&apos;ABC&apos;，让我们一行一行地执行代码，就可以看到到底发生了什么事：</span><br><span class="line"></span><br><span class="line">执行a = &apos;ABC&apos;，解释器创建了字符串&apos;ABC&apos;和变量a，并把a指向&apos;ABC&apos;：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923791878255456/0)</span><br><span class="line"></span><br><span class="line">执行b = a，解释器创建了变量b，并把b指向a指向的字符串&apos;ABC&apos;：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923792058613440/0)</span><br><span class="line"></span><br><span class="line">执行a = &apos;XYZ&apos;，解释器创建了字符串&apos;XYZ&apos;，并把a的指向改为&apos;XYZ&apos;，但b并没有更改：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923792191637760/0)</span><br><span class="line"></span><br><span class="line">所以，最后打印变量b的结果自然是&apos;ABC&apos;了。</span><br><span class="line"></span><br><span class="line">### 常量</span><br><span class="line">所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：</span><br><span class="line"></span><br><span class="line">`PI = 3.14159265359`</span><br><span class="line">但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。</span><br><span class="line"></span><br><span class="line">最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是/：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 / 3<br>3.3333333333333335</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>9 / 3<br>3.0</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还有一种除法是//，称为地板除，两个整数的除法仍然是整数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 // 3<br>3</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你没有看错，整数的地板除//永远是整数，即使除不尽。要做精确的除法，使用/就可以。</span><br><span class="line"></span><br><span class="line">因为//除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 % 3<br>1</p><pre><code>无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</code></pre></blockquote></blockquote></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。</p><p>对变量赋值x = y是把变量x指向真正的对象，该对象是变量y所指向的。随后对变量y的赋值不影响变量x的指向。</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在-2147483648-2147483647。<br>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 数据类型和变量&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>字典、列表、数组和字符串</title>
    <link href="http://yoursite.com/2018/02/16/python/"/>
    <id>http://yoursite.com/2018/02/16/python/</id>
    <published>2018-02-16T04:28:24.000Z</published>
    <updated>2019-07-07T04:36:14.193Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python 字典、列表、数组和字符串</p><a id="more"></a><p>字典</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">dict_1 = &#123;<span class="hljs-string">'1'</span>: <span class="hljs-string">'a'</span>, <span class="hljs-string">'2'</span>: <span class="hljs-string">'b'</span>, <span class="hljs-string">'3'</span>: <span class="hljs-string">'c'</span>&#125;</span><br><span class="line">print(dict_1)  <span class="hljs-comment"># 打印字典</span></span><br><span class="line">print(type(dict_1))  <span class="hljs-comment"># 打印新赋值的字典的类型</span></span><br><span class="line">print(str(dict_1), end=<span class="hljs-string">'字符串\n'</span>)  <span class="hljs-comment"># 把字典转化成字符串后打印</span></span><br><span class="line">print(tuple(dict_1), end=<span class="hljs-string">'元组\n'</span>)  <span class="hljs-comment"># 把字典转化为元组后打印</span></span><br><span class="line">print(list(dict_1), end=<span class="hljs-string">'列表\n'</span>)  <span class="hljs-comment"># 把字典转化为列表后打印</span></span><br></pre></td></tr></table></figure><p>元组</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">tuple_1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)</span><br><span class="line">print(tuple_1)  <span class="hljs-comment"># 打印元组</span></span><br><span class="line">print(type(tuple_1))  <span class="hljs-comment"># 打印新赋值的元祖的类型</span></span><br><span class="line">print(str(tuple_1), end=<span class="hljs-string">'字符串\n'</span>)  <span class="hljs-comment"># 把元组转化成字符串后打印</span></span><br><span class="line">print(list(tuple_1), end=<span class="hljs-string">'列表\n'</span>)  <span class="hljs-comment"># 把元组转化为列表后打印</span></span><br></pre></td></tr></table></figure><h3 id="元组不可转化为字典"><a href="#元组不可转化为字典" class="headerlink" title="元组不可转化为字典"></a>元组不可转化为字典</h3><p>列表</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">list_1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(list_1)  <span class="hljs-comment"># 打印列表</span></span><br><span class="line">print(type(list_1))  <span class="hljs-comment"># 打印新赋值的列表的类型</span></span><br><span class="line">print(str(list_1), end=<span class="hljs-string">'字符串\n'</span>)  <span class="hljs-comment"># 把列表转化成字符串后打印</span></span><br><span class="line">print(tuple(list_1), end=<span class="hljs-string">'元组\n'</span>)  <span class="hljs-comment"># 把列表转化为元组后打印</span></span><br></pre></td></tr></table></figure><h3 id="元组不可转化为字典-1"><a href="#元组不可转化为字典-1" class="headerlink" title="元组不可转化为字典"></a>元组不可转化为字典</h3><p>字符串</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">string_1 = <span class="hljs-string">'(1, 2, 3, 4, 5)'</span></span><br><span class="line">print(string_1)  <span class="hljs-comment"># 打印字符串</span></span><br><span class="line">print(type(string_1))  <span class="hljs-comment"># 打印新赋值的字符串</span></span><br><span class="line">print(tuple(eval(string_1)), end=<span class="hljs-string">'元组\n'</span>)  <span class="hljs-comment"># 把字符串转化成元组后输出</span></span><br><span class="line">print(list(eval(string_1)), end=<span class="hljs-string">'列表\n'</span>)  <span class="hljs-comment"># 把字符串转化成列表后输出</span></span><br></pre></td></tr></table></figure><h3 id="只有特殊字符串才能转化为字典"><a href="#只有特殊字符串才能转化为字典" class="headerlink" title="只有特殊字符串才能转化为字典"></a>只有特殊字符串才能转化为字典</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string_2 = <span class="hljs-string">'&#123;"name":"tom","age":6&#125;'</span></span><br><span class="line">print(string_2)  <span class="hljs-comment"># 打印新赋值的字符串</span></span><br><span class="line">print(type(string_2))  <span class="hljs-comment"># 打印新赋值的字符串的类型</span></span><br><span class="line">print(dict(eval(string_2)), end=<span class="hljs-string">'字典\n'</span>)  <span class="hljs-comment"># 把字符串转化为字典后打印</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 字典、列表、数组和字符串&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>大话Socket</title>
    <link href="http://yoursite.com/2018/02/06/socket/"/>
    <id>http://yoursite.com/2018/02/06/socket/</id>
    <published>2018-02-06T10:30:55.000Z</published>
    <updated>2019-07-07T04:39:01.279Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>要了解Socket首先要了解 TCP，他们两个的关系可以说是：</p><p>Socket 是抽象出来的使用 TCP/UDP 的概念模型，屏蔽掉了晦涩的底层协议的实现，是一个接口。</p><a id="more"></a><p>最近看到了一张如此详细的 TCP 三次握手和四次挥手，打印一张放工位！摘自《图解网络硬件》249页 图5-11 《TCP的三次握手》<br><img src="https://camo.githubusercontent.com/23dfbddfdd1d08dfda64dc13436030d947ebd62b/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f36346466643834396a7731663275646676363638706a32306d30306e6d343463" alt><br><img src="https://camo.githubusercontent.com/dc8cf3d1737ae2148250573fae94d2eea4eaba3d/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f36356534663165366a773166377532786a6f6361746a32306a383064627134362e6a7067" alt><br>所谓的X、X+1、Y、Y+1<br>对应于你收到了没、我收到了、你收到’我收到’没、我收到了不用回了,为什么用+1表示呢？那是因为前两个指的是一个人，后两个指的是一个人。<br>四组是三个连接，每个连接的序号依次是X、Y、Z。</p><p>TCP的连接过程就像两个人的对话：</p><p>想象一下，每次这俩儿人聊天，都要像下面这样一来一回三次，接下来他们才能【好好聊天了。。。】真是有点“作”。。。</p><p>我是客户端，树懒是服务端，演示三次握手、数据传输步骤<br><img src="https://camo.githubusercontent.com/83074c55d42ddfa4775100aed25d906410581346/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f36346466643834396a77316632756467393761796d6a32306d38316d636b316c" alt><br>其实有个问题，为什么连接的时候是三次握手，关闭的时候却是四次挥手？</p><p>因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p><p>而这一设计，主要是因为“服务器不是你想关就能关”。。。</p><p>比如说两个热恋中的人正在QQ上发送一个传mp4格式的文件，</p><p>A说，我要下QQ了，</p><p>B说：我知道了，你下吧。</p><p>A说，那我关了，（想关）</p><p>但是当A尝试关闭QQ的时候，QQ弹窗说“正在传输文件，传输完成后自动关闭QQ？”</p><p>这时候A对B说，呀，正在传东西，等传完了，我就关吧。（不能关）</p><p>B说：行。既然关不掉，不行再聊会儿呗？</p><p>A：聊吧。。。传完了啊，下了啊（传输结束了–能关）</p><p>B：下吧。我也下了。。。</p><p>就是多了一个Finish报文。</p><p>或者简单点表示是这样的：<br><img src="https://camo.githubusercontent.com/770f483cf985366a20e6dafde1e355bc691f2041/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f36346466643834396a77316632756a7067346235716a32307969317063716470" alt><br>图片演示了四次挥手，与三次握手相比，只多了一个被动方确认自身任务Finish的动作。<br><img src="https://camo.githubusercontent.com/101010aedc39b107a8615e6c26281e2e848dbbb1/687474703a2f2f7777322e73696e61696d672e636e2f6c617267652f36356534663165366a773166377532786a73676e386a32306a3630646b7461682e6a7067" alt><br>总结下相关的函数：</p><p>创建套接字</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Socket(af,type,protocol)</span><br></pre></td></tr></table></figure><p>建立地址和套接字的联系</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind(sockid, local addr, addrlen)</span><br></pre></td></tr></table></figure><p>服务器端侦听客户端的请求</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen( Sockid ,quenlen)</span><br></pre></td></tr></table></figure><p>建立服务器/客户端的连接 (面向连接TCP）</p><p>客户端请求连接</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connect(sockid, destaddr, addrlen)</span><br></pre></td></tr></table></figure><p>服务器端等待从编号为Sockid的Socket上接收客户连接请求</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newsockid=accept(Sockid，Clientaddr, paddrlen)</span><br></pre></td></tr></table></figure><p>发送/接收数据</p><p>面向连接：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">send(sockid, buff, bufflen) </span><br><span class="line">recv( )</span><br></pre></td></tr></table></figure><p>面向无连接：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sendto(sockid,buff,…,addrlen) </span><br><span class="line">recvfrom( )</span><br></pre></td></tr></table></figure><p>释放套接字</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">close(sockid)</span><br></pre></td></tr></table></figure><p>至于为什么是三次握手，而不是二次握手，还有四次握手，可以看看下面的类比：</p><table><thead><tr><th>三次握手</th><th>二次握手</th><th>四次握手</th></tr></thead><tbody><tr><td><img src="https://camo.githubusercontent.com/9bf301327a629211d40aadd6e8ec65c80e242511/687474703a2f2f7777322e73696e61696d672e636e2f6c617267652f36356534663165366a77316637753536776678687a6a32307969317063337a762e6a7067" alt></td><td><img src="https://camo.githubusercontent.com/a6d5cce9b79a51f18b7c2f14b149f5416c1d5e3a/687474703a2f2f7777332e73696e61696d672e636e2f6c617267652f36356534663165366a7731663775347a6433306e706a323079693170637161642e6a7067" alt></td><td><img src="https://camo.githubusercontent.com/8f98f53f7acc4a9a8954c11b885a58f7a0d71a90/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f36356534663165366a7731663775347861736d61306a323079693170636163622e6a7067" alt></td></tr></tbody></table><p>参考：<a href="http://zhihu.com/question/24853633/answer/114872771" target="_blank" rel="noopener">知乎</a></p><p>三次握手的对话，也挺像这个的，哈哈：</p><ul><li>A: How are you?</li><li>B: I’m fine, thanks,and you?</li><li>A: I’m fine too.</li></ul><hr><p>Posted by <a href="http://weibo.com/luohanchenyilong/" target="_blank" rel="noopener">微博@iOS程序犭袁</a><br>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank" rel="noopener">Creative Commons BY-NC-ND 3.0</a></p><p align="center"><a href="http://weibo.com/u/1692391497?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/1692391497/b46c844b/1.png"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要了解Socket首先要了解 TCP，他们两个的关系可以说是：&lt;/p&gt;
&lt;p&gt;Socket 是抽象出来的使用 TCP/UDP 的概念模型，屏蔽掉了晦涩的底层协议的实现，是一个接口。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
