<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://im.policx.com/"/>
  <updated>2019-07-08T15:20:42.744Z</updated>
  <id>https://im.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://im.policx.com/2019/07/05/BitTorrent/"/>
    <id>https://im.policx.com/2019/07/05/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-08T15:20:42.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://im.policx.com/2019/07/04/partner/"/>
    <id>https://im.policx.com/2019/07/04/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-08T03:27:19.057Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://im.policx.com/2019/06/18/harddisk/"/>
    <id>https://im.policx.com/2019/06/18/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-08T15:20:35.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://im.policx.com/2019/06/05/2019/"/>
    <id>https://im.policx.com/2019/06/05/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-07T12:07:13.363Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="https://www.policx.com/talk/images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://im.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://im.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://im.policx.com/2019/05/01/netlify/"/>
    <id>https://im.policx.com/2019/05/01/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-09T14:42:24.647Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。</p><div id="bushu"></div># 部署进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。接下来我分步骤的跟大家来介绍我的部署方案。<h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://im.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://im.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://im.policx.com/2019/05/01/hexo-theme-icarus/"/>
    <id>https://im.policx.com/2019/05/01/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-09T14:25:12.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><ul><li>原文链接—&gt; <a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">easyhexo.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://im.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://im.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="https://im.policx.com/2018/09/17/git-del/"/>
    <id>https://im.policx.com/2018/09/17/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-07T04:27:26.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://im.policx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="https://im.policx.com/2018/06/19/python-excel/"/>
    <id>https://im.policx.com/2018/06/19/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-07T04:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://im.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="https://im.policx.com/2018/06/17/python-writer/"/>
    <id>https://im.policx.com/2018/06/17/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-07T04:36:07.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://im.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="https://im.policx.com/2018/06/05/2018/"/>
    <id>https://im.policx.com/2018/06/05/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-04T01:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="https://www.policx.com/talk/images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://im.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://im.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="https://im.policx.com/2018/05/02/pymongo/"/>
    <id>https://im.policx.com/2018/05/02/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-07T04:35:29.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://im.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://im.policx.com/2018/05/02/mongodb/"/>
    <id>https://im.policx.com/2018/05/02/mongodb/</id>
    <published>2018-05-02T06:11:11.000Z</published>
    <updated>2019-07-07T04:23:34.820Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。</p><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库。</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。通常情况下，在一个集合中的所有文件都是类似或相关目的。</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。<br>下面给出的示例显示了一个博客网站，仅仅是一个逗号分隔的键值对的文档结构。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorial&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,20,2,15),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My second comments&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,25,7,45),</span><br><span class="line">         like: 5</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>MongoDB use DATABASE_NAME 用于创建数据库。该命令如果数据库不存在，将创建一个新的数据库， 否则将返回现有的数据库。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>use DATABASE语句的基本语法如下：<br><code>use DATABASE_NAME</code></p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">如果想创建一个数据库名称为 &lt;mydb&gt;, 那么 use DATABASE 语句应该如下：</span><br><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line"></span><br><span class="line">要检查当前选择的数据库使用命令 db</span><br><span class="line">&gt;db</span><br><span class="line">mydb</span><br><span class="line"></span><br><span class="line">如果想查询数据库列表，那么使用命令 show dbs.</span><br><span class="line">&gt;show dbs</span><br><span class="line">local     0.78125GB</span><br><span class="line">test      0.23012GB</span><br><span class="line"></span><br><span class="line">所创建的数据库（mydb）不存在于列表中。要显示的数据库，需要至少插入一个文档进去。</span><br><span class="line">&gt;db.movie.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;)</span><br><span class="line">&gt;show dbs</span><br><span class="line">local      0.78125GB</span><br><span class="line">mydb       0.23012GB</span><br><span class="line">test       0.23012GB</span><br></pre></td></tr></table></figure><p>MongoDB的默认数据库是test。 如果没有创建任何数据库，那么集合将被保存在测试数据库。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>MongoDB db.dropDatabase() 命令用于删除现有的数据库。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>dropDatabase()指令的基本语法如下：<br><code>db.dropDatabase()</code></p><p>这将删除选定的数据库。如果没有选择任何数据库，那么它会删除默认的“test”数据库</p><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>如果想删除新的数据库 <mydb>, 那么 dropDatabase() 命令将如下所示：</mydb></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;&#123; &quot;dropped&quot; : &quot;mydb&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>MongoDB 的 db.createCollection(name, options) 用于创建集合。 在命令中, name 是要创建集合的名称。 Options 是一个文档，用于指定集合的配置</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>String</td><td>要创建的集合的名称</td></tr><tr><td>Options</td><td>Document</td><td>（可选）指定有关内存大小和索引选项</td></tr></tbody></table><p>选项参数是可选的，所以需要指定集合的唯一名字。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>createCollection()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt;db.createCollection(&quot;mycollection&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以通过使用 show collections 命令来检查创建的集合</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;show collections</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><h3 id="选项列表"><a href="#选项列表" class="headerlink" title="选项列表"></a>选项列表</h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。</td></tr><tr><td>autoIndexID</td><td>Boolean</td><td>（可选）如果为true，自动创建索引_id字段。默认的值是 false.</td></tr><tr><td>size</td><td>number</td><td>（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。</td></tr><tr><td>max</td><td>number</td><td>（可选）指定上限集合允许的最大文件数。</td></tr></tbody></table><p>尽管插入文档，MongoDB首先检查字段集合的上限大小，那么它会检查最大字段。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法 :"></a>语法 :</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexID : true, size : 6142800, max : 10000 &#125; )</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.yiibai.insert(&#123;&quot;name&quot; : &quot;yiibai&quot;&#125;)</span><br><span class="line">&gt;show collections</span><br><span class="line">mycol</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br><span class="line">yiibai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>MongoDB 的 db.collection.drop() 用于从数据库中删除集合。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>drop() 命令的基本语法如下<br><code>db.COLLECTION_NAME.drop()</code></p><h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>下面给出的例子将删除给定名称的集合：mycollection</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.mycollection.drop()</span><br><span class="line">true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p>将数据插入到MongoDB集合，需要使用MongoDB 的 insert() 方法。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>insert()命令的基本语法如下：<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.insert(&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c),</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里 mycol 是我们的集合名称，它是在之前的教程中创建。如果集合不存在于数据库中，那么MongoDB创建此集合，然后插入文档进去。</p><p>在如果我们不指定_id参数插入的文档，那么 MongoDB 将为文档分配一个唯一的ObjectId。</p><p>_id 是12个字节十六进制数在一个集合的每个文档是唯一的。 12个字节被划分如下：<br>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</p><p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.post.insert([</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;NoSQL Database&apos;, </span><br><span class="line">   description: &apos;NoSQL database doesn&apos;t have tables&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 20, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p>要从集合查询MongoDB数据，需要使用MongoDB的 find()方法。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find()</code><br>find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p><code>&gt;db.mycol.find().pretty()</code></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>除了find()方法还有findOne()方法，仅返回一个文档。</p><h3 id="RDBMS-Where子句等效于MongoDB"><a href="#RDBMS-Where子句等效于MongoDB" class="headerlink" title="RDBMS Where子句等效于MongoDB"></a>RDBMS Where子句等效于MongoDB</h3><p>查询文档在一些条件的基础上，可以使用下面的操作</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>Equality</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td>db.mycol.find({“by”:”yiibai tutorials”}).pretty()</td><td>where by = ‘yiibai tutorials’</td></tr><tr><td>Less Than</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>Less Than Equals</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>Greater Than</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>Greater Than Equals</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>Not Equals</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="AND-在-MongoDB"><a href="#AND-在-MongoDB" class="headerlink" title="AND 在 MongoDB"></a>AND 在 MongoDB</h4><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>在 find()方法，如果您传递多个键通过”,”将它们分开，那么MongoDB对待它就如AND条件一样。基本语法如下所示：<br><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有教程含“yiibai tutorials”和其标题是“MongoDB Overview”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;yiibai tutorials&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>对于上面给出的例子相当于where子句：’ where by=’yiibai tutorials’ AND title=’MongoDB Overview’ ‘。可以传递任何数目的键-值对在find子句。</p><h4 id="OR-在-MongoDB"><a href="#OR-在-MongoDB" class="headerlink" title="OR 在 MongoDB"></a>OR 在 MongoDB</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><p>要查询基于OR条件的文件，需要使用$or关键字。OR的基本语法如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有撰写含有 ‘yiibai tutorials’ 或是标题为 ‘MongoDB Overview’ 的教程</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-AND-和-OR-在一起"><a href="#使用-AND-和-OR-在一起" class="headerlink" title="使用 AND 和 OR 在一起"></a>使用 AND 和 OR 在一起</h4><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子显示有喜欢数大于100 的文档，其标题要么是 ‘MongoDB Overview’ 或 ‘yiibai tutorials’. 等效于SQL的where子句：’where likes&gt;10 AND (by = ‘yiibai tutorials’ OR title = ‘MongoDB Overview’)’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai tutorials&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>MongoDB的update()和save()方法用于更新文档到一个集合。 update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。</p><h4 id="MongoDB-Update-方法"><a href="#MongoDB-Update-方法" class="headerlink" title="MongoDB Update() 方法"></a>MongoDB Update() 方法</h4><h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><p>update()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br></pre></td></tr></table></figure><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将设置其标题“MongoDB Overview”的文件为新标题为“New MongoDB Tutorial”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Tutorial Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 ‘multi’ 设置为 true。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="MongoDB-Save-方法"><a href="#MongoDB-Save-方法" class="headerlink" title="MongoDB Save() 方法"></a>MongoDB Save() 方法</h4><p>save() 方法取代，通过新文档到 save()方法</p><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><p>mongodb 的 save()方法如下所示的基本语法：<br><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><p>下面的例子将替换该文件_id ‘5983548781331adf45ec7’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.save(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>MongoDB 的 remove()方法用于从集合中删除文档。remove()方法接受两个参数。一个是标准缺失，第二是justOne标志<br>deletion criteria : 根据文件（可选）删除条件将被删除。<br>justOne : （可选）如果设置为true或1，然后取出只有一个文档。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>remove()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p><h6 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h6><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将删除所有的文件，其标题为 ‘MongoDB Overview’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Toturials Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="只删除一个"><a href="#只删除一个" class="headerlink" title="只删除一个"></a>只删除一个</h5><p>如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。<br><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p><h5 id="删除所有文件"><a href="#删除所有文件" class="headerlink" title="删除所有文件"></a>删除所有文件</h5><p>如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove()</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="MongoDB投影"><a href="#MongoDB投影" class="headerlink" title="MongoDB投影"></a>MongoDB投影</h4><p>mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。</p><p>MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。</p><p>语法</p><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find({},{KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示文档的标题，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意在执行find()方法时_id字段始终显示，如果不想要显示这个字段，那么需要将其设置为0</p><h5 id="限制文档"><a href="#限制文档" class="headerlink" title="限制文档"></a>限制文档</h5><p>MongoDB Limit() 方法</p><p>要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p>limit()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER)</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将只显示2个文档，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>如果不指定 limit()方法的参数数量，然后它会显示集合中的所有文档。</p><p>MongoDB Skip() 方法</p><p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。</p><p>语法</p><p>skip() 方法的基础语法如下所示：<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p><p>例子：</p><p>下面的例子将仅显示第二个文档。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，skip() 方法的默认值是 0</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p>要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。</p><p>语法</p><p>sort()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().sort({KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有如下数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示的文件排序按标题降序排序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;title&quot;:-1&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果不指定排序类型，那么 sort() 方法将以升序排列文档。</p><h4 id="MongoDB索引"><a href="#MongoDB索引" class="headerlink" title="MongoDB索引"></a>MongoDB索引</h4><p>索引支持查询高效率执行。如果没有索引，MongoDB必须扫描集合中的每一个文档，然后选择那些符合查询语句的文档。若需要 mongod 来处理大量数据，扫描是非常低效的。</p><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。</p><p>要创建索引，需要使用MongoDB的ensureIndex()方法。</p><p>语法</p><p>ensureIndex()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code></p><p>这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.</p><p>例子</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">在 ensureIndex()方法，可以通过多个字段，来创建多个字段索引。</span><br><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法还接受选项列表（这是可选），其列表如下：<br><img src="https://policx.github.io/post-images/1561132706992.png" alt></p><h4 id="MongoDB-聚合"><a href="#MongoDB-聚合" class="headerlink" title="MongoDB 聚合"></a>MongoDB 聚合</h4><p>聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。 在SQL中的count(*)，使用group by 与mongodb的聚合是等效的。 对于MongoDB的聚合，使用的是aggregate()方法。</p><p>语法</p><p>aggregate()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p><p>例子：</p><p>在集合中有以下数据：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai &apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;, </span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai&apos;,</span><br><span class="line">   url: &apos;http://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;, </span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;http://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在从上面的集合，如果想知道每一个用户编写的教程是多少，那么使用aggregate()方法，如下图所示的列表：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Yiibai Yiibai&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>用于上述用途将等效于sql查询： select by_user, count(*) from mycol group by by_user</code></pre><p>另外，在上述例子中，我们已经使用字段by_user进行分组并计算总和，也就是by_user 出现各个次数。一个列表中可用的聚集表达式。<br>    <img src="https://policx.github.io/post-images/1561132965786.png" alt></p><h4 id="MongoDB-复制"><a href="#MongoDB-复制" class="headerlink" title="MongoDB 复制"></a>MongoDB 复制</h4><p>复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。</p><h6 id="为什么要复制？"><a href="#为什么要复制？" class="headerlink" title="为什么要复制？"></a>为什么要复制？</h6><blockquote><pre><code>为了让数据安全数据的高（24*7）可用性灾难恢复无停机维护（如备份，索引重建，压缩）读取缩放（额外的副本来读取）副本集是透明的应用</code></pre></blockquote><h5 id="MongoDB复制的工作原理"><a href="#MongoDB复制的工作原理" class="headerlink" title="MongoDB复制的工作原理"></a>MongoDB复制的工作原理</h5><p>MongoDB通过使用副本集的复制来实现。副本集是一组承载同一个数据集的mongod实例。在副本的一个节点是接收所有的写操作主节点。所有的实例，次级，应用操作从主以便它们具有相同的数据集。副本集只能有一个主节点。</p><blockquote><pre><code>副本集是一组两个或更多个节点（通常至少3节点是必需的）。在副本集一个节点是主节点和其余的节点都是次要的。所有的数据复制是从主到次节点。在自动故障转移或维护时，选建立了主要和一个新的主节点被选择。故障节点的恢复后，再次加入副本集，并可以作为一个辅助节点。</code></pre></blockquote><p>mongodb复制的典型图如下图，其中客户端应用程序总是与主节点和主节点交互，然后将数据复制到辅助节点。<br><img src="https://policx.github.io/post-images/1561133216694.png" alt><br>副本集特征</p><ul><li>N个节点的集群</li><li>任何节点可为原发/主节点</li><li>所有的写操作进入到主节点</li><li>自动故障转移</li><li>自动恢复</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://im.policx.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MySQL 之间的交互</title>
    <link href="https://im.policx.com/2018/05/02/pymysql/"/>
    <id>https://im.policx.com/2018/05/02/pymysql/</id>
    <published>2018-05-02T03:14:27.000Z</published>
    <updated>2019-07-07T04:35:38.926Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是-PyMySQL？"><a href="#什么是-PyMySQL？" class="headerlink" title="什么是 PyMySQL？"></a>什么是 PyMySQL？</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><a id="more"></a> <h2 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h2><p>在文件中引入模块</p><p><code>import pymysql</code></p><h3 id="1-Connection对象"><a href="#1-Connection对象" class="headerlink" title="1.Connection对象"></a>1.Connection对象</h3><p>•  用于建立与数据库的连接<br>•  创建对象：调用connect()方法<br>conn=connect(参数列表)<br>•  参数host：连接的mysql主机，如果本机是’localhost’<br>•  参数port：连接的mysql主机的端口，默认是3306<br>•  参数db：数据库的名称<br>•  参数user：连接的用户名<br>•  参数password：连接的密码<br>•  参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</p><h3 id="2-对象的方法"><a href="#2-对象的方法" class="headerlink" title="2.对象的方法"></a>2.对象的方法</h3><p>•  close()关闭连接<br>•  commit()事务，所以需要提交才会生效<br>•  rollback()事务，放弃之前的操作<br>•  cursor()返回Cursor对象，用于执行sql语句并获得结果</p><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><p>•  执行sql语句<br>•  创建对象：调用Connection对象的cursor()方法<br>cursor1=conn.cursor()</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>•  close()关闭<br>•  execute(operation [, parameters ])执行语句，返回受影响的行数<br>•  fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组<br>•  next()执行查询语句时，获取当前行的下一行<br>•  fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回<br>•  scroll(value[,mode])将行指针移动到某个位置<br>•  mode表示移动的方式<br>•  mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动。相对的<br>•  mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0，绝对的。</p><h4 id="举个例子便于理解"><a href="#举个例子便于理解" class="headerlink" title="举个例子便于理解"></a>举个例子便于理解</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 导入python操作mysql的模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> pymysql</span><br><span class="line"><span class="hljs-comment"># 获取连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="hljs-string">'127.0.0.1'</span>, user=<span class="hljs-string">'root'</span>, password=<span class="hljs-string">'123456'</span>, database=<span class="hljs-string">'python01'</span>, port=<span class="hljs-number">3306</span>, charset=<span class="hljs-string">'utf8'</span>)</span><br><span class="line"><span class="hljs-comment"># 获取执行工具</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="hljs-comment"># sql语句,增删改</span></span><br><span class="line"><span class="hljs-comment">#sql = 'select birthday from t_user'</span></span><br><span class="line">sql = <span class="hljs-string">'select id,name,pwd,birthday from t_user'</span></span><br><span class="line"><span class="hljs-comment"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span></span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(<span class="hljs-string">'查询的结果有%s条数据'</span>%count)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取第一行</span></span><br><span class="line">dateOne = cur.fetchone()</span><br><span class="line">print(dateOne)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向上移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向下移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'absolute'</span>)   绝对的，这里指的是第一行</span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'relative'</span>)   相对的</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取所有行的数据</span></span><br><span class="line">dataAll = cur.fetchall()</span><br><span class="line">print(dataAll)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">     print(temp)</span><br><span class="line">     print(dataAll[<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])      <span class="hljs-comment">#dataAll[-1]得到的是一个用户所有的信息，dataAll[-1][2]获取最后一个人的密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> cur:</span><br><span class="line">     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-string">'id:%s,name:%s,pwd:%s,birthday:%s'</span></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">    print(s%(temp[<span class="hljs-number">0</span>],temp[<span class="hljs-number">1</span>],temp[<span class="hljs-number">2</span>],temp[<span class="hljs-number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-对象的属性"><a href="#3-对象的属性" class="headerlink" title="3.对象的属性"></a>3.对象的属性</h3><p>•  rowcount只读属性，表示最近一次execute()执行后受影响的行数<br>•  connection获得当前连接对象</p><h3 id="2-增删改查-CRUD"><a href="#2-增删改查-CRUD" class="headerlink" title="2.增删改查(CRUD)"></a>2.增删改查(CRUD)</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>•  创建testInsert.py文件，向学生表中插入一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;insert into students(sname) values(&apos;张良&apos;)&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p>•  创建testUpdate.py文件，修改学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;update students set sname=&apos;刘邦&apos; where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>•  创建testDelete.py文件，删除学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8 import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;delete from students where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>•  创建testSelectOne.py文件，查询一条学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Pymysql try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>•  创建testSelectMany.py文件，查询全部学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf8 import Pymysql</span><br><span class="line">try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="实例一：参数"><a href="#实例一：参数" class="headerlink" title="实例一：参数"></a>实例一：参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改，sql注入</span><br><span class="line">sql = &apos;insert into t_user(name,pwd,birthday) values(%s,%s,%s)&apos;</span><br><span class="line"># 参数列表</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = input(&apos;输入生日:&apos;)     # 2017年10月01日--&gt;日期struct_time(---&gt;2017-10-01)</span><br><span class="line">birthday = time.strptime(birthday,&apos;%Y年%m月%d日&apos;)      #这里我们就用到了时间与字符串的相互转换(详情见MySQL高级)</span><br><span class="line"></span><br><span class="line">params = [name,pwd,birthday]</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql,params)</span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">print(&apos;受影响的行数:%s&apos;%count)</span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例二：抛出异常"><a href="#实例二：抛出异常" class="headerlink" title="实例二：抛出异常"></a>实例二：抛出异常</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    conn = None</span><br><span class="line">    cur = None</span><br><span class="line">    # 获取连接对象</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">                           user=&apos;root&apos;,</span><br><span class="line">                           password=&apos;123456&apos;,</span><br><span class="line">                           database=&apos;python01&apos;,</span><br><span class="line">                           port=3306,</span><br><span class="line">                           charset=&apos;utf8&apos;)</span><br><span class="line">    # 模拟异常</span><br><span class="line">    # a = 1 / 0</span><br><span class="line">    # 获取执行工具</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    # sql语句,增删改</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd,birthday) values(&quot;小伊&quot;,&quot;123456&quot;,str_to_date(&quot;2017年10月20日&quot;,&quot;%Y年%m月%d日&quot;))&apos;</span><br><span class="line">    # 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">    count = cur.execute(sql)</span><br><span class="line">    # 提交</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(&apos;受影响的行数:%s&apos; % count)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    # 打印异常信息，测试时候使用，项目上线，去掉</span><br><span class="line">    print(str(ex))</span><br><span class="line">    # 将异常继续抛出</span><br><span class="line">    # raise</span><br><span class="line">finally:</span><br><span class="line">    if cur != None:</span><br><span class="line">        cur.close()</span><br><span class="line">    if conn != None:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例三："><a href="#实例三：" class="headerlink" title="实例三："></a>实例三：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改</span><br><span class="line">#sql = &apos;select birthday from t_user&apos;</span><br><span class="line">sql = &apos;select id,name,pwd,birthday from t_user&apos;</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(&apos;查询的结果有%s条数据&apos;%count)</span><br><span class="line"></span><br><span class="line">#获取第一行</span><br><span class="line"># dateOne = cur.fetchone()</span><br><span class="line"># print(dateOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for temp in cur:</span><br><span class="line">#     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;id:%s,name:%s,pwd:%s,birthday:%s&apos;</span><br><span class="line">for temp in dataAll:</span><br><span class="line">    print(s%(temp[0],temp[1],temp[2],temp[3]))</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h3><p>这个库的名字：mySqlHelper</p><p> python操作mysql进行增删改查的封装</p><pre><code>1、增删改，代码类似2、查询代码分析1、获取连接对象2、sql语句不同，参数不同3、获取执行对象    增删改    查询        1、fetchone        2、fetchall4、处理结果5、关闭</code></pre><h4 id="面向对象-建立类，封装属性和函数"><a href="#面向对象-建立类，封装属性和函数" class="headerlink" title="面向对象  建立类，封装属性和函数"></a>面向对象  建立类，封装属性和函数</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">class MysqlHelper:</span><br><span class="line">    &apos;&apos;&apos;python操作mysql的增删改查的封装&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, host, user, password, database, port=3306, charset=&apos;utf8&apos;):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化参数</span><br><span class="line">        :param host:        主机</span><br><span class="line">        :param user:        用户名</span><br><span class="line">        :param password:    密码</span><br><span class="line">        :param database:    数据库</span><br><span class="line">        :param port:        端口号，默认是3306</span><br><span class="line">        :param charset:     编码，默认是utf8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        获取连接对象和执行对象</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.conn = pymysql.connect(host=self.host,</span><br><span class="line">                                    user=self.user,</span><br><span class="line">                                    password=self.password,</span><br><span class="line">                                    database=self.database,</span><br><span class="line">                                    port=self.port,</span><br><span class="line">                                    charset=self.charset)</span><br><span class="line"></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    def fetchone(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数元组，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataOne = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataOne = self.cur.fetchone()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataOne</span><br><span class="line"></span><br><span class="line">    def fetchall(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数列表，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataall = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataall = self.cur.fetchall()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataall</span><br><span class="line"></span><br><span class="line">    def __item(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行增删改</span><br><span class="line">        :param sql:           sql语句</span><br><span class="line">        :param params:        sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:              受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        count = 0</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行修改</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def insert(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行新增</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def delete(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行删除</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        关闭执行工具和连接对象</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if self.cur != None:</span><br><span class="line">            self.cur.close()</span><br><span class="line">        if self.conn != None:</span><br><span class="line">            self.conn.close()</span><br></pre></td></tr></table></figure><h4 id="1-测试查询多条数据"><a href="#1-测试查询多条数据" class="headerlink" title="1.测试查询多条数据"></a>1.测试查询多条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where name = %s and id &gt; %s&apos;</span><br><span class="line"># params</span><br><span class="line">params = [&apos;小茗&apos;,1]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchall(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    for temp in data:</span><br><span class="line">        print(temp)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br><span class="line"></span><br><span class="line">helper.close()</span><br></pre></td></tr></table></figure><h4 id="2-测试查询一条数据"><a href="#2-测试查询一条数据" class="headerlink" title="2.测试查询一条数据"></a>2.测试查询一条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where id = %s&apos;</span><br><span class="line">#sql = &apos;select * from t_user where id = 1&apos;</span><br><span class="line"># params</span><br><span class="line">params = [2]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchone(sql, params)</span><br><span class="line">#data = helper.fetchone(sql)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    print(data)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br></pre></td></tr></table></figure><h4 id="3-测试增删改"><a href="#3-测试增删改" class="headerlink" title="3.测试增删改"></a>3.测试增删改</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;update t_user set name =%s,pwd=%s,birthday=%s where id=%s&apos;</span><br><span class="line"># params</span><br><span class="line">id = input(&apos;输入编号:&apos;)</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = time.strptime(input(&apos;输入生日:&apos;), &apos;%Y年%m月%d日&apos;)</span><br><span class="line">params = [name, pwd, birthday,id]</span><br><span class="line"># 执行</span><br><span class="line">count = helper.update(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if count:</span><br><span class="line">    print(&apos;操作成功.&apos;)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;操作失败.&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-登录和注册"><a href="#4-登录和注册" class="headerlink" title="4.登录和注册"></a>4.登录和注册</h4><p>登录和注册的时候需要对密码进行加密</p><p>注意：</p><p>•  需要对密码进行加密<br>•  如果使用md5加密，则密码包含32个字符<br>•  如果使用sha1加密，则密码包含40个字符，这里使用这种方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table userinfos(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    uname varchar(20),</span><br><span class="line">    upwd char(40),</span><br><span class="line">    isdelete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">ret = doPwd(&apos;123&apos;)</span><br><span class="line">print(ret)</span><br><span class="line">结果：40bd001563085fc35165329ea1ff5c5ecbdbbeef</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">-- 插入如下数据，用户名为123,密码为123,这是sha1加密后的值</span><br><span class="line"></span><br><span class="line">insert into userinfos </span><br><span class="line">values(1,&apos;123&apos;,&apos;40bd001563085fc35165329ea1ff5c5ecbdbbeef&apos;,0);</span><br></pre></td></tr></table></figure><h4 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from mysqlHelper import MysqlHelper</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    &apos;&apos;&apos;登录&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    #加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;select * from t_user where name=%s and pwd=%s&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    data = helper.fetchone(sql, params)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;登录成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;登录失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doPwd(pwd):</span><br><span class="line">    &apos;&apos;&apos;sha1编码&apos;&apos;&apos;</span><br><span class="line">    mysha1 = hashlib.sha1()</span><br><span class="line">    mysha1.update(pwd.encode(&apos;utf-8&apos;))</span><br><span class="line">    pwd = mysha1.hexdigest()</span><br><span class="line">    return pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    &apos;&apos;&apos;注册&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    # 加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd) values(%s,%s)&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    count = helper.insert(sql, params)</span><br><span class="line">    if count:</span><br><span class="line">        print(&apos;操作成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;操作失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #register()</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PyMySQL？&quot;&gt;&lt;a href=&quot;#什么是-PyMySQL？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PyMySQL？&quot;&gt;&lt;/a&gt;什么是 PyMySQL？&lt;/h2&gt;&lt;p&gt;PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。&lt;/p&gt;
&lt;p&gt;PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://im.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django笔记</title>
    <link href="https://im.policx.com/2018/04/18/django-bi-ji/"/>
    <id>https://im.policx.com/2018/04/18/django-bi-ji/</id>
    <published>2018-04-17T17:00:16.000Z</published>
    <updated>2019-07-07T04:26:44.840Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p><a id="more"></a><h2 id="一-版本选择"><a href="#一-版本选择" class="headerlink" title="一. 版本选择"></a>一. 版本选择</h2><p>Django 2.0.x 支持 Python 3.4, 3.5 和 3.6 （注意，不再支持 Python 2）   </p><h2 id="二-安装-Django"><a href="#二-安装-Django" class="headerlink" title="二. 安装 Django"></a><strong>二. 安装 Django</strong></h2><p><strong>2.1. 用 pip 来安装</strong></p><p><strong>2.1.1 需要先安装pip</strong></p><p>(1). Linux, Mac OSX, Windows 下都可用 get-pip.py 来安装<br>pip：<a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/installing.html</a>  </p><p>或者直接下载：<a href="https://bootstrap.pypa.io/get-pip.py" title="get-pip.py" target="_blank" rel="noopener">get-pip.py</a> 然后运行在终端运行 <strong>python get-pip.py 就可以安装 pip。</strong></p><p>Note: 也可以下载 pip 源码包，运行 <strong>python setup.py install</strong> 进行安装 </p><p><strong>2.1.2 利用 pip 安装 Django</strong></p><p><code>（sudo) pip install Django    或者(sudo) pip install Django==1.8.16 或者 pip install Django==1.11.8</code>    </p><p>如果想升级 pip 可以用： </p><pre><code>(sudo) pip install --upgrade pip</code></pre><p><strong>2.2. 下载源码安装</strong>  </p><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">https://www.djangoproject.com/download/</a></p><p>如果是源码包, 比如 django-1.11.8.tar.gz </p><p><strong>2.2.1 Linux 或 Mac 下</strong></p><pre><code>tar -xvf django-1.11.8.tar.gzcd django-1.11.8(sudo) python setup.py install</code></pre><h2 id="三-检查是否安装成功"><a href="#三-检查是否安装成功" class="headerlink" title="三. 检查是否安装成功"></a><strong>三. 检查是否安装成功</strong></h2><p>终端上输入 python ,点击 Enter，进行 python 环境</p><pre><code>&gt;&gt;&gt; import django&gt;&gt;&gt; django.VERSION(1, 11, 8, &apos;final&apos;, 0)&gt;&gt;&gt; &gt;&gt;&gt; django.get_version()&apos;1.11.8&apos;</code></pre><p>如果运行后看到版本号，就证明安装成功了！ </p><h2 id="四-搭建多个互不干扰的开发环境（可选）"><a href="#四-搭建多个互不干扰的开发环境（可选）" class="headerlink" title="四. 搭建多个互不干扰的开发环境（可选）"></a><strong>四. 搭建多个互不干扰的开发环境（可选）</strong></h2><p>我们有的时候会发现，一个电脑上有多个项目，一个依赖 Django 1.8，另一个比较旧的项目又要用 Django 1.5，这时候怎么办呢？ </p><p>我们需要一个依赖包管理的工具来处理不同的环境。 </p><h3 id="4-1-虚拟环境依赖安装"><a href="#4-1-虚拟环境依赖安装" class="headerlink" title="4.1 虚拟环境依赖安装"></a>4.1 虚拟环境依赖安装</h3><p>开发会用 virtualenv 来管理多个开发环境 </p><p><strong>Linux/MacOS 下</strong></p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了 </p><pre><code># 安装:(sudo) pip install virtualenv virtualenvwrapper</code></pre><p>修改~/.bash_profile或其它环境变量相关文件(如 .bashrc 或用 ZSH 之后的 .zshrc)，添加以下语句  </p><pre><code>export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/workspacesource /usr/local/bin/virtualenvwrapper.sh</code></pre><p>修改后使之立即生效(也可以重启终端使之生效)： </p><pre><code>source ~/.bash_profile</code></pre><h3 id="4-2-虚拟环境使用方法："><a href="#4-2-虚拟环境使用方法：" class="headerlink" title="4.2 虚拟环境使用方法："></a><strong>4.2 虚拟环境使用方法：</strong></h3><p><strong>mkvirtualenv zqxt：创建运行环境zqxt</strong></p><p><strong>workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境</strong></p><p><strong>deactivate</strong>: 退出终端环境</p><p><strong>其它的：</strong></p><p><strong>rmvirtualenv</strong> ENV：删除运行环境ENV </p><p><strong>mkproject</strong> mic：创建mic项目和运行环境mic </p><p><strong>mktmpenv</strong>：创建临时运行环境 </p><p><strong>lsvirtualenv</strong>: 列出可用的运行环境 </p><p><strong>lssitepackages</strong>: 列出当前环境安装了的包 </p><p>创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://im.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://im.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django部署——uwsgi+Nginx</title>
    <link href="https://im.policx.com/2018/04/17/django/"/>
    <id>https://im.policx.com/2018/04/17/django/</id>
    <published>2018-04-17T09:42:04.000Z</published>
    <updated>2019-07-07T04:22:37.406Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!</p><a id="more"></a><p><img src="https://policx.github.io/post-images/1560768371650.png" alt><br>环境：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3.6</span><br><span class="line">centos 7</span><br><span class="line">Django1.11</span><br></pre></td></tr></table></figure><h2 id="1、本地跑起来Django"><a href="#1、本地跑起来Django" class="headerlink" title="1、本地跑起来Django"></a>1、本地跑起来Django</h2><p>这里不讲Django项目实施过程，假设你已经写了一个Django项目，并且在本地127.0.0.1:8000能够跑起来。喏，给你个参考，项目大概长这样：<br><img src="https://policx.github.io/post-images/1560764670814.png" alt></p><ul><li>kindle目录为我创建的Django App</li></ul><h2 id="2、修改项目配置"><a href="#2、修改项目配置" class="headerlink" title="2、修改项目配置"></a>2、修改项目配置</h2><p>也就是项目目录下的settings.py文件，主要强调几个地方：</p><p>①关闭DEBUG模式：<br><img src="https://policx.github.io/post-images/1560764736238.png" alt><br>②修改ALLOWED_HOSTS：<br><img src="https://policx.github.io/post-images/1560764863424.png" alt><br>③配置静态文件存放路径：<br><img src="https://policx.github.io/post-images/1560764833026.png" alt></p><p>修改好配置之后执行:<br><code>python manage.py collectstatic</code><br>将项目用到的静态文件复制到项目根目录下的static文件中<br><img src="https://policx.github.io/post-images/1560764930146.png" alt></p><h2 id="3、安装uwsgi和Nginx"><a href="#3、安装uwsgi和Nginx" class="headerlink" title="3、安装uwsgi和Nginx"></a>3、安装uwsgi和Nginx</h2><p>这个没什么说的。。。在自己的云服务器上装好这两个工具<br>安装好uwsgi后最好验证一下，验证方法：<br>创建一个test.py文件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)])</span><br><span class="line">    return [b&apos;Hello world!&apos;]    #python3</span><br><span class="line">    # return [&apos;Hello world!&apos;]    #python2</span><br></pre></td></tr></table></figure><p>启动uwsgi服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --wsgi-file test.py</span><br></pre></td></tr></table></figure><p>如果可以正常启动而不报错那就应该没问题，不放心的话再在终端验证一下：<br><code>wget http://127.0.0.1:8000</code><br>看一下能否正确获取内容</p><h2 id="4、配置项目的uwsgi"><a href="#4、配置项目的uwsgi" class="headerlink" title="4、配置项目的uwsgi"></a>4、配置项目的uwsgi</h2><p>在项目所在文件夹下创建uwsgi.ini配置文件，也就是这里:<br><img src="https://policx.github.io/post-images/1560765049955.png" alt><br>在uwsgi.ini里进行如下配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># Django-related settings</span><br><span class="line"> </span><br><span class="line"># 这里的端口可以根据自己需要设定</span><br><span class="line">socket = 127.0.0.1:8001        </span><br><span class="line"> </span><br><span class="line"># the base directory (full path)</span><br><span class="line"># 这个是Django项目的根目录，也就是包含App的那个目录，仔细对照上图</span><br><span class="line">chdir           = /home/python/book2kindle</span><br><span class="line"> </span><br><span class="line"># Django s wsgi file</span><br><span class="line"># 这里是项目名(不是App名).wsgi</span><br><span class="line">module          = book2kindle.wsgi</span><br><span class="line"> </span><br><span class="line"># process-related settings</span><br><span class="line"># master</span><br><span class="line">master          = true</span><br><span class="line"> </span><br><span class="line"># maximum number of worker processes</span><br><span class="line">processes       = 32</span><br><span class="line"> </span><br><span class="line"># ... with appropriate permissions - may be needed</span><br><span class="line"># chmod-socket    = 664</span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum          = true</span><br><span class="line"> </span><br><span class="line">plugin python = true</span><br><span class="line"> </span><br><span class="line"># 这个是项目的虚拟python环境，如果没用虚拟环境，可以不设定</span><br><span class="line">home = /home/python/book2kindle_env</span><br></pre></td></tr></table></figure><h2 id="5、配置项目的nginx"><a href="#5、配置项目的nginx" class="headerlink" title="5、配置项目的nginx"></a>5、配置项目的nginx</h2><p>找到nginx的配置文件夹，centos7的nginx配置文件在/etc/nginx下，该路径下有一个nginx.conf总配置文件，还有两个文件夹./conf.d、./default.d，我们将nginx.conf复制一份到conf.d文件夹下，命名为nginx.conf（或者项目名.conf）进行如下修改（根据中文注释进行相应配置即可）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream django &#123;</span><br><span class="line">        # 注意这里的server要和uwsgi.ini配置文件中的socket保持一致</span><br><span class="line">        server 127.0.0.1:8002; # for a web port socket</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  xxx.com;  # 这里填自己的域名或者服务器的ip（决定你今后访问网站的方式）</span><br><span class="line">        charset      utf-8;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        location / &#123;</span><br><span class="line">        root        /home/python/book2kindle/kindle;  # 这是Django App的路径</span><br><span class="line">            uwsgi_pass  django;</span><br><span class="line">            include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">        &#125;</span><br><span class="line">        location /static &#123;</span><br><span class="line">            # Django项目静态文件的路径</span><br><span class="line">            alias /home/python/book2kindle/static; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、启动uwsgi和nginx"><a href="#6、启动uwsgi和nginx" class="headerlink" title="6、启动uwsgi和nginx"></a>6、启动uwsgi和nginx</h2><p>进入uwsgi.ini文件夹下执行：<br><code>uwsgi --ini uwsgi.ini</code><br>在终端执行：<br><code>service nginx restart</code><br>然后就可以根据域名（前提是要将域名解析到服务器ip地址）或者服务器ip来访问网站了！</p><p>OK，完事！就是这么简单！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://im.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://im.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>2018创业记：如何选择合伙人？</title>
    <link href="https://im.policx.com/2018/03/25/chuangye/"/>
    <id>https://im.policx.com/2018/03/25/chuangye/</id>
    <published>2018-03-25T13:02:42.000Z</published>
    <updated>2019-07-07T04:22:05.224Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><a id="more"></a><h2 id="创业路上危机四伏，如何破局？"><a href="#创业路上危机四伏，如何破局？" class="headerlink" title="创业路上危机四伏，如何破局？"></a>创业路上危机四伏，如何破局？</h2></li></ul><p>很多朋友在2018年做出了改变，迈出了新的一步。比如身边几位朋友正摩拳擦掌准备创业。然而，看别人创业和自己创业完全是两回事儿，见得再多，自己趟水时也难免有所顾虑。</p><p>在跟他们聊过之后，我们发现了他们普遍面临的一个课题：如何选择合伙人?这是身经百战的连续创业者也很难驾轻就熟的一个课题，今天我们就来一起聊聊。本文将从能不能和朋友一起创业、合伙人应该与我互补还是相似、如何判断双方是否志同道合、如何应对常见的分歧几个部分展开来说。</p><p>风物长宜放眼量，抱持开阔的胸襟、敏锐的判断、坚韧的意志，相信大家能够与志同道合的伙伴一起，越过山丘，携手站上梦想之巅。</p><h2 id="能不能和朋友一起创业？"><a href="#能不能和朋友一起创业？" class="headerlink" title="能不能和朋友一起创业？"></a>能不能和朋友一起创业？</h2><p>在创业初期，创业者选择合伙人往往会从身边的朋友“下手”。</p><p>一起创业可以说是认清一个朋友的最好方式。一篇名为《友谊的代价》的论文，考察了3510个风险投资者，以及他们在1975-2003年间11895个投资项目。</p><p>论文写道，有的人选择与自己能力相当的人合作，比如同是名校毕业；但更多的人选择与自己的熟人合作，比如曾经的同学或同事。结果表明，按能力搭档可以增加投资的成功概率，而找熟人搭档，则会明显降低成功的可能性。</p><p>所有人都喜欢强联系，但关系是关系，工作归工作。现在社会学已经有了足够多的证据说明：对工作来说，同乡会和校友录并不是扩展人脉的好地方。《中国合伙人》这部电影上映后，“千万别跟好朋友合伙开公司”也成了热议话题。电影的最后，三位合伙人分道扬镳，而剧本的原型——新东方的三位创始人也以“分家”收场。</p><p>当然，朋友合伙创业成功的案例也不在少数，况且，长期的伙伴关系更有助于共同面对创业过程中的艰难险阻，团队也更容易在创业初期获得投资人的青睐。如果在寻找合伙人的过程中，你觉得还是某个朋友更适合，那么一定要在合作之前约法三章，考虑到最坏的情况，提前用书面合同的方式确定双方的责权利，用规章制度来约束指导双方的行为，而不是靠人情关系。</p><p>中间一旦觉得发生了问题，你就必须考虑一下能否继续合作下去。其实，很多合作者走不到最后就是因为中间的小问题没有解决，一点一点积累最后爆发出来。</p><p>因此，能否和朋友一起创业这个问题，需要辩证思考。如果朋友间相互了解对方的个性和能力，工作中能做到分工明确，用规章制度来规范双方的行为，及时解决小矛盾，相互照顾，一起分担，共同奋斗，那么创业成功就会成为大概率事件。</p><h2 id="合伙人应该与我互补还是相似？"><a href="#合伙人应该与我互补还是相似？" class="headerlink" title="合伙人应该与我互补还是相似？"></a>合伙人应该与我互补还是相似？</h2><p>一个较为合理的答案是：理念和价值观上要相似，能力和经验上要互补。</p><p>理念和价值观上的相近，可以保证你们在重大原则问题上的判断是比较一致的，不至于出现根本性的冲突。这些重大的原则问题包括企业的战略方向、利益分配机制、做事的基本底线等等。</p><p>在这些问题上出现不同意见，通常很难取得共识。因为个性和价值观的形成，通常都不是一朝一夕的事情，也就是我们常说的“江山易改，本性难移”。如果在创业的艰难环境下，双方还要来磨合这个层面的东西，就会非常痛苦。</p><p>能力和经验上的互补相对更好理解。你擅长产品，他专于研发；你有丰富的运营经验，他则对于商业模式的建立更有心得；你对数字不敏感，他则是投资和财务领域的资深人士。这些都是很好的互补。</p><p>互补可以让你们在具体事情的推进中事半功倍，并建立起对于对方在专业领域的依靠和信任。人不可能是全能的，如果一切未知的领域都需要你自己来摸索，费时费力不说，风险还很大。</p><p>对于相似还是互补这个问题的解读，还可以反向进行。比如你们是能力经验上的相近，而在理念上互补，你可以想象一下是个什么局面，一定是你不会的他也不会，你觉得对的他觉得不对，那就真的很难合作下去了。</p><h2 id="如何判断双方是否志同道合？"><a href="#如何判断双方是否志同道合？" class="headerlink" title="如何判断双方是否志同道合？"></a>如何判断双方是否志同道合？</h2><p>对于这个问题，不同的人可能会给出非常不同的答案。雷军就曾说过，他找人有两个要素：“一要最专业，小米的合伙人都是各管一块，这样能保证整个决策非常快，把业务交给他，要能实打实做出成绩来；二要最合适，主要是指要有创业心态，对所做的事要极度喜欢，有共同的愿景，这样就会有很强的驱动力。”</p><p>雷军说，他在三个月的时间里见了超过100位做硬件的人选，终于找到了负责硬件的联合创始人周光平博士，两人第一次见面就谈了12个小时。</p><p>而周鸿祎表示，他会选择具备这四种素质的合伙人：首先应该有创业精神；其次要有很强的学习能力；第三，要有很好的开放合作心态；此外，还要能自我激励，自我驱动，同样一件事，用打工的心态和用创业的心态做，效果完全不一样。</p><p>虽然答案因人而异，但仍然可以总结出一些判断标准，以下几条可为你选择合伙人时提供参考。</p><h3 id="1、关系有一定的深度和广度，彼此信任"><a href="#1、关系有一定的深度和广度，彼此信任" class="headerlink" title="1、关系有一定的深度和广度，彼此信任"></a>1、关系有一定的深度和广度，彼此信任</h3><p>共事且维持朋友关系多年的创业团队关系更深，有可能经受住紧张和冲突的考验。合伙人未必需要成为最要好的朋友，但如果他们相互喜欢的话事情可能会更好办些。更重要的是，创始人之间应该尊重彼此以及他们给团队带来的不同能力。不信任合伙人的能力会导致手伸过头，还可能会导致控制权之争。在这种窝里斗的情况下大部分的合作关系都无法维系。</p><h3 id="2、了解彼此的优势和劣势，分工明确"><a href="#2、了解彼此的优势和劣势，分工明确" class="headerlink" title="2、了解彼此的优势和劣势，分工明确"></a>2、了解彼此的优势和劣势，分工明确</h3><p>尊重彼此的技能和优势并不意味着创始人就不需要审视合伙人的弱点了。友谊更久自然也会更了解某人的特长和技能。这些不同的技能有助于创始人团队自然地分清责任、角色，在某些情况下还可以分清头衔。根据每一位合伙人的技能明确划分职责，对创业的帮助很大。做事的时候每个人要有独立的角色，但同时永远要对其他合伙人的反馈持开放态度。</p><h3 id="3、确保所有合伙人对成功和失败的定义一致"><a href="#3、确保所有合伙人对成功和失败的定义一致" class="headerlink" title="3、确保所有合伙人对成功和失败的定义一致"></a>3、确保所有合伙人对成功和失败的定义一致</h3><p>韧性最强的创始人不会从财务的角度去衡量自己的初创企业是否成功，相反，他们会从使命的角度去衡量。他们的初创企业只是追求实现使命的手段。但是，并不是所有的创始人都这么看，甚至一开始关注使命的创始人有时候到后面也会转向考虑财务方面的事情。</p><p>有的创始人可能志存高远，为了尽快做大愿意烧很多钱，而有的人希望逐步打磨产品，限制人数规模和保留现金尺度。不仅对成功的认知会影响运营决策，对失败的认知同样会起作用。</p><p>在创业过程中，其中一位合伙人急着退出的故事屡见不鲜，因此这个教训值得一提再提。对于拥有成功企业的创始人来说，避免在这个问题上发生冲突的关键是定期讨论这件事。应该在公司早期就设定好目标，并且对这个话题进行定期复议。</p><h3 id="4、所有合伙人均应对股权分配满意"><a href="#4、所有合伙人均应对股权分配满意" class="headerlink" title="4、所有合伙人均应对股权分配满意"></a>4、所有合伙人均应对股权分配满意</h3><p>哈佛教授Wasserman发现，73%的联合创业团队一般在公司成立30天内就确定了如何进行股权分配。股权分配当然是任何共同创业的人都要首先考虑的事情之一，但事实上在那个时候，没人知道谁干活最卖力，谁对初创企业的贡献最有价值。过早确定股权分配会导致后面发生问题。如果可以的话，最好等到你有机会了解大家一起工作会是什么个情况后再正式分蛋糕。话虽如此，这件事情还是不要拖太久，围绕股权的分歧最好在公司早期就解决掉。</p><h3 id="5、永远要相互支持"><a href="#5、永远要相互支持" class="headerlink" title="5、永远要相互支持"></a>5、永远要相互支持</h3><p>这话听上去似乎太空泛，但是合伙人的关系也可能会反复无常，尤其是在受到不同观点、董事会成员等的影响下。合伙人之间的相互支持可带来信心，确保合伙人和员工都有共同的使命感。</p><p>团队应该早点理解一件事，任何情况下合伙人之间都应该背靠背相互支持，所以合伙人要尽量避免当着员工、董事会等人的面互相拆台，这样能够让公司其他人感觉到他们友情之牢固，让每一位合伙人都能保持镇定，因为他们知道对方一定会支持自己的。</p><h2 id="如何应对常见的分歧？"><a href="#如何应对常见的分歧？" class="headerlink" title="如何应对常见的分歧？"></a>如何应对常见的分歧？</h2><h3 id="1、公司走向的歧见"><a href="#1、公司走向的歧见" class="headerlink" title="1、公司走向的歧见"></a>1、公司走向的歧见</h3><p>在0到1的探索期，公司的走向往往是由合伙人一起决定的。但进入1到100的扩张期，一个年轻企业通常会开始有董事会以及重要的供应、通路伙伴。久而久之，合伙人对于公司未来走向的看法，常常会越来越变得分歧。</p><p>防范这个陷阱要从根源开始：每当CEO有了新的资讯、成长、学习、领悟，应该积极地与合伙人分享，协助他们获得与你类似的成长。同时，你应该把小范围的决策授权出去，让他们也能继续主导公司某一部分的走向。最后，你应该积极管理大家对决策的期望值，新创公司必须在“快”与“好”之间做出平衡，因此决策求的是多数对，而不是样样对。</p><h3 id="2、无法适应制度"><a href="#2、无法适应制度" class="headerlink" title="2、无法适应制度"></a>2、无法适应制度</h3><p>0到1的新创团队求快，因此不会有太多制度。进入1到100阶段，公司势必要开始建立一些管理系统，以在风险与发展中间取得平衡。</p><p>有些习惯了说干就干的合伙人，在此时会产生严重的不适应，时间一长甚至会觉得公司背离了创办的初衷。要解决这个问题，除了及早发现及早辅导外，请他们参与、主导制度的设计，也是协助合伙人适应新制度的方法。</p><h3 id="3、越权管理"><a href="#3、越权管理" class="headerlink" title="3、越权管理"></a>3、越权管理</h3><p>当公司开始有部门、部门主管，合伙人还是习惯看不顺眼就管，容易造成经理人的困扰。更有甚者，造成合伙人对经理人不信任，反而让经理人没有足够的时间、空间去适应、学习。这个问题通常是惯性使然，重点就是要打破它。所以，看到这样的行为要赶快提醒伙伴们注意。</p><h3 id="4、无法跟上公司成长的需要"><a href="#4、无法跟上公司成长的需要" class="headerlink" title="4、无法跟上公司成长的需要"></a>4、无法跟上公司成长的需要</h3><p>在公司快速扩张期，一个3人产品团队可能在一年内成长为30人，而两者之间管理上的不同，常常会让本来擅长技术、产品，但从来没有管理中大型团队经验的合伙人一时间跟不上公司发展的步伐。</p><p>回到扩张前，你应该早早找到好的CTO Mentor，在扩张中，经常鼓励他在管理知识与能力上精进。扩张后，如果他真的无法适应，也比较能够接受去寻找更有经验的CTO，而自己退居部门二把手、三把手。</p><h3 id="5、利益分配"><a href="#5、利益分配" class="headerlink" title="5、利益分配"></a>5、利益分配</h3><p>当公司越来越成功、越赚钱、离IPO越近，股权与利益的问题就会越容易产生。尤其当初的股权分配如果没有彰显每个合伙人的相对价值，那团队中可能酝酿出不良情绪。</p><p>比较好的方法当然是早期就把这个问题解决掉，因为到了后期，你的工具会越来越有限。但也不是没有机会修正，如果有合伙人离开，你可以收回他的股权来重新分配。如果有B、C、D轮增资，你可以跟投资人要求“期权池”(ESOP)，通过发放新的选择权来平衡。最后，如果真的过于集中，负责任的CEO，甚至会拿出自己的股权分配给伙伴们。</p><p>选择合伙人未必有一定之规，创业路上可能遇到的危机也远远不止上述这些，希望这篇文章能对你有所裨益，助你在创业路上少走弯路，也祝愿创业者们在2018年博得好彩头，大鹏一日同风起，扶摇直上九万里。</p><p>本文来源：<a href="http://www.sohu.com/a/225670991_100064845" target="_blank" rel="noopener">联想之星</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="life" scheme="https://im.policx.com/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>从零搭建博客 教程 Hexo GitHub</title>
    <link href="https://im.policx.com/2018/03/22/hexo-github/"/>
    <id>https://im.policx.com/2018/03/22/hexo-github/</id>
    <published>2018-03-22T11:33:10.000Z</published>
    <updated>2019-07-07T04:27:53.430Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>快速、简洁且高效的博客框架</p><a id="more"></a><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><ul><li>1.在GitHub创建个人仓库「名字必须是user.github.io」</li><li>2.本地安装Git（此处省略，文章底部有教程链接）</li><li>3.本地安装Node.js（此处省略，文章底部有教程链接）</li><li>4.本地安装Hexo</li><li>5.网站推送至github</li><li>6.github绑定域名</li><li>7.更换主题</li><li>8.Hexo高级个性化设置</li></ul><h1 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h1><ul><li>1.Hexo文章的开头</li><li>2.Hexo文章的内容</li><li>2.1MarkDown语法</li><li>2.2寻找图床</li></ul><h2 id="1-搭建博客"><a href="#1-搭建博客" class="headerlink" title="1.搭建博客"></a>1.搭建博客</h2><h3 id="1-1-本地安装Hexo"><a href="#1-1-本地安装Hexo" class="headerlink" title="1.1.本地安装Hexo"></a>1.1.本地安装Hexo</h3><p>下载安装Git与Node.js略过</p><h4 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1.安装hexo"></a>1.安装hexo</h4><p><code>npm install hexo -g #-g表示全局安装, npm默认为当前项目安装</code></p><h4 id="2-Hexo基本命令"><a href="#2-Hexo基本命令" class="headerlink" title="2.Hexo基本命令:"></a>2.Hexo基本命令:</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm update hexo -g  #升级 </span><br><span class="line">hexo init &lt;folder&gt;  #执行init命令初始化hexo到你指定的目录</span><br><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo generate       #自动根据当前目录下文件,生成静态网页 hexo g</span><br><span class="line">hexo server         #运行本地服务 hexo s</span><br><span class="line">hexo clean          #清理</span><br><span class="line">hexo deploy         #部署 hexo d</span><br><span class="line"></span><br><span class="line">hexo server         #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s      #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br></pre></td></tr></table></figure><p>最常用的是</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>这个时候hexo s之后就可以在浏览器<br><code>http://localhost:4000/</code><br>这里看到hexo博客的基本样子了</p><h3 id="1-2-将网站推送至github"><a href="#1-2-将网站推送至github" class="headerlink" title="1.2.将网站推送至github"></a>1.2.将网站推送至github</h3><h4 id="1-首先在本地告诉退给谁"><a href="#1-首先在本地告诉退给谁" class="headerlink" title="1.首先在本地告诉退给谁"></a>1.首先在本地告诉退给谁</h4><p>打开本地博客本目录下的配置文件_config.yml<br>修改最后一行的配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/dongshuyan/dongshuyan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="2-上传github"><a href="#2-上传github" class="headerlink" title="2.上传github"></a>2.上传github</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>若执行hexo g出错则执行<br><code>npm install hexo --save</code><br>若执行hexo d出错则执行<br><code>npm install hexo-deployer-git --save</code><br>错误修正后再次执行hexo g和hexo d上传到服务器。<br>若未关联GitHub，执行hexo d时会提示输入GitHub账号用户名和密码，即:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username for &apos;https://github.com&apos;:</span><br><span class="line">password for &apos;https://github.com&apos;:</span><br></pre></td></tr></table></figure><p>输入你的github账号密码即可。<br>hexo d执行成功后便可通过<a href="https://xxx.github.io访问博客，看到的内容和http://localhost:4000相同。" target="_blank" rel="noopener">https://xxx.github.io访问博客，看到的内容和http://localhost:4000相同。</a></p><h4 id="3-记住github密码"><a href="#3-记住github密码" class="headerlink" title="3.记住github密码"></a>3.记住github密码</h4><p>在github添加ssh key后不需要每次更新博客再输入用户名和密码。首先检查本地是否包含ssh keys。如果存在则直接将ssh key添加到GitHub之中，否则新生成ssh key。</p><p>执行下述命令生成新的ssh key</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@exampl&quot;</span><br></pre></td></tr></table></figure><p>这里需要将<br><code>your_email@example.com</code><br>改成自己注册的GitHub邮箱地址。默认会在~/.ssh/id_rsa.pub中生成id_rsa和id_rsa.pub文件。</p><p>Mac下利用open ~/.ssh打开文件夹，打开id_rsa.pub文件，里面的信息即为ssh key，将此信息复制到GitHub的Add ssh key路径GitHub-&gt;Setting-&gt;SSH keys-&gt;add SSH key中即可。Title里填写任意标题，将复制的内容粘贴到key中，点击Add key完成添加即可记住密码。</p><p>此时本地博客内容便已关联到GitHub之中，本地博客改变之后，通过hexo g和hexo d便可更新到GitHub之中。</p><h3 id="1-3-github绑定域名"><a href="#1-3-github绑定域名" class="headerlink" title="1.3.github绑定域名"></a>1.3.github绑定域名</h3><p>如果你有自己的域名了<br>那么可以把博客与域名关联起来<br>这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析：<br><img src="https://mubu.com/document_image/a949feea-b9d8-4b58-aa3e-b1bca87ebabc-3316715.jpg" alt><br>然后再你本地博客文件夹下的source文件夹里添加一个文件，文件名为”CNAME”，内容为你的域名。<br>例如：<br>baidu.com<br>这里要求一个字符不差。</p><h3 id="1-4-更改主题（以Yilia为例）"><a href="#1-4-更改主题（以Yilia为例）" class="headerlink" title="1.4.更改主题（以Yilia为例）"></a>1.4.更改主题（以Yilia为例）</h3><p>安装yilia<br><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code><br>配置<br>修改hexo根目录下的 _config.yml ： theme: yilia</p><p>更新</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/yilia</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="1-5-Hexo-高级配置"><a href="#1-5-Hexo-高级配置" class="headerlink" title="1.5.Hexo 高级配置"></a>1.5.Hexo 高级配置</h3><p>详见<br>Hexo Yilia 高级配置大全</p><h2 id="2-编写博客"><a href="#2-编写博客" class="headerlink" title="2.编写博客"></a>2.编写博客</h2><h3 id="2-1-Hexo文章的开头"><a href="#2-1-Hexo文章的开头" class="headerlink" title="2.1.Hexo文章的开头"></a>2.1.Hexo文章的开头</h3><p>举例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">title: 从零搭建博客 教程 Hexo GitHub    #文章标题</span><br><span class="line">subtitle:                            #子标题</span><br><span class="line">#categories: 文章                     #文章分類目錄 可以省略    </span><br><span class="line">toc: true                            #目录 需要安装插件或者主题自带</span><br><span class="line">reward: true                         #打赏 需要安装插件或者主题自带</span><br><span class="line">declare: true                        #版权 需要安装插件或者主题自带</span><br><span class="line">date:                                #文章日期 2019/7/1</span><br><span class="line">header-img:                          #顶部背景图片</span><br><span class="line">tags:                                #标签</span><br><span class="line">- 自学</span><br><span class="line">- Blog</span><br><span class="line">- Original</span><br></pre></td></tr></table></figure><h4 id="2-2-Hexo文章的内容"><a href="#2-2-Hexo文章的内容" class="headerlink" title="2.2.Hexo文章的内容"></a>2.2.Hexo文章的内容</h4><h5 id="2-2-1markdown常用语法"><a href="#2-2-1markdown常用语法" class="headerlink" title="2.2.1markdown常用语法"></a>2.2.1<a href="https://www.policx.com/post/markdown/" target="_blank" rel="noopener">markdown常用语法</a></h5><p><a href="http://dongshuyan.com/2016/04/07/%E6%80%8E%E4%B9%88%E5%86%99%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速、简洁且高效的博客框架&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://im.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 的设计哲学</title>
    <link href="https://im.policx.com/2018/03/22/markdown/"/>
    <id>https://im.policx.com/2018/03/22/markdown/</id>
    <published>2018-03-22T11:32:01.000Z</published>
    <updated>2019-07-07T04:34:16.836Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 </p><a id="more"></a><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote><h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown<em>是什么</em>？</h4><h4 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h4><h4 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h4><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><em>怎么</em>使用？</h4><h4 id="谁在用？"><a href="#谁在用？" class="headerlink" title="谁在用？"></a><em>谁</em>在用？</h4><h4 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h4></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p><h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/" target="_blank" rel="noopener"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p><p>他有着足以让你跪拜的人生经历：    </p><ul><li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li><li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li><li><strong>2005</strong>年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。   </li><li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li><li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li><li><strong>2013</strong>年1月自杀身亡。    </li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz"></p><p>天才都有早逝的归途。</p><h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h3><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p><p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\</code></strong>，<strong>符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p><p>代码区块：</p><pre><code>void main(){    printf(&quot;Hello, Markdown.&quot;);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格<em>或</em>制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code>    </p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul><li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错   </li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。    </li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><hr><p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><hr><p>以上基本是所有traditonal markdown的语法。</p><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><hr><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p><video src="http://structr.learn-anything.cn/video/道理/陈铭：像我这种老好人，根本没什么真朋友！不jue亲戚的人，根本没什么真亲戚！.mp4" width="320" height="180" controls="controls"></video> </p><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="https://im.policx.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>数据类型和变量</title>
    <link href="https://im.policx.com/2018/03/01/python-type/"/>
    <id>https://im.policx.com/2018/03/01/python-type/</id>
    <published>2018-02-28T20:28:19.000Z</published>
    <updated>2019-07-07T04:35:56.433Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python 数据类型和变量</p><a id="more"></a> <h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：</p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</p><p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。如果’本身也是一个字符，那就可以用””括起来，比如”I’m OK”包含的字符是I，’，m，空格，O，K这6个字符。</p><p>如果字符串内部既包含’又包含”怎么办？可以用转义字符\来标识，比如：</p><p><code>&#39;I\&#39;m \&quot;OK\&quot;!&#39;</code><br>表示的字符串内容是：</p><p><code>I&#39;m &quot;OK&quot;!</code><br>转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\表示的字符就是\，可以在Python的交互式命令行用print()打印字符串看看：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;I\&apos;m ok.&apos;)</span><br><span class="line">I&apos;m ok.</span><br><span class="line">&gt;&gt;&gt; print(&apos;I\&apos;m learning\nPython.&apos;)</span><br><span class="line">I&apos;m learning</span><br><span class="line">Python.</span><br><span class="line">&gt;&gt;&gt; print(&apos;\\\n\\&apos;)</span><br><span class="line"></span><br><span class="line">\</span><br><span class="line">\</span><br></pre></td></tr></table></figure><p>如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义，可以自己试试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&apos;\\\t\\&apos;)</span><br><span class="line">\       \</span><br><span class="line">&gt;&gt;&gt; print(r&apos;\\\t\\&apos;)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure><p>如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，可以自己试试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;&apos;&apos;line1</span><br><span class="line">... line2</span><br><span class="line">... line3&apos;&apos;&apos;)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure><p>上面是在交互式命令行内输入，注意在输入多行内容时，提示符由&gt;&gt;&gt;变为…，提示你可以接着上一行输入，注意…是提示符，不是代码的一部分：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt - python                           _ □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│&gt;&gt;&gt; print(&apos;&apos;&apos;line1                                      │</span><br><span class="line">│... line2                                               │</span><br><span class="line">│... line3&apos;&apos;&apos;)                                           │</span><br><span class="line">│line1                                                   │</span><br><span class="line">│line2                                                   │</span><br><span class="line">│line3                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│&gt;&gt;&gt; _                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>当输入完结束符<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果写成程序并存为.py文件，就是：</span><br></pre></td></tr></table></figure></p><p>print(‘’’line1<br>line2<br>line3’’’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多行字符串&apos;&apos;&apos;...&apos;&apos;&apos;还可以在前面加上r使用，请自行测试：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>print(r’’’hello,\n<br>world’’’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">### 布尔值</span><br><span class="line">布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True<br>True<br>False<br>False<br>3 &gt; 2<br>True<br>3 &gt; 5<br>False</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">布尔值可以用and、or和not运算。</span><br><span class="line"></span><br><span class="line">#### and运算是与运算，只有所有都为True，and运算结果才是True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True and True<br>True<br>True and False<br>False<br>False and False<br>False<br>5 &gt; 3 and 3 &gt; 1<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### or运算是或运算，只要其中有一个为True，or运算结果就是True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True or True<br>True<br>True or False<br>True<br>False or False<br>False<br>5 &gt; 3 or 1 &gt; 3<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### not运算是非运算，它是一个单目运算符，把True变成False，False变成True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>not True<br>False<br>not False<br>True<br>not 1 &gt; 2<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">布尔值经常用在条件判断中，比如：</span><br></pre></td></tr></table></figure><p>if age &gt;= 18:<br>    print(‘adult’)<br>else:<br>    print(‘teenager’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">### 空值</span><br><span class="line">空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</span><br><span class="line"></span><br><span class="line">此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。</span><br><span class="line"></span><br><span class="line">### 变量</span><br><span class="line">变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</span><br><span class="line"></span><br><span class="line">变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头，比如：</span><br><span class="line"></span><br><span class="line">`a = 1`</span><br><span class="line">变量a是一个整数。</span><br><span class="line"></span><br><span class="line">`t_007 = &apos;T007&apos;`</span><br><span class="line">变量t_007是一个字符串。</span><br><span class="line"></span><br><span class="line">`Answer = True`</span><br><span class="line">变量Answer是一个布尔值True。</span><br><span class="line"></span><br><span class="line">在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>a = 123 # a是整数<br>print(a)<br>a = ‘ABC’ # a变为字符串<br>print(a)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</span><br></pre></td></tr></table></figure><p>int a = 123; // a是整数类型变量<br>a = “ABC”; // 错误：不能把字符串赋给整型变量</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">和静态语言相比，动态语言更灵活，就是这个原因。</span><br><span class="line"></span><br><span class="line">请不要把赋值语句的等号等同于数学的等号。比如下面的代码：</span><br></pre></td></tr></table></figure><p>x = 10<br>x = x + 2</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果从数学上理解x = x + 2那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。</span><br><span class="line"></span><br><span class="line">最后，理解变量在计算机内存中的表示也非常重要。当我们写：</span><br><span class="line"></span><br><span class="line">`a = &apos;ABC&apos;`</span><br><span class="line">时，Python解释器干了两件事情：</span><br><span class="line"></span><br><span class="line">在内存中创建了一个&apos;ABC&apos;的字符串；</span><br><span class="line"></span><br><span class="line">在内存中创建了一个名为a的变量，并把它指向&apos;ABC&apos;。</span><br><span class="line"></span><br><span class="line">也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据，例如下面的代码：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>a = ‘ABC’<br>b = a<br>a = ‘XYZ’<br>print(b)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">最后一行打印出变量b的内容到底是&apos;ABC&apos;呢还是&apos;XYZ&apos;？如果从数学意义上理解，就会错误地得出b和a相同，也应该是&apos;XYZ&apos;，但实际上b的值是&apos;ABC&apos;，让我们一行一行地执行代码，就可以看到到底发生了什么事：</span><br><span class="line"></span><br><span class="line">执行a = &apos;ABC&apos;，解释器创建了字符串&apos;ABC&apos;和变量a，并把a指向&apos;ABC&apos;：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923791878255456/0)</span><br><span class="line"></span><br><span class="line">执行b = a，解释器创建了变量b，并把b指向a指向的字符串&apos;ABC&apos;：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923792058613440/0)</span><br><span class="line"></span><br><span class="line">执行a = &apos;XYZ&apos;，解释器创建了字符串&apos;XYZ&apos;，并把a的指向改为&apos;XYZ&apos;，但b并没有更改：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923792191637760/0)</span><br><span class="line"></span><br><span class="line">所以，最后打印变量b的结果自然是&apos;ABC&apos;了。</span><br><span class="line"></span><br><span class="line">### 常量</span><br><span class="line">所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：</span><br><span class="line"></span><br><span class="line">`PI = 3.14159265359`</span><br><span class="line">但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。</span><br><span class="line"></span><br><span class="line">最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是/：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 / 3<br>3.3333333333333335</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>9 / 3<br>3.0</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还有一种除法是//，称为地板除，两个整数的除法仍然是整数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 // 3<br>3</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你没有看错，整数的地板除//永远是整数，即使除不尽。要做精确的除法，使用/就可以。</span><br><span class="line"></span><br><span class="line">因为//除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 % 3<br>1</p><pre><code>无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</code></pre></blockquote></blockquote></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。</p><p>对变量赋值x = y是把变量x指向真正的对象，该对象是变量y所指向的。随后对变量y的赋值不影响变量x的指向。</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在-2147483648-2147483647。<br>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 数据类型和变量&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://im.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>字典、列表、数组和字符串</title>
    <link href="https://im.policx.com/2018/02/16/python/"/>
    <id>https://im.policx.com/2018/02/16/python/</id>
    <published>2018-02-16T04:28:24.000Z</published>
    <updated>2019-07-07T04:36:14.193Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python 字典、列表、数组和字符串</p><a id="more"></a><p>字典</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">dict_1 = &#123;<span class="hljs-string">'1'</span>: <span class="hljs-string">'a'</span>, <span class="hljs-string">'2'</span>: <span class="hljs-string">'b'</span>, <span class="hljs-string">'3'</span>: <span class="hljs-string">'c'</span>&#125;</span><br><span class="line">print(dict_1)  <span class="hljs-comment"># 打印字典</span></span><br><span class="line">print(type(dict_1))  <span class="hljs-comment"># 打印新赋值的字典的类型</span></span><br><span class="line">print(str(dict_1), end=<span class="hljs-string">'字符串\n'</span>)  <span class="hljs-comment"># 把字典转化成字符串后打印</span></span><br><span class="line">print(tuple(dict_1), end=<span class="hljs-string">'元组\n'</span>)  <span class="hljs-comment"># 把字典转化为元组后打印</span></span><br><span class="line">print(list(dict_1), end=<span class="hljs-string">'列表\n'</span>)  <span class="hljs-comment"># 把字典转化为列表后打印</span></span><br></pre></td></tr></table></figure><p>元组</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">tuple_1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)</span><br><span class="line">print(tuple_1)  <span class="hljs-comment"># 打印元组</span></span><br><span class="line">print(type(tuple_1))  <span class="hljs-comment"># 打印新赋值的元祖的类型</span></span><br><span class="line">print(str(tuple_1), end=<span class="hljs-string">'字符串\n'</span>)  <span class="hljs-comment"># 把元组转化成字符串后打印</span></span><br><span class="line">print(list(tuple_1), end=<span class="hljs-string">'列表\n'</span>)  <span class="hljs-comment"># 把元组转化为列表后打印</span></span><br></pre></td></tr></table></figure><h3 id="元组不可转化为字典"><a href="#元组不可转化为字典" class="headerlink" title="元组不可转化为字典"></a>元组不可转化为字典</h3><p>列表</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">list_1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(list_1)  <span class="hljs-comment"># 打印列表</span></span><br><span class="line">print(type(list_1))  <span class="hljs-comment"># 打印新赋值的列表的类型</span></span><br><span class="line">print(str(list_1), end=<span class="hljs-string">'字符串\n'</span>)  <span class="hljs-comment"># 把列表转化成字符串后打印</span></span><br><span class="line">print(tuple(list_1), end=<span class="hljs-string">'元组\n'</span>)  <span class="hljs-comment"># 把列表转化为元组后打印</span></span><br></pre></td></tr></table></figure><h3 id="元组不可转化为字典-1"><a href="#元组不可转化为字典-1" class="headerlink" title="元组不可转化为字典"></a>元组不可转化为字典</h3><p>字符串</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">string_1 = <span class="hljs-string">'(1, 2, 3, 4, 5)'</span></span><br><span class="line">print(string_1)  <span class="hljs-comment"># 打印字符串</span></span><br><span class="line">print(type(string_1))  <span class="hljs-comment"># 打印新赋值的字符串</span></span><br><span class="line">print(tuple(eval(string_1)), end=<span class="hljs-string">'元组\n'</span>)  <span class="hljs-comment"># 把字符串转化成元组后输出</span></span><br><span class="line">print(list(eval(string_1)), end=<span class="hljs-string">'列表\n'</span>)  <span class="hljs-comment"># 把字符串转化成列表后输出</span></span><br></pre></td></tr></table></figure><h3 id="只有特殊字符串才能转化为字典"><a href="#只有特殊字符串才能转化为字典" class="headerlink" title="只有特殊字符串才能转化为字典"></a>只有特殊字符串才能转化为字典</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string_2 = <span class="hljs-string">'&#123;"name":"tom","age":6&#125;'</span></span><br><span class="line">print(string_2)  <span class="hljs-comment"># 打印新赋值的字符串</span></span><br><span class="line">print(type(string_2))  <span class="hljs-comment"># 打印新赋值的字符串的类型</span></span><br><span class="line">print(dict(eval(string_2)), end=<span class="hljs-string">'字典\n'</span>)  <span class="hljs-comment"># 把字符串转化为字典后打印</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 字典、列表、数组和字符串&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://im.policx.com/tags/Python/"/>
    
  </entry>
  
</feed>
