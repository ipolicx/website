<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>庙堂高-江湖远</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-07-18T06:24:43.588Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>超时空从犯</title>
    <link href="https://www.policx.com/Accomplice/"/>
    <id>https://www.policx.com/Accomplice/</id>
    <published>2019-07-18T02:18:06.000Z</published>
    <updated>2019-07-18T06:24:43.588Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><input checked disabled type="checkbox"> 你回头看了我一眼</li></ul><a id="more"></a><ul><li><input disabled type="checkbox"> 我觉得那很久很久</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;input checked disabled type=&quot;checkbox&quot;&gt; 你回头看了我一眼&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="label" scheme="https://www.policx.com/categories/label/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter的环境配置 for Mac</title>
    <link href="https://www.policx.com/flutter/"/>
    <id>https://www.policx.com/flutter/</id>
    <published>2019-07-16T10:14:18.000Z</published>
    <updated>2019-07-18T06:22:40.943Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 </p><a id="more"></a><h2 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装Flutter</h2><p>首先我们可以在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fdocs%2Fget-started%2Finstall" target="_blank" rel="noopener">Flutter官网</a>上面看到一些配置环境的步骤。这里就直接开干了，走起。 </p><h3 id="1、配置HomeBrew"><a href="#1、配置HomeBrew" class="headerlink" title="1、配置HomeBrew"></a>1、配置HomeBrew</h3><p>我们在去配置Flutter的环境之前，需要先检查一下HomeBrew是不是最新的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br></pre></td></tr></table></figure><p>如果没有brew的话，可以去<a href="https://link.juejin.im?target=https%3A%2F%2Fbrew.sh%2F" target="_blank" rel="noopener">HomeBrew官网</a>自行下载。这里就不赘述了，这里如果重新下载的话，看到下面的打印信息就说明下载完毕了。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3aad595f24923.jpg" alt></p><h3 id="2、下载SDK"><a href="#2、下载SDK" class="headerlink" title="2、下载SDK"></a>2、下载SDK</h3><p>接下来就是去官网下载SDK了。注意，这里下载SDK有两种方法：</p><ul><li>一是直接<code>git clone -b beta https://github.com/flutter/flutter.git</code>下载</li><li>二是自己在官网下载下来，如下图<br><img src="https://i.loli.net/2019/07/16/5d2db40e0aecc50465.jpg" alt></li></ul><p>这里我两种方法都试过了一遍，第一种方法实在是太慢了，在经历了耗费一个半小时下载到94%，最后提示失败了的过程之后，我决定还是用第二种方法，整个过程只用了3分钟的样子，相当满意。下载完之后，是一个名字叫<code>flutter_macos_v1.5.4-hotfix.2-stable.zip</code>的压缩包。 然后我们解压这个zip包，把解压出来的<strong>flutter</strong>文件放到根目录下即可。 </p><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p>因为Flutter的SDK中包含了很多的命令行工具。我们就需要配置环境变量，所以我直接就安装到了根目录下了。</p><p><strong>配置镜像</strong></p><p>因为Flutter在运行的时候，就需要去官网下载一些需要的资源，但是因为天国特色的wall的原因，我们就需要镜像服务器，这个在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fcommunity%2Fchina" target="_blank" rel="noopener">官网</a>上面有写的很明白，而且这是一个临时的镜像，后面还要以官网的镜像地址为准。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3f2c1f4f64480.jpg" alt></p><p>我们跳转到根目录 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>就能找到这个<code>.bash_profile</code>隐藏文件，我们用vim打开这个文件 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后需要输入就把A键按一下进入编辑模式，把下面三个环境变量配置进去 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line">export PATH=/Users/xueliheng/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>注意下，第三个环境变量这里<code>/Users/xueliheng/</code>是我的根目录，然后<code>/flutter/</code>是我们刚刚解压的的zip包里面的<code>flutter</code>文件夹。上面两个环境变量是两个镜像地址，上文中也有说过。 接着<code>shift+：</code>然后输入<code>wq</code>保存并退出vim。输入如下命令： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>最后我们就可以验证一下flutter环境有没有配置成功了。输入： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure><p>看到如下如的打印信息就是配置成功了<br><img src="https://i.loli.net/2019/07/16/5d2db44407fa682753.jpg" alt></p><h3 id="4、配置Android-Studio"><a href="#4、配置Android-Studio" class="headerlink" title="4、配置Android Studio"></a>4、配置Android Studio</h3><p>如果没有下载<strong>Android Studio</strong>的话，就去<a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.android.google.cn%2Fstudio" target="_blank" rel="noopener">官网</a>去下载一下。 我们用<code>flutter doctor</code>命令去检查一下flutter的环境配置，我们可以看到如下打印 </p><p><img src="https://i.loli.net/2019/07/16/5d2db4676ec3a36838.jpg" alt></p><p>这里的每个<code>✗</code>都是我们要去解决的问题。不过他有告诉你应该怎么做。比如第一个提示： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices</span><br><span class="line">    ✗ Unable to locate Android SDK.</span><br></pre></td></tr></table></figure><p>这就是让你去下载Android Studio。我们在下载完成之后，打开AS让他去下载一些应该下载的东西。 如果这里有提示你 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices (Android SDK version 24.0.2)</span><br><span class="line">    ✗ Flutter requires Android SDK 28 and the Android BuildTools 28.0.3</span><br></pre></td></tr></table></figure><p>这就是在提示让你去升级一下SDK，然后命令如下 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;/Users/xueliheng/Library/Android/sdk/tools/bin/sdkmanager&quot; &quot;platforms;android-28&quot; &quot;build-tools;28.0.3&quot;</span><br></pre></td></tr></table></figure><p>注意一下，这个地方的升级是需要”科学上网“的，如果有的小伙伴没有这个条件的话，我这边百度云上面给大家准备了一个<a href="https://link.juejin.im?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F10yp8PuRXxk7YvcNR_dTy8Q" target="_blank" rel="noopener">链接</a>，提取码: e48c，大家可以下载下来。下载下来之后解压到<code>/Users/Library/Android/</code>这个文件夹。把原先的SDK直接覆盖就行了，就已经是最新的SDK了。 </p><p>接下来我们配置一下安卓的环境变量，还是在根目录下找到<code>.bash_profile</code>文件，并在其中添加四个环境变量 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=~/Library/Android/sdk</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/emulator</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br></pre></td></tr></table></figure><p>分别是： </p><ul><li>安卓sdk的路径</li><li>安卓的模拟器路径</li><li>安卓tools路径</li><li>安卓平台工具</li></ul><p>接下来我们再用<code>flutter doctor</code>检查的时候，显示的信息如下图<br><img src="https://i.loli.net/2019/07/16/5d2db4964a70b73490.jpg" alt></p><p>意思就是让我们去下载iOS的相关环境，我们先暂时放放，下面还有一个关于<strong>Android Studio</strong>的没有解决完</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">✗ Dart plugin not installed; this adds Dart specific functionality.</span><br></pre></td></tr></table></figure><p>这个就是缺少Flutter插件的意思，那么我们就去AS里面去配置一下好了。打开AS的<code>Preferences</code>，点击<code>Plugins</code>，在搜索栏中输入<code>flutter</code>，找到相应的插件，然后<code>Install</code>。当跳出安装Dart插件的提示界面时，记得点击Yes进行安装。安装完毕之后<code>restart IDE</code>重启AS。 重启之后就能看到多了一个这个东西<br><img src="https://i.loli.net/2019/07/16/5d2db4b731cbd14001.jpg" alt></p><p>我们再用<code>flutter doctor</code>检测一下<br><img src="https://i.loli.net/2019/07/16/5d2db4cdc6dd137908.jpg" alt></p><p>现在终于ok了。我们看到<code>[✓]Android Studio</code>说明，安卓的环境基本上配置成功，接下来我们就配置一下安卓的模拟器就好了。 </p><h3 id="5、安卓模拟器配置"><a href="#5、安卓模拟器配置" class="headerlink" title="5、安卓模拟器配置"></a>5、安卓模拟器配置</h3><p>在AS中找到模拟器配置如下图并选择<br><img src="https://i.loli.net/2019/07/16/5d2db4dacfde455330.jpg" alt></p><p>接着就创建设备，选择设备<br><img src="https://i.loli.net/2019/07/16/5d2db4e68a2ed68879.jpg" alt></p><p>选择系统<br><img src="https://i.loli.net/2019/07/16/5d2db4f6cdc5889902.jpg" alt></p><p>最后点击下载就完成了。 </p><h3 id="6、配置iOS环境"><a href="#6、配置iOS环境" class="headerlink" title="6、配置iOS环境"></a>6、配置iOS环境</h3><p>我们配置完了安卓的环境，再来<code>flutter doctor</code>检测一下。<br><img src="https://i.loli.net/2019/07/16/5d2db50ad75eb82331.jpg" alt></p><p>情况是这样的。目前1.5.4版本的Flutter需要匹配新版本的Xcode10.2.1。按照他提示的来试试，提示我Xcode版本太低了，需要升级Xcode<br><img src="https://i.loli.net/2019/07/16/5d2db5275c8f825074.jpg" alt></p><p>更新到最新的之后，继续走下面的步骤依旧会报错。那么我们可以试试下面的这个办法： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew link pkg-config</span><br><span class="line">$ brew install --HEAD usbmuxd</span><br><span class="line">$ brew unlink usbmuxd</span><br><span class="line">$ brew link usbmuxd</span><br><span class="line">$ brew install --HEAD libimobiledevice</span><br><span class="line">$ brew install ideviceinstaller</span><br></pre></td></tr></table></figure><p>这些执行完之后执行一下<code>flutter doctor</code><br><img src="https://i.loli.net/2019/07/16/5d2db5515858b19228.jpg" alt></p><p>最后还真是没错，全部配置完成了！那么我们就把iOS的也配置完毕了。</p><h3 id="7、VSCode的使用"><a href="#7、VSCode的使用" class="headerlink" title="7、VSCode的使用"></a>7、VSCode的使用</h3><p>VSCode上面使用的话，就简单多了，这里我就简答的赘述一下。 只需要将<code>Dart</code>和<code>Flutter</code>插件都下载下来<br><img src="https://i.loli.net/2019/07/16/5d2db5643b08597602.jpg" alt></p><p>然后<code>command+shift+p</code>输入<code>flutter</code>，选择<code>Flutter：New Project</code><br><img src="https://i.loli.net/2019/07/16/5d2db576e145096766.jpg" alt></p><p>输入要创建的项目的名称和存放项目的地址。如果提示需要指明flutter的SDK的路径，那就选择根目录那个经过解压得来的flutter的文件夹就好了。 接下来是这样一个界面<br><img src="https://i.loli.net/2019/07/16/5d2db588f1b5152482.jpg" alt></p><p>接下来我们选择<code>View-&gt;Start Debugging</code>来运行项目。<br><img src="https://i.loli.net/2019/07/16/5d2db59bb3b3338193.jpg" alt></p><p>当然这个过程需要你把Xcode的模拟器打开。运行完之后就能看到这个界面，也就是你的第一个Flutter工程啦！<br><img src="https://i.loli.net/2019/07/16/5d2db5ad5eaf434960.jpg" alt></p><h3 id="8、Hot-reload的使用"><a href="#8、Hot-reload的使用" class="headerlink" title="8、Hot reload的使用"></a>8、Hot reload的使用</h3><p>我们打开<code>lib/main.dart</code>文件，然后在其中找到 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have pushed the button this many times:</span><br></pre></td></tr></table></figure><p>并把这个改为 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have clicked the button this many times:</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2db5cc5b4f279074.jpg" alt><br>那么我们就能看到界面上多了一个小闪电<br><img src="https://i.loli.net/2019/07/16/5d2db5f044c0553935.jpg" alt></p><p>我们现在如果<code>command+s</code>保存一下更改的话，就能很快的在模拟器上面看到相应的更改，不需要再重新去编译一边。这一点简直是太棒了！解决了iOS开发者一个大痛点啊！！！ </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，flutter的环境搭建工作基本上就进行完毕了，整个过程大概耗时接近2个小时，这期间包括采坑、查资料、下载、科学上网…等等很蛋疼的事情。当然网速基本上是最大的障碍，浪费了很多的时间。所以也是需要一定的耐心来完成的。 后面的文章也会持续的更新，最近有点懈怠，OpenGL系列的文章有点拖更的节奏，这个后面会补起来。Flutter我也才刚刚接手，也是慢慢的来采坑，也会以此来记录自己的学习经历，也希望能多多跟大家交流。 再次我附上自己的邮箱<code>coderspr1nghall@gmail.com</code>欢迎讨论交流。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://juejin.im/post/5d0508d56fb9a07ec373eb9e" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2dbb03b8ef977558.jpg" alt></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 &lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://www.policx.com/spider/"/>
    <id>https://www.policx.com/spider/</id>
    <published>2019-07-15T02:06:04.000Z</published>
    <updated>2019-07-18T06:22:40.946Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。</p><a id="more"></a><p>其实爬虫这个概念很简单，基本可以分成以下几个步骤：</p><ul><li><p>发起网络请求</p></li><li><p>获取网页</p></li><li><p>解析网页获取数据</p></li></ul><p>发起网络请求这个步骤常用的类库有标准库urllib以及Python上常用的requests库。解析网页常用的类库有的BeautifulSoup。另外requests的作者还开发了另一个很好用的库requests-html，提供了发起请求和解析网页的二合一功能，开发小型爬虫非常方便。另外还有一些专业的爬虫类库，其中比较出名的就是scrapy。本文将会简单介绍一下这些类库，之后还会专门写一篇文章介绍scrapy的用法。</p><h2 id="标准库urllib"><a href="#标准库urllib" class="headerlink" title="标准库urllib"></a><strong>标准库urllib</strong></h2><p>首先先来看标准库urllib。标准库的优点是Python自带的，不需要安装任何第三方库，缺点就是urllib属于偏底层的库，使用起来比较麻烦。下面是urllib发起请求的一个简单例子，大家看看就好。可以看到为了发起一个简单的请求，我们需要创建opener、request、ProxyHandler等好几个对象，比较麻烦。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> urllib.request <span class="hljs-keyword">as</span> request</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="hljs-string">'https'</span>: <span class="hljs-string">'https://127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="hljs-string">'http'</span>: <span class="hljs-string">'http://127.0.0.1:1080'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'--------------使用urllib--------------'</span>)</span><br><span class="line">url = <span class="hljs-string">'http://www.google.com'</span></span><br><span class="line">opener = request.build_opener(request.ProxyHandler(proxies))</span><br><span class="line">request.install_opener(opener)</span><br><span class="line">req = request.Request(url, headers=headers)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a><strong>requests</strong></h2><p>requests是Kenneth Reitz大神的著名作品之一，优点就是极度简单和好用。首先来安装requests。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>下面是一个简单的例子，和上面urllib示例代码实现的功能相同，但是代码量少多了，也更易读。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="hljs-string">'--------------使用requests--------------'</span>)</span><br><span class="line">response = requests.get(<span class="hljs-string">'https://www.google.com'</span>, headers=headers, proxies=proxies)</span><br><span class="line">response.encoding = <span class="hljs-string">'utf8'</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>requests还可以方便的发送表单数据，模拟用户登录。返回的Response对象还包含了状态码、header、raw、cookies等很多有用的信息。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="hljs-string">'name'</span>: <span class="hljs-string">'yitian'</span>,</span><br><span class="line">    <span class="hljs-string">'age'</span>: <span class="hljs-number">22</span>,</span><br><span class="line">    <span class="hljs-string">'friends'</span>: [<span class="hljs-string">'zhang3'</span>, <span class="hljs-string">'li4'</span>]</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="hljs-string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">pprint(response.__dict__)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>关于requests我就不多做介绍了，因为它有中文文档，虽然比官方落后几个小版本号，不过无伤大雅，大家可以放心参阅。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://cn.python-requests.org/zh_CN/latest/</span><br></pre></td></tr></table></figure><h2 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a><strong>beautifulsoup</strong></h2><p>利用前面介绍的requests类库，我们可以轻易地获取HTML代码，但是为了从HTML中找到所需的数据，我们还需要HTML/XML解析库，BeautifulSoup就是这么一个常用的库。首先先来安装它：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>这次就用我简书主页作为例子，爬取一下我简书的文章列表。首先先用requests获取到网页内容。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"><span class="hljs-keyword">import</span> bs4</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><p>然后就是BeautifulSoup的代码了。在使用BeautifulSoup的时候首先需要创建一个HTML树，然后从树中查找节点。BeautifulSoup主要有两种查找节点的办法，第一种是使用find和find_all方法，第二种方法是使用select方法用css选择器。拿到节点之后，用contents去获取它的子节点，如果子节点是文本，就会拿到文本值，注意这个属性返回的是列表，所以要加[0]。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html = bs4.BeautifulSoup(response.text, features=<span class="hljs-string">'lxml'</span>)</span><br><span class="line">note_list = html.find_all(<span class="hljs-string">'ul'</span>, class_=<span class="hljs-string">'note-list'</span>, limit=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.select(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.contents[<span class="hljs-number">0</span>]</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>BeautifulSoup也有中文文档，同样也是稍微落后两个小版本，影响不大。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</span><br></pre></td></tr></table></figure><h2 id="requests-html"><a href="#requests-html" class="headerlink" title="requests-html"></a><strong>requests-html</strong></h2><p>这个类库是requests的兄弟，同样也是Kenneth Reitz大神的作品。它将请求网页和解析网页结合到了一起。本来如果你用requests的话只能请求网页，为了解析网页还得使用BeautifulSoup这样的解析库。现在只需要requests-html一个库就可以办到。<br>首先先来安装。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests-html</span><br></pre></td></tr></table></figure><p>然后我们来看看用requests-html如何重写上面这个例子。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line">note_list = r.html.find(<span class="hljs-string">'ul.note-list'</span>, first=<span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.find(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html除了可以使用css选择器来搜索以外，还可以使用xpath来查找。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html还有一个很有用的特性就是浏览器渲染。有些网页是异步加载的，直接用爬虫去爬只能得到一个空页面，因为数据是靠浏览器运行JS脚本异步加载的，这时候就需要浏览器渲染了。而浏览器渲染用requests-html做非常简单，只要多调用一个render函数即可。render函数有两个参数，分别指定页面下滑次数和暂停时间。render函数第一次运行的时候，requests-html会下载一个chromium浏览器，然后用它渲染页面。<br>简书的个人文章页面也是一个异步加载的例子，默认只会显示最近几篇文章，通过浏览器渲染模拟页面下滑，我们可以得到所有文章列表。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line"><span class="hljs-comment"># render函数指示requests-html用chromium浏览器渲染页面</span></span><br><span class="line">r.html.render(scrolldown=<span class="hljs-number">50</span>, sleep=<span class="hljs-number">0.2</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>类似的，今日头条的个人页面也是异步加载的，所以也得调用render函数。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">        <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(<span class="hljs-string">'https://www.toutiao.com/c/user/6662330738/#mid=1620400303194116'</span>, headers=headers)</span><br><span class="line">r.html.render()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r.html.find(<span class="hljs-string">'div.rbox-inner a'</span>):</span><br><span class="line">    title = i.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.toutiao.com<span class="hljs-subst">&#123;i.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》 <span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>最后是requests-html的官网地址以及中文文档。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://html.python-requests.org/</span><br><span class="line">https://cncert.github.io/requests-html-doc-cn/</span><br></pre></td></tr></table></figure><h2 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a><strong>scrapy</strong></h2><p>以上介绍的几个框架都是各自有各自的作用，把它们结合起来可以达到编写爬虫的目的，但是要说专业的爬虫框架，还是得谈谈scrapy。作为一个著名的爬虫框架，scrapy将爬虫模型框架化和模块化，利用scrapy，我们可以迅速生成功能强大的爬虫。<br>不过scrapy概念众多，要仔细说还得专门开篇文章，这里就只简单演示一下。首先安装scrapy，如果是Windows系统，还需要安装pypiwin32。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy  </span><br><span class="line">pip install pypiwin32</span><br></pre></td></tr></table></figure><p>然后创建scrapy项目并添加一个新爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject myproject</span><br><span class="line">cd myproject</span><br><span class="line">scrapy genspider my jianshu.com</span><br></pre></td></tr></table></figure><p>打开配置文件settings.py，设置用户代理，否则会遇到403错误。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br></pre></td></tr></table></figure><p>然后修改一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JianshuSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="hljs-string">'jianshu'</span></span><br><span class="line">    allowed_domains = [<span class="hljs-string">'jianshu.com'</span>]</span><br><span class="line">    start_urls = [<span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">'div.content'</span>):</span><br><span class="line">            <span class="hljs-keyword">yield</span> &#123;</span><br><span class="line">                <span class="hljs-string">'title'</span>: article.css(<span class="hljs-string">'a.title::text'</span>).get(),</span><br><span class="line">                <span class="hljs-string">'link'</span>: <span class="hljs-string">'https://www.jianshu.com'</span> + article.xpath(<span class="hljs-string">'a[@class="title"]/@href'</span>).get()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>最后运行一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl my</span><br></pre></td></tr></table></figure><br><table><thead><tr><th>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1563247765&ver=1731&signature=gm2iTUKE3itOZzvlz9SUtKCYNv*PqEYt2C7ReV7kd47e2ZAWPvG5GRXZUJsiRIde34Uh5FznBslw4hHhXmHQXyV3yz0tTdgds1RMCdai6Oyy98w2-iTBRWeJlpm3cWa8&new=1" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2d4c5ba835e96705.jpg" alt="Python"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>DDoS（分布式拒绝服务）攻击是无解的吗？</title>
    <link href="https://www.policx.com/ddos/"/>
    <id>https://www.policx.com/ddos/</id>
    <published>2019-07-14T07:26:43.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>“</strong></p><p>DDOS？ </p><p>一言难尽啊！ </p><p>”</p><a id="more"></a><p>先说结论，DDoS是近年来网络攻击中的一棵“常青树”，的确很难缠，但说它是无解的，那也有点太看得起它了。虽然DDoS在对很多大平台的攻击中出尽了风头，但在现在互联网的解决方案中，并不缺乏应对DDoS的解决方案。 </p><p>说起DDoS攻击，我脑海里能够想到的全都是中国民间俗语，什么“双拳难敌四手，好汉架不住人多”，什么“千斤拨四两”，什么“乱拳打死老师傅”等等等等。 </p><p>之前有朋友跑来问我DDoS是个什么东西，为什么这么多互联网巨头都被搞得没有脾气，我记得我当时我是这么举的例子： </p><p>我们这一代人小的时候，自助餐开始在中国内地风行，那会儿这个行业里为了打击竞争对手，对手最惯常使用的阴招是雇佣很多五大三粗的人，给他们钱去对方的店里一通猛吃，杯盘狼藉之下，用不了几天这家自助餐就能给吃黄了。 </p><p>而DDoS攻击比这种还阴损，如果你开了一家餐馆，你的对手如果想搞你，最好的办法就是找一堆地痞流氓到你的店里坐的满满一屋子，你如果上前问，他们就一直跟你扯淡找麻烦，导致真正想吃饭的顾客一看这个情形，掉头就走了。 </p><p>用不了多久，你的餐馆就会开不下去，而你的竞争对手就会趁机蚕食掉你的市场份额，而放在网络语境里，这就是DDoS攻击的最基本原理。 </p><p>而这件事之所以难缠在于，一两个无赖根本成不了气候，想要耍流氓必须要有很多个无赖集结在一起。<strong>所以和现实世界中的无赖一样，DDoS真正的杀手锏在于利用能够发动的汹涌的流量，可以瞬间冲垮被攻击网站的服务器。</strong></p><p>如果我们回溯一下历史的话，会发现黑客组织之所以会有组织有预谋的发起DDoS攻击，基本上都是基于以下几个原因： </p><ul><li><p>有些行业如果网站被恶意攻击，会造成很难估量的损失，这个时候黑客发动DDoS攻击的初衷一般是出于敲诈勒索，为了保证企业的正常运转，他们通常愿意向黑客付高额的赎金； </p></li><li><p>行业内血海一片，DDoS是恶意竞争的屠刀。这个现象从逻辑上，其实雇佣无赖去占领对手餐馆的原理是一毛一样的，而且DDOS攻击早已产业化，现在中国的DDOS黑市，出钱请黑客打1G的流量到一个网吧或网站，市场价只要不到50块钱，但对于一个创业公司或者干脆就是一个小网吧来说，这已经算是可以灭顶的无妄之灾了。 </p></li><li><p>DDoS攻击往往成为掩盖真实网络攻击的烟雾弹，在遭受DDoS攻击的企业中，部分企业还伴随数据丢失的现象，黑客利用DDoS攻击掩盖其窃取用户隐私的真实目的，这种攻击行为在社交网站、金融领域等用户隐私高价值的行业尤为高发。 </p></li></ul><p>比如说，去年年初的时候，荷兰第一大银行荷兰商业银行于2018年1月28日晚间遭到DDoS攻击；第二大银行荷兰合作银行的网银服务29日早晨遭到攻击；第三大银行荷兰银行在那一周内共遭到7次网络攻击，仅周末就有3次。 </p><p>不过这一次发生在荷兰的针对银行系统的攻击并没有造成用户隐私的泄露，原因在于这仅仅是一次来自俄罗斯一个网络间谍组织Cozy Bear对荷兰情报组织AIVD侵犯其计算机的“单纯”的报复行为。<strong>但并不是所有黑客组织发起的DDoS攻击都如此单纯。</strong></p><p>2018年年底时万豪酒店发布了一则公告，称其旗下喜达屋酒店的5亿人次的信息被泄露，共计3.27亿人，泄露信息包括姓名、邮寄地址、电话号码、电子邮件昂面地址、护照号码、出生日期、性别等等入住信息，更糟糕的是万豪无法确定，侵入酒店系统的第三方黑客，在窃取的信息中是否包含客人的银行卡号和密码。（此案例和DDOS攻击无关，建议采用其他案例，比如2011年4月20日至26日，索尼遭受DDoS攻击，目的是为了掩盖盗取索尼PS的用户数据。） </p><p>而游戏领域，则是DDoS攻击的另一个重灾区，不光是刚才前文中提到的暴雪，包括索尼、金山、网易在内的众多知名游戏公司都曾数次遭受攻击，可以说DDoS攻击是游戏企业的噩梦。 </p><p>许多刚创业的游戏公司，可能刚上线就被打死，而一些处在融资阶段的游戏公司，由于遭遇攻击而被迫停服，则很大程度上会调低投资人的预期，甚至导致融资失败。 </p><p>而这些因素，都是竞对打压或者敲诈勒索的绝对软肋。 </p><p>从以上的几个案例我们不难看出，和现实中的耍流氓和敲诈勒索相比，通过网络手段进行攻击的风险和成本更低，坏蛋的嘴脸也更穷凶极恶一点，无论是政府机构还是企业平台，无论你是巨头还是小蚂蚁，只要你身上有羊毛可以薅，你都时刻面临着被洗劫的风险 </p><p>不过刚在开头我也讲了，虽然DDoS很难缠很让人头痛，但本质上图并不是无解的。 </p><p>回到我最开始讲的那个例子。 </p><p>你是一个餐馆老板，过去三十年一直是个老老实实的厨子，突然面对五十个臭流氓到你店里耍无赖的时候，你最好的应对方法，应该是什么？ </p><p>自己组建一支人马，和这些臭流氓正面刚？这恐怕不行，因为你不是臭流氓，你没有相应的作战经验。 </p><p>报警请人民警察来帮忙处理？这恐怕也不行，人家在你店里没有打砸抢，只是“温和的”非暴力不合作，警察来了也只能当民事调解，并且人家马仔众多，明天再换一拨新面孔来，玩的你一点脾气都没有。 </p><p>这就是面对DDoS时，无论是巨头还是小蚂蚁，他们的实实在在的困境。 </p><p>但正所谓“道高一尺魔高一丈”，你在云上和我耍流氓，那我就在云上回击。 </p><p><strong>“云”的事儿，不如还交还给云来处理。</strong>我认为就目前DDoS的在攻击量级上的疯狂进击的前提下，云计算服务厂商或许是狙击它们的最有效手段。 </p><p>2018年年初，峰值1.35TB/秒的流量冲击了开发者平台 GitHub。这是第一次TB量级的DDoS攻击。GitHub 受到攻击后，服务器断断续续，无法访问。攻击发生 10 分钟后，GitHub 向CDN 服务商 Akamai 请求协助，访问 GitHub 的流量已经由后者接管并在15分钟之内完成了防御。 </p><p>Akamai的相关负责人在接受采访时说，我们是基于迄今为止最大规模 DDoS 攻击五倍的峰值而做的相应准备，所以 1.3T 对我们来说是小意思。 </p><p>在关于流量峰值这一点上，我认为饱受双11、双12、618等全民购物狂欢的电商巨头们更有发言权，就拿京东举例子好了。 </p><p>京东云在之前发布的高防版的DDoS服务中，展示出了非常明确的信心是，在多年的电商狂欢流量对抗中，京东云已经在实战中建立了一套完备的防御机制，无论是在流量峰值的建模上，还是在DDoS的防御算法上，它的部署都远远不是纸上谈兵，而是拳拳到肉的经受住了实战的洗礼。要知道，全世界每年有超过5成的DDoS攻击都来自中国，而我们的国家也是全世界超过美国的第一大“肉鸡”市场，由电商大数据加持演化而来的京东云，它在云安全的理解上可以说是非常深刻了。 </p><p>所以说，如果说一定要有一个结论，我想说“上帝的归上帝，而云上的归云上”，像京东云这样的基于电商大数据考验的云计算平台，或许才是对抗DDoS的最终答案。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f3adcbb2ed60428.png" alt="jd"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;“&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DDOS？ &lt;/p&gt;
&lt;p&gt;一言难尽啊！ &lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.policx.com/program/JavaScript/node/"/>
    <id>https://www.policx.com/program/JavaScript/node/</id>
    <published>2019-07-13T16:06:04.000Z</published>
    <updated>2019-07-18T06:22:40.943Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/15/5d2c47df96f5d45317.jpg" alt="Node.js"></p><p>能方便地搭建响应速度快、易于扩展的网络应用，Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>中文：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org</a>、<a href="https://nodejs.cn/" target="_blank" rel="noopener">https://nodejs.cn</a></p><p>简单说Node.js就是运行在服务器端的JavaScript，是现在流行的语言中能同时运行在前端与后台的程序语言，你可以把JavaScript想像成Java与C#。相关技术：</p><p>数据库：MongoDB，非关系型数据库，NoSQL（Not only SQL）</p><p>MVC框架：AngularJS</p><p>Web服务器：Express</p><p>模板引擎：jade、ejs、htmljs、swig、hogan.js</p><h1 id="二、搭建Node-js开发环境"><a href="#二、搭建Node-js开发环境" class="headerlink" title="二、搭建Node.js开发环境"></a>二、搭建Node.js开发环境</h1><h2 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h2><p>去官网下下载最新版本的Node.js一步一步按提示安装即可，如果安装失败就手动安装，将Node.js的安装位置配置到环境变量的path中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装完成后启动命令行，测试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="三、第一个Node-js程序"><a href="#三、第一个Node-js程序" class="headerlink" title="三、第一个Node.js程序"></a>三、第一个Node.js程序</h1><p>在上面的示例中，我们是通过IDE完成编译与运行的，其实手动运行也可以，比如编写一段代码如下：</p><blockquote><p>server.js</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//依赖一个http模块，相当于java中的import，与C#中的using</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">//创建一个服务器对象</span><br><span class="line">server = http.createServer(function (req, res) &#123;</span><br><span class="line">//设置请求成功时响应头部的MIME为纯文本</span><br><span class="line">res.writeHeader(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">//向客户端输出字符</span><br><span class="line">res.end(&quot;Hello World\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//让服务器监听本地8000端口开始运行</span><br><span class="line">server.listen(8000,&apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server is runing at 127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>在node环境下解释运行：<br><img src="https://i.loli.net/2019/07/14/5d2af984d2fae77488.jpg" alt></p><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2af89c2b5b226144.jpg" alt></p><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。<br>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。<br>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</p><h1 id="四、NPM（Node-js包管理器）"><a href="#四、NPM（Node-js包管理器）" class="headerlink" title="四、NPM（Node.js包管理器）"></a>四、NPM（Node.js包管理器）</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：  </p><ul><li>a)、允许用户从NPM服务器下载别人编写的第三方包到本地使用。  </li><li>b)、允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。  </li><li>c)、允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><h2 id="4-1、查看npm版本"><a href="#4-1、查看npm版本" class="headerlink" title="4.1、查看npm版本"></a>4.1、查看npm版本</h2><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p><h2 id="4-2、升级npm"><a href="#4-2、升级npm" class="headerlink" title="4.2、升级npm"></a>4.2、升级npm</h2><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="4-3、安装模块"><a href="#4-3、安装模块" class="headerlink" title="4.3、安装模块"></a>4.3、安装模块</h2><blockquote><p>npm install <module name> -参数</module></p></blockquote><p>如果带参数-g表示全局安装，否则只是安装到某个目录下。</p><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install express -g</span><br></pre></td></tr></table></figure><h2 id="4-4、卸载模块"><a href="#4-4、卸载模块" class="headerlink" title="4.4、卸载模块"></a>4.4、卸载模块</h2><p>我们可以使用以下命令来卸载 Node.js 模块。  </p><blockquote><p>sudo npm uninstall <module name></module></p></blockquote><p>如先使用安装指令安装bootstrap:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>再使用卸载指令删除模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall bootstrap</span><br></pre></td></tr></table></figure><p>可以到 /node_modules/ 目录下查看包是否还存在</p><h2 id="4-5、模块列表"><a href="#4-5、模块列表" class="headerlink" title="4.5、模块列表"></a>4.5、模块列表</h2><p>使用模块列表命令可以方便的看到当前项目中依赖的包：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h2 id="4-6、更新模块"><a href="#4-6、更新模块" class="headerlink" title="4.6、更新模块"></a>4.6、更新模块</h2><p>我们可以使用以下命令更新模块：<br><code>npm update</code>模块名称<br><code>npm up -g</code> 模块名称</p><h2 id="4-7、搜索模块"><a href="#4-7、搜索模块" class="headerlink" title="4.7、搜索模块"></a>4.7、搜索模块</h2><p><code>npm search</code>模块名称</p><h2 id="4-8、NPM-常用命令"><a href="#4-8、NPM-常用命令" class="headerlink" title="4.8、NPM 常用命令"></a>4.8、NPM 常用命令</h2><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。<br>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。<br>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。<br>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。<br>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。<br>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></package></package></p><h2 id="4-9、更换NPM-镜像"><a href="#4-9、更换NPM-镜像" class="headerlink" title="4.9、更换NPM 镜像"></a>4.9、更换NPM 镜像</h2><p>因为npm的服务器在国外，在网络状态不好的情况下引入一个模块会因为网络延迟而失败，可以更换成国内速度更快的镜像服务器，这里以使用淘宝 NPM 镜像（<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>）为例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/15/5d2c481d14f7270384.jpg" alt></p><p>这样就可以使用 cnpm 命令来安装模块了：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＄ cnpm install [name]</span><br></pre></td></tr></table></figure><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><p>如是安装失败，可以试试：</p><figure class="highlight zsh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">alias</span> cnpm=<span class="hljs-string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">--cache=<span class="hljs-variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">--userconfig=<span class="hljs-variable">$HOME</span>/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">  --userconfig=$HOME/.cnpmrc"'</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。使用Node.js作为AngularJS开发Web服务器的最佳方式是使用Express模块。</p><p>Express官网： <a href="https://expressjs.com/" target="_blank" rel="noopener">https://expressjs.com/</a></p><p>Express4.x API：<a href="https://expressjs.com/zh-cn/4x/api.html" target="_blank" rel="noopener">https://expressjs.com/zh-cn/4x/api.html</a></p><p><img src="https://i.loli.net/2019/07/15/5d2c484698cd427801.jpg" alt></p><h2 id="5-2、Express框架核心特性"><a href="#5-2、Express框架核心特性" class="headerlink" title="5.2、Express框架核心特性"></a><strong>5.2、Express框架核心特性</strong></h2><p>可以设置中间件来响应 HTTP 请求。</p><p>定义了路由表用于执行不同的 HTTP 请求动作。</p><p>可以通过向模板传递参数来动态渲染 HTML 页面。</p><p>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。</p><p>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p><h2 id="5-3、安装-Express"><a href="#5-3、安装-Express" class="headerlink" title="5.3、安装 Express"></a><strong>5.3、安装 Express</strong></h2><p>安装 Express 并将其保存到依赖列表中：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>以上命令全局安装express。也可安装时指定安装中间件。</p><p><em>body-parser</em> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</p><p><em>cookie-parser</em> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p><p><em>multer</em> - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">＄ npm install body-parser --save  </span><br><span class="line">＄ npm install cookie-parser --save  </span><br><span class="line">＄ npm install multer --save</span><br></pre></td></tr></table></figure><p>默认这些模块都已经添加。</p><h2 id="5-4、第一个Express框架实例"><a href="#5-4、第一个Express框架实例" class="headerlink" title="5.4、第一个Express框架实例"></a>5.4、第一个Express框架实例</h2><p>接下来我们使用 Express 框架来输出 “Hello World”。<br>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。</p><p>创建一个目录，如Project，进入命令行：</p><p>使用npm install express 导入express模块。</p><p>在目录下创建hello.js文件，如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//引入express模块</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">//创建一个app对象，类似一个web 应用（网站）</span><br><span class="line">var app = express();</span><br><span class="line">//接受指定路径的请求，指定回调函数</span><br><span class="line">app.get(&apos;/&apos;, function (req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//创建一个web服务器，可以认为就是web服务器对象</span><br><span class="line">//监听8081端口，当监听成功时回调</span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">   var host = server.address().address;  //地址</span><br><span class="line">   var port = server.address().port;  //端口</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-5、开发Express项目"><a href="#5-5、开发Express项目" class="headerlink" title="5.5、开发Express项目"></a>5.5、开发Express项目</h2><p><img src="https://i.loli.net/2019/07/14/5d2b00e97910997783.jpg" alt></p><p>创建好的项目如下：<br><img src="https://i.loli.net/2019/07/14/5d2b02dad205355700.jpg" alt></p><p>app.js是网站：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><p>bin\www是web服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">/**</span><br><span class="line"> * 依赖模块，导入</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;nodejsexpress:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从上下文环境中获得监听端口，如果空则3000</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Web服务器</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开始监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);  //指定发生错误时的事件</span><br><span class="line">server.on(&apos;listening&apos;, onListening);  //当监听成功时的回调</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 规范化端口</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *错误事件监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  //错误处理</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);  //结束程序</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当用户访问服务器成功时的回调</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/index.js路由，有点类似控制器或Servlet：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 获得首页 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>views/index.ejs首页视图：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在www上右键选择“运行方式”-&gt;Run ‘/bin/www’ 运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b034bcca6187136.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b044c2b12347829.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b041724d6091090.jpg" alt></p><h3 id="5-5-1、request对象"><a href="#5-5-1、request对象" class="headerlink" title="5.5.1、request对象"></a>5.5.1、request对象</h3><p>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ul><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ul><h3 id="5-5-2、response对象"><a href="#5-5-2、response对象" class="headerlink" title="5.5.2、response对象"></a>5.5.2、response对象</h3><p>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.app：同req.app一样</span><br><span class="line">res.append()：追加指定HTTP头</span><br><span class="line">res.set()在res.append()后将重置之前设置的头</span><br><span class="line">res.cookie(name，value [，option])：设置Cookie</span><br><span class="line">opition: domain / expires / httpOnly / maxAge / path / secure / signed</span><br><span class="line">res.clearCookie()：清除Cookie</span><br><span class="line">res.download()：传送指定路径的文件</span><br><span class="line">res.get()：返回指定的HTTP头</span><br><span class="line">res.json()：传送JSON响应</span><br><span class="line">res.jsonp()：传送JSONP响应</span><br><span class="line">res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</span><br><span class="line">res.redirect()：设置响应的Location HTTP头，并且设置状态码302</span><br><span class="line">res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</span><br><span class="line">res.send()：传送HTTP响应</span><br><span class="line">res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</span><br><span class="line">res.set()：设置HTTP头，传入object可以一次设置多个头</span><br><span class="line">res.status()：设置HTTP状态码</span><br><span class="line">res.type()：设置Content-Type的MIME类型</span><br></pre></td></tr></table></figure><h3 id="5-5-3、express获取参数有三种方法"><a href="#5-5-3、express获取参数有三种方法" class="headerlink" title="5.5.3、express获取参数有三种方法"></a>5.5.3、express获取参数有三种方法</h3><p>req.query 适合 <a href="https://localhost:3000/form?num=8888" target="_blank" rel="noopener">https://localhost:3000/form?num=8888</a><br>req.body 适合<a href="https://localhost:3000/form，Post请求中的参数" target="_blank" rel="noopener">https://localhost:3000/form，Post请求中的参数</a><br>req.params 适合获取form后的num：<a href="https://localhost:3000/form/num" target="_blank" rel="noopener">https://localhost:3000/form/num</a>  </p><p>（一）、GET</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = req.query.num;</span><br><span class="line">res.send(&quot;你获取的get数据为:&quot; + num);</span><br></pre></td></tr></table></figure><p>（二）、POST</p><p>解析post数据需要用到body-parser</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">//引入body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">//需要use的</span><br><span class="line">app.use(bodyParser.json()); // for parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">extended: true</span><br><span class="line">&#125;)); // for parsing application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.post(&apos;/form&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.body.num;</span><br><span class="line">res.send(&quot;你获取的post数据为:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>public/test.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"tinyphp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（三）、获取路径参数</p><p>app.js  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.get(&apos;/form/:num&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.params.num;</span><br><span class="line">res.send(&quot;你获取到form/后的参数:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="5-6-ejs基础"><a href="#5-6-ejs基础" class="headerlink" title="5.6 ejs基础"></a>5.6 ejs基础</h2><p>ejs是一个Express Web应用的模板引擎，在NodeJS开发中可以选择的模板引擎可能是所有Web应用开发中范围最广的，如jade、ejs、htmljs、swig、hogan.js，但ejs是最容易上手的，与jsp,asp,php的原始模板引擎风格很像。</p><p>官网：<a href="https://www.embeddedjs.com/" target="_blank" rel="noopener">https://www.embeddedjs.com/</a></p><p>添加一个<code>product.js</code>路由：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  var products=[];</span><br><span class="line">  products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">  //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">  res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>在views目录下添加<code>product.ejs</code>视图，这里是一个简单的MVC：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span> - 产品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"80%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%pdts.forEach(function(pdt,index)&#123;%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=index+1%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.name%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.price%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%&#125;);%</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">%=pdts[i].name%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改app，注册定义好的模块product：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> index = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/index'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/users'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> pdts = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/product'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//指定视图引擎为ejs</span></span><br><span class="line">app.set(<span class="hljs-string">'views'</span>, path.join(__dirname, <span class="hljs-string">'views'</span>));</span><br><span class="line">app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="hljs-comment">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class="line">app.use(logger(<span class="hljs-string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="hljs-string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/'</span>, index);</span><br><span class="line">app.use(<span class="hljs-string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="hljs-string">'/pdt'</span>, pdts);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b092ca2eb115835.jpg" alt></p><blockquote><p>原因：没有安装ejs模块<br>解决办法：进入到项目目录，安装ejs</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save ejs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b09efe80ba53992.jpg" alt></p></blockquote><p>重新运行：<br><img src="https://i.loli.net/2019/07/14/5d2b0a951a09231745.jpg" alt></p><h2 id="5-7、lodash"><a href="#5-7、lodash" class="headerlink" title="5.7、lodash"></a>5.7、lodash</h2><p>这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。可以非常方便的操作json。</p><p>官网：<a href="https://lodashjs.com/" target="_blank" rel="noopener">https://lodashjs.com/</a></p><p>安装：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash</span><br></pre></td></tr></table></figure><p>安装时先用cd切换到当前项目下。</p><p>如果浏览器使用可以直接引入：</p><script src="lodash.js"></script><p>添加lodash依赖：<br><img src="https://i.loli.net/2019/07/14/5d2b0c4c7c14a17367.jpg" alt></p><p>依赖成功后会在package.json中添加引用：<br><img src="https://i.loli.net/2019/07/14/5d2b0c9e03f1844597.jpg" alt></p><p>后台Node.js使用，可以引入模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//导入lodash模块</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var products=[];</span><br><span class="line">products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">//1、取出第一个元素</span><br><span class="line">var obj1=_.first(products);</span><br><span class="line">console.log(obj1.name);  //ZTE U880</span><br><span class="line"></span><br><span class="line">//2、取出最后一个元素</span><br><span class="line">var obj2=_.last(products);</span><br><span class="line">console.log(obj2.name);  //iPhone 7 Plus 128G</span><br><span class="line"></span><br><span class="line">//3、指定查找条件返回符合条件的索引</span><br><span class="line">var obj3=_.findIndex(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj3);  //2</span><br><span class="line"></span><br><span class="line">//4、指定查找条件返回查找到的对象</span><br><span class="line">var obj4=_.find(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj4);  //&#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;</span><br><span class="line"></span><br><span class="line">//5、排序</span><br><span class="line">var obj5=_.orderBy(products,[&quot;price&quot;,&quot;name&quot;],[&quot;desc&quot;,&quot;asc&quot;]);</span><br><span class="line">console.log(obj5);</span><br><span class="line"></span><br><span class="line">//[ &#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;HuWei 荣耀8&apos;, price: 1899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;ZTE U880&apos;, price: 899.8 &#125; ]</span><br><span class="line"></span><br><span class="line">//6、查找价格为1899.8的产品的key</span><br><span class="line">var obj6=_.findKey(products,&#123;price:1899.8&#125;);</span><br><span class="line">console.log(obj6);   //1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/14/5d2b0f023a83710965.jpg" alt></p><p>API的使用非常简单，但需要注意版本，可以现查现用，API地址：<a href="https://lodash.com/docs/4.17.2%20" target="_blank" rel="noopener">https://lodash.com/docs/4.17.2 </a></p><h2 id="5-8、参数"><a href="#5-8、参数" class="headerlink" title="5.8、参数"></a>5.8、参数</h2><h3 id="5-8-1、URL中的参数占位"><a href="#5-8-1、URL中的参数占位" class="headerlink" title="5.8.1、URL中的参数占位"></a>5.8.1、URL中的参数占位</h3><p>Checks route params (req.params), ex: /user/:id</p><p>127.0.0.1:3000/index，这种情况下，我们为了得到index，我们可以通过使用req.params得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式；</p><p><code>http://127.0.0.1:3000/pdt/9527/phone</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得产品根据Id</span><br><span class="line">router.get(&apos;/:id/:category&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(request.params.id+&quot;,&quot;+request.params.category);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b10e8e678f43145.jpg" alt></p><h3 id="5-8-2、URL中的QueryString"><a href="#5-8-2、URL中的QueryString" class="headerlink" title="5.8.2、URL中的QueryString"></a>5.8.2、URL中的QueryString</h3><p>Checks query string params (req.query), ex: ?id=12</p><p>127.0.0.1:3000/index?id=12，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用req.query.id就可以获得，类似于PHP的get方法；</p><p><code>http://127.0.0.1:3000/pdt/9527?name=jobs</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(&quot;name:&quot;+request.query.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b12be0371490358.jpg" alt></p><h3 id="5-8-3、HTTP正文中的参数"><a href="#5-8-3、HTTP正文中的参数" class="headerlink" title="5.8.3、HTTP正文中的参数"></a>5.8.3、HTTP正文中的参数</h3><p>在post请求中获得表单中的数据。</p><p>Checks urlencoded body params (req.body), ex: id=</p><p>127.0.0.1：300/index，然后post了一个id=2的值，这种方式是获取客户端post过来的数据，可以通过req.body.id获取，类似于PHP的post方法；</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222150412682-243382356.png" alt></p><p>页面：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &lt;%= title %&gt;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%pdts.forEach(function(pdt,index)&#123;%&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=index+1%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.name%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.price%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%&#125;);%&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=pdts[i].name%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            &lt;%if(typeof msg!=&quot;undefined&quot;)&#123;%&gt;</span><br><span class="line">                &lt;%=msg%&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">        &lt;form action=&quot;pdt/add&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                名称：&lt;input name=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                价格：&lt;input name=&quot;price&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/add&apos;,function(request,res,next)&#123;</span><br><span class="line">    var entity=&#123;name:request.body.name,price:request.body.price&#125;;</span><br><span class="line">    products.push(entity);</span><br><span class="line">      //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">      res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products,msg:&quot;添加成功&quot;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151340745-1374859267.png" alt></p><h2 id="5-9、JSON"><a href="#5-9、JSON" class="headerlink" title="5.9、JSON"></a>5.9、JSON</h2><p>如果需要Node.js向外提供返回JSON的接口，Express也是非常方便的，可以使用原来在浏览器中使用到的JSON对象，这是一个浏览器内置对象在服务可以直接使用：</p><p>将对象序列化成字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象</span><br><span class="line">var rose=&#123;&quot;name&quot;:&quot;Rose&quot;,&quot;weight&quot;:&quot;65&quot;&#125;;</span><br><span class="line">            //序列化成字符串</span><br><span class="line">            var str=JSON.stringify(rose);</span><br><span class="line">            alert(str);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151858839-27300214.png" alt></p><p>反序列化，将字符转换成对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成JavaScript对象</span><br><span class="line">var markStr=&apos;&#123;&quot;name&quot;:&quot;mark&quot;,&quot;weight&quot;:&quot;188&quot;&#125;&apos;;</span><br><span class="line">            var mark=JSON.parse(markStr);</span><br><span class="line">            alert(mark.name+&quot;，&quot;+mark.weight);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222152634417-1260078212.png" alt></p><p>Express已经封装了一个json方法，直接调用该方法就可以序列化对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/rest&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(products);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、RESTful（表述性状态转移）"><a href="#六、RESTful（表述性状态转移）" class="headerlink" title="六、RESTful（表述性状态转移）"></a>六、RESTful（表述性状态转移）</h1><p>REST是英文Representational State Transfer的缩写，中文称之为“表述性状态转移” 基于HTTP协议，是另一种服务架构，传递是JSON、POX（Plain Old XML）而不是SOAP格式的数据，充分利用HTTP谓词（Verb），侧重数据的传输，业务逻辑交给客户端自行处理</p><p>REST是一种分布式服务架构的风格约束，像Java、.Net（WCF、WebAPI）都有对该约束的实现，使URL变得更加有意义，更加简洁明了，如：</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>get请求 表示获得所有产品的第1个</p><p><a href="https://www.zhangguo.com/products/product" target="_blank" rel="noopener">https://www.zhangguo.com/products/product</a><br>post请求 表示添加一个产品</p><p><a href="https://www.zhangguo.com/products/1/price" target="_blank" rel="noopener">https://www.zhangguo.com/products/1/price</a><br>get请求 表示获得第1个产品的价格</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>delete请求 删除编号为1的产品</p><p>REST设计需要遵循的原则<br>网络上的所有事物都被抽象为资源（resource）；<br>每个资源对应一个唯一的资源标识符（resource identifier）；<br>通过通用的连接器接口（generic connector interface）对资源进行操作；<br>对资源的各种操作不会改变资源标识符；<br>所有的操作都是无状态的（stateless）</p><p>谓词<br><strong>GET</strong><br>表示查询操作，相当于Retrieve、Select操作<br><strong>POST</strong><br>表示插入操作，相当于Create，Insert操作<br><strong>PUT</strong><br>表示修改操作，相当于Update操作<br><strong>DELETE</strong><br>表示删除操作，相当于Delete操作</p><p>其它还有：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161223101344557-1727952968.png" alt></p><p>NodeJS+Express可以很容易的实现REST</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>application/json</li><li>res.setHeader(‘Content-Type’, ‘application/json;charset=utf-8’);</li></ul><p>示例代码cars.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var cars=[];</span><br><span class="line">cars.push(&#123;id:201701,name:&quot;BMW&quot;,price:190,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201702,name:&quot;BYD&quot;,price:25,speed:&quot;160km/h&quot;,color:&quot;红色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201703,name:&quot;Benz&quot;,price:300,speed:&quot;215km/h&quot;,color:&quot;蓝色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201704,name:&quot;Honda&quot;,price:190,speed:&quot;170km/h&quot;,color:&quot;黑色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201705,name:&quot;QQ&quot;,price:130,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line"></span><br><span class="line">/* Get */</span><br><span class="line">/*获得所有汽车*/</span><br><span class="line">/*url /cars/*/</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.json(cars);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Get*/</span><br><span class="line">/*获得汽车通过id*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">     //从路径中映射参数，转换成数字</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var car=_.find(cars,&#123;id:id&#125;);</span><br><span class="line">      res.json(car);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Post*/</span><br><span class="line">/*添加汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.post(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      car.id=_.last(cars).id+1;  //将编号修改为最后一辆车的编号+1</span><br><span class="line">      cars.push(car);  //将汽车对象添加到集合中</span><br><span class="line">      res.json(car);  //将添加成功的车以json的形式返回</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Put*/</span><br><span class="line">/*修改汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.put(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      console.log(req.body);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:parseInt(car.id)&#125;);  //根据id获得车在集合中的下标</span><br><span class="line"></span><br><span class="line">      cars[index]=car;  //替换原对象</span><br><span class="line">      //res.json(car);  //将修改后的车以json的形式返回</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;更新成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Delete*/</span><br><span class="line">/*删除汽车*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.delete(&apos;/id/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">      //获得url中的编号参数</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:id&#125;);  //根据id获得车在集合中的下标</span><br><span class="line">      cars.splice(index,1);   //在cars数组中删除下标从index开始的1条数据</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;删除成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>示例代码app.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line">var pdts = require(&apos;./routes/product&apos;);</span><br><span class="line">var task = require(&apos;./routes/task&apos;);</span><br><span class="line">var cars = require(&apos;./routes/cars&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line">app.use(&apos;/pdt&apos;, pdts);</span><br><span class="line">app.use(&quot;/task&quot;,task);</span><br><span class="line">app.use(&quot;/cars&quot;,cars);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得所有汽车  </li><li>url /cars/</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b27eb42dea22132.jpg" alt></p><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得汽车通过id</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b28e456cdf58111.jpg" alt></p><blockquote><p><strong>Post</strong></p></blockquote><ul><li>添加汽车  </li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b30e46f28836556.jpg" alt></p><p>参数中的json格式一定要使用标准格式，注意引号，注意Content-Type，默认的Content-Type类型是：application/x-www-form-urlencoded</p><blockquote><p><strong>Put</strong></p></blockquote><ul><li>修改汽车</li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3434410e778260.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b344cd080581595.jpg" alt></p><blockquote><p><strong>Delete</strong>  </p></blockquote><ul><li>删除汽车</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3526d5bff57574.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b35474e9c447189.jpg" alt></p><p><strong>node.js跨域</strong></p><p>修改app.js文件拦截所有的请求，修改头部</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">app.all(&apos;*&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">    res.header(&quot;X-Powered-By&quot;, &apos; 3.2.1&apos;);</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);</span><br><span class="line">    if(req.method == &quot;OPTIONS&quot;) &#123;</span><br><span class="line">        res.send(&quot;200&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2017.cnblogs.com/blog/63651/201801/63651-20180108142729785-1121920664.png" alt></p><h1 id="九、视频"><a href="#九、视频" class="headerlink" title="九、视频"></a>九、<a href="https://www.bilibili.com/video/av17977069" target="_blank" rel="noopener">视频</a></h1><p>From: <a href="https://www.cnblogs.com/best/p/6204116.html" target="_blank" rel="noopener">https://www.cnblogs.com/best/p/6204116.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Node.js" scheme="https://www.policx.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hexo front-matter 怎么写？</title>
    <link href="https://www.policx.com/front-matter/"/>
    <id>https://www.policx.com/front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-18T06:25:47.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/CSDNnews/"/>
    <id>https://www.policx.com/CSDNnews/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-18T06:25:40.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">hackernoon</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/news/BitTorrent/"/>
    <id>https://www.policx.com/news/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/notes/partner/"/>
    <id>https://www.policx.com/notes/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-18T06:23:38.164Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
      <category term="notes" scheme="https://www.policx.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/news/harddisk/"/>
    <id>https://www.policx.com/news/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-18T06:25:40.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/news/2019/"/>
    <id>https://www.policx.com/news/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-18T06:25:40.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/blog/netlify/"/>
    <id>https://www.policx.com/blog/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-18T06:25:47.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。<br><img src="https://githubpage-1255710107.cos.ap-shanghai.myqcloud.com/static/images/KNN/hexo.png" alt></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。<br>那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。<br>接下来我分步骤的跟大家来介绍我的部署方案。</p><h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/blog/hexo-theme-icarus/"/>
    <id>https://www.policx.com/blog/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-18T06:25:47.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f0332a3bdc91139.jpg" alt="easyhexo.com"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="https://www.policx.com/program/Git/git-del/"/>
    <id>https://www.policx.com/program/Git/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-18T06:22:40.943Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="git" scheme="https://www.policx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="https://www.policx.com/program/Python/python-excel/"/>
    <id>https://www.policx.com/program/Python/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-18T06:22:40.945Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="https://www.policx.com/program/Python/python-writer/"/>
    <id>https://www.policx.com/program/Python/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-18T06:22:40.945Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="https://www.policx.com/news/2018/"/>
    <id>https://www.policx.com/news/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-18T06:25:40.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="/post-images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="https://www.policx.com/program/Python/pymongo/"/>
    <id>https://www.policx.com/program/Python/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-18T06:22:40.944Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://www.policx.com/program/Python/mongodb/"/>
    <id>https://www.policx.com/program/Python/mongodb/</id>
    <published>2018-05-02T06:11:11.000Z</published>
    <updated>2019-07-18T06:22:40.944Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。</p><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库。</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。通常情况下，在一个集合中的所有文件都是类似或相关目的。</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。<br>下面给出的示例显示了一个博客网站，仅仅是一个逗号分隔的键值对的文档结构。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorial&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,20,2,15),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My second comments&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,25,7,45),</span><br><span class="line">         like: 5</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>MongoDB use DATABASE_NAME 用于创建数据库。该命令如果数据库不存在，将创建一个新的数据库， 否则将返回现有的数据库。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>use DATABASE语句的基本语法如下：<br><code>use DATABASE_NAME</code></p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">如果想创建一个数据库名称为 &lt;mydb&gt;, 那么 use DATABASE 语句应该如下：</span><br><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line"></span><br><span class="line">要检查当前选择的数据库使用命令 db</span><br><span class="line">&gt;db</span><br><span class="line">mydb</span><br><span class="line"></span><br><span class="line">如果想查询数据库列表，那么使用命令 show dbs.</span><br><span class="line">&gt;show dbs</span><br><span class="line">local     0.78125GB</span><br><span class="line">test      0.23012GB</span><br><span class="line"></span><br><span class="line">所创建的数据库（mydb）不存在于列表中。要显示的数据库，需要至少插入一个文档进去。</span><br><span class="line">&gt;db.movie.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;)</span><br><span class="line">&gt;show dbs</span><br><span class="line">local      0.78125GB</span><br><span class="line">mydb       0.23012GB</span><br><span class="line">test       0.23012GB</span><br></pre></td></tr></table></figure><p>MongoDB的默认数据库是test。 如果没有创建任何数据库，那么集合将被保存在测试数据库。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>MongoDB db.dropDatabase() 命令用于删除现有的数据库。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>dropDatabase()指令的基本语法如下：<br><code>db.dropDatabase()</code></p><p>这将删除选定的数据库。如果没有选择任何数据库，那么它会删除默认的“test”数据库</p><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>如果想删除新的数据库 <mydb>, 那么 dropDatabase() 命令将如下所示：</mydb></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;&#123; &quot;dropped&quot; : &quot;mydb&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>MongoDB 的 db.createCollection(name, options) 用于创建集合。 在命令中, name 是要创建集合的名称。 Options 是一个文档，用于指定集合的配置</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>String</td><td>要创建的集合的名称</td></tr><tr><td>Options</td><td>Document</td><td>（可选）指定有关内存大小和索引选项</td></tr></tbody></table><p>选项参数是可选的，所以需要指定集合的唯一名字。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>createCollection()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt;db.createCollection(&quot;mycollection&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以通过使用 show collections 命令来检查创建的集合</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;show collections</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><h3 id="选项列表"><a href="#选项列表" class="headerlink" title="选项列表"></a>选项列表</h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。</td></tr><tr><td>autoIndexID</td><td>Boolean</td><td>（可选）如果为true，自动创建索引_id字段。默认的值是 false.</td></tr><tr><td>size</td><td>number</td><td>（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。</td></tr><tr><td>max</td><td>number</td><td>（可选）指定上限集合允许的最大文件数。</td></tr></tbody></table><p>尽管插入文档，MongoDB首先检查字段集合的上限大小，那么它会检查最大字段。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法 :"></a>语法 :</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexID : true, size : 6142800, max : 10000 &#125; )</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.yiibai.insert(&#123;&quot;name&quot; : &quot;yiibai&quot;&#125;)</span><br><span class="line">&gt;show collections</span><br><span class="line">mycol</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br><span class="line">yiibai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>MongoDB 的 db.collection.drop() 用于从数据库中删除集合。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>drop() 命令的基本语法如下<br><code>db.COLLECTION_NAME.drop()</code></p><h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>下面给出的例子将删除给定名称的集合：mycollection</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.mycollection.drop()</span><br><span class="line">true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p>将数据插入到MongoDB集合，需要使用MongoDB 的 insert() 方法。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>insert()命令的基本语法如下：<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.insert(&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c),</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里 mycol 是我们的集合名称，它是在之前的教程中创建。如果集合不存在于数据库中，那么MongoDB创建此集合，然后插入文档进去。</p><p>在如果我们不指定_id参数插入的文档，那么 MongoDB 将为文档分配一个唯一的ObjectId。</p><p>_id 是12个字节十六进制数在一个集合的每个文档是唯一的。 12个字节被划分如下：<br>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</p><p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.post.insert([</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;NoSQL Database&apos;, </span><br><span class="line">   description: &apos;NoSQL database doesn&apos;t have tables&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 20, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p>要从集合查询MongoDB数据，需要使用MongoDB的 find()方法。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find()</code><br>find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p><code>&gt;db.mycol.find().pretty()</code></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>除了find()方法还有findOne()方法，仅返回一个文档。</p><h3 id="RDBMS-Where子句等效于MongoDB"><a href="#RDBMS-Where子句等效于MongoDB" class="headerlink" title="RDBMS Where子句等效于MongoDB"></a>RDBMS Where子句等效于MongoDB</h3><p>查询文档在一些条件的基础上，可以使用下面的操作</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>Equality</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td>db.mycol.find({“by”:”yiibai tutorials”}).pretty()</td><td>where by = ‘yiibai tutorials’</td></tr><tr><td>Less Than</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>Less Than Equals</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>Greater Than</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>Greater Than Equals</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>Not Equals</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="AND-在-MongoDB"><a href="#AND-在-MongoDB" class="headerlink" title="AND 在 MongoDB"></a>AND 在 MongoDB</h4><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>在 find()方法，如果您传递多个键通过”,”将它们分开，那么MongoDB对待它就如AND条件一样。基本语法如下所示：<br><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有教程含“yiibai tutorials”和其标题是“MongoDB Overview”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;yiibai tutorials&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>对于上面给出的例子相当于where子句：’ where by=’yiibai tutorials’ AND title=’MongoDB Overview’ ‘。可以传递任何数目的键-值对在find子句。</p><h4 id="OR-在-MongoDB"><a href="#OR-在-MongoDB" class="headerlink" title="OR 在 MongoDB"></a>OR 在 MongoDB</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><p>要查询基于OR条件的文件，需要使用$or关键字。OR的基本语法如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有撰写含有 ‘yiibai tutorials’ 或是标题为 ‘MongoDB Overview’ 的教程</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-AND-和-OR-在一起"><a href="#使用-AND-和-OR-在一起" class="headerlink" title="使用 AND 和 OR 在一起"></a>使用 AND 和 OR 在一起</h4><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子显示有喜欢数大于100 的文档，其标题要么是 ‘MongoDB Overview’ 或 ‘yiibai tutorials’. 等效于SQL的where子句：’where likes&gt;10 AND (by = ‘yiibai tutorials’ OR title = ‘MongoDB Overview’)’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai tutorials&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>MongoDB的update()和save()方法用于更新文档到一个集合。 update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。</p><h4 id="MongoDB-Update-方法"><a href="#MongoDB-Update-方法" class="headerlink" title="MongoDB Update() 方法"></a>MongoDB Update() 方法</h4><h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><p>update()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br></pre></td></tr></table></figure><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将设置其标题“MongoDB Overview”的文件为新标题为“New MongoDB Tutorial”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Tutorial Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 ‘multi’ 设置为 true。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="MongoDB-Save-方法"><a href="#MongoDB-Save-方法" class="headerlink" title="MongoDB Save() 方法"></a>MongoDB Save() 方法</h4><p>save() 方法取代，通过新文档到 save()方法</p><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><p>mongodb 的 save()方法如下所示的基本语法：<br><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><p>下面的例子将替换该文件_id ‘5983548781331adf45ec7’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.save(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>MongoDB 的 remove()方法用于从集合中删除文档。remove()方法接受两个参数。一个是标准缺失，第二是justOne标志<br>deletion criteria : 根据文件（可选）删除条件将被删除。<br>justOne : （可选）如果设置为true或1，然后取出只有一个文档。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>remove()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p><h6 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h6><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将删除所有的文件，其标题为 ‘MongoDB Overview’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Toturials Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="只删除一个"><a href="#只删除一个" class="headerlink" title="只删除一个"></a>只删除一个</h5><p>如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。<br><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p><h5 id="删除所有文件"><a href="#删除所有文件" class="headerlink" title="删除所有文件"></a>删除所有文件</h5><p>如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove()</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="MongoDB投影"><a href="#MongoDB投影" class="headerlink" title="MongoDB投影"></a>MongoDB投影</h4><p>mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。</p><p>MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。</p><p>语法</p><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find({},{KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示文档的标题，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意在执行find()方法时_id字段始终显示，如果不想要显示这个字段，那么需要将其设置为0</p><h5 id="限制文档"><a href="#限制文档" class="headerlink" title="限制文档"></a>限制文档</h5><p>MongoDB Limit() 方法</p><p>要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p>limit()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER)</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将只显示2个文档，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>如果不指定 limit()方法的参数数量，然后它会显示集合中的所有文档。</p><p>MongoDB Skip() 方法</p><p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。</p><p>语法</p><p>skip() 方法的基础语法如下所示：<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p><p>例子：</p><p>下面的例子将仅显示第二个文档。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，skip() 方法的默认值是 0</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p>要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。</p><p>语法</p><p>sort()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().sort({KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有如下数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示的文件排序按标题降序排序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;title&quot;:-1&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果不指定排序类型，那么 sort() 方法将以升序排列文档。</p><h4 id="MongoDB索引"><a href="#MongoDB索引" class="headerlink" title="MongoDB索引"></a>MongoDB索引</h4><p>索引支持查询高效率执行。如果没有索引，MongoDB必须扫描集合中的每一个文档，然后选择那些符合查询语句的文档。若需要 mongod 来处理大量数据，扫描是非常低效的。</p><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。</p><p>要创建索引，需要使用MongoDB的ensureIndex()方法。</p><p>语法</p><p>ensureIndex()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code></p><p>这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.</p><p>例子</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">在 ensureIndex()方法，可以通过多个字段，来创建多个字段索引。</span><br><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法还接受选项列表（这是可选），其列表如下：<br><img src="/post-images/1561132706992.png" alt></p><h4 id="MongoDB-聚合"><a href="#MongoDB-聚合" class="headerlink" title="MongoDB 聚合"></a>MongoDB 聚合</h4><p>聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。 在SQL中的count(*)，使用group by 与mongodb的聚合是等效的。 对于MongoDB的聚合，使用的是aggregate()方法。</p><p>语法</p><p>aggregate()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p><p>例子：</p><p>在集合中有以下数据：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai &apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;, </span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;, </span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;https://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在从上面的集合，如果想知道每一个用户编写的教程是多少，那么使用aggregate()方法，如下图所示的列表：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Yiibai Yiibai&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>用于上述用途将等效于sql查询： select by_user, count(*) from mycol group by by_user</code></pre><p>另外，在上述例子中，我们已经使用字段by_user进行分组并计算总和，也就是by_user 出现各个次数。一个列表中可用的聚集表达式。<br>    <img src="/post-images/1561132965786.png" alt></p><h4 id="MongoDB-复制"><a href="#MongoDB-复制" class="headerlink" title="MongoDB 复制"></a>MongoDB 复制</h4><p>复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。</p><h6 id="为什么要复制？"><a href="#为什么要复制？" class="headerlink" title="为什么要复制？"></a>为什么要复制？</h6><blockquote><pre><code>为了让数据安全数据的高（24*7）可用性灾难恢复无停机维护（如备份，索引重建，压缩）读取缩放（额外的副本来读取）副本集是透明的应用</code></pre></blockquote><h5 id="MongoDB复制的工作原理"><a href="#MongoDB复制的工作原理" class="headerlink" title="MongoDB复制的工作原理"></a>MongoDB复制的工作原理</h5><p>MongoDB通过使用副本集的复制来实现。副本集是一组承载同一个数据集的mongod实例。在副本的一个节点是接收所有的写操作主节点。所有的实例，次级，应用操作从主以便它们具有相同的数据集。副本集只能有一个主节点。</p><blockquote><pre><code>副本集是一组两个或更多个节点（通常至少3节点是必需的）。在副本集一个节点是主节点和其余的节点都是次要的。所有的数据复制是从主到次节点。在自动故障转移或维护时，选建立了主要和一个新的主节点被选择。故障节点的恢复后，再次加入副本集，并可以作为一个辅助节点。</code></pre></blockquote><p>mongodb复制的典型图如下图，其中客户端应用程序总是与主节点和主节点交互，然后将数据复制到辅助节点。<br><img src="/post-images/1561133216694.png" alt><br>副本集特征</p><ul><li>N个节点的集群</li><li>任何节点可为原发/主节点</li><li>所有的写操作进入到主节点</li><li>自动故障转移</li><li>自动恢复</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Linux" scheme="https://www.policx.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MySQL 之间的交互</title>
    <link href="https://www.policx.com/program/Python/pymysql/"/>
    <id>https://www.policx.com/program/Python/pymysql/</id>
    <published>2018-05-02T03:14:27.000Z</published>
    <updated>2019-07-18T06:22:40.944Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是-PyMySQL？"><a href="#什么是-PyMySQL？" class="headerlink" title="什么是 PyMySQL？"></a>什么是 PyMySQL？</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><a id="more"></a> <h2 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h2><p>在文件中引入模块</p><p><code>import pymysql</code></p><h3 id="1-Connection对象"><a href="#1-Connection对象" class="headerlink" title="1.Connection对象"></a>1.Connection对象</h3><p>•  用于建立与数据库的连接<br>•  创建对象：调用connect()方法<br>conn=connect(参数列表)<br>•  参数host：连接的mysql主机，如果本机是’localhost’<br>•  参数port：连接的mysql主机的端口，默认是3306<br>•  参数db：数据库的名称<br>•  参数user：连接的用户名<br>•  参数password：连接的密码<br>•  参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</p><h3 id="2-对象的方法"><a href="#2-对象的方法" class="headerlink" title="2.对象的方法"></a>2.对象的方法</h3><p>•  close()关闭连接<br>•  commit()事务，所以需要提交才会生效<br>•  rollback()事务，放弃之前的操作<br>•  cursor()返回Cursor对象，用于执行sql语句并获得结果</p><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><p>•  执行sql语句<br>•  创建对象：调用Connection对象的cursor()方法<br>cursor1=conn.cursor()</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>•  close()关闭<br>•  execute(operation [, parameters ])执行语句，返回受影响的行数<br>•  fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组<br>•  next()执行查询语句时，获取当前行的下一行<br>•  fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回<br>•  scroll(value[,mode])将行指针移动到某个位置<br>•  mode表示移动的方式<br>•  mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动。相对的<br>•  mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0，绝对的。</p><h4 id="举个例子便于理解"><a href="#举个例子便于理解" class="headerlink" title="举个例子便于理解"></a>举个例子便于理解</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 导入python操作mysql的模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> pymysql</span><br><span class="line"><span class="hljs-comment"># 获取连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="hljs-string">'127.0.0.1'</span>, user=<span class="hljs-string">'root'</span>, password=<span class="hljs-string">'123456'</span>, database=<span class="hljs-string">'python01'</span>, port=<span class="hljs-number">3306</span>, charset=<span class="hljs-string">'utf8'</span>)</span><br><span class="line"><span class="hljs-comment"># 获取执行工具</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="hljs-comment"># sql语句,增删改</span></span><br><span class="line"><span class="hljs-comment">#sql = 'select birthday from t_user'</span></span><br><span class="line">sql = <span class="hljs-string">'select id,name,pwd,birthday from t_user'</span></span><br><span class="line"><span class="hljs-comment"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span></span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(<span class="hljs-string">'查询的结果有%s条数据'</span>%count)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取第一行</span></span><br><span class="line">dateOne = cur.fetchone()</span><br><span class="line">print(dateOne)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向上移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向下移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'absolute'</span>)   绝对的，这里指的是第一行</span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'relative'</span>)   相对的</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取所有行的数据</span></span><br><span class="line">dataAll = cur.fetchall()</span><br><span class="line">print(dataAll)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">     print(temp)</span><br><span class="line">     print(dataAll[<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])      <span class="hljs-comment">#dataAll[-1]得到的是一个用户所有的信息，dataAll[-1][2]获取最后一个人的密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> cur:</span><br><span class="line">     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-string">'id:%s,name:%s,pwd:%s,birthday:%s'</span></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">    print(s%(temp[<span class="hljs-number">0</span>],temp[<span class="hljs-number">1</span>],temp[<span class="hljs-number">2</span>],temp[<span class="hljs-number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-对象的属性"><a href="#3-对象的属性" class="headerlink" title="3.对象的属性"></a>3.对象的属性</h3><p>•  rowcount只读属性，表示最近一次execute()执行后受影响的行数<br>•  connection获得当前连接对象</p><h3 id="2-增删改查-CRUD"><a href="#2-增删改查-CRUD" class="headerlink" title="2.增删改查(CRUD)"></a>2.增删改查(CRUD)</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>•  创建testInsert.py文件，向学生表中插入一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;insert into students(sname) values(&apos;张良&apos;)&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p>•  创建testUpdate.py文件，修改学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;update students set sname=&apos;刘邦&apos; where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>•  创建testDelete.py文件，删除学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8 import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;delete from students where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>•  创建testSelectOne.py文件，查询一条学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Pymysql try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>•  创建testSelectMany.py文件，查询全部学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf8 import Pymysql</span><br><span class="line">try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="实例一：参数"><a href="#实例一：参数" class="headerlink" title="实例一：参数"></a>实例一：参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改，sql注入</span><br><span class="line">sql = &apos;insert into t_user(name,pwd,birthday) values(%s,%s,%s)&apos;</span><br><span class="line"># 参数列表</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = input(&apos;输入生日:&apos;)     # 2017年10月01日--&gt;日期struct_time(---&gt;2017-10-01)</span><br><span class="line">birthday = time.strptime(birthday,&apos;%Y年%m月%d日&apos;)      #这里我们就用到了时间与字符串的相互转换(详情见MySQL高级)</span><br><span class="line"></span><br><span class="line">params = [name,pwd,birthday]</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql,params)</span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">print(&apos;受影响的行数:%s&apos;%count)</span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例二：抛出异常"><a href="#实例二：抛出异常" class="headerlink" title="实例二：抛出异常"></a>实例二：抛出异常</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    conn = None</span><br><span class="line">    cur = None</span><br><span class="line">    # 获取连接对象</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">                           user=&apos;root&apos;,</span><br><span class="line">                           password=&apos;123456&apos;,</span><br><span class="line">                           database=&apos;python01&apos;,</span><br><span class="line">                           port=3306,</span><br><span class="line">                           charset=&apos;utf8&apos;)</span><br><span class="line">    # 模拟异常</span><br><span class="line">    # a = 1 / 0</span><br><span class="line">    # 获取执行工具</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    # sql语句,增删改</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd,birthday) values(&quot;小伊&quot;,&quot;123456&quot;,str_to_date(&quot;2017年10月20日&quot;,&quot;%Y年%m月%d日&quot;))&apos;</span><br><span class="line">    # 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">    count = cur.execute(sql)</span><br><span class="line">    # 提交</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(&apos;受影响的行数:%s&apos; % count)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    # 打印异常信息，测试时候使用，项目上线，去掉</span><br><span class="line">    print(str(ex))</span><br><span class="line">    # 将异常继续抛出</span><br><span class="line">    # raise</span><br><span class="line">finally:</span><br><span class="line">    if cur != None:</span><br><span class="line">        cur.close()</span><br><span class="line">    if conn != None:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例三："><a href="#实例三：" class="headerlink" title="实例三："></a>实例三：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改</span><br><span class="line">#sql = &apos;select birthday from t_user&apos;</span><br><span class="line">sql = &apos;select id,name,pwd,birthday from t_user&apos;</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(&apos;查询的结果有%s条数据&apos;%count)</span><br><span class="line"></span><br><span class="line">#获取第一行</span><br><span class="line"># dateOne = cur.fetchone()</span><br><span class="line"># print(dateOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for temp in cur:</span><br><span class="line">#     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;id:%s,name:%s,pwd:%s,birthday:%s&apos;</span><br><span class="line">for temp in dataAll:</span><br><span class="line">    print(s%(temp[0],temp[1],temp[2],temp[3]))</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h3><p>这个库的名字：mySqlHelper</p><p> python操作mysql进行增删改查的封装</p><pre><code>1、增删改，代码类似2、查询代码分析1、获取连接对象2、sql语句不同，参数不同3、获取执行对象    增删改    查询        1、fetchone        2、fetchall4、处理结果5、关闭</code></pre><h4 id="面向对象-建立类，封装属性和函数"><a href="#面向对象-建立类，封装属性和函数" class="headerlink" title="面向对象  建立类，封装属性和函数"></a>面向对象  建立类，封装属性和函数</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">class MysqlHelper:</span><br><span class="line">    &apos;&apos;&apos;python操作mysql的增删改查的封装&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, host, user, password, database, port=3306, charset=&apos;utf8&apos;):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化参数</span><br><span class="line">        :param host:        主机</span><br><span class="line">        :param user:        用户名</span><br><span class="line">        :param password:    密码</span><br><span class="line">        :param database:    数据库</span><br><span class="line">        :param port:        端口号，默认是3306</span><br><span class="line">        :param charset:     编码，默认是utf8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        获取连接对象和执行对象</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.conn = pymysql.connect(host=self.host,</span><br><span class="line">                                    user=self.user,</span><br><span class="line">                                    password=self.password,</span><br><span class="line">                                    database=self.database,</span><br><span class="line">                                    port=self.port,</span><br><span class="line">                                    charset=self.charset)</span><br><span class="line"></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    def fetchone(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数元组，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataOne = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataOne = self.cur.fetchone()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataOne</span><br><span class="line"></span><br><span class="line">    def fetchall(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数列表，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataall = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataall = self.cur.fetchall()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataall</span><br><span class="line"></span><br><span class="line">    def __item(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行增删改</span><br><span class="line">        :param sql:           sql语句</span><br><span class="line">        :param params:        sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:              受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        count = 0</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行修改</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def insert(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行新增</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def delete(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行删除</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        关闭执行工具和连接对象</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if self.cur != None:</span><br><span class="line">            self.cur.close()</span><br><span class="line">        if self.conn != None:</span><br><span class="line">            self.conn.close()</span><br></pre></td></tr></table></figure><h4 id="1-测试查询多条数据"><a href="#1-测试查询多条数据" class="headerlink" title="1.测试查询多条数据"></a>1.测试查询多条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where name = %s and id &gt; %s&apos;</span><br><span class="line"># params</span><br><span class="line">params = [&apos;小茗&apos;,1]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchall(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    for temp in data:</span><br><span class="line">        print(temp)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br><span class="line"></span><br><span class="line">helper.close()</span><br></pre></td></tr></table></figure><h4 id="2-测试查询一条数据"><a href="#2-测试查询一条数据" class="headerlink" title="2.测试查询一条数据"></a>2.测试查询一条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where id = %s&apos;</span><br><span class="line">#sql = &apos;select * from t_user where id = 1&apos;</span><br><span class="line"># params</span><br><span class="line">params = [2]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchone(sql, params)</span><br><span class="line">#data = helper.fetchone(sql)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    print(data)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br></pre></td></tr></table></figure><h4 id="3-测试增删改"><a href="#3-测试增删改" class="headerlink" title="3.测试增删改"></a>3.测试增删改</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;update t_user set name =%s,pwd=%s,birthday=%s where id=%s&apos;</span><br><span class="line"># params</span><br><span class="line">id = input(&apos;输入编号:&apos;)</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = time.strptime(input(&apos;输入生日:&apos;), &apos;%Y年%m月%d日&apos;)</span><br><span class="line">params = [name, pwd, birthday,id]</span><br><span class="line"># 执行</span><br><span class="line">count = helper.update(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if count:</span><br><span class="line">    print(&apos;操作成功.&apos;)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;操作失败.&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-登录和注册"><a href="#4-登录和注册" class="headerlink" title="4.登录和注册"></a>4.登录和注册</h4><p>登录和注册的时候需要对密码进行加密</p><p>注意：</p><p>•  需要对密码进行加密<br>•  如果使用md5加密，则密码包含32个字符<br>•  如果使用sha1加密，则密码包含40个字符，这里使用这种方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table userinfos(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    uname varchar(20),</span><br><span class="line">    upwd char(40),</span><br><span class="line">    isdelete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">ret = doPwd(&apos;123&apos;)</span><br><span class="line">print(ret)</span><br><span class="line">结果：40bd001563085fc35165329ea1ff5c5ecbdbbeef</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">-- 插入如下数据，用户名为123,密码为123,这是sha1加密后的值</span><br><span class="line"></span><br><span class="line">insert into userinfos </span><br><span class="line">values(1,&apos;123&apos;,&apos;40bd001563085fc35165329ea1ff5c5ecbdbbeef&apos;,0);</span><br></pre></td></tr></table></figure><h4 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from mysqlHelper import MysqlHelper</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    &apos;&apos;&apos;登录&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    #加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;select * from t_user where name=%s and pwd=%s&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    data = helper.fetchone(sql, params)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;登录成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;登录失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doPwd(pwd):</span><br><span class="line">    &apos;&apos;&apos;sha1编码&apos;&apos;&apos;</span><br><span class="line">    mysha1 = hashlib.sha1()</span><br><span class="line">    mysha1.update(pwd.encode(&apos;utf-8&apos;))</span><br><span class="line">    pwd = mysha1.hexdigest()</span><br><span class="line">    return pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    &apos;&apos;&apos;注册&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    # 加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd) values(%s,%s)&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    count = helper.insert(sql, params)</span><br><span class="line">    if count:</span><br><span class="line">        print(&apos;操作成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;操作失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #register()</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PyMySQL？&quot;&gt;&lt;a href=&quot;#什么是-PyMySQL？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PyMySQL？&quot;&gt;&lt;/a&gt;什么是 PyMySQL？&lt;/h2&gt;&lt;p&gt;PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。&lt;/p&gt;
&lt;p&gt;PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
</feed>
