<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南一道街</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-08-15T13:43:41.434Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>善用佳软--aiXcoder</title>
    <link href="https://www.policx.com/Software/aixcoder/"/>
    <id>https://www.policx.com/Software/aixcoder/</id>
    <published>2019-08-15T12:55:41.000Z</published>
    <updated>2019-08-15T13:43:41.434Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p> 从程序员到数据工程师，编写程序代码是一项基本功，但是编写冗长代码的过程也极大地消耗了开发者的耐心。近来，有不少关于代码补全工具的消息爆出，例如，来自美国的 Kite，来自加拿大的 TabNine 等，一时间获得了不少程序员的关注。但其实很多人还并不知道，在这些国外产品不断被媒体推送的背后，有一款能力更为强大、更早将深度学习应用于代码补全的产品，一款源自中国的工具——aiXcoder，它的研发者们来自于北京大学。</p></blockquote><a id="more"></a><p>在本文中，机器之心采访了项目总负责人北京大学计算机科学技术系副教授李戈，请他为读者朋友解读自动代码补全背后的技术，以及 aiXcoder 背后的技术特性和优势。aiXcoder 官网：<a href="https://www.aixcoder.com/#/" target="_blank" rel="noopener">https://www.aixcoder.com/#/</a></p><p><strong>aiXcoder 的代码补全效果</strong></p><p>我们先看看写 TensorFlow 时的代码补全效果：</p><p><img src="https://gitee.com/policx/im/raw/master/images/i4YcMg.jpg" alt></p><p>如上所示，aiXcoder 在 TensorFlow 的代码环境下能够直接「猜测」到模型建立后的一系列代码流程。例如，在定义了 loss 之后需要定义 optimizer，之后需要 train_op、init 方法，然后最终定义模型的保存方式 saver，以及开始运行计算图。这样一个流程基本上是深度学习开发者所知晓的，但是按照流程写下来非常繁琐。在 aiXcoder 的提示下，开发速度得到了提升。</p><p>aiXcoder 支持 Java、C++/C、Python、PHP、JavaScript 等语言，以插件的方式集成到现有的 IDE 中，如 Pycharm、Android Studio、VS Code、Eclipse、Webstorm、Sublime 等，插件的背后是一个强大的云端深度学习引擎。</p><p>针对开发者，该产品目前分为社区版、专业版和企业版。社区版是完全免费的，专业版也可以通过分享而免费获得。它们间的不同之处在于模型会不会继续学习，社区版主要利用事先训练好的公用模型做预测，而专业版则会根据用户的代码习惯及结构作进一步的调整。企业版是 aiXcoder 功能最为强大的版本，它能够在企业内部的私有云中进行部署，并能够利用企业自己的代码来进行模型的优化训练，从而具有更高的准确率和运行性能。</p><p><strong>aiXcoder 用起来怎么样</strong></p><p>百闻不如一见，机器之心也对 aiXocder 进行了使用测试。</p><p>机器之心在 Pycharm 上试用了社区版/专业版，它们都是需要在线推断。不同的地方在于专业版还需要额外的内存，因为每一个 Pro 用户都需要额外的缓冲区来储存模型「学到的」用户习惯。当然，Pro 用户的缓冲区是是只有该插件能访问的。</p><p><strong>使用体会</strong></p><p>一般而言，当我们选择 Python 和 PyCharm 时，代码补全就自然用 IDE 自带的工具。使用 aiXcoder 第一个感受是它比自带的补全工具灵活得多，因为以前的补全主要体现在 Python 函数或其它包的 API，而 aiXcoder 还会预测变量名是什么、运算是什么、想调用的函数又是什么。</p><p>虽然代码补全的推断过程全是在云端完成的，但在我们的使用中，一般网络环境甚至 4G 都能有实时的反馈，所以补全速度上基本和 Pycharm 自带的工具差不多。李戈教授表示，目前 aiXcoder 绝大多数都能在 200ms 左右得到反馈，有部分地区的用户由于网络延迟问题可能会感觉到卡顿，aiXcoder 正在全国各个主要城市部署服务器，以提升用户体验。同时，aiXcoder 团队也特别关注模型压缩技术，希望把基于 CPU 的推理运算时间压缩到可接受的程度，从而推出能够在 CPU 上运行的本地版。</p><p>总体而言，aiXcoder 提供的补全功能在预测变量名、函数名或关键字等效果上确实非常灵活，而且它还会学习开发者的代码风格与编程模式，因此效果还是挺好的。</p><p>如下是自动补全的一些候选，一些函数名称可能是开发者之间经常使用的，因此得到了推荐：</p><p><img src="https://gitee.com/policx/im/raw/master/images/Wb3qeB.jpg" alt></p><p>对于一些变量，aiXcoder 可根据变量类型提出该变量可能的操作，比如，对于下图的变量「m」，aiXcoder 提出了一个对字符串进行增加的代码：<br><img src="https://gitee.com/policx/im/raw/master/images/odcZX3.jpg" alt="pic"></p><p><strong>对比测评</strong></p><p><img src="https://gitee.com/policx/im/raw/master/images/17llLZ.jpg" alt="pic"></p><p>aiXcoder 官方也将产品和其他代码补全工具进行了对比，包括 Kite 和 TabNine 等。</p><p>在对比过程中，aiXcoder 会使用 Kite 或 TabNine 官方提供的示例代码，并测试完成这段代码到底需要多少次按键。结果表明，aiXcoder 较其他插件在效率上提升 1.5 倍以上。</p><p><strong>aiXcoder 是如何打造的</strong></p><p>能够实现高效代码补全的 aiXcoder，背后有着强大的技术支撑。据李戈教授介绍，aiXcoder 很早就试过了语言模型，将代码视为一种语言从而直接建模，这就和 Deep TabNine 一样。但是研究者很快发现，只有语言模型是行不通的，它总会提出一些毫无意义、很不科学的补全建议。为此，aiXcoder 融合了基于序列的程序代码语言模型、基于抽象语法树和程序逻辑关系的图神经网络等方法，共同打造一个完整的系统。</p><p><strong>为什么直接生成代码是困难的</strong></p><p>如果深度学习模型能根据开发者的意图，以端到端的方式直接生成对应的代码，那么这样的模型会很「优雅」。但是经过研究发现，这样的任务需求是很难实现的，这和任务本身所依赖的数据的性质有关系。</p><p>李戈教授从机器学习所依赖的数据性质的角度，对代码生成任务和传统的图像处理任务、自然语言处理任务的不同，给出一种较为形象化的解释。</p><p><img src="https://gitee.com/policx/im/raw/master/images/uynX38.jpg" alt="pic"></p><p>对于图像识别或图像分类任务而言，机器学习的目标是建立一个连续的数据集（图像数据）到一个近乎连续的、有着接近清晰边界的数据集（标签）之间的映射关系。</p><p>这样一来，由于图像数据异常的稠密，而标签集又有足够清晰的边界，那么这就相当于一个标签拥有大量的数据可以学习。这样的映射关系是比较容易建立的，这也是机器学习中和图像相关的任务相对较为容易完成的原因。</p><p><img src="https://gitee.com/policx/im/raw/master/images/X6IyEn.jpg" alt="pic"></p><p>对于自然语言处理任务而言，机器学习需要从一个较为连续的（离散度高于图像）、有着较清晰边界的数据集建立与另一个较为连续的、有着较清晰的边界的数据集之间的映射关系。</p><p>而由于自然语言处理中的文本数据相比图像数据更为稀疏，因此自然语言处理相关的任务更难取得较好的模型性能。</p><p><img src="https://gitee.com/policx/im/raw/master/images/Ezm4TN.jpg" alt="pic"></p><p>但是在代码生成方面，从编程者的意图（intent）生成程序代码的问题，可以看做是「程序员意图空间」到「程序代码空间」的映射，其中意图可以是由自然语言描述的信息。如上图所示，这是从一个较为连续的、有着较清晰边界的数据集，向一个更加离散而没有清晰边界的数据集进行映射。</p><p>换句话说，尽管代码生成的意图较为清楚，但是实现该意图的代码数据却比较稀疏，而且即便对于相同的意图，其对应的实现代码之间仍存在较大差距，因此这样的任务是非常难学习的。</p><p>为此，在 aiXcoder 的实际实现中，对不同应用领域的代码都采用了特定的模型，它们仅使用该领域的数据进行训练。例如，对 TensorFlow 或 PyTorch 等框架也有其特定的代码补全模型。这样做的主要目的就是加强程序分布的稠密性，在特定领域下，代码分布更加接近连续性。可见，根据编程者的「意图」来「直接」生成完整代码是非常困难的，但李戈教授表示，可以用类似的技术来辅助人类程序员来编写代码，我们可以从程序员已经写下的代码中获取程序员的「编程意图」，然后综合分析代码，的结构信息、变量引用信息、API 序列信息、继承关系信息等等，以自动生成后续代码。然而，在这个过程中，只有语言模型是远远不够的，还需要对很多其它代码特征进行分析，才能做好生成式的代码补全。 <strong>单纯的预训练语言模型又怎么样？</strong></p><p>提起代码补全，有些人可能会下意识的认为这仅仅是一个普通的语言建模任务，模型只需要根据开发者之前写的代码预测之后的代码即可。因此使用最先进的预训练语言模型，再在代码数据上进行微调说不定是一种好方法。</p><p>但是李戈教授表示，这样的想法是远远不够的。预训练语言模型在代码补全任务中效果不佳，主要是因为代码补全任务本身存在诸多不同于自然语言分析任务的挑战。</p><p>首先是代码文本中存在的语义抽象性问题。代码的语义（功能语义）与其字面表示之间存在更大的差距。我们无法根据字面确定代码的准确语义。例如，在代码中，只改变一个字符就有可能完全改变整行代码的功能，因此处理代码的语言并准确提取其含义相比自然语言处理任务更棘手。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;word_ids.txt&apos;,&apos;r&apos;)f = open(&apos;word_ids.txt&apos;,&apos;w&apos;)</span><br></pre></td></tr></table></figure><p><em>上图所示，在 Python 代码中，打开某个文件时使用「r」和「w」会实现完全不同的功能。</em></p><p>此外，代码的功能语义难以进行具体的表达和刻画，而且代码功能语义的表达方式多种多样。例如，有多种代码的形式文本用于实现某个功能，不能说某一种代码是对的而另一种是错的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_a = [] for i in items:     result = test(i)     list_a.append(result) list_a = [test(i) for i in items]</span><br></pre></td></tr></table></figure><p><em>如图所示，实现 list_a 的代码可以是多种多样的，但语言模型会将它们学习为完全不同的表征。</em></p><p>同时，代码文本本身的结构非常复杂。例如，代码的语义与代码结构（如行与行的缩进）之间存在较大的关联性，代码语义依赖于代码结构进行表达。这是预训练语言模型难以表示的特征。</p><p>最后，代码具有演化性的特征。代码较自然语言的迭代速度更快，因此预训练语言模型不能够及时捕捉演化特征。</p><p>考虑到代码语言中的诸多特性，单纯的预训练语言模型无法得到非常好的效果。</p><p><strong>核心技术</strong></p><p>既然单独的语言模型不行，那么 aiXcoder 又结合了哪些技术，它又是靠什么来补全代码的？总体而言，aiXcoder 主要依赖于其特有的对程序代码进行学习的深度神经网络模型，该模型能够对程序的如下几类特征进行分析：</p><ol><li>程序的结构语义特征：程序语言是一种结构性很强的语言，程序的结构信息也体现着程序的语义。例如，抽象语法树是对代码进行解析的一种较为通用的结构，它体现了代码的语义特征，aiXcoder 便充分利用了抽象语法树，对程序员已经写下的代码的语义进行解读。</li></ol><ol start="2"><li>程序元素间的逻辑关系：程序代码的不同元素之间存在着不同的关系，例如程序变量之间的引用关系、类之间的继承关系、方法与参数之间的调用关系等等。程序本身又可以表示为多种图，例如控制流图、数据流图、调用关系图等等。aiXcoder 借助图神经网络能够对程序元素之间的多种关系进行建模，从而能够对程序元素之间的复杂关系进行分析和推理。</li></ol><p><img src="https://gitee.com/policx/im/raw/master/images/Trw7pQ.jpg" alt="pic"></p><ol start="3"><li>程序语言序列模型：当然，程序语言也具有与自然语言相似的一面，因此可以利用程序标识符之间的序列关系建立程序语言模型。aiXcoder 也使用了最新的深度学习语言模型对程序中的序列信息进行建模。</li></ol><p><img src="https://gitee.com/policx/im/raw/master/images/n3jWGe.jpg" alt="pic"></p><p>在获得程序代码的各种特征之后，就该把这些特征输入深度神经网络进行分析了，但这并不容易，因为在输入神经网络之前需要把这些特征进行向量化表示。在研究过程中，北京大学提出了一系列解决程序语言成分相量化的办法，并且在国际上最早发表了相关的论文，这些都为 aiXcoder 的构造打下了基础。</p><p><strong>团队介绍</strong></p><p>李戈教授所在的北京大学高可信软件技术教育部重点实验室是国内顶尖的软件科学研究团队，是北京大学计算机软件与理论全国重点学科的主要支撑，其建设历史可以追溯到 1955 年，至今已有 60 多年的学术沉淀和积累。该团队在著名软件科学家杨芙清院士和梅宏院士的带领下，已经成长为该领域国际领先的研究团队。<br><img src="https://i.loli.net/2019/08/15/eMlOtfEGvjDLcy7.jpg" alt="pic"><br>基于深度学习的代码分析与生成一直是李戈教授的研究方向，也是北大高可信软件技术教育部重点实验室重点关注的领域，他们从 2013 年开始就开展了基于深度学习的代码分析研究，从 2015 年开始就将深度学习用于代码生成，是最开始进行相关研究的团队之一。该团队在 AAAI/IJCAI/ACL 等顶会上发表过很多代码生成的相关论文，这也是一大笔技术累积。</p><p>李戈教授是 aiXcoder 创始人，北京大学计算机科学技术系副教授，CCF 软件工程专委会秘书长，斯坦福大学计算机系人工智能实验室访问副教授。主要研究方向：程序分析，程序生成，深度学习。所在研究团队聚焦于基于机器学习概率模型的程序语言处理，在代码功能分析、代码自动补全、代码缺陷检测等方面取得并保持了国际上领先的研究成果。</p><table><thead><tr><th>机器之心原创 👇 <br> <strong>作者：思源、一鸣</strong><br></th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/NCwBMAkC3uAS9Zr7Olcp7w" target="_blank" rel="noopener"><img src="https://gitee.com/policx/im/raw/master/images/osSojv.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 从程序员到数据工程师，编写程序代码是一项基本功，但是编写冗长代码的过程也极大地消耗了开发者的耐心。近来，有不少关于代码补全工具的消息爆出，例如，来自美国的 Kite，来自加拿大的 TabNine 等，一时间获得了不少程序员的关注。但其实很多人还并不知道，在这些国外产品不断被媒体推送的背后，有一款能力更为强大、更早将深度学习应用于代码补全的产品，一款源自中国的工具——aiXcoder，它的研发者们来自于北京大学。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>HarmonyOS 鸿蒙</title>
    <link href="https://www.policx.com/news/HarmonyOS/"/>
    <id>https://www.policx.com/news/HarmonyOS/</id>
    <published>2019-08-10T15:28:21.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p> <strong>鸿蒙</strong>，中国神话传说的远古时代，传说在盘古昆仑山开天辟地之前，世界是一团混沌的元气，这种自然的元气叫做鸿蒙，因此把那个时代称作鸿蒙时代，后来此一词也常被用来泛指称远古时代。</p><a id="more"></a><h4 id="华为开发者大会于8月9日-8月11日举行，华为消费者业务-CEO、华为技术有限公司常务董事余承东以《全场景时代新体验与新生态》为题发表演讲，正式宣布自有操作系统：鸿蒙。据余承东介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。"><a href="#华为开发者大会于8月9日-8月11日举行，华为消费者业务-CEO、华为技术有限公司常务董事余承东以《全场景时代新体验与新生态》为题发表演讲，正式宣布自有操作系统：鸿蒙。据余承东介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。" class="headerlink" title="华为开发者大会于8月9日-8月11日举行，华为消费者业务 CEO、华为技术有限公司常务董事余承东以《全场景时代新体验与新生态》为题发表演讲，正式宣布自有操作系统：鸿蒙。据余承东介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。"></a>华为开发者大会于8月9日-8月11日举行，华为消费者业务 CEO、华为技术有限公司常务董事余承东以《全场景时代新体验与新生态》为题发表演讲，正式宣布自有操作系统：鸿蒙。据余承东介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。</h4><p><a href="https://static.cnbetacdn.com/article/2019/0809/cb92bd466924d81.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/cb92bd466924d81.jpg" alt></a></p><h5 id="根据余承东的说法，安卓有超过1亿行代码，内核就超过2000万行，但一般用户用到的代码不到8-，整体比较冗余，在IoT时代这既没必要也不需要。"><a href="#根据余承东的说法，安卓有超过1亿行代码，内核就超过2000万行，但一般用户用到的代码不到8-，整体比较冗余，在IoT时代这既没必要也不需要。" class="headerlink" title="根据余承东的说法，安卓有超过1亿行代码，内核就超过2000万行，但一般用户用到的代码不到8%，整体比较冗余，在IoT时代这既没必要也不需要。"></a>根据余承东的说法，安卓有超过1亿行代码，内核就超过2000万行，但一般用户用到的代码不到8%，整体比较冗余，在IoT时代这既没必要也不需要。</h5><h5 id="由此他提出了”微内核”的概念，也是鸿蒙OS的特点之一。区别于”宏内核”，微内核采用同一套操作平台，针对不同硬件能力的产品进行部署，并采用分布式架构，提升效率。"><a href="#由此他提出了”微内核”的概念，也是鸿蒙OS的特点之一。区别于”宏内核”，微内核采用同一套操作平台，针对不同硬件能力的产品进行部署，并采用分布式架构，提升效率。" class="headerlink" title="由此他提出了”微内核”的概念，也是鸿蒙OS的特点之一。区别于”宏内核”，微内核采用同一套操作平台，针对不同硬件能力的产品进行部署，并采用分布式架构，提升效率。"></a>由此他提出了”微内核”的概念，也是鸿蒙OS的特点之一。区别于”宏内核”，微内核采用同一套操作平台，针对不同硬件能力的产品进行部署，并采用分布式架构，提升效率。</h5><p><img src="https://static.cnbetacdn.com/article/2019/0809/3195a18e81ef714.png" alt></p><h5 id="也就是说，手机和车载设备的用途不同，灌入同样系统无必要，但它们可以采用同样的内核，部署不同的界面或功能。"><a href="#也就是说，手机和车载设备的用途不同，灌入同样系统无必要，但它们可以采用同样的内核，部署不同的界面或功能。" class="headerlink" title="也就是说，手机和车载设备的用途不同，灌入同样系统无必要，但它们可以采用同样的内核，部署不同的界面或功能。"></a>也就是说，<a href="https://c.duomai.com/track.php?site_id=242986&euid=&t=https://shouji.jd.com/" target="_blank" rel="noopener">手机</a>和车载设备的用途不同，灌入同样系统无必要，但它们可以采用同样的内核，部署不同的界面或功能。</h5><h5 id="余承东表示，希望未来的操作系统，都使用微内核。据介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。"><a href="#余承东表示，希望未来的操作系统，都使用微内核。据介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。" class="headerlink" title="余承东表示，希望未来的操作系统，都使用微内核。据介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。"></a>余承东表示，希望未来的操作系统，都使用微内核。据介绍，鸿蒙OS是基于微内核的全场景分布式OS，这是分布式架构首次用于终端OS，可以实现跨终端无缝协同体验。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/cc82956876a1115.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/cc82956876a1115.jpg" alt></a></p><p><strong>余承东介绍了鸿蒙OS的四大技术特性。</strong></p><p><strong>首先，分布式架构首次用于终端OS，实现跨终端无缝协同体验。</strong></p><h5 id="鸿蒙OS的”分布式OS架构”和”分布式软总线技术”通过公共通信平台，分布式数据管理，分布式能力调度和虚拟外设四大能力，将相应分布式应用的底层技术实现难度对应用开发者屏蔽，使开发者能够聚焦自身业务逻辑，像开发同一终端一样开发跨终端分布式应用，也使最终消费者享受到强大的跨终端业务协同能力为各使用场景带来的无缝体验。"><a href="#鸿蒙OS的”分布式OS架构”和”分布式软总线技术”通过公共通信平台，分布式数据管理，分布式能力调度和虚拟外设四大能力，将相应分布式应用的底层技术实现难度对应用开发者屏蔽，使开发者能够聚焦自身业务逻辑，像开发同一终端一样开发跨终端分布式应用，也使最终消费者享受到强大的跨终端业务协同能力为各使用场景带来的无缝体验。" class="headerlink" title="鸿蒙OS的”分布式OS架构”和”分布式软总线技术”通过公共通信平台，分布式数据管理，分布式能力调度和虚拟外设四大能力，将相应分布式应用的底层技术实现难度对应用开发者屏蔽，使开发者能够聚焦自身业务逻辑，像开发同一终端一样开发跨终端分布式应用，也使最终消费者享受到强大的跨终端业务协同能力为各使用场景带来的无缝体验。"></a>鸿蒙OS的”分布式OS架构”和”分布式软总线技术”通过公共通信平台，分布式数据管理，分布式能力调度和虚拟外设四大能力，将相应分布式应用的底层技术实现难度对应用开发者屏蔽，使开发者能够聚焦自身业务逻辑，像开发同一终端一样开发跨终端分布式应用，也使最终消费者享受到强大的跨终端业务协同能力为各使用场景带来的无缝体验。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/0da3b9acacd6566.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/0da3b9acacd6566.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/2ca308ed3de5059.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/2ca308ed3de5059.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/4987e4d24c572f6.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/4987e4d24c572f6.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/bb2b308fb2c4863.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/bb2b308fb2c4863.jpg" alt></a></p><p><strong>第二， 确定时延引擎和高性能IPC技术实现系统流畅。</strong></p><h5 id="鸿蒙OS通过使用确定时延引擎和高性能IPC两大技术解决现有系统性能不足的问题。确定时延引擎可在任务执行前分配系统中任务执行优先级及时限进行调度处理，优先级高的任务资源将优先保障调度，应用响应时延降低25-7-。鸿蒙微内核结构小巧的特性使IPC（进程间通信）性能大大提高，进程通信效率较现有系统提升5倍。"><a href="#鸿蒙OS通过使用确定时延引擎和高性能IPC两大技术解决现有系统性能不足的问题。确定时延引擎可在任务执行前分配系统中任务执行优先级及时限进行调度处理，优先级高的任务资源将优先保障调度，应用响应时延降低25-7-。鸿蒙微内核结构小巧的特性使IPC（进程间通信）性能大大提高，进程通信效率较现有系统提升5倍。" class="headerlink" title="鸿蒙OS通过使用确定时延引擎和高性能IPC两大技术解决现有系统性能不足的问题。确定时延引擎可在任务执行前分配系统中任务执行优先级及时限进行调度处理，优先级高的任务资源将优先保障调度，应用响应时延降低25.7%。鸿蒙微内核结构小巧的特性使IPC（进程间通信）性能大大提高，进程通信效率较现有系统提升5倍。"></a>鸿蒙OS通过使用确定时延引擎和高性能IPC两大技术解决现有系统性能不足的问题。确定时延引擎可在任务执行前分配系统中任务执行优先级及时限进行调度处理，优先级高的任务资源将优先保障调度，应用响应时延降低25.7%。鸿蒙微内核结构小巧的特性使IPC（进程间通信）性能大大提高，进程通信效率较现有系统提升5倍。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/e0b747fb52cb77d.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/e0b747fb52cb77d.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/8207bd44e2eb60b.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/8207bd44e2eb60b.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/9a8f4828c279726.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/9a8f4828c279726.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/cdad2d91becd4e3.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/cdad2d91becd4e3.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/8c0a561069fb0c4.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/8c0a561069fb0c4.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/7d7e3e9c5c6ca43.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/7d7e3e9c5c6ca43.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/fa8032646a56bd3.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/fa8032646a56bd3.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/5f7aa22198a6ce2.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/5f7aa22198a6ce2.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/72f9cea20b6e7b8.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/72f9cea20b6e7b8.jpg" alt></a></p><p><strong>第三，基于微内核架构重塑终端设备可信安全。</strong></p><h5 id="鸿蒙OS采用全新的微内核设计，拥有更强的安全特性和低时延等特点。微内核设计的基本思想是简化内核功能，在内核之外的用户态尽可能多地实现系统服务，同时加入相互之间的安全保护。微内核只提供最基础的服务，比如多进程调度和多进程通信等。"><a href="#鸿蒙OS采用全新的微内核设计，拥有更强的安全特性和低时延等特点。微内核设计的基本思想是简化内核功能，在内核之外的用户态尽可能多地实现系统服务，同时加入相互之间的安全保护。微内核只提供最基础的服务，比如多进程调度和多进程通信等。" class="headerlink" title="鸿蒙OS采用全新的微内核设计，拥有更强的安全特性和低时延等特点。微内核设计的基本思想是简化内核功能，在内核之外的用户态尽可能多地实现系统服务，同时加入相互之间的安全保护。微内核只提供最基础的服务，比如多进程调度和多进程通信等。"></a>鸿蒙OS采用全新的微内核设计，拥有更强的安全特性和低时延等特点。微内核设计的基本思想是简化内核功能，在内核之外的用户态尽可能多地实现系统服务，同时加入相互之间的安全保护。微内核只提供最基础的服务，比如多进程调度和多进程通信等。</h5><h5 id="另外，鸿蒙OS将微内核技术应用于可信执行环境（TEE），通过形式化方法，重塑可信安全。"><a href="#另外，鸿蒙OS将微内核技术应用于可信执行环境（TEE），通过形式化方法，重塑可信安全。" class="headerlink" title="另外，鸿蒙OS将微内核技术应用于可信执行环境（TEE），通过形式化方法，重塑可信安全。"></a>另外，鸿蒙OS将微内核技术应用于可信执行环境（TEE），通过形式化方法，重塑可信安全。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/5f367f2b16631d9.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/5f367f2b16631d9.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/02e885fbf4b0f3c.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/02e885fbf4b0f3c.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/037bb5fc6cf3389.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/037bb5fc6cf3389.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/aa0a3edfb8b5a47.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/aa0a3edfb8b5a47.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/2c7ce2b7bea4e02.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/2c7ce2b7bea4e02.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/0c452598463f956.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/0c452598463f956.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/10e961b6228d627.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/10e961b6228d627.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/39602f71577fc48.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/39602f71577fc48.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/042bce1a1b0ca03.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/042bce1a1b0ca03.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/f97e2fbbe1787c5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/f97e2fbbe1787c5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/7887c4d8d1fe8c5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/7887c4d8d1fe8c5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/02e885fbf4b0f3c.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/02e885fbf4b0f3c.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/037bb5fc6cf3389.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/037bb5fc6cf3389.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/aa0a3edfb8b5a47.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/aa0a3edfb8b5a47.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/2c7ce2b7bea4e02.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/2c7ce2b7bea4e02.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/0c452598463f956.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/0c452598463f956.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/10e961b6228d627.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/10e961b6228d627.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/39602f71577fc48.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/39602f71577fc48.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/042bce1a1b0ca03.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/042bce1a1b0ca03.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/f97e2fbbe1787c5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/f97e2fbbe1787c5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/7887c4d8d1fe8c5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/7887c4d8d1fe8c5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/9cc5cc84c9d6090.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/9cc5cc84c9d6090.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/ff6d7bcc4ef22b4.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/ff6d7bcc4ef22b4.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/a481130adebdfed.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/a481130adebdfed.jpg" alt></a></p><p><strong>第四，通过统一IDE支撑一次开发，多端部署，实现跨终端生态共享。</strong></p><h5 id="鸿蒙OS凭借多终端开发IDE，多语言统一编译，分布式架构Kit提供屏幕布局控件以及交互的自动适配，支持控件拖拽，面向预览的可视化编程，从而使开发者可以基于同一工程高效构建多端自动运行App，实现真正的一次开发，多端部署，在跨设备之间实现共享生态。"><a href="#鸿蒙OS凭借多终端开发IDE，多语言统一编译，分布式架构Kit提供屏幕布局控件以及交互的自动适配，支持控件拖拽，面向预览的可视化编程，从而使开发者可以基于同一工程高效构建多端自动运行App，实现真正的一次开发，多端部署，在跨设备之间实现共享生态。" class="headerlink" title="鸿蒙OS凭借多终端开发IDE，多语言统一编译，分布式架构Kit提供屏幕布局控件以及交互的自动适配，支持控件拖拽，面向预览的可视化编程，从而使开发者可以基于同一工程高效构建多端自动运行App，实现真正的一次开发，多端部署，在跨设备之间实现共享生态。"></a>鸿蒙OS凭借多终端开发IDE，多语言统一编译，分布式架构Kit提供屏幕布局控件以及交互的自动适配，支持控件拖拽，面向预览的可视化编程，从而使开发者可以基于同一工程高效构建多端自动运行App，实现真正的一次开发，多端部署，在跨设备之间实现共享生态。</h5><p><a href="https://static.cnbetacdn.com/article/2019/0809/e6c0d84b5fd05d5.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/e6c0d84b5fd05d5.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/8f86d51780a690f.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/8f86d51780a690f.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/314f0188c7b1f16.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/314f0188c7b1f16.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/592701bf2e13602.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/592701bf2e13602.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/99afde8e0be800f.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/99afde8e0be800f.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/bbca58d91073c75.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/bbca58d91073c75.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/f364929dc284706.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/f364929dc284706.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/12dc73398ee3945.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/12dc73398ee3945.jpg" alt></a></p><p><a href="https://static.cnbetacdn.com/article/2019/0809/32a9393836a2e79.jpg" target="_blank" rel="noopener"><img src="https://static.cnbetacdn.com/thumb/article/2019/0809/32a9393836a2e79.jpg" alt></a></p><h5 id="据介绍，华为将在今年首发的智慧屏产品中率先使用鸿蒙-OS-1-0。未来三年，除完善相关技术外，鸿蒙OS会逐步应用在可穿戴、智慧屏、车机等更多智能设备中。"><a href="#据介绍，华为将在今年首发的智慧屏产品中率先使用鸿蒙-OS-1-0。未来三年，除完善相关技术外，鸿蒙OS会逐步应用在可穿戴、智慧屏、车机等更多智能设备中。" class="headerlink" title="据介绍，华为将在今年首发的智慧屏产品中率先使用鸿蒙 OS 1.0。未来三年，除完善相关技术外，鸿蒙OS会逐步应用在可穿戴、智慧屏、车机等更多智能设备中。"></a>据介绍，<a href="https://c.duomai.com/track.php?k=WP0ZSPklWdlZyN4MTPklWYmYDO5IDNy0DZp9VZ0l2cmYiRyUSbvNmLsxWYtZnL3d3dGJTJGJTJBNTJzBHd0h" target="_blank" rel="noopener">华为</a>将在今年首发的智慧屏产品中率先使用鸿蒙 OS 1.0。未来三年，除完善相关技术外，鸿蒙OS会逐步应用在可穿戴、智慧屏、车机等更多智能设备中。</h5><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.cnbeta.com/articles/tech/876919.htm" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/policx/talk/gh-pages/images/LmADop.jpg" alt="policx"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;鸿蒙&lt;/strong&gt;，中国神话传说的远古时代，传说在盘古昆仑山开天辟地之前，世界是一团混沌的元气，这种自然的元气叫做鸿蒙，因此把那个时代称作鸿蒙时代，后来此一词也常被用来泛指称远古时代。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>appleCard</title>
    <link href="https://www.policx.com/news/appleCard/"/>
    <id>https://www.policx.com/news/appleCard/</id>
    <published>2019-08-05T09:42:00.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>免年费的钛金卡，办一张来收藏也不错。</p><a id="more"></a><p><img src="https://i.loli.net/2019/08/05/bf9BtCq2kErvRGY.jpg" alt="appleCard"><br><img src="https://gitee.com/policx/im/raw/master/images/btDbRs.jpg" alt="appleCard"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;免年费的钛金卡，办一张来收藏也不错。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>善用佳软 uPic</title>
    <link href="https://www.policx.com/Software/uPic/"/>
    <id>https://www.policx.com/Software/uPic/</id>
    <published>2019-07-27T04:11:04.000Z</published>
    <updated>2019-08-15T01:17:12.453Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>对于markdown重度用户而言，一款好用的图床工具能够有效提升效率。从Windows到Mac，笔者也算是辗转用过多款图床客户端，包括iPic、PicGo等等。而自从更换新的工作环境之后，笔者对于图床客户端又有了新的需求——自定义图床。</p><a id="more"></a><p>幸好，一次机缘巧合让笔者遇到了uPic，除了支持微博、SM.MS、七牛云、腾讯云等图床之外，还可以自定义配置图床。 </p><blockquote><p>uPic下载地址：<a href="https://github.com/gee1k/uPic/releases" target="_blank" rel="noopener">https://github.com/gee1k/uPic/releases</a> </p></blockquote><p>笔者目前工作所用的编辑器，既不支持外链，也不支持图片粘贴后自动上传，一旦涉及多图文章，光上传图片就浪费不少时间。因此，笔者萌生了构建自定义图床的想法，更幸运的是，笔者公司对于图片上传服务并没有做太多的限制，也让这种想法成为可能。 </p><p>uPic是一款开源简洁的图床客户端，方便用户直接上传图片到指定的存储空间，并获取有效的markdown图片地址，其默认图床为SM.MS，当然也支持配置腾讯云、七牛云、又拍云等常见的对象存储。最关键的是支持图床自定义配置，也让我毅然抛弃了一直以来付费使用的iPic。<br><img src="https://i.loli.net/2019/07/27/5d3bd2c197d8592897.jpg" alt></p><p>其实起初并不顺利，刚上手的uPic（大概是v0.7.0版本），自定义图床配置并不适用于笔者常用的编辑器环境。好在软件开发者@svend足够热心，在了解了笔者的需求及编辑环境之后，重构了自定义图床，使得笔者的想法得以实现，包括大家在反馈群里提出的一些建议，也都及时采纳并更新。 </p><p>直到最新发布的v0.8.0版本，uPic已经成为一款非常成熟且强大的图床客户端，且安装包大小也不过才10.5M。 </p><p>好了，啰嗦了这么多，也该进入正题了。 </p><p>uPic目前仅支持Mac端，默认上传到SM.MS匿名图床，除此之外还支持微博、码云、Github以及腾讯云、阿里云、又拍云、七牛云总共八个图床。其中，由于微博近期已经陆续开启防盗链，笔者不建议在个人博客中使用。<br><img src="https://i.loli.net/2019/07/27/5d3bd288ac38618894.jpg" alt><br>在上传方式上，uPic支持本地选择/复制文件上传、截图上传，甚至可直接拖动文件到菜单栏uPic图标上完成上传动作。<br><img src="https://i.loli.net/2019/07/27/5d3bd3727bf6963617.gif" alt="640"></p><p>在最新更新v0.8.0版本之后，uPic新增支持直接从浏览器中复制或者拖动在线图片上传到指定图床，这样就不用下载到本地再进行上传。<br><img src="https://gitee.com/policx/im/raw/master/images/GoRrBa.gif" alt></p><p>不过需要注意的是，GIF动图不大一样，直接从浏览器中复制或者拖动GIF上传至uPic图床，可能最终上传的只是GIF图中一帧的画面，所以对于GIF最好还是先下载到本地，然后使用uPic上传到图床。 </p><p>在“设置——拓展——访达拓展”中勾选uPic一项，即可开启本地文件右键菜单中“使用uPic上传”的功能，也算是比较方便的一种本地文件上传方式。<br><img src="https://i.loli.net/2019/07/27/5d3bdbd03d58f62506.jpg" alt><br><img src="https://gitee.com/policx/im/raw/master/images/mOO863.jpg" alt></p><p>一旦完成上传动作，所输出的文件链接会自动复制到剪切板，直接在文档中粘贴即可，在输出链接格式上可根据需求选择URL、HTML、Markdown三种。<br><img src="https://gitee.com/policx/im/raw/master/images/Y0lYcO.jpg" alt></p><p>点击菜单栏uPic图标，还可以查看最近十条上传记录，同时可以预览上传内容缩略图，以便选择重新复制。<br><img src="https://gitee.com/policx/im/raw/master/images/Ze9ScG.jpg" alt><br>熟练使用快捷键操作，可以进一步提升使用效率。uPic支持三种上传方式的自定义快捷键。基本不用点击菜单了去选择，即可完成上传动作。<br><img src="https://gitee.com/policx/im/raw/master/images/MqUOQy.jpg" alt><br>例如，通过设定好的快捷键完成截图上传操作，按住鼠标框选所需区域，松开鼠标之后即完成截图并直接上传到图床（注意没有确认截图的过程哦～）。<br><img src="https://gitee.com/policx/im/raw/master/images/k0GikB.gif" alt><br>使用这段时间，笔者感觉uPic已经足够成为一款高效、简洁的图床客户端，支持强大的自定义图床配置，支持复制/拖动上传以及快捷键操作。不过在部分体验上iPic依然值得uPic借鉴，例如复制图片后点击菜单栏的iPic，能够比较直观地看到已复制图片及近期上传图片的预览，体验更加直观。<br><img src="https://gitee.com/policx/im/raw/master/images/dLyZLX.jpg" alt="a"><br>不得不提的是，开发者@svend虽然只利用业余时间更新维护，同样保持了较高的更新频率，发现bug或者其他不稳定的因素更是会连夜修复，并且会及时反馈用户的意见。作为一款免费的Mac图床客户端，uPic已经赢得了越来越多的用户亲睐。 </p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/WcchsHp007SswWr2qHGxTQ" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/27/5d3bcf474c70088570.jpg" alt="wechat"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于markdown重度用户而言，一款好用的图床工具能够有效提升效率。从Windows到Mac，笔者也算是辗转用过多款图床客户端，包括iPic、PicGo等等。而自从更换新的工作环境之后，笔者对于图床客户端又有了新的需求——自定义图床。&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>「拖放」Mac 的底层能力，也是效率神技</title>
    <link href="https://www.policx.com/Software/DragAndDrop/"/>
    <id>https://www.policx.com/Software/DragAndDrop/</id>
    <published>2019-07-26T14:19:21.000Z</published>
    <updated>2019-08-15T01:18:15.665Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>个人惯用 Mac 拖放，但每每身边同事看我的操作习惯，都大惊失色，感叹 Mac 还有这种操作，所以决定单独讲一篇 Mac 拖放。</p><a id="more"></a><p>Mac的拖放几乎是全局的，比如你可以将图片文件从应用拖到 Finder，同样可以将文件从 Finder 拖至应用内，甚至从应用A拖拽至应用B。</p><p>总之，基于 Finder 的文件拖拽，让系统和应用、应用和应用协同起来，大大提速。以下是一些示例。</p><blockquote><p>应用-&gt;Finder</p></blockquote><p>1.微信-&gt;Finder<br><img src="https://i.loli.net/2019/07/27/5d3c5f3ea1d9e89990.gif" alt></p><p>2.浏览器-&gt;Finder<br><img src="https://gitee.com/policx/im/raw/master/images/Xfj58J.gif" alt></p><p>出于版权安全的考虑，以及前端技术的极速革新，部分网站已不再支持将图片拖拽至 Finder，但多数网站仍然支持。</p><p>3.PDF-&gt;Finder<br><img src="https://gitee.com/policx/im/raw/master/images/wEnYQa.gif" alt="pic"></p><p>如果你只需要 PDF 20P中的1P，可以单独拖拽至Finder。</p><blockquote><p>Finder-&gt;应用</p></blockquote><p>1.Finder-&gt;微信<br><img src="https://gitee.com/policx/im/raw/master/images/H2aKxW.gif" alt="pic"></p><p>2.Finder-&gt;办公套件<br><img src="https://gitee.com/policx/im/raw/master/images/Pc9jOK.gif" alt="pic"></p><p>3.Finder-&gt;PDF<br><img src="https://gitee.com/policx/im/raw/master/images/Hi56sE.gif" alt="pic"></p><blockquote><p>应用-&gt;应用</p></blockquote><p>1.浏览器-&gt;微信<br><img src="https://gitee.com/policx/im/raw/master/images/6whkO3.gif" alt="pic"></p><p>2.微信-&gt;办公套件<br><img src="https://gitee.com/policx/im/raw/master/images/37ryoD.gif" alt="pic"></p><p>除了以上”应用-&gt;Finder，Finder-&gt;应用，应用-&gt;应用”几种拖放，Mac 还有其他很多地方支持此操作，比如文件拖拽至垃圾桶、应用拖拽至Docker、文件拖拽至 Docker 上应用图标即可打开……  </p><p>使用拖拽，还是复制粘贴，或是通过各个应用的菜单完成操作，都没什么问题，如果你知道了 MacOS 的一项新能力，不妨试试。</p><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/DPhrXF5qfPEMrEGimslh1w" target="_blank" rel="noopener"><img src="https://gitee.com/policx/im/raw/master/images/Z2gkII.png" alt="pic"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人惯用 Mac 拖放，但每每身边同事看我的操作习惯，都大惊失色，感叹 Mac 还有这种操作，所以决定单独讲一篇 Mac 拖放。&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://www.policx.com/categories/Software/"/>
    
    
      <category term="善用佳软" scheme="https://www.policx.com/tags/%E5%96%84%E7%94%A8%E4%BD%B3%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>Python导图</title>
    <link href="https://www.policx.com/program/Python/mind/"/>
    <id>https://www.policx.com/program/Python/mind/</id>
    <published>2019-07-21T06:03:24.000Z</published>
    <updated>2019-08-15T01:53:53.033Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>推荐：<strong>XMind</strong> 一个全功能的思维导图和头脑风暴软件。</p></blockquote><a id="more"></a><h2 id="Python-系列-一-核心知识"><a href="#Python-系列-一-核心知识" class="headerlink" title="Python 系列 (一)  核心知识"></a>Python 系列 (一)  核心知识</h2><p><img src="/mindImage/0%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80.png" alt><br><img src="/mindImage/2Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80.png" alt><br><img src="/mindImage/3%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%B8%80)%E6%95%B0%E5%80%BC%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88.png" alt><br><img src="/mindImage/4%E6%A0%87%E5%87%86%E7%B1%BB%E5%9E%8B%E8%A1%A5%E5%85%85.png" alt><br><img src="/mindImage/5%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%BA%8C)%E5%BA%8F%E5%88%97%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/6%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%B8%89)%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt><br><img src="/mindImage/7%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/8%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/9%E5%87%BD%E6%95%B0%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/10%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E5%87%BD%E6%95%B0.png" alt><br><img src="/mindImage/11%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/12%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/13%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/14%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/15%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/16%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt><br><img src="/mindImage/17%E6%B5%8B%E8%AF%95%E8%B0%83%E8%AF%95.png" alt></p><h2 id="Python系列-一-基础编程"><a href="#Python系列-一-基础编程" class="headerlink" title="Python系列 (一) 基础编程"></a>Python系列 (一) 基础编程</h2><p><img src="/mindImage/1Python%E7%B3%BB%E5%88%97(%E4%B8%80)%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B.png" alt><br><img src="/mindImage/2%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861.png" alt><br><img src="/mindImage/3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862.png" alt><br><img src="/mindImage/4%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt><br><img src="/mindImage/5%E5%BA%8F%E5%88%97.png" alt><br><img src="/mindImage/6%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt><br><img src="/mindImage/7%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84.png" alt><br><img src="/mindImage/8%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88.png" alt><br><img src="/mindImage/9%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt><br><img src="/mindImage/10%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1.png" alt><br><img src="/mindImage/11%E9%94%99%E8%AF%AF%EF%BC%86%E5%BC%82%E5%B8%B8.png" alt><br><img src="/mindImage/12%E5%87%BD%E6%95%B0%E4%B8%80.png" alt><br><img src="/mindImage/13%E5%87%BD%E6%95%B0%E4%BA%8C.png" alt><br><img src="/mindImage/14%E6%A8%A1%E5%9D%97.png" alt><br><img src="/mindImage/15%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.png" alt></p><h2 id="Python系列-二-常用标准库及拓展知识"><a href="#Python系列-二-常用标准库及拓展知识" class="headerlink" title="Python系列(二)常用标准库及拓展知识"></a>Python系列(二)常用标准库及拓展知识</h2><p><img src="/mindImage/0%E3%80%90%E7%9B%AE%E5%BD%95%E3%80%91Python%E7%B3%BB%E5%88%97(%E4%BA%8C)%E5%B8%B8%E7%94%A8%E6%A0%87%E5%87%86%E5%BA%93%E5%8F%8A%E6%8B%93%E5%B1%95%E7%9F%A5%E8%AF%86.png" alt><br><img src="/mindImage/1%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%BF%B0.png" alt><br><img src="/mindImage/2%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt><br><img src="/mindImage/3%E6%97%A5%E6%9C%9F&%E6%97%B6%E9%97%B4.png" alt><br><img src="/mindImage/4%E7%B3%BB%E7%BB%9F&%E6%96%87%E4%BB%B6.png" alt><br><img src="/mindImage/5%E8%BF%9B%E7%A8%8B&%E7%BA%BF%E7%A8%8B.png" alt><br><img src="/mindImage/6%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt><br><img src="/mindImage/7%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97&%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt></p><h2 id="Python应用领域和数据结构"><a href="#Python应用领域和数据结构" class="headerlink" title="Python应用领域和数据结构"></a>Python应用领域和数据结构</h2><p><a href="https://www.jianshu.com/p/66f6d9a434f9" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/21/5d3400422503e26621.jpg" alt="Python数据结构"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;推荐：&lt;strong&gt;XMind&lt;/strong&gt; 一个全功能的思维导图和头脑风暴软件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《Python札记》1_列表list</title>
    <link href="https://www.policx.com/program/Python/python3-notes01/"/>
    <id>https://www.policx.com/program/Python/python3-notes01/</id>
    <published>2019-07-18T14:55:41.000Z</published>
    <updated>2019-08-15T01:53:53.034Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="写于开始之前"><a href="#写于开始之前" class="headerlink" title="写于开始之前"></a>写于开始之前</h3><p>笔者即将开始写一个系列的《<code>Python</code>札记》。本系列的札记主要是自学<code>齐伟</code>老师《跟老齐学<code>Python</code>轻松入门》一书整理而来。书第一遍断断续续花了5个月，第二遍边看边整理，保守3个月。</p><a id="more"></a><p><strong>在此深深感谢齐伟老师带我入门<code>Python</code></strong>。<strong>工欲善其事，必先利其器</strong>，本札记的学习环境为：<code>Python3.7.2 + pycharm + jupyter notebook</code>： </p><ul><li><code>Python3</code>取代了<code>Python2</code>，成为主流</li><li>针对<code>Python</code>语言，<code>Pycharm</code>是最好的<code>IDE</code></li><li><code>Jupyter notebook</code>是利用<code>Python</code>进行机器学习的强大利器</li></ul><p><strong>本札记一定会在2个月之内完成</strong>，主要内容包含： </p><ul><li>学习笔记整理</li><li>代码实战练习</li><li>各种练习题</li><li>利用<code>Python</code>实现常用算法 <a href="https://www.jianshu.com/c/7287d92c5db4" target="_blank" rel="noopener">机器学习_Python算法</a></li></ul><p><strong>希望对<code>Python</code>感兴趣的朋友有所帮助，自己也在努力学习中，将来主要方向是：<code>机器学习+数据挖掘+量化投资</code></strong></p><h4 id="良好的开始是成功的一半！Let-s-go-go-go"><a href="#良好的开始是成功的一半！Let-s-go-go-go" class="headerlink" title="良好的开始是成功的一半！Let`s go go go!!!"></a>良好的开始是成功的一半！Let`s go go go!!!</h4><hr><blockquote><p>列表是<code>Python</code>中使用非常广泛的一种对象，用方括号<code>[ ]</code>来表示。括号里面可以是数字，字符串或者<code>True</code>，<code>False</code>的布尔值，或者是多种不同类型的对象，里面也可以嵌套列表。如果列表是空的，用<code>bool()</code>来进行判断，会返回 <code>False</code>。 </p></blockquote><hr><h3 id="一、索引、切片、反转"><a href="#一、索引、切片、反转" class="headerlink" title="一、索引、切片、反转"></a>一、索引、切片、反转</h3><p>列表和字符串一样，都是序列，里面的元素是有序的，也有索引和切片。索引<code>index</code>左边从<code>0</code>开始，右边从<code>-1</code>开始，<code>index()</code>函数可以查看某个元素的索引编号。 </p><p><strong>索引</strong></p><ul><li>左边0开始，右边-1开始</li><li>通过<code>index()</code>函数查看索引编号</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># lang = ['python', 'java', 'html']</span></span><br><span class="line"><span class="hljs-comment"># lang.index('python')</span></span><br><span class="line"><span class="hljs-number">0</span>  <span class="hljs-comment"># 索引从0开始</span></span><br><span class="line"><span class="hljs-comment"># lang.index('html')</span></span><br><span class="line"><span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><p><strong>切片</strong></p><ul><li>索引左边从0开始，右边-1开始</li><li>含头不含尾</li><li>步长可正可负</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">print(lst[:])     <span class="hljs-comment">#  相当于是复制 lst</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">print(lst[::<span class="hljs-number">2</span>])  <span class="hljs-comment">#  步长是2    [开始:结束:步长]</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(lst[<span class="hljs-number">-3</span>:<span class="hljs-number">-1</span>])</span><br><span class="line"></span><br><span class="line">lst = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]</span><br><span class="line">print(lst[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])     <span class="hljs-comment"># 常规用法</span></span><br><span class="line">print(lst[<span class="hljs-number">-5</span>:<span class="hljs-number">-2</span>:<span class="hljs-number">2</span>])   <span class="hljs-comment"># 标号-5代表的是元素2，标号-2代表的是5，步长为2</span></span><br><span class="line">print(lst[<span class="hljs-number">-5</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>])</span><br><span class="line">print(lst[<span class="hljs-number">1</span>:<span class="hljs-number">-2</span>:<span class="hljs-number">2</span>])</span><br><span class="line">[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]</span><br></pre></td></tr></table></figure><p><strong>反转</strong></p><ul><li>通过步长-1进行反转，[::-1]</li><li>通过<code>reversed()</code>进行反转，得到的是<strong>可迭代对象</strong>，并且将迭代对象转为为<code>列表显示</code></li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 反转1</span></span><br><span class="line">print(lst[::<span class="hljs-number">-1</span>])  <span class="hljs-comment"># 通过步长为-1进行反转</span></span><br><span class="line">print(lst)   <span class="hljs-comment"># 不影响原来对象</span></span><br><span class="line">[<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 反转2</span></span><br><span class="line">print(list(reversed(lst)))  <span class="hljs-comment"># 通过reversed函数进行反转</span></span><br><span class="line">[<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">print(list(reversed(<span class="hljs-string">'abcde'</span>)))    <span class="hljs-comment"># 对字符串进行反转，列表显示</span></span><br><span class="line">[<span class="hljs-string">'e'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'a'</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="二、操作列表"><a href="#二、操作列表" class="headerlink" title="二、操作列表"></a>二、操作列表</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>len()：求长度</li><li>+：连接两个序列</li><li>*：复制序列</li><li>in：判断元素是否在列表中</li><li>max()、min()：按照元素的字典顺序进行排序</li></ul><p><strong>1、修改元素</strong></p><blockquote><p><strong>列表</strong>中的元素可以进行<strong>修改</strong>，但是字符串中的不能进行修改。列表中修改的时候，直接通过索引号进行指定： </p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst[<span class="hljs-number">2</span>] = <span class="hljs-number">7</span>   <span class="hljs-comment"># 指定第三个元素为7</span></span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br></pre></td></tr></table></figure><p><strong>2、增加元素</strong><br>追加元素的方法有两种，都是追加在<strong>末尾</strong></p><ul><li>append()函数进行追加</li><li>切片的方式进行追加：a[len(a):] = [ x ]</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst.append(<span class="hljs-number">8</span>)  </span><br><span class="line">lst[len(lst):] = [<span class="hljs-number">8</span>]</span><br><span class="line">print(lst)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]   <span class="hljs-comment"># 例子承接上面，第三个元素为7，不是3</span></span><br></pre></td></tr></table></figure><p><strong>3、列表函数</strong></p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>append</td><td>将单个元素追加到列表的<strong>最右边</strong>，即末尾部分；<strong>list[len(list):] = [x]</strong>，x是待追加的元素；  <strong>没有返回值None</strong></td></tr><tr><td>extend</td><td>将<strong>两个列表进行合并</strong>，扩充列表的作用；  参数必须是<strong>可迭代对象</strong>；  <strong>list[len(list):] = L</strong>，L是待并入的列表；  完成追加过程，列表L不变，list发生变化；  <strong>没有返回值None</strong></td></tr><tr><td>insert</td><td>指定位置添加元素  格式：list.insert(i,x)，i是插入的位置，x是待追加元素 ；  i如果是0，相当于是插在首位；i如果是len(list)，相当于是插在最后面，则等价于append()函数</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># extend()函数</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</span><br><span class="line">print(id(lst))   <span class="hljs-comment"># 查看lst的内存地址</span></span><br><span class="line">lst1 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line">lst.extend(lst1)</span><br><span class="line">print(id(lst))   <span class="hljs-comment"># 查看追加列表之后的内存地址，与原来系相同的</span></span><br><span class="line">print(<span class="hljs-string">"lst:"</span>, lst)</span><br><span class="line">print(<span class="hljs-string">"lst1:"</span>, lst1)</span><br><span class="line"></span><br><span class="line"><span class="hljs-number">2435334264968</span></span><br><span class="line"><span class="hljs-number">2435334264968</span></span><br><span class="line">lst: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line">lst1: [<span class="hljs-string">'python'</span>, <span class="hljs-string">'java'</span>, <span class="hljs-string">'html'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># append与extend区别</span></span><br><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst2 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]</span><br><span class="line">lst1.append(lst2)</span><br><span class="line">print(lst1)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]]   <span class="hljs-comment"># 整建制，将lst2当做一个整体</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst2 = [<span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]</span><br><span class="line">lst1.extend(lst2)</span><br><span class="line">print(lst1)</span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'java'</span>]   <span class="hljs-comment"># 个体化，将lst2的每个元素进行追加</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li>列表是可以进行<strong>修改</strong>的，原地修改</li><li>append是将一个元素加到列表的末尾，<strong>整建制追加</strong></li><li>extend将两个列表进行合并，<strong>个体化扩编</strong></li><li>extend方法执行之后，<strong>内存中id不变</strong>，只是在该id上的内容发生了变化</li><li>insert()函数中的i如果超过最大索引值，则自动追加到末尾，相当于是append()函数的作用</li><li>三种方法均是原地修改，无返回值</li></ul><hr><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>count</td><td>查看元素重复出现的次数  <strong>如果不存在，返回0</strong>，而不是报错</td></tr><tr><td>index</td><td>查看索引编号，不存在则报错  检索的是元素<strong>第一次</strong>出现的位置</td></tr><tr><td>remove</td><td>删除元素，原地修改，无返回值；  list.remove(x)：如果x不存在，则会报错；  如果x出现多次，<strong>删除第一个x，剩下不变</strong></td></tr><tr><td>pop</td><td>pop([i]):参数是可选的；  为空，<strong>默认删除最后一个</strong>，并且将该元素作为返回值；  如果不为空，<strong>可删除索引为i的元素</strong>，并且将该元素作为返回值</td></tr><tr><td>reverse</td><td>原地反转，没有生成新的列表，没有返回值</td></tr><tr><td>reversed</td><td>类似reverse，区别：生成的列表能够<strong>用于迭代</strong></td></tr></tbody></table><p><strong>remove和pop的区别</strong></p><ul><li>remove 没有返回值，pop有返回值</li><li>remove的参数是元素，pop的参数是索引</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">lst1.remove(<span class="hljs-number">2</span>)</span><br><span class="line">print(lst1)</span><br><span class="line"><span class="hljs-comment"># lst1.remove(7)</span></span><br><span class="line"><span class="hljs-comment"># print(lst1)   ValueError: list.remove(x): x not in list</span></span><br><span class="line">lst1.pop(<span class="hljs-number">2</span>)</span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]   <span class="hljs-comment"># 将元素2删除掉</span></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]      <span class="hljs-comment">#  将索引为2的元素3删除掉，本步骤是接在上面的执行，即在列表[1, 3, 4, 5, 6] 中删除4</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关于反转</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</span><br><span class="line">print(lst[::<span class="hljs-number">-1</span>])   <span class="hljs-comment"># 反转实现1</span></span><br><span class="line">print(lst)          <span class="hljs-comment"># 原来的列表对象不改变</span></span><br><span class="line">lst.reverse()    <span class="hljs-comment"># 反转实现2</span></span><br><span class="line">print(lst)          <span class="hljs-comment"># 原来的列表变成反转之后的新列表</span></span><br><span class="line">lst1= reversed(lst)</span><br><span class="line">print(lst1)       <span class="hljs-comment"># lst1是一个列表反转迭代器对象：&lt;list_reverseiterator object at 0x00000233C677F320&gt;</span></span><br><span class="line">print(list(lst1))    <span class="hljs-comment"># 用list函数显示lst1的内容</span></span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>sort</td><td>排序函数，用于<code>列表list</code>中，<strong>原地修改没有返回值</strong>；  <strong>默认从小到大</strong>；将<strong>reverse=True</strong>则变成从大到小排序sort(self, /, *, key=None, reverse=False)</td></tr><tr><td>sorted</td><td>对<code>所有可迭代对象</code>进行操作，返回一个新的 <code>list</code>，不是在原来的list上进行操作  sorted(iterable[, cmp[, key[, reverse]]])</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># sort()</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst.sort()</span><br><span class="line">print(lst)</span><br><span class="line">lst1 = [<span class="hljs-string">'python'</span>, ‘Java’, <span class="hljs-string">'html'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'php'</span>]</span><br><span class="line">lst1.sort(key=len)  <span class="hljs-comment"># 列表中的字符串进行排序；如果长度相同，则按照出现的先后顺序</span></span><br><span class="line">print(lst1)</span><br><span class="line"></span><br><span class="line">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]</span><br><span class="line">[<span class="hljs-string">'c'</span>, <span class="hljs-string">'php'</span>, <span class="hljs-string">'Java'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'python'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># sorted()</span></span><br><span class="line">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]</span><br><span class="line">lst1 = sorted(lst)</span><br><span class="line">print(lst)  <span class="hljs-comment"># 原对象不变</span></span><br><span class="line">print(lst1) <span class="hljs-comment"># 新列表为排序后的对象</span></span><br><span class="line"></span><br><span class="line">lst2 =[(<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>),(<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>),(<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>),(<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>)]</span><br><span class="line">lst3 = sorted(lst2, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])   <span class="hljs-comment"># 由元组构成的复合列表，按照元组的第二个元素进行排序，通过匿名函数lamba()</span></span><br><span class="line">print(lst3)</span><br><span class="line">[(<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>)]</span><br><span class="line"></span><br><span class="line">lst4 = sorted(lst2, key=<span class="hljs-keyword">lambda</span> x: len(x[<span class="hljs-number">0</span>]))   <span class="hljs-comment"># 通过元组中第一个元素的长度进行排序</span></span><br><span class="line">print(lst4)</span><br><span class="line">[(<span class="hljs-string">'c'</span>, <span class="hljs-string">'D'</span>), (<span class="hljs-string">'php'</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'java'</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'python'</span>, <span class="hljs-string">'A'</span>)]</span><br></pre></td></tr></table></figure><h4 id="自定义类中的元素进行排序"><a href="#自定义类中的元素进行排序" class="headerlink" title="自定义类中的元素进行排序"></a>自定义类中的元素进行排序</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, age, grade)</span>:</span></span><br><span class="line">        self.name =  name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.grade = grade</span><br><span class="line">        </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span>  repr((self.name, self.grade, self.age))</span><br><span class="line">    </span><br><span class="line">students_objects = [</span><br><span class="line">    Student(<span class="hljs-string">'Tom'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-number">12</span>),</span><br><span class="line">    Student(<span class="hljs-string">'xiaoming'</span>,<span class="hljs-string">'A'</span>,<span class="hljs-number">17</span>),</span><br><span class="line">    Student(<span class="hljs-string">'xiaohong'</span>, <span class="hljs-string">'C'</span>, <span class="hljs-number">12</span>),</span><br><span class="line">    Student(<span class="hljs-string">'Peter'</span>, <span class="hljs-string">'D'</span>, <span class="hljs-number">8</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">lst5 = sorted(students_objects, key=<span class="hljs-keyword">lambda</span> t:t.age)   <span class="hljs-comment"># 自定义类中，按照年龄进行排序</span></span><br><span class="line">print(lst5)</span><br><span class="line">lst6 = sorted(students_objects, key=<span class="hljs-keyword">lambda</span> t:(t.age, t.grade))   <span class="hljs-comment"># 使用元组，先根据年龄排序，若年龄相同按照grade排序</span></span><br><span class="line">print(lst6)</span><br><span class="line"></span><br><span class="line">[(<span class="hljs-string">'xiaoming'</span>, <span class="hljs-number">17</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'Tom'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'xiaohong'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'Peter'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'D'</span>)]</span><br><span class="line">[(<span class="hljs-string">'xiaoming'</span>, <span class="hljs-number">17</span>, <span class="hljs-string">'A'</span>), (<span class="hljs-string">'Tom'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'B'</span>), (<span class="hljs-string">'xiaohong'</span>, <span class="hljs-number">12</span>, <span class="hljs-string">'C'</span>), (<span class="hljs-string">'Peter'</span>, <span class="hljs-number">8</span>, <span class="hljs-string">'D'</span>)]</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://www.jianshu.com/c/ab55c73e0037?utm_source=desktop&utm_medium=notes-included-collection" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/20/5d32f16d5b0bf92604.jpg" alt></a></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写于开始之前&quot;&gt;&lt;a href=&quot;#写于开始之前&quot; class=&quot;headerlink&quot; title=&quot;写于开始之前&quot;&gt;&lt;/a&gt;写于开始之前&lt;/h3&gt;&lt;p&gt;笔者即将开始写一个系列的《&lt;code&gt;Python&lt;/code&gt;札记》。本系列的札记主要是自学&lt;code&gt;齐伟&lt;/code&gt;老师《跟老齐学&lt;code&gt;Python&lt;/code&gt;轻松入门》一书整理而来。书第一遍断断续续花了5个月，第二遍边看边整理，保守3个月。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>超时空从犯</title>
    <link href="https://www.policx.com/label/Accomplice/"/>
    <id>https://www.policx.com/label/Accomplice/</id>
    <published>2019-07-18T02:18:06.000Z</published>
    <updated>2019-08-15T01:26:29.762Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><input checked disabled type="checkbox"> 你回头看了我一眼</li></ul><a id="more"></a><ul><li><input disabled type="checkbox"> 我觉得那很久很久</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;input checked disabled type=&quot;checkbox&quot;&gt; 你回头看了我一眼&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="label" scheme="https://www.policx.com/categories/label/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter的环境配置 for Mac</title>
    <link href="https://www.policx.com/program/flutter/"/>
    <id>https://www.policx.com/program/flutter/</id>
    <published>2019-07-16T10:14:18.000Z</published>
    <updated>2019-08-15T01:53:53.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 </p><a id="more"></a><h2 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装Flutter</h2><p>首先我们可以在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fdocs%2Fget-started%2Finstall" target="_blank" rel="noopener">Flutter官网</a>上面看到一些配置环境的步骤。这里就直接开干了，走起。 </p><h3 id="1、配置HomeBrew"><a href="#1、配置HomeBrew" class="headerlink" title="1、配置HomeBrew"></a>1、配置HomeBrew</h3><p>我们在去配置Flutter的环境之前，需要先检查一下HomeBrew是不是最新的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br></pre></td></tr></table></figure><p>如果没有brew的话，可以去<a href="https://link.juejin.im?target=https%3A%2F%2Fbrew.sh%2F" target="_blank" rel="noopener">HomeBrew官网</a>自行下载。这里就不赘述了，这里如果重新下载的话，看到下面的打印信息就说明下载完毕了。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3aad595f24923.jpg" alt></p><h3 id="2、下载SDK"><a href="#2、下载SDK" class="headerlink" title="2、下载SDK"></a>2、下载SDK</h3><p>接下来就是去官网下载SDK了。注意，这里下载SDK有两种方法：</p><ul><li>一是直接<code>git clone -b beta https://github.com/flutter/flutter.git</code>下载</li><li>二是自己在官网下载下来，如下图<br><img src="https://i.loli.net/2019/07/16/5d2db40e0aecc50465.jpg" alt></li></ul><p>这里我两种方法都试过了一遍，第一种方法实在是太慢了，在经历了耗费一个半小时下载到94%，最后提示失败了的过程之后，我决定还是用第二种方法，整个过程只用了3分钟的样子，相当满意。下载完之后，是一个名字叫<code>flutter_macos_v1.5.4-hotfix.2-stable.zip</code>的压缩包。 然后我们解压这个zip包，把解压出来的<strong>flutter</strong>文件放到根目录下即可。 </p><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p>因为Flutter的SDK中包含了很多的命令行工具。我们就需要配置环境变量，所以我直接就安装到了根目录下了。</p><p><strong>配置镜像</strong></p><p>因为Flutter在运行的时候，就需要去官网下载一些需要的资源，但是因为天国特色的wall的原因，我们就需要镜像服务器，这个在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fcommunity%2Fchina" target="_blank" rel="noopener">官网</a>上面有写的很明白，而且这是一个临时的镜像，后面还要以官网的镜像地址为准。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3f2c1f4f64480.jpg" alt></p><p>我们跳转到根目录 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>就能找到这个<code>.bash_profile</code>隐藏文件，我们用vim打开这个文件 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后需要输入就把A键按一下进入编辑模式，把下面三个环境变量配置进去 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line">export PATH=/Users/xueliheng/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>注意下，第三个环境变量这里<code>/Users/xueliheng/</code>是我的根目录，然后<code>/flutter/</code>是我们刚刚解压的的zip包里面的<code>flutter</code>文件夹。上面两个环境变量是两个镜像地址，上文中也有说过。 接着<code>shift+：</code>然后输入<code>wq</code>保存并退出vim。输入如下命令： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>最后我们就可以验证一下flutter环境有没有配置成功了。输入： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure><p>看到如下如的打印信息就是配置成功了<br><img src="https://i.loli.net/2019/07/16/5d2db44407fa682753.jpg" alt></p><h3 id="4、配置Android-Studio"><a href="#4、配置Android-Studio" class="headerlink" title="4、配置Android Studio"></a>4、配置Android Studio</h3><p>如果没有下载<strong>Android Studio</strong>的话，就去<a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.android.google.cn%2Fstudio" target="_blank" rel="noopener">官网</a>去下载一下。 我们用<code>flutter doctor</code>命令去检查一下flutter的环境配置，我们可以看到如下打印 </p><p><img src="https://i.loli.net/2019/07/16/5d2db4676ec3a36838.jpg" alt></p><p>这里的每个<code>✗</code>都是我们要去解决的问题。不过他有告诉你应该怎么做。比如第一个提示： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices</span><br><span class="line">    ✗ Unable to locate Android SDK.</span><br></pre></td></tr></table></figure><p>这就是让你去下载Android Studio。我们在下载完成之后，打开AS让他去下载一些应该下载的东西。 如果这里有提示你 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices (Android SDK version 24.0.2)</span><br><span class="line">    ✗ Flutter requires Android SDK 28 and the Android BuildTools 28.0.3</span><br></pre></td></tr></table></figure><p>这就是在提示让你去升级一下SDK，然后命令如下 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;/Users/xueliheng/Library/Android/sdk/tools/bin/sdkmanager&quot; &quot;platforms;android-28&quot; &quot;build-tools;28.0.3&quot;</span><br></pre></td></tr></table></figure><p>注意一下，这个地方的升级是需要”科学上网“的，如果有的小伙伴没有这个条件的话，我这边百度云上面给大家准备了一个<a href="https://link.juejin.im?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F10yp8PuRXxk7YvcNR_dTy8Q" target="_blank" rel="noopener">链接</a>，提取码: e48c，大家可以下载下来。下载下来之后解压到<code>/Users/Library/Android/</code>这个文件夹。把原先的SDK直接覆盖就行了，就已经是最新的SDK了。 </p><p>接下来我们配置一下安卓的环境变量，还是在根目录下找到<code>.bash_profile</code>文件，并在其中添加四个环境变量 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=~/Library/Android/sdk</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/emulator</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br></pre></td></tr></table></figure><p>分别是： </p><ul><li>安卓sdk的路径</li><li>安卓的模拟器路径</li><li>安卓tools路径</li><li>安卓平台工具</li></ul><p>接下来我们再用<code>flutter doctor</code>检查的时候，显示的信息如下图<br><img src="https://i.loli.net/2019/07/16/5d2db4964a70b73490.jpg" alt></p><p>意思就是让我们去下载iOS的相关环境，我们先暂时放放，下面还有一个关于<strong>Android Studio</strong>的没有解决完</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">✗ Dart plugin not installed; this adds Dart specific functionality.</span><br></pre></td></tr></table></figure><p>这个就是缺少Flutter插件的意思，那么我们就去AS里面去配置一下好了。打开AS的<code>Preferences</code>，点击<code>Plugins</code>，在搜索栏中输入<code>flutter</code>，找到相应的插件，然后<code>Install</code>。当跳出安装Dart插件的提示界面时，记得点击Yes进行安装。安装完毕之后<code>restart IDE</code>重启AS。 重启之后就能看到多了一个这个东西<br><img src="https://i.loli.net/2019/07/16/5d2db4b731cbd14001.jpg" alt></p><p>我们再用<code>flutter doctor</code>检测一下<br><img src="https://i.loli.net/2019/07/16/5d2db4cdc6dd137908.jpg" alt></p><p>现在终于ok了。我们看到<code>[✓]Android Studio</code>说明，安卓的环境基本上配置成功，接下来我们就配置一下安卓的模拟器就好了。 </p><h3 id="5、安卓模拟器配置"><a href="#5、安卓模拟器配置" class="headerlink" title="5、安卓模拟器配置"></a>5、安卓模拟器配置</h3><p>在AS中找到模拟器配置如下图并选择<br><img src="https://i.loli.net/2019/07/16/5d2db4dacfde455330.jpg" alt></p><p>接着就创建设备，选择设备<br><img src="https://i.loli.net/2019/07/16/5d2db4e68a2ed68879.jpg" alt></p><p>选择系统<br><img src="https://i.loli.net/2019/07/16/5d2db4f6cdc5889902.jpg" alt></p><p>最后点击下载就完成了。 </p><h3 id="6、配置iOS环境"><a href="#6、配置iOS环境" class="headerlink" title="6、配置iOS环境"></a>6、配置iOS环境</h3><p>我们配置完了安卓的环境，再来<code>flutter doctor</code>检测一下。<br><img src="https://i.loli.net/2019/07/16/5d2db50ad75eb82331.jpg" alt></p><p>情况是这样的。目前1.5.4版本的Flutter需要匹配新版本的Xcode10.2.1。按照他提示的来试试，提示我Xcode版本太低了，需要升级Xcode<br><img src="https://i.loli.net/2019/07/16/5d2db5275c8f825074.jpg" alt></p><p>更新到最新的之后，继续走下面的步骤依旧会报错。那么我们可以试试下面的这个办法： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew link pkg-config</span><br><span class="line">$ brew install --HEAD usbmuxd</span><br><span class="line">$ brew unlink usbmuxd</span><br><span class="line">$ brew link usbmuxd</span><br><span class="line">$ brew install --HEAD libimobiledevice</span><br><span class="line">$ brew install ideviceinstaller</span><br></pre></td></tr></table></figure><p>这些执行完之后执行一下<code>flutter doctor</code><br><img src="https://i.loli.net/2019/07/16/5d2db5515858b19228.jpg" alt></p><p>最后还真是没错，全部配置完成了！那么我们就把iOS的也配置完毕了。</p><h3 id="7、VSCode的使用"><a href="#7、VSCode的使用" class="headerlink" title="7、VSCode的使用"></a>7、VSCode的使用</h3><p>VSCode上面使用的话，就简单多了，这里我就简答的赘述一下。 只需要将<code>Dart</code>和<code>Flutter</code>插件都下载下来<br><img src="https://i.loli.net/2019/07/16/5d2db5643b08597602.jpg" alt></p><p>然后<code>command+shift+p</code>输入<code>flutter</code>，选择<code>Flutter：New Project</code><br><img src="https://i.loli.net/2019/07/16/5d2db576e145096766.jpg" alt></p><p>输入要创建的项目的名称和存放项目的地址。如果提示需要指明flutter的SDK的路径，那就选择根目录那个经过解压得来的flutter的文件夹就好了。 接下来是这样一个界面<br><img src="https://i.loli.net/2019/07/16/5d2db588f1b5152482.jpg" alt></p><p>接下来我们选择<code>View-&gt;Start Debugging</code>来运行项目。<br><img src="https://i.loli.net/2019/07/16/5d2db59bb3b3338193.jpg" alt></p><p>当然这个过程需要你把Xcode的模拟器打开。运行完之后就能看到这个界面，也就是你的第一个Flutter工程啦！<br><img src="https://i.loli.net/2019/07/16/5d2db5ad5eaf434960.jpg" alt></p><h3 id="8、Hot-reload的使用"><a href="#8、Hot-reload的使用" class="headerlink" title="8、Hot reload的使用"></a>8、Hot reload的使用</h3><p>我们打开<code>lib/main.dart</code>文件，然后在其中找到 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have pushed the button this many times:</span><br></pre></td></tr></table></figure><p>并把这个改为 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have clicked the button this many times:</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2db5cc5b4f279074.jpg" alt><br>那么我们就能看到界面上多了一个小闪电<br><img src="https://i.loli.net/2019/07/16/5d2db5f044c0553935.jpg" alt></p><p>我们现在如果<code>command+s</code>保存一下更改的话，就能很快的在模拟器上面看到相应的更改，不需要再重新去编译一边。这一点简直是太棒了！解决了iOS开发者一个大痛点啊！！！ </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，flutter的环境搭建工作基本上就进行完毕了，整个过程大概耗时接近2个小时，这期间包括采坑、查资料、下载、科学上网…等等很蛋疼的事情。当然网速基本上是最大的障碍，浪费了很多的时间。所以也是需要一定的耐心来完成的。 后面的文章也会持续的更新，最近有点懈怠，OpenGL系列的文章有点拖更的节奏，这个后面会补起来。Flutter我也才刚刚接手，也是慢慢的来采坑，也会以此来记录自己的学习经历，也希望能多多跟大家交流。 再次我附上自己的邮箱<code>coderspr1nghall@gmail.com</code>欢迎讨论交流。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://juejin.im/post/5d0508d56fb9a07ec373eb9e" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2dbb03b8ef977558.jpg" alt></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 &lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://www.policx.com/program/Python/spider/"/>
    <id>https://www.policx.com/program/Python/spider/</id>
    <published>2019-07-15T02:06:04.000Z</published>
    <updated>2019-08-15T01:53:53.034Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。</p><a id="more"></a><p>其实爬虫这个概念很简单，基本可以分成以下几个步骤：</p><ul><li><p>发起网络请求</p></li><li><p>获取网页</p></li><li><p>解析网页获取数据</p></li></ul><p>发起网络请求这个步骤常用的类库有标准库urllib以及Python上常用的requests库。解析网页常用的类库有的BeautifulSoup。另外requests的作者还开发了另一个很好用的库requests-html，提供了发起请求和解析网页的二合一功能，开发小型爬虫非常方便。另外还有一些专业的爬虫类库，其中比较出名的就是scrapy。本文将会简单介绍一下这些类库，之后还会专门写一篇文章介绍scrapy的用法。</p><h2 id="标准库urllib"><a href="#标准库urllib" class="headerlink" title="标准库urllib"></a><strong>标准库urllib</strong></h2><p>首先先来看标准库urllib。标准库的优点是Python自带的，不需要安装任何第三方库，缺点就是urllib属于偏底层的库，使用起来比较麻烦。下面是urllib发起请求的一个简单例子，大家看看就好。可以看到为了发起一个简单的请求，我们需要创建opener、request、ProxyHandler等好几个对象，比较麻烦。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> urllib.request <span class="hljs-keyword">as</span> request</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="hljs-string">'https'</span>: <span class="hljs-string">'https://127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="hljs-string">'http'</span>: <span class="hljs-string">'http://127.0.0.1:1080'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'--------------使用urllib--------------'</span>)</span><br><span class="line">url = <span class="hljs-string">'http://www.google.com'</span></span><br><span class="line">opener = request.build_opener(request.ProxyHandler(proxies))</span><br><span class="line">request.install_opener(opener)</span><br><span class="line">req = request.Request(url, headers=headers)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a><strong>requests</strong></h2><p>requests是Kenneth Reitz大神的著名作品之一，优点就是极度简单和好用。首先来安装requests。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>下面是一个简单的例子，和上面urllib示例代码实现的功能相同，但是代码量少多了，也更易读。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="hljs-string">'--------------使用requests--------------'</span>)</span><br><span class="line">response = requests.get(<span class="hljs-string">'https://www.google.com'</span>, headers=headers, proxies=proxies)</span><br><span class="line">response.encoding = <span class="hljs-string">'utf8'</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>requests还可以方便的发送表单数据，模拟用户登录。返回的Response对象还包含了状态码、header、raw、cookies等很多有用的信息。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="hljs-string">'name'</span>: <span class="hljs-string">'yitian'</span>,</span><br><span class="line">    <span class="hljs-string">'age'</span>: <span class="hljs-number">22</span>,</span><br><span class="line">    <span class="hljs-string">'friends'</span>: [<span class="hljs-string">'zhang3'</span>, <span class="hljs-string">'li4'</span>]</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="hljs-string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">pprint(response.__dict__)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>关于requests我就不多做介绍了，因为它有中文文档，虽然比官方落后几个小版本号，不过无伤大雅，大家可以放心参阅。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://cn.python-requests.org/zh_CN/latest/</span><br></pre></td></tr></table></figure><h2 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a><strong>beautifulsoup</strong></h2><p>利用前面介绍的requests类库，我们可以轻易地获取HTML代码，但是为了从HTML中找到所需的数据，我们还需要HTML/XML解析库，BeautifulSoup就是这么一个常用的库。首先先来安装它：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>这次就用我简书主页作为例子，爬取一下我简书的文章列表。首先先用requests获取到网页内容。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"><span class="hljs-keyword">import</span> bs4</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><p>然后就是BeautifulSoup的代码了。在使用BeautifulSoup的时候首先需要创建一个HTML树，然后从树中查找节点。BeautifulSoup主要有两种查找节点的办法，第一种是使用find和find_all方法，第二种方法是使用select方法用css选择器。拿到节点之后，用contents去获取它的子节点，如果子节点是文本，就会拿到文本值，注意这个属性返回的是列表，所以要加[0]。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html = bs4.BeautifulSoup(response.text, features=<span class="hljs-string">'lxml'</span>)</span><br><span class="line">note_list = html.find_all(<span class="hljs-string">'ul'</span>, class_=<span class="hljs-string">'note-list'</span>, limit=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.select(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.contents[<span class="hljs-number">0</span>]</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>BeautifulSoup也有中文文档，同样也是稍微落后两个小版本，影响不大。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</span><br></pre></td></tr></table></figure><h2 id="requests-html"><a href="#requests-html" class="headerlink" title="requests-html"></a><strong>requests-html</strong></h2><p>这个类库是requests的兄弟，同样也是Kenneth Reitz大神的作品。它将请求网页和解析网页结合到了一起。本来如果你用requests的话只能请求网页，为了解析网页还得使用BeautifulSoup这样的解析库。现在只需要requests-html一个库就可以办到。<br>首先先来安装。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests-html</span><br></pre></td></tr></table></figure><p>然后我们来看看用requests-html如何重写上面这个例子。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line">note_list = r.html.find(<span class="hljs-string">'ul.note-list'</span>, first=<span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.find(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html除了可以使用css选择器来搜索以外，还可以使用xpath来查找。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html还有一个很有用的特性就是浏览器渲染。有些网页是异步加载的，直接用爬虫去爬只能得到一个空页面，因为数据是靠浏览器运行JS脚本异步加载的，这时候就需要浏览器渲染了。而浏览器渲染用requests-html做非常简单，只要多调用一个render函数即可。render函数有两个参数，分别指定页面下滑次数和暂停时间。render函数第一次运行的时候，requests-html会下载一个chromium浏览器，然后用它渲染页面。<br>简书的个人文章页面也是一个异步加载的例子，默认只会显示最近几篇文章，通过浏览器渲染模拟页面下滑，我们可以得到所有文章列表。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line"><span class="hljs-comment"># render函数指示requests-html用chromium浏览器渲染页面</span></span><br><span class="line">r.html.render(scrolldown=<span class="hljs-number">50</span>, sleep=<span class="hljs-number">0.2</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>类似的，今日头条的个人页面也是异步加载的，所以也得调用render函数。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">        <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(<span class="hljs-string">'https://www.toutiao.com/c/user/6662330738/#mid=1620400303194116'</span>, headers=headers)</span><br><span class="line">r.html.render()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r.html.find(<span class="hljs-string">'div.rbox-inner a'</span>):</span><br><span class="line">    title = i.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.toutiao.com<span class="hljs-subst">&#123;i.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》 <span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>最后是requests-html的官网地址以及中文文档。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://html.python-requests.org/</span><br><span class="line">https://cncert.github.io/requests-html-doc-cn/</span><br></pre></td></tr></table></figure><h2 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a><strong>scrapy</strong></h2><p>以上介绍的几个框架都是各自有各自的作用，把它们结合起来可以达到编写爬虫的目的，但是要说专业的爬虫框架，还是得谈谈scrapy。作为一个著名的爬虫框架，scrapy将爬虫模型框架化和模块化，利用scrapy，我们可以迅速生成功能强大的爬虫。<br>不过scrapy概念众多，要仔细说还得专门开篇文章，这里就只简单演示一下。首先安装scrapy，如果是Windows系统，还需要安装pypiwin32。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy  </span><br><span class="line">pip install pypiwin32</span><br></pre></td></tr></table></figure><p>然后创建scrapy项目并添加一个新爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject myproject</span><br><span class="line">cd myproject</span><br><span class="line">scrapy genspider my jianshu.com</span><br></pre></td></tr></table></figure><p>打开配置文件settings.py，设置用户代理，否则会遇到403错误。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br></pre></td></tr></table></figure><p>然后修改一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JianshuSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="hljs-string">'jianshu'</span></span><br><span class="line">    allowed_domains = [<span class="hljs-string">'jianshu.com'</span>]</span><br><span class="line">    start_urls = [<span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">'div.content'</span>):</span><br><span class="line">            <span class="hljs-keyword">yield</span> &#123;</span><br><span class="line">                <span class="hljs-string">'title'</span>: article.css(<span class="hljs-string">'a.title::text'</span>).get(),</span><br><span class="line">                <span class="hljs-string">'link'</span>: <span class="hljs-string">'https://www.jianshu.com'</span> + article.xpath(<span class="hljs-string">'a[@class="title"]/@href'</span>).get()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>最后运行一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl my</span><br></pre></td></tr></table></figure><br><table><thead><tr><th>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1563247765&ver=1731&signature=gm2iTUKE3itOZzvlz9SUtKCYNv*PqEYt2C7ReV7kd47e2ZAWPvG5GRXZUJsiRIde34Uh5FznBslw4hHhXmHQXyV3yz0tTdgds1RMCdai6Oyy98w2-iTBRWeJlpm3cWa8&new=1" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2d4c5ba835e96705.jpg" alt="Python"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>DDoS（分布式拒绝服务）攻击是无解的吗？</title>
    <link href="https://www.policx.com/news/ddos/"/>
    <id>https://www.policx.com/news/ddos/</id>
    <published>2019-07-14T07:26:43.000Z</published>
    <updated>2019-08-15T01:24:56.404Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>“</strong></p><p>DDOS？ </p><p>一言难尽啊！ </p><p>”</p><a id="more"></a><p>先说结论，DDoS是近年来网络攻击中的一棵“常青树”，的确很难缠，但说它是无解的，那也有点太看得起它了。虽然DDoS在对很多大平台的攻击中出尽了风头，但在现在互联网的解决方案中，并不缺乏应对DDoS的解决方案。 </p><p>说起DDoS攻击，我脑海里能够想到的全都是中国民间俗语，什么“双拳难敌四手，好汉架不住人多”，什么“千斤拨四两”，什么“乱拳打死老师傅”等等等等。 </p><p>之前有朋友跑来问我DDoS是个什么东西，为什么这么多互联网巨头都被搞得没有脾气，我记得我当时我是这么举的例子： </p><p>我们这一代人小的时候，自助餐开始在中国内地风行，那会儿这个行业里为了打击竞争对手，对手最惯常使用的阴招是雇佣很多五大三粗的人，给他们钱去对方的店里一通猛吃，杯盘狼藉之下，用不了几天这家自助餐就能给吃黄了。 </p><p>而DDoS攻击比这种还阴损，如果你开了一家餐馆，你的对手如果想搞你，最好的办法就是找一堆地痞流氓到你的店里坐的满满一屋子，你如果上前问，他们就一直跟你扯淡找麻烦，导致真正想吃饭的顾客一看这个情形，掉头就走了。 </p><p>用不了多久，你的餐馆就会开不下去，而你的竞争对手就会趁机蚕食掉你的市场份额，而放在网络语境里，这就是DDoS攻击的最基本原理。 </p><p>而这件事之所以难缠在于，一两个无赖根本成不了气候，想要耍流氓必须要有很多个无赖集结在一起。<strong>所以和现实世界中的无赖一样，DDoS真正的杀手锏在于利用能够发动的汹涌的流量，可以瞬间冲垮被攻击网站的服务器。</strong></p><p>如果我们回溯一下历史的话，会发现黑客组织之所以会有组织有预谋的发起DDoS攻击，基本上都是基于以下几个原因： </p><ul><li><p>有些行业如果网站被恶意攻击，会造成很难估量的损失，这个时候黑客发动DDoS攻击的初衷一般是出于敲诈勒索，为了保证企业的正常运转，他们通常愿意向黑客付高额的赎金； </p></li><li><p>行业内血海一片，DDoS是恶意竞争的屠刀。这个现象从逻辑上，其实雇佣无赖去占领对手餐馆的原理是一毛一样的，而且DDOS攻击早已产业化，现在中国的DDOS黑市，出钱请黑客打1G的流量到一个网吧或网站，市场价只要不到50块钱，但对于一个创业公司或者干脆就是一个小网吧来说，这已经算是可以灭顶的无妄之灾了。 </p></li><li><p>DDoS攻击往往成为掩盖真实网络攻击的烟雾弹，在遭受DDoS攻击的企业中，部分企业还伴随数据丢失的现象，黑客利用DDoS攻击掩盖其窃取用户隐私的真实目的，这种攻击行为在社交网站、金融领域等用户隐私高价值的行业尤为高发。 </p></li></ul><p>比如说，去年年初的时候，荷兰第一大银行荷兰商业银行于2018年1月28日晚间遭到DDoS攻击；第二大银行荷兰合作银行的网银服务29日早晨遭到攻击；第三大银行荷兰银行在那一周内共遭到7次网络攻击，仅周末就有3次。 </p><p>不过这一次发生在荷兰的针对银行系统的攻击并没有造成用户隐私的泄露，原因在于这仅仅是一次来自俄罗斯一个网络间谍组织Cozy Bear对荷兰情报组织AIVD侵犯其计算机的“单纯”的报复行为。<strong>但并不是所有黑客组织发起的DDoS攻击都如此单纯。</strong></p><p>2018年年底时万豪酒店发布了一则公告，称其旗下喜达屋酒店的5亿人次的信息被泄露，共计3.27亿人，泄露信息包括姓名、邮寄地址、电话号码、电子邮件昂面地址、护照号码、出生日期、性别等等入住信息，更糟糕的是万豪无法确定，侵入酒店系统的第三方黑客，在窃取的信息中是否包含客人的银行卡号和密码。（此案例和DDOS攻击无关，建议采用其他案例，比如2011年4月20日至26日，索尼遭受DDoS攻击，目的是为了掩盖盗取索尼PS的用户数据。） </p><p>而游戏领域，则是DDoS攻击的另一个重灾区，不光是刚才前文中提到的暴雪，包括索尼、金山、网易在内的众多知名游戏公司都曾数次遭受攻击，可以说DDoS攻击是游戏企业的噩梦。 </p><p>许多刚创业的游戏公司，可能刚上线就被打死，而一些处在融资阶段的游戏公司，由于遭遇攻击而被迫停服，则很大程度上会调低投资人的预期，甚至导致融资失败。 </p><p>而这些因素，都是竞对打压或者敲诈勒索的绝对软肋。 </p><p>从以上的几个案例我们不难看出，和现实中的耍流氓和敲诈勒索相比，通过网络手段进行攻击的风险和成本更低，坏蛋的嘴脸也更穷凶极恶一点，无论是政府机构还是企业平台，无论你是巨头还是小蚂蚁，只要你身上有羊毛可以薅，你都时刻面临着被洗劫的风险 </p><p>不过刚在开头我也讲了，虽然DDoS很难缠很让人头痛，但本质上图并不是无解的。 </p><p>回到我最开始讲的那个例子。 </p><p>你是一个餐馆老板，过去三十年一直是个老老实实的厨子，突然面对五十个臭流氓到你店里耍无赖的时候，你最好的应对方法，应该是什么？ </p><p>自己组建一支人马，和这些臭流氓正面刚？这恐怕不行，因为你不是臭流氓，你没有相应的作战经验。 </p><p>报警请人民警察来帮忙处理？这恐怕也不行，人家在你店里没有打砸抢，只是“温和的”非暴力不合作，警察来了也只能当民事调解，并且人家马仔众多，明天再换一拨新面孔来，玩的你一点脾气都没有。 </p><p>这就是面对DDoS时，无论是巨头还是小蚂蚁，他们的实实在在的困境。 </p><p>但正所谓“道高一尺魔高一丈”，你在云上和我耍流氓，那我就在云上回击。 </p><p><strong>“云”的事儿，不如还交还给云来处理。</strong>我认为就目前DDoS的在攻击量级上的疯狂进击的前提下，云计算服务厂商或许是狙击它们的最有效手段。 </p><p>2018年年初，峰值1.35TB/秒的流量冲击了开发者平台 GitHub。这是第一次TB量级的DDoS攻击。GitHub 受到攻击后，服务器断断续续，无法访问。攻击发生 10 分钟后，GitHub 向CDN 服务商 Akamai 请求协助，访问 GitHub 的流量已经由后者接管并在15分钟之内完成了防御。 </p><p>Akamai的相关负责人在接受采访时说，我们是基于迄今为止最大规模 DDoS 攻击五倍的峰值而做的相应准备，所以 1.3T 对我们来说是小意思。 </p><p>在关于流量峰值这一点上，我认为饱受双11、双12、618等全民购物狂欢的电商巨头们更有发言权，就拿京东举例子好了。 </p><p>京东云在之前发布的高防版的DDoS服务中，展示出了非常明确的信心是，在多年的电商狂欢流量对抗中，京东云已经在实战中建立了一套完备的防御机制，无论是在流量峰值的建模上，还是在DDoS的防御算法上，它的部署都远远不是纸上谈兵，而是拳拳到肉的经受住了实战的洗礼。要知道，全世界每年有超过5成的DDoS攻击都来自中国，而我们的国家也是全世界超过美国的第一大“肉鸡”市场，由电商大数据加持演化而来的京东云，它在云安全的理解上可以说是非常深刻了。 </p><p>所以说，如果说一定要有一个结论，我想说“上帝的归上帝，而云上的归云上”，像京东云这样的基于电商大数据考验的云计算平台，或许才是对抗DDoS的最终答案。 </p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f3adcbb2ed60428.png" alt="jd"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;“&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DDOS？ &lt;/p&gt;
&lt;p&gt;一言难尽啊！ &lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.policx.com/program/JavaScript/node/"/>
    <id>https://www.policx.com/program/JavaScript/node/</id>
    <published>2019-07-13T16:06:04.000Z</published>
    <updated>2019-08-15T01:53:53.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/15/5d2c47df96f5d45317.jpg" alt="Node.js"></p><p>能方便地搭建响应速度快、易于扩展的网络应用，Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>中文：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org</a>、<a href="https://nodejs.cn/" target="_blank" rel="noopener">https://nodejs.cn</a></p><p>简单说Node.js就是运行在服务器端的JavaScript，是现在流行的语言中能同时运行在前端与后台的程序语言，你可以把JavaScript想像成Java与C#。相关技术：</p><p>数据库：MongoDB，非关系型数据库，NoSQL（Not only SQL）</p><p>MVC框架：AngularJS</p><p>Web服务器：Express</p><p>模板引擎：jade、ejs、htmljs、swig、hogan.js</p><h1 id="二、搭建Node-js开发环境"><a href="#二、搭建Node-js开发环境" class="headerlink" title="二、搭建Node.js开发环境"></a>二、搭建Node.js开发环境</h1><h2 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h2><p>去官网下下载最新版本的Node.js一步一步按提示安装即可，如果安装失败就手动安装，将Node.js的安装位置配置到环境变量的path中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装完成后启动命令行，测试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="三、第一个Node-js程序"><a href="#三、第一个Node-js程序" class="headerlink" title="三、第一个Node.js程序"></a>三、第一个Node.js程序</h1><p>在上面的示例中，我们是通过IDE完成编译与运行的，其实手动运行也可以，比如编写一段代码如下：</p><blockquote><p>server.js</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//依赖一个http模块，相当于java中的import，与C#中的using</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">//创建一个服务器对象</span><br><span class="line">server = http.createServer(function (req, res) &#123;</span><br><span class="line">//设置请求成功时响应头部的MIME为纯文本</span><br><span class="line">res.writeHeader(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">//向客户端输出字符</span><br><span class="line">res.end(&quot;Hello World\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//让服务器监听本地8000端口开始运行</span><br><span class="line">server.listen(8000,&apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server is runing at 127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>在node环境下解释运行：<br><img src="https://i.loli.net/2019/07/14/5d2af984d2fae77488.jpg" alt></p><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2af89c2b5b226144.jpg" alt></p><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。<br>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。<br>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</p><h1 id="四、NPM（Node-js包管理器）"><a href="#四、NPM（Node-js包管理器）" class="headerlink" title="四、NPM（Node.js包管理器）"></a>四、NPM（Node.js包管理器）</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：  </p><ul><li>a)、允许用户从NPM服务器下载别人编写的第三方包到本地使用。  </li><li>b)、允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。  </li><li>c)、允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><h2 id="4-1、查看npm版本"><a href="#4-1、查看npm版本" class="headerlink" title="4.1、查看npm版本"></a>4.1、查看npm版本</h2><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p><h2 id="4-2、升级npm"><a href="#4-2、升级npm" class="headerlink" title="4.2、升级npm"></a>4.2、升级npm</h2><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="4-3、安装模块"><a href="#4-3、安装模块" class="headerlink" title="4.3、安装模块"></a>4.3、安装模块</h2><blockquote><p>npm install <module name> -参数</module></p></blockquote><p>如果带参数-g表示全局安装，否则只是安装到某个目录下。</p><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install express -g</span><br></pre></td></tr></table></figure><h2 id="4-4、卸载模块"><a href="#4-4、卸载模块" class="headerlink" title="4.4、卸载模块"></a>4.4、卸载模块</h2><p>我们可以使用以下命令来卸载 Node.js 模块。  </p><blockquote><p>sudo npm uninstall <module name></module></p></blockquote><p>如先使用安装指令安装bootstrap:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>再使用卸载指令删除模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall bootstrap</span><br></pre></td></tr></table></figure><p>可以到 /node_modules/ 目录下查看包是否还存在</p><h2 id="4-5、模块列表"><a href="#4-5、模块列表" class="headerlink" title="4.5、模块列表"></a>4.5、模块列表</h2><p>使用模块列表命令可以方便的看到当前项目中依赖的包：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h2 id="4-6、更新模块"><a href="#4-6、更新模块" class="headerlink" title="4.6、更新模块"></a>4.6、更新模块</h2><p>我们可以使用以下命令更新模块：<br><code>npm update</code>模块名称<br><code>npm up -g</code> 模块名称</p><h2 id="4-7、搜索模块"><a href="#4-7、搜索模块" class="headerlink" title="4.7、搜索模块"></a>4.7、搜索模块</h2><p><code>npm search</code>模块名称</p><h2 id="4-8、NPM-常用命令"><a href="#4-8、NPM-常用命令" class="headerlink" title="4.8、NPM 常用命令"></a>4.8、NPM 常用命令</h2><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。<br>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。<br>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。<br>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。<br>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。<br>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></package></package></p><h2 id="4-9、更换NPM-镜像"><a href="#4-9、更换NPM-镜像" class="headerlink" title="4.9、更换NPM 镜像"></a>4.9、更换NPM 镜像</h2><p>因为npm的服务器在国外，在网络状态不好的情况下引入一个模块会因为网络延迟而失败，可以更换成国内速度更快的镜像服务器，这里以使用淘宝 NPM 镜像（<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>）为例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/15/5d2c481d14f7270384.jpg" alt></p><p>这样就可以使用 cnpm 命令来安装模块了：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＄ cnpm install [name]</span><br></pre></td></tr></table></figure><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><p>如是安装失败，可以试试：</p><figure class="highlight zsh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">alias</span> cnpm=<span class="hljs-string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">--cache=<span class="hljs-variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">--userconfig=<span class="hljs-variable">$HOME</span>/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">  --userconfig=$HOME/.cnpmrc"'</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。使用Node.js作为AngularJS开发Web服务器的最佳方式是使用Express模块。</p><p>Express官网： <a href="https://expressjs.com/" target="_blank" rel="noopener">https://expressjs.com/</a></p><p>Express4.x API：<a href="https://expressjs.com/zh-cn/4x/api.html" target="_blank" rel="noopener">https://expressjs.com/zh-cn/4x/api.html</a></p><p><img src="https://i.loli.net/2019/07/15/5d2c484698cd427801.jpg" alt></p><h2 id="5-2、Express框架核心特性"><a href="#5-2、Express框架核心特性" class="headerlink" title="5.2、Express框架核心特性"></a><strong>5.2、Express框架核心特性</strong></h2><p>可以设置中间件来响应 HTTP 请求。</p><p>定义了路由表用于执行不同的 HTTP 请求动作。</p><p>可以通过向模板传递参数来动态渲染 HTML 页面。</p><p>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。</p><p>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p><h2 id="5-3、安装-Express"><a href="#5-3、安装-Express" class="headerlink" title="5.3、安装 Express"></a><strong>5.3、安装 Express</strong></h2><p>安装 Express 并将其保存到依赖列表中：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>以上命令全局安装express。也可安装时指定安装中间件。</p><p><em>body-parser</em> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</p><p><em>cookie-parser</em> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p><p><em>multer</em> - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">＄ npm install body-parser --save  </span><br><span class="line">＄ npm install cookie-parser --save  </span><br><span class="line">＄ npm install multer --save</span><br></pre></td></tr></table></figure><p>默认这些模块都已经添加。</p><h2 id="5-4、第一个Express框架实例"><a href="#5-4、第一个Express框架实例" class="headerlink" title="5.4、第一个Express框架实例"></a>5.4、第一个Express框架实例</h2><p>接下来我们使用 Express 框架来输出 “Hello World”。<br>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。</p><p>创建一个目录，如Project，进入命令行：</p><p>使用npm install express 导入express模块。</p><p>在目录下创建hello.js文件，如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//引入express模块</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">//创建一个app对象，类似一个web 应用（网站）</span><br><span class="line">var app = express();</span><br><span class="line">//接受指定路径的请求，指定回调函数</span><br><span class="line">app.get(&apos;/&apos;, function (req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//创建一个web服务器，可以认为就是web服务器对象</span><br><span class="line">//监听8081端口，当监听成功时回调</span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">   var host = server.address().address;  //地址</span><br><span class="line">   var port = server.address().port;  //端口</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-5、开发Express项目"><a href="#5-5、开发Express项目" class="headerlink" title="5.5、开发Express项目"></a>5.5、开发Express项目</h2><p><img src="https://i.loli.net/2019/07/14/5d2b00e97910997783.jpg" alt></p><p>创建好的项目如下：<br><img src="https://i.loli.net/2019/07/14/5d2b02dad205355700.jpg" alt></p><p>app.js是网站：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><p>bin\www是web服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">/**</span><br><span class="line"> * 依赖模块，导入</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;nodejsexpress:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从上下文环境中获得监听端口，如果空则3000</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Web服务器</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开始监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);  //指定发生错误时的事件</span><br><span class="line">server.on(&apos;listening&apos;, onListening);  //当监听成功时的回调</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 规范化端口</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *错误事件监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  //错误处理</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);  //结束程序</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当用户访问服务器成功时的回调</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/index.js路由，有点类似控制器或Servlet：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 获得首页 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>views/index.ejs首页视图：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在www上右键选择“运行方式”-&gt;Run ‘/bin/www’ 运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b034bcca6187136.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b044c2b12347829.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b041724d6091090.jpg" alt></p><h3 id="5-5-1、request对象"><a href="#5-5-1、request对象" class="headerlink" title="5.5.1、request对象"></a>5.5.1、request对象</h3><p>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ul><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ul><h3 id="5-5-2、response对象"><a href="#5-5-2、response对象" class="headerlink" title="5.5.2、response对象"></a>5.5.2、response对象</h3><p>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.app：同req.app一样</span><br><span class="line">res.append()：追加指定HTTP头</span><br><span class="line">res.set()在res.append()后将重置之前设置的头</span><br><span class="line">res.cookie(name，value [，option])：设置Cookie</span><br><span class="line">opition: domain / expires / httpOnly / maxAge / path / secure / signed</span><br><span class="line">res.clearCookie()：清除Cookie</span><br><span class="line">res.download()：传送指定路径的文件</span><br><span class="line">res.get()：返回指定的HTTP头</span><br><span class="line">res.json()：传送JSON响应</span><br><span class="line">res.jsonp()：传送JSONP响应</span><br><span class="line">res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</span><br><span class="line">res.redirect()：设置响应的Location HTTP头，并且设置状态码302</span><br><span class="line">res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</span><br><span class="line">res.send()：传送HTTP响应</span><br><span class="line">res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</span><br><span class="line">res.set()：设置HTTP头，传入object可以一次设置多个头</span><br><span class="line">res.status()：设置HTTP状态码</span><br><span class="line">res.type()：设置Content-Type的MIME类型</span><br></pre></td></tr></table></figure><h3 id="5-5-3、express获取参数有三种方法"><a href="#5-5-3、express获取参数有三种方法" class="headerlink" title="5.5.3、express获取参数有三种方法"></a>5.5.3、express获取参数有三种方法</h3><p>req.query 适合 <a href="https://localhost:3000/form?num=8888" target="_blank" rel="noopener">https://localhost:3000/form?num=8888</a><br>req.body 适合<a href="https://localhost:3000/form，Post请求中的参数" target="_blank" rel="noopener">https://localhost:3000/form，Post请求中的参数</a><br>req.params 适合获取form后的num：<a href="https://localhost:3000/form/num" target="_blank" rel="noopener">https://localhost:3000/form/num</a>  </p><p>（一）、GET</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = req.query.num;</span><br><span class="line">res.send(&quot;你获取的get数据为:&quot; + num);</span><br></pre></td></tr></table></figure><p>（二）、POST</p><p>解析post数据需要用到body-parser</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">//引入body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">//需要use的</span><br><span class="line">app.use(bodyParser.json()); // for parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">extended: true</span><br><span class="line">&#125;)); // for parsing application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.post(&apos;/form&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.body.num;</span><br><span class="line">res.send(&quot;你获取的post数据为:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>public/test.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"tinyphp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（三）、获取路径参数</p><p>app.js  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.get(&apos;/form/:num&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.params.num;</span><br><span class="line">res.send(&quot;你获取到form/后的参数:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="5-6-ejs基础"><a href="#5-6-ejs基础" class="headerlink" title="5.6 ejs基础"></a>5.6 ejs基础</h2><p>ejs是一个Express Web应用的模板引擎，在NodeJS开发中可以选择的模板引擎可能是所有Web应用开发中范围最广的，如jade、ejs、htmljs、swig、hogan.js，但ejs是最容易上手的，与jsp,asp,php的原始模板引擎风格很像。</p><p>官网：<a href="https://www.embeddedjs.com/" target="_blank" rel="noopener">https://www.embeddedjs.com/</a></p><p>添加一个<code>product.js</code>路由：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  var products=[];</span><br><span class="line">  products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">  //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">  res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>在views目录下添加<code>product.ejs</code>视图，这里是一个简单的MVC：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span> - 产品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"80%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%pdts.forEach(function(pdt,index)&#123;%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=index+1%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.name%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.price%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%&#125;);%</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">%=pdts[i].name%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改app，注册定义好的模块product：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> index = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/index'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/users'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> pdts = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/product'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//指定视图引擎为ejs</span></span><br><span class="line">app.set(<span class="hljs-string">'views'</span>, path.join(__dirname, <span class="hljs-string">'views'</span>));</span><br><span class="line">app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="hljs-comment">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class="line">app.use(logger(<span class="hljs-string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="hljs-string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/'</span>, index);</span><br><span class="line">app.use(<span class="hljs-string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="hljs-string">'/pdt'</span>, pdts);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b092ca2eb115835.jpg" alt></p><blockquote><p>原因：没有安装ejs模块<br>解决办法：进入到项目目录，安装ejs</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save ejs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b09efe80ba53992.jpg" alt></p></blockquote><p>重新运行：<br><img src="https://i.loli.net/2019/07/14/5d2b0a951a09231745.jpg" alt></p><h2 id="5-7、lodash"><a href="#5-7、lodash" class="headerlink" title="5.7、lodash"></a>5.7、lodash</h2><p>这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。可以非常方便的操作json。</p><p>官网：<a href="https://lodashjs.com/" target="_blank" rel="noopener">https://lodashjs.com/</a></p><p>安装：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash</span><br></pre></td></tr></table></figure><p>安装时先用cd切换到当前项目下。</p><p>如果浏览器使用可以直接引入：</p><script src="lodash.js"></script><p>添加lodash依赖：<br><img src="https://i.loli.net/2019/07/14/5d2b0c4c7c14a17367.jpg" alt></p><p>依赖成功后会在package.json中添加引用：<br><img src="https://i.loli.net/2019/07/14/5d2b0c9e03f1844597.jpg" alt></p><p>后台Node.js使用，可以引入模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//导入lodash模块</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var products=[];</span><br><span class="line">products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">//1、取出第一个元素</span><br><span class="line">var obj1=_.first(products);</span><br><span class="line">console.log(obj1.name);  //ZTE U880</span><br><span class="line"></span><br><span class="line">//2、取出最后一个元素</span><br><span class="line">var obj2=_.last(products);</span><br><span class="line">console.log(obj2.name);  //iPhone 7 Plus 128G</span><br><span class="line"></span><br><span class="line">//3、指定查找条件返回符合条件的索引</span><br><span class="line">var obj3=_.findIndex(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj3);  //2</span><br><span class="line"></span><br><span class="line">//4、指定查找条件返回查找到的对象</span><br><span class="line">var obj4=_.find(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj4);  //&#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;</span><br><span class="line"></span><br><span class="line">//5、排序</span><br><span class="line">var obj5=_.orderBy(products,[&quot;price&quot;,&quot;name&quot;],[&quot;desc&quot;,&quot;asc&quot;]);</span><br><span class="line">console.log(obj5);</span><br><span class="line"></span><br><span class="line">//[ &#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;HuWei 荣耀8&apos;, price: 1899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;ZTE U880&apos;, price: 899.8 &#125; ]</span><br><span class="line"></span><br><span class="line">//6、查找价格为1899.8的产品的key</span><br><span class="line">var obj6=_.findKey(products,&#123;price:1899.8&#125;);</span><br><span class="line">console.log(obj6);   //1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/14/5d2b0f023a83710965.jpg" alt></p><p>API的使用非常简单，但需要注意版本，可以现查现用，API地址：<a href="https://lodash.com/docs/4.17.2%20" target="_blank" rel="noopener">https://lodash.com/docs/4.17.2 </a></p><h2 id="5-8、参数"><a href="#5-8、参数" class="headerlink" title="5.8、参数"></a>5.8、参数</h2><h3 id="5-8-1、URL中的参数占位"><a href="#5-8-1、URL中的参数占位" class="headerlink" title="5.8.1、URL中的参数占位"></a>5.8.1、URL中的参数占位</h3><p>Checks route params (req.params), ex: /user/:id</p><p>127.0.0.1:3000/index，这种情况下，我们为了得到index，我们可以通过使用req.params得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式；</p><p><code>http://127.0.0.1:3000/pdt/9527/phone</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得产品根据Id</span><br><span class="line">router.get(&apos;/:id/:category&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(request.params.id+&quot;,&quot;+request.params.category);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b10e8e678f43145.jpg" alt></p><h3 id="5-8-2、URL中的QueryString"><a href="#5-8-2、URL中的QueryString" class="headerlink" title="5.8.2、URL中的QueryString"></a>5.8.2、URL中的QueryString</h3><p>Checks query string params (req.query), ex: ?id=12</p><p>127.0.0.1:3000/index?id=12，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用req.query.id就可以获得，类似于PHP的get方法；</p><p><code>http://127.0.0.1:3000/pdt/9527?name=jobs</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(&quot;name:&quot;+request.query.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b12be0371490358.jpg" alt></p><h3 id="5-8-3、HTTP正文中的参数"><a href="#5-8-3、HTTP正文中的参数" class="headerlink" title="5.8.3、HTTP正文中的参数"></a>5.8.3、HTTP正文中的参数</h3><p>在post请求中获得表单中的数据。</p><p>Checks urlencoded body params (req.body), ex: id=</p><p>127.0.0.1：300/index，然后post了一个id=2的值，这种方式是获取客户端post过来的数据，可以通过req.body.id获取，类似于PHP的post方法；</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222150412682-243382356.png" alt></p><p>页面：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &lt;%= title %&gt;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%pdts.forEach(function(pdt,index)&#123;%&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=index+1%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.name%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.price%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%&#125;);%&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=pdts[i].name%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            &lt;%if(typeof msg!=&quot;undefined&quot;)&#123;%&gt;</span><br><span class="line">                &lt;%=msg%&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">        &lt;form action=&quot;pdt/add&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                名称：&lt;input name=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                价格：&lt;input name=&quot;price&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/add&apos;,function(request,res,next)&#123;</span><br><span class="line">    var entity=&#123;name:request.body.name,price:request.body.price&#125;;</span><br><span class="line">    products.push(entity);</span><br><span class="line">      //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">      res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products,msg:&quot;添加成功&quot;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151340745-1374859267.png" alt></p><h2 id="5-9、JSON"><a href="#5-9、JSON" class="headerlink" title="5.9、JSON"></a>5.9、JSON</h2><p>如果需要Node.js向外提供返回JSON的接口，Express也是非常方便的，可以使用原来在浏览器中使用到的JSON对象，这是一个浏览器内置对象在服务可以直接使用：</p><p>将对象序列化成字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象</span><br><span class="line">var rose=&#123;&quot;name&quot;:&quot;Rose&quot;,&quot;weight&quot;:&quot;65&quot;&#125;;</span><br><span class="line">            //序列化成字符串</span><br><span class="line">            var str=JSON.stringify(rose);</span><br><span class="line">            alert(str);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151858839-27300214.png" alt></p><p>反序列化，将字符转换成对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成JavaScript对象</span><br><span class="line">var markStr=&apos;&#123;&quot;name&quot;:&quot;mark&quot;,&quot;weight&quot;:&quot;188&quot;&#125;&apos;;</span><br><span class="line">            var mark=JSON.parse(markStr);</span><br><span class="line">            alert(mark.name+&quot;，&quot;+mark.weight);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222152634417-1260078212.png" alt></p><p>Express已经封装了一个json方法，直接调用该方法就可以序列化对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/rest&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(products);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、RESTful（表述性状态转移）"><a href="#六、RESTful（表述性状态转移）" class="headerlink" title="六、RESTful（表述性状态转移）"></a>六、RESTful（表述性状态转移）</h1><p>REST是英文Representational State Transfer的缩写，中文称之为“表述性状态转移” 基于HTTP协议，是另一种服务架构，传递是JSON、POX（Plain Old XML）而不是SOAP格式的数据，充分利用HTTP谓词（Verb），侧重数据的传输，业务逻辑交给客户端自行处理</p><p>REST是一种分布式服务架构的风格约束，像Java、.Net（WCF、WebAPI）都有对该约束的实现，使URL变得更加有意义，更加简洁明了，如：</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>get请求 表示获得所有产品的第1个</p><p><a href="https://www.zhangguo.com/products/product" target="_blank" rel="noopener">https://www.zhangguo.com/products/product</a><br>post请求 表示添加一个产品</p><p><a href="https://www.zhangguo.com/products/1/price" target="_blank" rel="noopener">https://www.zhangguo.com/products/1/price</a><br>get请求 表示获得第1个产品的价格</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>delete请求 删除编号为1的产品</p><p>REST设计需要遵循的原则<br>网络上的所有事物都被抽象为资源（resource）；<br>每个资源对应一个唯一的资源标识符（resource identifier）；<br>通过通用的连接器接口（generic connector interface）对资源进行操作；<br>对资源的各种操作不会改变资源标识符；<br>所有的操作都是无状态的（stateless）</p><p>谓词<br><strong>GET</strong><br>表示查询操作，相当于Retrieve、Select操作<br><strong>POST</strong><br>表示插入操作，相当于Create，Insert操作<br><strong>PUT</strong><br>表示修改操作，相当于Update操作<br><strong>DELETE</strong><br>表示删除操作，相当于Delete操作</p><p>其它还有：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161223101344557-1727952968.png" alt></p><p>NodeJS+Express可以很容易的实现REST</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>application/json</li><li>res.setHeader(‘Content-Type’, ‘application/json;charset=utf-8’);</li></ul><p>示例代码cars.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var cars=[];</span><br><span class="line">cars.push(&#123;id:201701,name:&quot;BMW&quot;,price:190,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201702,name:&quot;BYD&quot;,price:25,speed:&quot;160km/h&quot;,color:&quot;红色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201703,name:&quot;Benz&quot;,price:300,speed:&quot;215km/h&quot;,color:&quot;蓝色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201704,name:&quot;Honda&quot;,price:190,speed:&quot;170km/h&quot;,color:&quot;黑色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201705,name:&quot;QQ&quot;,price:130,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line"></span><br><span class="line">/* Get */</span><br><span class="line">/*获得所有汽车*/</span><br><span class="line">/*url /cars/*/</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.json(cars);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Get*/</span><br><span class="line">/*获得汽车通过id*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">     //从路径中映射参数，转换成数字</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var car=_.find(cars,&#123;id:id&#125;);</span><br><span class="line">      res.json(car);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Post*/</span><br><span class="line">/*添加汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.post(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      car.id=_.last(cars).id+1;  //将编号修改为最后一辆车的编号+1</span><br><span class="line">      cars.push(car);  //将汽车对象添加到集合中</span><br><span class="line">      res.json(car);  //将添加成功的车以json的形式返回</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Put*/</span><br><span class="line">/*修改汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.put(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      console.log(req.body);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:parseInt(car.id)&#125;);  //根据id获得车在集合中的下标</span><br><span class="line"></span><br><span class="line">      cars[index]=car;  //替换原对象</span><br><span class="line">      //res.json(car);  //将修改后的车以json的形式返回</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;更新成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Delete*/</span><br><span class="line">/*删除汽车*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.delete(&apos;/id/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">      //获得url中的编号参数</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:id&#125;);  //根据id获得车在集合中的下标</span><br><span class="line">      cars.splice(index,1);   //在cars数组中删除下标从index开始的1条数据</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;删除成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>示例代码app.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line">var pdts = require(&apos;./routes/product&apos;);</span><br><span class="line">var task = require(&apos;./routes/task&apos;);</span><br><span class="line">var cars = require(&apos;./routes/cars&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line">app.use(&apos;/pdt&apos;, pdts);</span><br><span class="line">app.use(&quot;/task&quot;,task);</span><br><span class="line">app.use(&quot;/cars&quot;,cars);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得所有汽车  </li><li>url /cars/</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b27eb42dea22132.jpg" alt></p><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得汽车通过id</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b28e456cdf58111.jpg" alt></p><blockquote><p><strong>Post</strong></p></blockquote><ul><li>添加汽车  </li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b30e46f28836556.jpg" alt></p><p>参数中的json格式一定要使用标准格式，注意引号，注意Content-Type，默认的Content-Type类型是：application/x-www-form-urlencoded</p><blockquote><p><strong>Put</strong></p></blockquote><ul><li>修改汽车</li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3434410e778260.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b344cd080581595.jpg" alt></p><blockquote><p><strong>Delete</strong>  </p></blockquote><ul><li>删除汽车</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3526d5bff57574.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b35474e9c447189.jpg" alt></p><p><strong>node.js跨域</strong></p><p>修改app.js文件拦截所有的请求，修改头部</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">app.all(&apos;*&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">    res.header(&quot;X-Powered-By&quot;, &apos; 3.2.1&apos;);</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);</span><br><span class="line">    if(req.method == &quot;OPTIONS&quot;) &#123;</span><br><span class="line">        res.send(&quot;200&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2017.cnblogs.com/blog/63651/201801/63651-20180108142729785-1121920664.png" alt></p><h1 id="九、视频"><a href="#九、视频" class="headerlink" title="九、视频"></a>九、<a href="https://www.bilibili.com/video/av17977069" target="_blank" rel="noopener">视频</a></h1><p>From: <a href="https://www.cnblogs.com/best/p/6204116.html" target="_blank" rel="noopener">https://www.cnblogs.com/best/p/6204116.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="https://www.policx.com/categories/program/"/>
    
    
      <category term="Node.js" scheme="https://www.policx.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hexo front-matter 怎么写？</title>
    <link href="https://www.policx.com/blog/front-matter/"/>
    <id>https://www.policx.com/blog/front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-08-15T14:03:39.978Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr><tr><td>link</td><td>点击文章跳转地址</td><td></td></tr></tbody></table><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/news/iOSYear/"/>
    <id>https://www.policx.com/news/iOSYear/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-08-15T01:48:07.226Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">hackernoon</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/news/BitTorrent/"/>
    <id>https://www.policx.com/news/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/notes/partner/"/>
    <id>https://www.policx.com/notes/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-08-15T01:05:38.683Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
      <category term="notes" scheme="https://www.policx.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/news/harddisk/"/>
    <id>https://www.policx.com/news/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/news/2019/"/>
    <id>https://www.policx.com/news/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-08-15T01:05:16.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/blog/netlify/"/>
    <id>https://www.policx.com/blog/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-08-15T01:05:01.952Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。<br><img src="https://githubpage-1255710107.cos.ap-shanghai.myqcloud.com/static/images/KNN/hexo.png" alt></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。<br>那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。<br>接下来我分步骤的跟大家来介绍我的部署方案。</p><h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/blog/hexo-theme-icarus/"/>
    <id>https://www.policx.com/blog/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-08-15T01:05:01.952Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><table><thead><tr><th><strong>原文链接</strong><br>👇</th></tr></thead><tbody><tr><td><a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/17/5d2f0332a3bdc91139.jpg" alt="easyhexo.com"></a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://www.policx.com/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
