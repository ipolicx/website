<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-07-12T09:30:58.040Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Front-matter</title>
    <link href="https://www.policx.com/2019/07/11/Front-matter/"/>
    <id>https://www.policx.com/2019/07/11/Front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-12T09:30:58.040Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/2019/07/11/20190711194445/"/>
    <id>https://www.policx.com/2019/07/11/20190711194445/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-13T08:04:16.822Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/2019/07/05/BitTorrent/"/>
    <id>https://www.policx.com/2019/07/05/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-08T15:20:42.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/2019/07/04/partner/"/>
    <id>https://www.policx.com/2019/07/04/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-12T09:50:03.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/2019/06/18/harddisk/"/>
    <id>https://www.policx.com/2019/06/18/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-08T15:20:35.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/2019/06/05/2019/"/>
    <id>https://www.policx.com/2019/06/05/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-12T09:40:14.384Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/2019/05/01/netlify/"/>
    <id>https://www.policx.com/2019/05/01/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-13T08:12:52.239Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。</p><div id="bushu"></div># 部署进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。接下来我分步骤的跟大家来介绍我的部署方案。<h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/2019/05/01/hexo-theme-icarus/"/>
    <id>https://www.policx.com/2019/05/01/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-09T14:25:12.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><ul><li>原文链接—&gt; <a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">easyhexo.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="https://www.policx.com/2018/09/17/git-del/"/>
    <id>https://www.policx.com/2018/09/17/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-13T08:10:24.253Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://www.policx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="https://www.policx.com/2018/06/19/python-excel/"/>
    <id>https://www.policx.com/2018/06/19/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-07T04:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="https://www.policx.com/2018/06/17/python-writer/"/>
    <id>https://www.policx.com/2018/06/17/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-07T04:36:07.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="https://www.policx.com/2018/06/05/2018/"/>
    <id>https://www.policx.com/2018/06/05/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-12T10:08:35.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="/post-images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymongo/"/>
    <id>https://www.policx.com/2018/05/02/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-07T04:35:29.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://www.policx.com/2018/05/02/mongodb/"/>
    <id>https://www.policx.com/2018/05/02/mongodb/</id>
    <published>2018-05-02T06:11:11.000Z</published>
    <updated>2019-07-13T08:11:55.980Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。</p><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库。</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。通常情况下，在一个集合中的所有文件都是类似或相关目的。</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。<br>下面给出的示例显示了一个博客网站，仅仅是一个逗号分隔的键值对的文档结构。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorial&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,20,2,15),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My second comments&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,25,7,45),</span><br><span class="line">         like: 5</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>MongoDB use DATABASE_NAME 用于创建数据库。该命令如果数据库不存在，将创建一个新的数据库， 否则将返回现有的数据库。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>use DATABASE语句的基本语法如下：<br><code>use DATABASE_NAME</code></p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">如果想创建一个数据库名称为 &lt;mydb&gt;, 那么 use DATABASE 语句应该如下：</span><br><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line"></span><br><span class="line">要检查当前选择的数据库使用命令 db</span><br><span class="line">&gt;db</span><br><span class="line">mydb</span><br><span class="line"></span><br><span class="line">如果想查询数据库列表，那么使用命令 show dbs.</span><br><span class="line">&gt;show dbs</span><br><span class="line">local     0.78125GB</span><br><span class="line">test      0.23012GB</span><br><span class="line"></span><br><span class="line">所创建的数据库（mydb）不存在于列表中。要显示的数据库，需要至少插入一个文档进去。</span><br><span class="line">&gt;db.movie.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;)</span><br><span class="line">&gt;show dbs</span><br><span class="line">local      0.78125GB</span><br><span class="line">mydb       0.23012GB</span><br><span class="line">test       0.23012GB</span><br></pre></td></tr></table></figure><p>MongoDB的默认数据库是test。 如果没有创建任何数据库，那么集合将被保存在测试数据库。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>MongoDB db.dropDatabase() 命令用于删除现有的数据库。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>dropDatabase()指令的基本语法如下：<br><code>db.dropDatabase()</code></p><p>这将删除选定的数据库。如果没有选择任何数据库，那么它会删除默认的“test”数据库</p><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>如果想删除新的数据库 <mydb>, 那么 dropDatabase() 命令将如下所示：</mydb></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;&#123; &quot;dropped&quot; : &quot;mydb&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>MongoDB 的 db.createCollection(name, options) 用于创建集合。 在命令中, name 是要创建集合的名称。 Options 是一个文档，用于指定集合的配置</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>String</td><td>要创建的集合的名称</td></tr><tr><td>Options</td><td>Document</td><td>（可选）指定有关内存大小和索引选项</td></tr></tbody></table><p>选项参数是可选的，所以需要指定集合的唯一名字。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>createCollection()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt;db.createCollection(&quot;mycollection&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以通过使用 show collections 命令来检查创建的集合</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;show collections</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><h3 id="选项列表"><a href="#选项列表" class="headerlink" title="选项列表"></a>选项列表</h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。</td></tr><tr><td>autoIndexID</td><td>Boolean</td><td>（可选）如果为true，自动创建索引_id字段。默认的值是 false.</td></tr><tr><td>size</td><td>number</td><td>（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。</td></tr><tr><td>max</td><td>number</td><td>（可选）指定上限集合允许的最大文件数。</td></tr></tbody></table><p>尽管插入文档，MongoDB首先检查字段集合的上限大小，那么它会检查最大字段。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法 :"></a>语法 :</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexID : true, size : 6142800, max : 10000 &#125; )</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.yiibai.insert(&#123;&quot;name&quot; : &quot;yiibai&quot;&#125;)</span><br><span class="line">&gt;show collections</span><br><span class="line">mycol</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br><span class="line">yiibai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>MongoDB 的 db.collection.drop() 用于从数据库中删除集合。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>drop() 命令的基本语法如下<br><code>db.COLLECTION_NAME.drop()</code></p><h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>下面给出的例子将删除给定名称的集合：mycollection</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.mycollection.drop()</span><br><span class="line">true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p>将数据插入到MongoDB集合，需要使用MongoDB 的 insert() 方法。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>insert()命令的基本语法如下：<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.insert(&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c),</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里 mycol 是我们的集合名称，它是在之前的教程中创建。如果集合不存在于数据库中，那么MongoDB创建此集合，然后插入文档进去。</p><p>在如果我们不指定_id参数插入的文档，那么 MongoDB 将为文档分配一个唯一的ObjectId。</p><p>_id 是12个字节十六进制数在一个集合的每个文档是唯一的。 12个字节被划分如下：<br>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</p><p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.post.insert([</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;NoSQL Database&apos;, </span><br><span class="line">   description: &apos;NoSQL database doesn&apos;t have tables&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 20, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p>要从集合查询MongoDB数据，需要使用MongoDB的 find()方法。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find()</code><br>find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p><code>&gt;db.mycol.find().pretty()</code></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>除了find()方法还有findOne()方法，仅返回一个文档。</p><h3 id="RDBMS-Where子句等效于MongoDB"><a href="#RDBMS-Where子句等效于MongoDB" class="headerlink" title="RDBMS Where子句等效于MongoDB"></a>RDBMS Where子句等效于MongoDB</h3><p>查询文档在一些条件的基础上，可以使用下面的操作</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>Equality</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td>db.mycol.find({“by”:”yiibai tutorials”}).pretty()</td><td>where by = ‘yiibai tutorials’</td></tr><tr><td>Less Than</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>Less Than Equals</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>Greater Than</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>Greater Than Equals</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>Not Equals</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="AND-在-MongoDB"><a href="#AND-在-MongoDB" class="headerlink" title="AND 在 MongoDB"></a>AND 在 MongoDB</h4><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>在 find()方法，如果您传递多个键通过”,”将它们分开，那么MongoDB对待它就如AND条件一样。基本语法如下所示：<br><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有教程含“yiibai tutorials”和其标题是“MongoDB Overview”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;yiibai tutorials&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>对于上面给出的例子相当于where子句：’ where by=’yiibai tutorials’ AND title=’MongoDB Overview’ ‘。可以传递任何数目的键-值对在find子句。</p><h4 id="OR-在-MongoDB"><a href="#OR-在-MongoDB" class="headerlink" title="OR 在 MongoDB"></a>OR 在 MongoDB</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><p>要查询基于OR条件的文件，需要使用$or关键字。OR的基本语法如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有撰写含有 ‘yiibai tutorials’ 或是标题为 ‘MongoDB Overview’ 的教程</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-AND-和-OR-在一起"><a href="#使用-AND-和-OR-在一起" class="headerlink" title="使用 AND 和 OR 在一起"></a>使用 AND 和 OR 在一起</h4><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子显示有喜欢数大于100 的文档，其标题要么是 ‘MongoDB Overview’ 或 ‘yiibai tutorials’. 等效于SQL的where子句：’where likes&gt;10 AND (by = ‘yiibai tutorials’ OR title = ‘MongoDB Overview’)’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai tutorials&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>MongoDB的update()和save()方法用于更新文档到一个集合。 update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。</p><h4 id="MongoDB-Update-方法"><a href="#MongoDB-Update-方法" class="headerlink" title="MongoDB Update() 方法"></a>MongoDB Update() 方法</h4><h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><p>update()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br></pre></td></tr></table></figure><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将设置其标题“MongoDB Overview”的文件为新标题为“New MongoDB Tutorial”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Tutorial Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 ‘multi’ 设置为 true。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="MongoDB-Save-方法"><a href="#MongoDB-Save-方法" class="headerlink" title="MongoDB Save() 方法"></a>MongoDB Save() 方法</h4><p>save() 方法取代，通过新文档到 save()方法</p><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><p>mongodb 的 save()方法如下所示的基本语法：<br><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><p>下面的例子将替换该文件_id ‘5983548781331adf45ec7’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.save(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>MongoDB 的 remove()方法用于从集合中删除文档。remove()方法接受两个参数。一个是标准缺失，第二是justOne标志<br>deletion criteria : 根据文件（可选）删除条件将被删除。<br>justOne : （可选）如果设置为true或1，然后取出只有一个文档。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>remove()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p><h6 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h6><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将删除所有的文件，其标题为 ‘MongoDB Overview’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Toturials Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="只删除一个"><a href="#只删除一个" class="headerlink" title="只删除一个"></a>只删除一个</h5><p>如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。<br><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p><h5 id="删除所有文件"><a href="#删除所有文件" class="headerlink" title="删除所有文件"></a>删除所有文件</h5><p>如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove()</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="MongoDB投影"><a href="#MongoDB投影" class="headerlink" title="MongoDB投影"></a>MongoDB投影</h4><p>mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。</p><p>MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。</p><p>语法</p><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find({},{KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示文档的标题，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意在执行find()方法时_id字段始终显示，如果不想要显示这个字段，那么需要将其设置为0</p><h5 id="限制文档"><a href="#限制文档" class="headerlink" title="限制文档"></a>限制文档</h5><p>MongoDB Limit() 方法</p><p>要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p>limit()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER)</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将只显示2个文档，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>如果不指定 limit()方法的参数数量，然后它会显示集合中的所有文档。</p><p>MongoDB Skip() 方法</p><p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。</p><p>语法</p><p>skip() 方法的基础语法如下所示：<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p><p>例子：</p><p>下面的例子将仅显示第二个文档。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，skip() 方法的默认值是 0</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p>要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。</p><p>语法</p><p>sort()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().sort({KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有如下数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示的文件排序按标题降序排序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;title&quot;:-1&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果不指定排序类型，那么 sort() 方法将以升序排列文档。</p><h4 id="MongoDB索引"><a href="#MongoDB索引" class="headerlink" title="MongoDB索引"></a>MongoDB索引</h4><p>索引支持查询高效率执行。如果没有索引，MongoDB必须扫描集合中的每一个文档，然后选择那些符合查询语句的文档。若需要 mongod 来处理大量数据，扫描是非常低效的。</p><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。</p><p>要创建索引，需要使用MongoDB的ensureIndex()方法。</p><p>语法</p><p>ensureIndex()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code></p><p>这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.</p><p>例子</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">在 ensureIndex()方法，可以通过多个字段，来创建多个字段索引。</span><br><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法还接受选项列表（这是可选），其列表如下：<br><img src="/post-images/1561132706992.png" alt></p><h4 id="MongoDB-聚合"><a href="#MongoDB-聚合" class="headerlink" title="MongoDB 聚合"></a>MongoDB 聚合</h4><p>聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。 在SQL中的count(*)，使用group by 与mongodb的聚合是等效的。 对于MongoDB的聚合，使用的是aggregate()方法。</p><p>语法</p><p>aggregate()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p><p>例子：</p><p>在集合中有以下数据：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai &apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;, </span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;, </span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;https://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在从上面的集合，如果想知道每一个用户编写的教程是多少，那么使用aggregate()方法，如下图所示的列表：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Yiibai Yiibai&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>用于上述用途将等效于sql查询： select by_user, count(*) from mycol group by by_user</code></pre><p>另外，在上述例子中，我们已经使用字段by_user进行分组并计算总和，也就是by_user 出现各个次数。一个列表中可用的聚集表达式。<br>    <img src="/post-images/1561132965786.png" alt></p><h4 id="MongoDB-复制"><a href="#MongoDB-复制" class="headerlink" title="MongoDB 复制"></a>MongoDB 复制</h4><p>复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。</p><h6 id="为什么要复制？"><a href="#为什么要复制？" class="headerlink" title="为什么要复制？"></a>为什么要复制？</h6><blockquote><pre><code>为了让数据安全数据的高（24*7）可用性灾难恢复无停机维护（如备份，索引重建，压缩）读取缩放（额外的副本来读取）副本集是透明的应用</code></pre></blockquote><h5 id="MongoDB复制的工作原理"><a href="#MongoDB复制的工作原理" class="headerlink" title="MongoDB复制的工作原理"></a>MongoDB复制的工作原理</h5><p>MongoDB通过使用副本集的复制来实现。副本集是一组承载同一个数据集的mongod实例。在副本的一个节点是接收所有的写操作主节点。所有的实例，次级，应用操作从主以便它们具有相同的数据集。副本集只能有一个主节点。</p><blockquote><pre><code>副本集是一组两个或更多个节点（通常至少3节点是必需的）。在副本集一个节点是主节点和其余的节点都是次要的。所有的数据复制是从主到次节点。在自动故障转移或维护时，选建立了主要和一个新的主节点被选择。故障节点的恢复后，再次加入副本集，并可以作为一个辅助节点。</code></pre></blockquote><p>mongodb复制的典型图如下图，其中客户端应用程序总是与主节点和主节点交互，然后将数据复制到辅助节点。<br><img src="/post-images/1561133216694.png" alt><br>副本集特征</p><ul><li>N个节点的集群</li><li>任何节点可为原发/主节点</li><li>所有的写操作进入到主节点</li><li>自动故障转移</li><li>自动恢复</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.policx.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MySQL 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymysql/"/>
    <id>https://www.policx.com/2018/05/02/pymysql/</id>
    <published>2018-05-02T03:14:27.000Z</published>
    <updated>2019-07-13T08:15:01.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是-PyMySQL？"><a href="#什么是-PyMySQL？" class="headerlink" title="什么是 PyMySQL？"></a>什么是 PyMySQL？</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><a id="more"></a> <h2 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h2><p>在文件中引入模块</p><p><code>import pymysql</code></p><h3 id="1-Connection对象"><a href="#1-Connection对象" class="headerlink" title="1.Connection对象"></a>1.Connection对象</h3><p>•  用于建立与数据库的连接<br>•  创建对象：调用connect()方法<br>conn=connect(参数列表)<br>•  参数host：连接的mysql主机，如果本机是’localhost’<br>•  参数port：连接的mysql主机的端口，默认是3306<br>•  参数db：数据库的名称<br>•  参数user：连接的用户名<br>•  参数password：连接的密码<br>•  参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</p><h3 id="2-对象的方法"><a href="#2-对象的方法" class="headerlink" title="2.对象的方法"></a>2.对象的方法</h3><p>•  close()关闭连接<br>•  commit()事务，所以需要提交才会生效<br>•  rollback()事务，放弃之前的操作<br>•  cursor()返回Cursor对象，用于执行sql语句并获得结果</p><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><p>•  执行sql语句<br>•  创建对象：调用Connection对象的cursor()方法<br>cursor1=conn.cursor()</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>•  close()关闭<br>•  execute(operation [, parameters ])执行语句，返回受影响的行数<br>•  fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组<br>•  next()执行查询语句时，获取当前行的下一行<br>•  fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回<br>•  scroll(value[,mode])将行指针移动到某个位置<br>•  mode表示移动的方式<br>•  mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动。相对的<br>•  mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0，绝对的。</p><h4 id="举个例子便于理解"><a href="#举个例子便于理解" class="headerlink" title="举个例子便于理解"></a>举个例子便于理解</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 导入python操作mysql的模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> pymysql</span><br><span class="line"><span class="hljs-comment"># 获取连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="hljs-string">'127.0.0.1'</span>, user=<span class="hljs-string">'root'</span>, password=<span class="hljs-string">'123456'</span>, database=<span class="hljs-string">'python01'</span>, port=<span class="hljs-number">3306</span>, charset=<span class="hljs-string">'utf8'</span>)</span><br><span class="line"><span class="hljs-comment"># 获取执行工具</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="hljs-comment"># sql语句,增删改</span></span><br><span class="line"><span class="hljs-comment">#sql = 'select birthday from t_user'</span></span><br><span class="line">sql = <span class="hljs-string">'select id,name,pwd,birthday from t_user'</span></span><br><span class="line"><span class="hljs-comment"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span></span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(<span class="hljs-string">'查询的结果有%s条数据'</span>%count)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取第一行</span></span><br><span class="line">dateOne = cur.fetchone()</span><br><span class="line">print(dateOne)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向上移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向下移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'absolute'</span>)   绝对的，这里指的是第一行</span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'relative'</span>)   相对的</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取所有行的数据</span></span><br><span class="line">dataAll = cur.fetchall()</span><br><span class="line">print(dataAll)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">     print(temp)</span><br><span class="line">     print(dataAll[<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])      <span class="hljs-comment">#dataAll[-1]得到的是一个用户所有的信息，dataAll[-1][2]获取最后一个人的密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> cur:</span><br><span class="line">     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-string">'id:%s,name:%s,pwd:%s,birthday:%s'</span></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">    print(s%(temp[<span class="hljs-number">0</span>],temp[<span class="hljs-number">1</span>],temp[<span class="hljs-number">2</span>],temp[<span class="hljs-number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-对象的属性"><a href="#3-对象的属性" class="headerlink" title="3.对象的属性"></a>3.对象的属性</h3><p>•  rowcount只读属性，表示最近一次execute()执行后受影响的行数<br>•  connection获得当前连接对象</p><h3 id="2-增删改查-CRUD"><a href="#2-增删改查-CRUD" class="headerlink" title="2.增删改查(CRUD)"></a>2.增删改查(CRUD)</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>•  创建testInsert.py文件，向学生表中插入一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;insert into students(sname) values(&apos;张良&apos;)&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p>•  创建testUpdate.py文件，修改学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;update students set sname=&apos;刘邦&apos; where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>•  创建testDelete.py文件，删除学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8 import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;delete from students where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>•  创建testSelectOne.py文件，查询一条学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Pymysql try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>•  创建testSelectMany.py文件，查询全部学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf8 import Pymysql</span><br><span class="line">try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="实例一：参数"><a href="#实例一：参数" class="headerlink" title="实例一：参数"></a>实例一：参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改，sql注入</span><br><span class="line">sql = &apos;insert into t_user(name,pwd,birthday) values(%s,%s,%s)&apos;</span><br><span class="line"># 参数列表</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = input(&apos;输入生日:&apos;)     # 2017年10月01日--&gt;日期struct_time(---&gt;2017-10-01)</span><br><span class="line">birthday = time.strptime(birthday,&apos;%Y年%m月%d日&apos;)      #这里我们就用到了时间与字符串的相互转换(详情见MySQL高级)</span><br><span class="line"></span><br><span class="line">params = [name,pwd,birthday]</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql,params)</span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">print(&apos;受影响的行数:%s&apos;%count)</span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例二：抛出异常"><a href="#实例二：抛出异常" class="headerlink" title="实例二：抛出异常"></a>实例二：抛出异常</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    conn = None</span><br><span class="line">    cur = None</span><br><span class="line">    # 获取连接对象</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">                           user=&apos;root&apos;,</span><br><span class="line">                           password=&apos;123456&apos;,</span><br><span class="line">                           database=&apos;python01&apos;,</span><br><span class="line">                           port=3306,</span><br><span class="line">                           charset=&apos;utf8&apos;)</span><br><span class="line">    # 模拟异常</span><br><span class="line">    # a = 1 / 0</span><br><span class="line">    # 获取执行工具</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    # sql语句,增删改</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd,birthday) values(&quot;小伊&quot;,&quot;123456&quot;,str_to_date(&quot;2017年10月20日&quot;,&quot;%Y年%m月%d日&quot;))&apos;</span><br><span class="line">    # 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">    count = cur.execute(sql)</span><br><span class="line">    # 提交</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(&apos;受影响的行数:%s&apos; % count)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    # 打印异常信息，测试时候使用，项目上线，去掉</span><br><span class="line">    print(str(ex))</span><br><span class="line">    # 将异常继续抛出</span><br><span class="line">    # raise</span><br><span class="line">finally:</span><br><span class="line">    if cur != None:</span><br><span class="line">        cur.close()</span><br><span class="line">    if conn != None:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例三："><a href="#实例三：" class="headerlink" title="实例三："></a>实例三：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改</span><br><span class="line">#sql = &apos;select birthday from t_user&apos;</span><br><span class="line">sql = &apos;select id,name,pwd,birthday from t_user&apos;</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(&apos;查询的结果有%s条数据&apos;%count)</span><br><span class="line"></span><br><span class="line">#获取第一行</span><br><span class="line"># dateOne = cur.fetchone()</span><br><span class="line"># print(dateOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for temp in cur:</span><br><span class="line">#     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;id:%s,name:%s,pwd:%s,birthday:%s&apos;</span><br><span class="line">for temp in dataAll:</span><br><span class="line">    print(s%(temp[0],temp[1],temp[2],temp[3]))</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h3><p>这个库的名字：mySqlHelper</p><p> python操作mysql进行增删改查的封装</p><pre><code>1、增删改，代码类似2、查询代码分析1、获取连接对象2、sql语句不同，参数不同3、获取执行对象    增删改    查询        1、fetchone        2、fetchall4、处理结果5、关闭</code></pre><h4 id="面向对象-建立类，封装属性和函数"><a href="#面向对象-建立类，封装属性和函数" class="headerlink" title="面向对象  建立类，封装属性和函数"></a>面向对象  建立类，封装属性和函数</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">class MysqlHelper:</span><br><span class="line">    &apos;&apos;&apos;python操作mysql的增删改查的封装&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, host, user, password, database, port=3306, charset=&apos;utf8&apos;):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化参数</span><br><span class="line">        :param host:        主机</span><br><span class="line">        :param user:        用户名</span><br><span class="line">        :param password:    密码</span><br><span class="line">        :param database:    数据库</span><br><span class="line">        :param port:        端口号，默认是3306</span><br><span class="line">        :param charset:     编码，默认是utf8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        获取连接对象和执行对象</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.conn = pymysql.connect(host=self.host,</span><br><span class="line">                                    user=self.user,</span><br><span class="line">                                    password=self.password,</span><br><span class="line">                                    database=self.database,</span><br><span class="line">                                    port=self.port,</span><br><span class="line">                                    charset=self.charset)</span><br><span class="line"></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    def fetchone(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数元组，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataOne = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataOne = self.cur.fetchone()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataOne</span><br><span class="line"></span><br><span class="line">    def fetchall(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数列表，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataall = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataall = self.cur.fetchall()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataall</span><br><span class="line"></span><br><span class="line">    def __item(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行增删改</span><br><span class="line">        :param sql:           sql语句</span><br><span class="line">        :param params:        sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:              受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        count = 0</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行修改</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def insert(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行新增</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def delete(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行删除</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        关闭执行工具和连接对象</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if self.cur != None:</span><br><span class="line">            self.cur.close()</span><br><span class="line">        if self.conn != None:</span><br><span class="line">            self.conn.close()</span><br></pre></td></tr></table></figure><h4 id="1-测试查询多条数据"><a href="#1-测试查询多条数据" class="headerlink" title="1.测试查询多条数据"></a>1.测试查询多条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where name = %s and id &gt; %s&apos;</span><br><span class="line"># params</span><br><span class="line">params = [&apos;小茗&apos;,1]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchall(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    for temp in data:</span><br><span class="line">        print(temp)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br><span class="line"></span><br><span class="line">helper.close()</span><br></pre></td></tr></table></figure><h4 id="2-测试查询一条数据"><a href="#2-测试查询一条数据" class="headerlink" title="2.测试查询一条数据"></a>2.测试查询一条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where id = %s&apos;</span><br><span class="line">#sql = &apos;select * from t_user where id = 1&apos;</span><br><span class="line"># params</span><br><span class="line">params = [2]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchone(sql, params)</span><br><span class="line">#data = helper.fetchone(sql)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    print(data)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br></pre></td></tr></table></figure><h4 id="3-测试增删改"><a href="#3-测试增删改" class="headerlink" title="3.测试增删改"></a>3.测试增删改</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;update t_user set name =%s,pwd=%s,birthday=%s where id=%s&apos;</span><br><span class="line"># params</span><br><span class="line">id = input(&apos;输入编号:&apos;)</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = time.strptime(input(&apos;输入生日:&apos;), &apos;%Y年%m月%d日&apos;)</span><br><span class="line">params = [name, pwd, birthday,id]</span><br><span class="line"># 执行</span><br><span class="line">count = helper.update(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if count:</span><br><span class="line">    print(&apos;操作成功.&apos;)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;操作失败.&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-登录和注册"><a href="#4-登录和注册" class="headerlink" title="4.登录和注册"></a>4.登录和注册</h4><p>登录和注册的时候需要对密码进行加密</p><p>注意：</p><p>•  需要对密码进行加密<br>•  如果使用md5加密，则密码包含32个字符<br>•  如果使用sha1加密，则密码包含40个字符，这里使用这种方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table userinfos(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    uname varchar(20),</span><br><span class="line">    upwd char(40),</span><br><span class="line">    isdelete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">ret = doPwd(&apos;123&apos;)</span><br><span class="line">print(ret)</span><br><span class="line">结果：40bd001563085fc35165329ea1ff5c5ecbdbbeef</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">-- 插入如下数据，用户名为123,密码为123,这是sha1加密后的值</span><br><span class="line"></span><br><span class="line">insert into userinfos </span><br><span class="line">values(1,&apos;123&apos;,&apos;40bd001563085fc35165329ea1ff5c5ecbdbbeef&apos;,0);</span><br></pre></td></tr></table></figure><h4 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from mysqlHelper import MysqlHelper</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    &apos;&apos;&apos;登录&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    #加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;select * from t_user where name=%s and pwd=%s&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    data = helper.fetchone(sql, params)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;登录成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;登录失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doPwd(pwd):</span><br><span class="line">    &apos;&apos;&apos;sha1编码&apos;&apos;&apos;</span><br><span class="line">    mysha1 = hashlib.sha1()</span><br><span class="line">    mysha1.update(pwd.encode(&apos;utf-8&apos;))</span><br><span class="line">    pwd = mysha1.hexdigest()</span><br><span class="line">    return pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    &apos;&apos;&apos;注册&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    # 加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd) values(%s,%s)&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    count = helper.insert(sql, params)</span><br><span class="line">    if count:</span><br><span class="line">        print(&apos;操作成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;操作失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #register()</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PyMySQL？&quot;&gt;&lt;a href=&quot;#什么是-PyMySQL？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PyMySQL？&quot;&gt;&lt;/a&gt;什么是 PyMySQL？&lt;/h2&gt;&lt;p&gt;PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。&lt;/p&gt;
&lt;p&gt;PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django笔记</title>
    <link href="https://www.policx.com/2018/04/18/django-bi-ji/"/>
    <id>https://www.policx.com/2018/04/18/django-bi-ji/</id>
    <published>2018-04-17T17:00:16.000Z</published>
    <updated>2019-07-12T10:07:09.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p><a id="more"></a><h2 id="一-版本选择"><a href="#一-版本选择" class="headerlink" title="一. 版本选择"></a>一. 版本选择</h2><p>Django 2.0.x 支持 Python 3.4, 3.5 和 3.6 （注意，不再支持 Python 2）   </p><h2 id="二-安装-Django"><a href="#二-安装-Django" class="headerlink" title="二. 安装 Django"></a><strong>二. 安装 Django</strong></h2><p><strong>2.1. 用 pip 来安装</strong></p><p><strong>2.1.1 需要先安装pip</strong></p><p>(1). Linux, Mac OSX, Windows 下都可用 get-pip.py 来安装<br>pip：<a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/installing.html</a>  </p><p>或者直接下载：<a href="https://bootstrap.pypa.io/get-pip.py" title="get-pip.py" target="_blank" rel="noopener">get-pip.py</a> 然后运行在终端运行 <strong>python get-pip.py 就可以安装 pip。</strong></p><p>Note: 也可以下载 pip 源码包，运行 <strong>python setup.py install</strong> 进行安装 </p><p><strong>2.1.2 利用 pip 安装 Django</strong></p><p><code>（sudo) pip install Django    或者(sudo) pip install Django==1.8.16 或者 pip install Django==1.11.8</code>    </p><p>如果想升级 pip 可以用： </p><pre><code>(sudo) pip install --upgrade pip</code></pre><p><strong>2.2. 下载源码安装</strong>  </p><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">https://www.djangoproject.com/download/</a></p><p>如果是源码包, 比如 django-1.11.8.tar.gz </p><p><strong>2.2.1 Linux 或 Mac 下</strong></p><pre><code>tar -xvf django-1.11.8.tar.gzcd django-1.11.8(sudo) python setup.py install</code></pre><h2 id="三-检查是否安装成功"><a href="#三-检查是否安装成功" class="headerlink" title="三. 检查是否安装成功"></a><strong>三. 检查是否安装成功</strong></h2><p>终端上输入 python ,点击 Enter，进行 python 环境</p><pre><code>&gt;&gt;&gt; import django&gt;&gt;&gt; django.VERSION(1, 11, 8, &apos;final&apos;, 0)&gt;&gt;&gt; &gt;&gt;&gt; django.get_version()&apos;1.11.8&apos;</code></pre><p>如果运行后看到版本号，就证明安装成功了！ </p><h2 id="四-搭建多个互不干扰的开发环境（可选）"><a href="#四-搭建多个互不干扰的开发环境（可选）" class="headerlink" title="四. 搭建多个互不干扰的开发环境（可选）"></a><strong>四. 搭建多个互不干扰的开发环境（可选）</strong></h2><p>我们有的时候会发现，一个电脑上有多个项目，一个依赖 Django 1.8，另一个比较旧的项目又要用 Django 1.5，这时候怎么办呢？ </p><p>我们需要一个依赖包管理的工具来处理不同的环境。 </p><h3 id="4-1-虚拟环境依赖安装"><a href="#4-1-虚拟环境依赖安装" class="headerlink" title="4.1 虚拟环境依赖安装"></a>4.1 虚拟环境依赖安装</h3><p>开发会用 virtualenv 来管理多个开发环境 </p><p><strong>Linux/MacOS 下</strong></p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了 </p><pre><code># 安装:(sudo) pip install virtualenv virtualenvwrapper</code></pre><p>修改~/.bash_profile或其它环境变量相关文件(如 .bashrc 或用 ZSH 之后的 .zshrc)，添加以下语句  </p><pre><code>export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/workspacesource /usr/local/bin/virtualenvwrapper.sh</code></pre><p>修改后使之立即生效(也可以重启终端使之生效)： </p><pre><code>source ~/.bash_profile</code></pre><h3 id="4-2-虚拟环境使用方法："><a href="#4-2-虚拟环境使用方法：" class="headerlink" title="4.2 虚拟环境使用方法："></a><strong>4.2 虚拟环境使用方法：</strong></h3><p><strong>mkvirtualenv zqxt：创建运行环境zqxt</strong></p><p><strong>workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境</strong></p><p><strong>deactivate</strong>: 退出终端环境</p><p><strong>其它的：</strong></p><p><strong>rmvirtualenv</strong> ENV：删除运行环境ENV </p><p><strong>mkproject</strong> mic：创建mic项目和运行环境mic </p><p><strong>mktmpenv</strong>：创建临时运行环境 </p><p><strong>lsvirtualenv</strong>: 列出可用的运行环境 </p><p><strong>lssitepackages</strong>: 列出当前环境安装了的包 </p><p>创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django部署——uwsgi+Nginx</title>
    <link href="https://www.policx.com/2018/04/17/django/"/>
    <id>https://www.policx.com/2018/04/17/django/</id>
    <published>2018-04-17T09:42:04.000Z</published>
    <updated>2019-07-13T08:10:51.809Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!</p><a id="more"></a><p><img src="/post-images/1560768371650.png" alt><br>环境：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3.6</span><br><span class="line">centos 7</span><br><span class="line">Django1.11</span><br></pre></td></tr></table></figure><h2 id="1、本地跑起来Django"><a href="#1、本地跑起来Django" class="headerlink" title="1、本地跑起来Django"></a>1、本地跑起来Django</h2><p>这里不讲Django项目实施过程，假设你已经写了一个Django项目，并且在本地127.0.0.1:8000能够跑起来。喏，给你个参考，项目大概长这样：<br><img src="/post-images/1560764670814.png" alt></p><ul><li>kindle目录为我创建的Django App</li></ul><h2 id="2、修改项目配置"><a href="#2、修改项目配置" class="headerlink" title="2、修改项目配置"></a>2、修改项目配置</h2><p>也就是项目目录下的settings.py文件，主要强调几个地方：</p><p>①关闭DEBUG模式：<br><img src="/post-images/1560764736238.png" alt><br>②修改ALLOWED_HOSTS：<br><img src="/post-images/1560764863424.png" alt><br>③配置静态文件存放路径：<br><img src="/post-images/1560764833026.png" alt></p><p>修改好配置之后执行:<br><code>python manage.py collectstatic</code><br>将项目用到的静态文件复制到项目根目录下的static文件中<br><img src="/post-images/1560764930146.png" alt></p><h2 id="3、安装uwsgi和Nginx"><a href="#3、安装uwsgi和Nginx" class="headerlink" title="3、安装uwsgi和Nginx"></a>3、安装uwsgi和Nginx</h2><p>这个没什么说的。。。在自己的云服务器上装好这两个工具<br>安装好uwsgi后最好验证一下，验证方法：<br>创建一个test.py文件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)])</span><br><span class="line">    return [b&apos;Hello world!&apos;]    #python3</span><br><span class="line">    # return [&apos;Hello world!&apos;]    #python2</span><br></pre></td></tr></table></figure><p>启动uwsgi服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --wsgi-file test.py</span><br></pre></td></tr></table></figure><p>如果可以正常启动而不报错那就应该没问题，不放心的话再在终端验证一下：<br><code>wget https://127.0.0.1:8000</code><br>看一下能否正确获取内容</p><h2 id="4、配置项目的uwsgi"><a href="#4、配置项目的uwsgi" class="headerlink" title="4、配置项目的uwsgi"></a>4、配置项目的uwsgi</h2><p>在项目所在文件夹下创建uwsgi.ini配置文件，也就是这里:<br><img src="/post-images/1560765049955.png" alt><br>在uwsgi.ini里进行如下配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># Django-related settings</span><br><span class="line"> </span><br><span class="line"># 这里的端口可以根据自己需要设定</span><br><span class="line">socket = 127.0.0.1:8001        </span><br><span class="line"> </span><br><span class="line"># the base directory (full path)</span><br><span class="line"># 这个是Django项目的根目录，也就是包含App的那个目录，仔细对照上图</span><br><span class="line">chdir           = /home/python/book2kindle</span><br><span class="line"> </span><br><span class="line"># Django s wsgi file</span><br><span class="line"># 这里是项目名(不是App名).wsgi</span><br><span class="line">module          = book2kindle.wsgi</span><br><span class="line"> </span><br><span class="line"># process-related settings</span><br><span class="line"># master</span><br><span class="line">master          = true</span><br><span class="line"> </span><br><span class="line"># maximum number of worker processes</span><br><span class="line">processes       = 32</span><br><span class="line"> </span><br><span class="line"># ... with appropriate permissions - may be needed</span><br><span class="line"># chmod-socket    = 664</span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum          = true</span><br><span class="line"> </span><br><span class="line">plugin python = true</span><br><span class="line"> </span><br><span class="line"># 这个是项目的虚拟python环境，如果没用虚拟环境，可以不设定</span><br><span class="line">home = /home/python/book2kindle_env</span><br></pre></td></tr></table></figure><h2 id="5、配置项目的nginx"><a href="#5、配置项目的nginx" class="headerlink" title="5、配置项目的nginx"></a>5、配置项目的nginx</h2><p>找到nginx的配置文件夹，centos7的nginx配置文件在/etc/nginx下，该路径下有一个nginx.conf总配置文件，还有两个文件夹./conf.d、./default.d，我们将nginx.conf复制一份到conf.d文件夹下，命名为nginx.conf（或者项目名.conf）进行如下修改（根据中文注释进行相应配置即可）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream django &#123;</span><br><span class="line">        # 注意这里的server要和uwsgi.ini配置文件中的socket保持一致</span><br><span class="line">        server 127.0.0.1:8002; # for a web port socket</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  xxx.com;  # 这里填自己的域名或者服务器的ip（决定你今后访问网站的方式）</span><br><span class="line">        charset      utf-8;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        location / &#123;</span><br><span class="line">        root        /home/python/book2kindle/kindle;  # 这是Django App的路径</span><br><span class="line">            uwsgi_pass  django;</span><br><span class="line">            include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">        &#125;</span><br><span class="line">        location /static &#123;</span><br><span class="line">            # Django项目静态文件的路径</span><br><span class="line">            alias /home/python/book2kindle/static; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、启动uwsgi和nginx"><a href="#6、启动uwsgi和nginx" class="headerlink" title="6、启动uwsgi和nginx"></a>6、启动uwsgi和nginx</h2><p>进入uwsgi.ini文件夹下执行：<br><code>uwsgi --ini uwsgi.ini</code><br>在终端执行：<br><code>service nginx restart</code><br>然后就可以根据域名（前提是要将域名解析到服务器ip地址）或者服务器ip来访问网站了！</p><p>OK，完事！就是这么简单！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Django写了个小网站，只能在自己本地跑一跑！这怎么行？听说可以部署在云服务器上，这样别人就可以访问了!&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>2018创业记：如何选择合伙人？</title>
    <link href="https://www.policx.com/2018/03/25/chuangye/"/>
    <id>https://www.policx.com/2018/03/25/chuangye/</id>
    <published>2018-03-25T13:02:42.000Z</published>
    <updated>2019-07-13T08:06:31.136Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><a id="more"></a><h2 id="创业路上危机四伏，如何破局？"><a href="#创业路上危机四伏，如何破局？" class="headerlink" title="创业路上危机四伏，如何破局？"></a>创业路上危机四伏，如何破局？</h2></li></ul><p>很多朋友在2018年做出了改变，迈出了新的一步。比如身边几位朋友正摩拳擦掌准备创业。然而，看别人创业和自己创业完全是两回事儿，见得再多，自己趟水时也难免有所顾虑。</p><p>在跟他们聊过之后，我们发现了他们普遍面临的一个课题：如何选择合伙人?这是身经百战的连续创业者也很难驾轻就熟的一个课题，今天我们就来一起聊聊。本文将从能不能和朋友一起创业、合伙人应该与我互补还是相似、如何判断双方是否志同道合、如何应对常见的分歧几个部分展开来说。</p><p>风物长宜放眼量，抱持开阔的胸襟、敏锐的判断、坚韧的意志，相信大家能够与志同道合的伙伴一起，越过山丘，携手站上梦想之巅。</p><h2 id="能不能和朋友一起创业？"><a href="#能不能和朋友一起创业？" class="headerlink" title="能不能和朋友一起创业？"></a>能不能和朋友一起创业？</h2><p>在创业初期，创业者选择合伙人往往会从身边的朋友“下手”。</p><p>一起创业可以说是认清一个朋友的最好方式。一篇名为《友谊的代价》的论文，考察了3510个风险投资者，以及他们在1975-2003年间11895个投资项目。</p><p>论文写道，有的人选择与自己能力相当的人合作，比如同是名校毕业；但更多的人选择与自己的熟人合作，比如曾经的同学或同事。结果表明，按能力搭档可以增加投资的成功概率，而找熟人搭档，则会明显降低成功的可能性。</p><p>所有人都喜欢强联系，但关系是关系，工作归工作。现在社会学已经有了足够多的证据说明：对工作来说，同乡会和校友录并不是扩展人脉的好地方。《中国合伙人》这部电影上映后，“千万别跟好朋友合伙开公司”也成了热议话题。电影的最后，三位合伙人分道扬镳，而剧本的原型——新东方的三位创始人也以“分家”收场。</p><p>当然，朋友合伙创业成功的案例也不在少数，况且，长期的伙伴关系更有助于共同面对创业过程中的艰难险阻，团队也更容易在创业初期获得投资人的青睐。如果在寻找合伙人的过程中，你觉得还是某个朋友更适合，那么一定要在合作之前约法三章，考虑到最坏的情况，提前用书面合同的方式确定双方的责权利，用规章制度来约束指导双方的行为，而不是靠人情关系。</p><p>中间一旦觉得发生了问题，你就必须考虑一下能否继续合作下去。其实，很多合作者走不到最后就是因为中间的小问题没有解决，一点一点积累最后爆发出来。</p><p>因此，能否和朋友一起创业这个问题，需要辩证思考。如果朋友间相互了解对方的个性和能力，工作中能做到分工明确，用规章制度来规范双方的行为，及时解决小矛盾，相互照顾，一起分担，共同奋斗，那么创业成功就会成为大概率事件。</p><h2 id="合伙人应该与我互补还是相似？"><a href="#合伙人应该与我互补还是相似？" class="headerlink" title="合伙人应该与我互补还是相似？"></a>合伙人应该与我互补还是相似？</h2><p>一个较为合理的答案是：理念和价值观上要相似，能力和经验上要互补。</p><p>理念和价值观上的相近，可以保证你们在重大原则问题上的判断是比较一致的，不至于出现根本性的冲突。这些重大的原则问题包括企业的战略方向、利益分配机制、做事的基本底线等等。</p><p>在这些问题上出现不同意见，通常很难取得共识。因为个性和价值观的形成，通常都不是一朝一夕的事情，也就是我们常说的“江山易改，本性难移”。如果在创业的艰难环境下，双方还要来磨合这个层面的东西，就会非常痛苦。</p><p>能力和经验上的互补相对更好理解。你擅长产品，他专于研发；你有丰富的运营经验，他则对于商业模式的建立更有心得；你对数字不敏感，他则是投资和财务领域的资深人士。这些都是很好的互补。</p><p>互补可以让你们在具体事情的推进中事半功倍，并建立起对于对方在专业领域的依靠和信任。人不可能是全能的，如果一切未知的领域都需要你自己来摸索，费时费力不说，风险还很大。</p><p>对于相似还是互补这个问题的解读，还可以反向进行。比如你们是能力经验上的相近，而在理念上互补，你可以想象一下是个什么局面，一定是你不会的他也不会，你觉得对的他觉得不对，那就真的很难合作下去了。</p><h2 id="如何判断双方是否志同道合？"><a href="#如何判断双方是否志同道合？" class="headerlink" title="如何判断双方是否志同道合？"></a>如何判断双方是否志同道合？</h2><p>对于这个问题，不同的人可能会给出非常不同的答案。雷军就曾说过，他找人有两个要素：“一要最专业，小米的合伙人都是各管一块，这样能保证整个决策非常快，把业务交给他，要能实打实做出成绩来；二要最合适，主要是指要有创业心态，对所做的事要极度喜欢，有共同的愿景，这样就会有很强的驱动力。”</p><p>雷军说，他在三个月的时间里见了超过100位做硬件的人选，终于找到了负责硬件的联合创始人周光平博士，两人第一次见面就谈了12个小时。</p><p>而周鸿祎表示，他会选择具备这四种素质的合伙人：首先应该有创业精神；其次要有很强的学习能力；第三，要有很好的开放合作心态；此外，还要能自我激励，自我驱动，同样一件事，用打工的心态和用创业的心态做，效果完全不一样。</p><p>虽然答案因人而异，但仍然可以总结出一些判断标准，以下几条可为你选择合伙人时提供参考。</p><h3 id="1、关系有一定的深度和广度，彼此信任"><a href="#1、关系有一定的深度和广度，彼此信任" class="headerlink" title="1、关系有一定的深度和广度，彼此信任"></a>1、关系有一定的深度和广度，彼此信任</h3><p>共事且维持朋友关系多年的创业团队关系更深，有可能经受住紧张和冲突的考验。合伙人未必需要成为最要好的朋友，但如果他们相互喜欢的话事情可能会更好办些。更重要的是，创始人之间应该尊重彼此以及他们给团队带来的不同能力。不信任合伙人的能力会导致手伸过头，还可能会导致控制权之争。在这种窝里斗的情况下大部分的合作关系都无法维系。</p><h3 id="2、了解彼此的优势和劣势，分工明确"><a href="#2、了解彼此的优势和劣势，分工明确" class="headerlink" title="2、了解彼此的优势和劣势，分工明确"></a>2、了解彼此的优势和劣势，分工明确</h3><p>尊重彼此的技能和优势并不意味着创始人就不需要审视合伙人的弱点了。友谊更久自然也会更了解某人的特长和技能。这些不同的技能有助于创始人团队自然地分清责任、角色，在某些情况下还可以分清头衔。根据每一位合伙人的技能明确划分职责，对创业的帮助很大。做事的时候每个人要有独立的角色，但同时永远要对其他合伙人的反馈持开放态度。</p><h3 id="3、确保所有合伙人对成功和失败的定义一致"><a href="#3、确保所有合伙人对成功和失败的定义一致" class="headerlink" title="3、确保所有合伙人对成功和失败的定义一致"></a>3、确保所有合伙人对成功和失败的定义一致</h3><p>韧性最强的创始人不会从财务的角度去衡量自己的初创企业是否成功，相反，他们会从使命的角度去衡量。他们的初创企业只是追求实现使命的手段。但是，并不是所有的创始人都这么看，甚至一开始关注使命的创始人有时候到后面也会转向考虑财务方面的事情。</p><p>有的创始人可能志存高远，为了尽快做大愿意烧很多钱，而有的人希望逐步打磨产品，限制人数规模和保留现金尺度。不仅对成功的认知会影响运营决策，对失败的认知同样会起作用。</p><p>在创业过程中，其中一位合伙人急着退出的故事屡见不鲜，因此这个教训值得一提再提。对于拥有成功企业的创始人来说，避免在这个问题上发生冲突的关键是定期讨论这件事。应该在公司早期就设定好目标，并且对这个话题进行定期复议。</p><h3 id="4、所有合伙人均应对股权分配满意"><a href="#4、所有合伙人均应对股权分配满意" class="headerlink" title="4、所有合伙人均应对股权分配满意"></a>4、所有合伙人均应对股权分配满意</h3><p>哈佛教授Wasserman发现，73%的联合创业团队一般在公司成立30天内就确定了如何进行股权分配。股权分配当然是任何共同创业的人都要首先考虑的事情之一，但事实上在那个时候，没人知道谁干活最卖力，谁对初创企业的贡献最有价值。过早确定股权分配会导致后面发生问题。如果可以的话，最好等到你有机会了解大家一起工作会是什么个情况后再正式分蛋糕。话虽如此，这件事情还是不要拖太久，围绕股权的分歧最好在公司早期就解决掉。</p><h3 id="5、永远要相互支持"><a href="#5、永远要相互支持" class="headerlink" title="5、永远要相互支持"></a>5、永远要相互支持</h3><p>这话听上去似乎太空泛，但是合伙人的关系也可能会反复无常，尤其是在受到不同观点、董事会成员等的影响下。合伙人之间的相互支持可带来信心，确保合伙人和员工都有共同的使命感。</p><p>团队应该早点理解一件事，任何情况下合伙人之间都应该背靠背相互支持，所以合伙人要尽量避免当着员工、董事会等人的面互相拆台，这样能够让公司其他人感觉到他们友情之牢固，让每一位合伙人都能保持镇定，因为他们知道对方一定会支持自己的。</p><h2 id="如何应对常见的分歧？"><a href="#如何应对常见的分歧？" class="headerlink" title="如何应对常见的分歧？"></a>如何应对常见的分歧？</h2><h3 id="1、公司走向的歧见"><a href="#1、公司走向的歧见" class="headerlink" title="1、公司走向的歧见"></a>1、公司走向的歧见</h3><p>在0到1的探索期，公司的走向往往是由合伙人一起决定的。但进入1到100的扩张期，一个年轻企业通常会开始有董事会以及重要的供应、通路伙伴。久而久之，合伙人对于公司未来走向的看法，常常会越来越变得分歧。</p><p>防范这个陷阱要从根源开始：每当CEO有了新的资讯、成长、学习、领悟，应该积极地与合伙人分享，协助他们获得与你类似的成长。同时，你应该把小范围的决策授权出去，让他们也能继续主导公司某一部分的走向。最后，你应该积极管理大家对决策的期望值，新创公司必须在“快”与“好”之间做出平衡，因此决策求的是多数对，而不是样样对。</p><h3 id="2、无法适应制度"><a href="#2、无法适应制度" class="headerlink" title="2、无法适应制度"></a>2、无法适应制度</h3><p>0到1的新创团队求快，因此不会有太多制度。进入1到100阶段，公司势必要开始建立一些管理系统，以在风险与发展中间取得平衡。</p><p>有些习惯了说干就干的合伙人，在此时会产生严重的不适应，时间一长甚至会觉得公司背离了创办的初衷。要解决这个问题，除了及早发现及早辅导外，请他们参与、主导制度的设计，也是协助合伙人适应新制度的方法。</p><h3 id="3、越权管理"><a href="#3、越权管理" class="headerlink" title="3、越权管理"></a>3、越权管理</h3><p>当公司开始有部门、部门主管，合伙人还是习惯看不顺眼就管，容易造成经理人的困扰。更有甚者，造成合伙人对经理人不信任，反而让经理人没有足够的时间、空间去适应、学习。这个问题通常是惯性使然，重点就是要打破它。所以，看到这样的行为要赶快提醒伙伴们注意。</p><h3 id="4、无法跟上公司成长的需要"><a href="#4、无法跟上公司成长的需要" class="headerlink" title="4、无法跟上公司成长的需要"></a>4、无法跟上公司成长的需要</h3><p>在公司快速扩张期，一个3人产品团队可能在一年内成长为30人，而两者之间管理上的不同，常常会让本来擅长技术、产品，但从来没有管理中大型团队经验的合伙人一时间跟不上公司发展的步伐。</p><p>回到扩张前，你应该早早找到好的CTO Mentor，在扩张中，经常鼓励他在管理知识与能力上精进。扩张后，如果他真的无法适应，也比较能够接受去寻找更有经验的CTO，而自己退居部门二把手、三把手。</p><h3 id="5、利益分配"><a href="#5、利益分配" class="headerlink" title="5、利益分配"></a>5、利益分配</h3><p>当公司越来越成功、越赚钱、离IPO越近，股权与利益的问题就会越容易产生。尤其当初的股权分配如果没有彰显每个合伙人的相对价值，那团队中可能酝酿出不良情绪。</p><p>比较好的方法当然是早期就把这个问题解决掉，因为到了后期，你的工具会越来越有限。但也不是没有机会修正，如果有合伙人离开，你可以收回他的股权来重新分配。如果有B、C、D轮增资，你可以跟投资人要求“期权池”(ESOP)，通过发放新的选择权来平衡。最后，如果真的过于集中，负责任的CEO，甚至会拿出自己的股权分配给伙伴们。</p><p>选择合伙人未必有一定之规，创业路上可能遇到的危机也远远不止上述这些，希望这篇文章能对你有所裨益，助你在创业路上少走弯路，也祝愿创业者们在2018年博得好彩头，大鹏一日同风起，扶摇直上九万里。</p><p>本文来源：<a href="https://www.sohu.com/a/225670991_100064845" target="_blank" rel="noopener">联想之星</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="life" scheme="https://www.policx.com/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown 的设计哲学</title>
    <link href="https://www.policx.com/2018/03/22/markdown/"/>
    <id>https://www.policx.com/2018/03/22/markdown/</id>
    <published>2018-03-22T11:32:01.000Z</published>
    <updated>2019-07-07T04:34:16.836Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 </p><a id="more"></a><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote><h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown<em>是什么</em>？</h4><h4 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h4><h4 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h4><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><em>怎么</em>使用？</h4><h4 id="谁在用？"><a href="#谁在用？" class="headerlink" title="谁在用？"></a><em>谁</em>在用？</h4><h4 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h4></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p><h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/" target="_blank" rel="noopener"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p><p>他有着足以让你跪拜的人生经历：    </p><ul><li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li><li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li><li><strong>2005</strong>年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。   </li><li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li><li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li><li><strong>2013</strong>年1月自杀身亡。    </li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz"></p><p>天才都有早逝的归途。</p><h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h3><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p><p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\</code></strong>，<strong>符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p><p>代码区块：</p><pre><code>void main(){    printf(&quot;Hello, Markdown.&quot;);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格<em>或</em>制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code>    </p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul><li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错   </li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。    </li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><hr><p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><hr><p>以上基本是所有traditonal markdown的语法。</p><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><hr><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p><video src="http://structr.learn-anything.cn/video/道理/陈铭：像我这种老好人，根本没什么真朋友！不jue亲戚的人，根本没什么真亲戚！.mp4" width="320" height="180" controls="controls"></video> </p><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="https://www.policx.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>数据类型和变量</title>
    <link href="https://www.policx.com/2018/03/01/python-type/"/>
    <id>https://www.policx.com/2018/03/01/python-type/</id>
    <published>2018-02-28T20:28:19.000Z</published>
    <updated>2019-07-07T04:35:56.433Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python 数据类型和变量</p><a id="more"></a> <h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：</p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</p><p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。如果’本身也是一个字符，那就可以用””括起来，比如”I’m OK”包含的字符是I，’，m，空格，O，K这6个字符。</p><p>如果字符串内部既包含’又包含”怎么办？可以用转义字符\来标识，比如：</p><p><code>&#39;I\&#39;m \&quot;OK\&quot;!&#39;</code><br>表示的字符串内容是：</p><p><code>I&#39;m &quot;OK&quot;!</code><br>转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\表示的字符就是\，可以在Python的交互式命令行用print()打印字符串看看：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;I\&apos;m ok.&apos;)</span><br><span class="line">I&apos;m ok.</span><br><span class="line">&gt;&gt;&gt; print(&apos;I\&apos;m learning\nPython.&apos;)</span><br><span class="line">I&apos;m learning</span><br><span class="line">Python.</span><br><span class="line">&gt;&gt;&gt; print(&apos;\\\n\\&apos;)</span><br><span class="line"></span><br><span class="line">\</span><br><span class="line">\</span><br></pre></td></tr></table></figure><p>如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义，可以自己试试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&apos;\\\t\\&apos;)</span><br><span class="line">\       \</span><br><span class="line">&gt;&gt;&gt; print(r&apos;\\\t\\&apos;)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure><p>如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，可以自己试试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;&apos;&apos;line1</span><br><span class="line">... line2</span><br><span class="line">... line3&apos;&apos;&apos;)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure><p>上面是在交互式命令行内输入，注意在输入多行内容时，提示符由&gt;&gt;&gt;变为…，提示你可以接着上一行输入，注意…是提示符，不是代码的一部分：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt - python                           _ □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│&gt;&gt;&gt; print(&apos;&apos;&apos;line1                                      │</span><br><span class="line">│... line2                                               │</span><br><span class="line">│... line3&apos;&apos;&apos;)                                           │</span><br><span class="line">│line1                                                   │</span><br><span class="line">│line2                                                   │</span><br><span class="line">│line3                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│&gt;&gt;&gt; _                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>当输入完结束符<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果写成程序并存为.py文件，就是：</span><br></pre></td></tr></table></figure></p><p>print(‘’’line1<br>line2<br>line3’’’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多行字符串&apos;&apos;&apos;...&apos;&apos;&apos;还可以在前面加上r使用，请自行测试：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>print(r’’’hello,\n<br>world’’’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">### 布尔值</span><br><span class="line">布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True<br>True<br>False<br>False<br>3 &gt; 2<br>True<br>3 &gt; 5<br>False</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">布尔值可以用and、or和not运算。</span><br><span class="line"></span><br><span class="line">#### and运算是与运算，只有所有都为True，and运算结果才是True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True and True<br>True<br>True and False<br>False<br>False and False<br>False<br>5 &gt; 3 and 3 &gt; 1<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### or运算是或运算，只要其中有一个为True，or运算结果就是True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>True or True<br>True<br>True or False<br>True<br>False or False<br>False<br>5 &gt; 3 or 1 &gt; 3<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### not运算是非运算，它是一个单目运算符，把True变成False，False变成True：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>not True<br>False<br>not False<br>True<br>not 1 &gt; 2<br>True</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">布尔值经常用在条件判断中，比如：</span><br></pre></td></tr></table></figure><p>if age &gt;= 18:<br>    print(‘adult’)<br>else:<br>    print(‘teenager’)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">### 空值</span><br><span class="line">空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</span><br><span class="line"></span><br><span class="line">此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。</span><br><span class="line"></span><br><span class="line">### 变量</span><br><span class="line">变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</span><br><span class="line"></span><br><span class="line">变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头，比如：</span><br><span class="line"></span><br><span class="line">`a = 1`</span><br><span class="line">变量a是一个整数。</span><br><span class="line"></span><br><span class="line">`t_007 = &apos;T007&apos;`</span><br><span class="line">变量t_007是一个字符串。</span><br><span class="line"></span><br><span class="line">`Answer = True`</span><br><span class="line">变量Answer是一个布尔值True。</span><br><span class="line"></span><br><span class="line">在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>a = 123 # a是整数<br>print(a)<br>a = ‘ABC’ # a变为字符串<br>print(a)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</span><br></pre></td></tr></table></figure><p>int a = 123; // a是整数类型变量<br>a = “ABC”; // 错误：不能把字符串赋给整型变量</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">和静态语言相比，动态语言更灵活，就是这个原因。</span><br><span class="line"></span><br><span class="line">请不要把赋值语句的等号等同于数学的等号。比如下面的代码：</span><br></pre></td></tr></table></figure><p>x = 10<br>x = x + 2</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果从数学上理解x = x + 2那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。</span><br><span class="line"></span><br><span class="line">最后，理解变量在计算机内存中的表示也非常重要。当我们写：</span><br><span class="line"></span><br><span class="line">`a = &apos;ABC&apos;`</span><br><span class="line">时，Python解释器干了两件事情：</span><br><span class="line"></span><br><span class="line">在内存中创建了一个&apos;ABC&apos;的字符串；</span><br><span class="line"></span><br><span class="line">在内存中创建了一个名为a的变量，并把它指向&apos;ABC&apos;。</span><br><span class="line"></span><br><span class="line">也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据，例如下面的代码：</span><br></pre></td></tr></table></figure><h1 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>a = ‘ABC’<br>b = a<br>a = ‘XYZ’<br>print(b)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Run</span><br><span class="line">最后一行打印出变量b的内容到底是&apos;ABC&apos;呢还是&apos;XYZ&apos;？如果从数学意义上理解，就会错误地得出b和a相同，也应该是&apos;XYZ&apos;，但实际上b的值是&apos;ABC&apos;，让我们一行一行地执行代码，就可以看到到底发生了什么事：</span><br><span class="line"></span><br><span class="line">执行a = &apos;ABC&apos;，解释器创建了字符串&apos;ABC&apos;和变量a，并把a指向&apos;ABC&apos;：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923791878255456/0)</span><br><span class="line"></span><br><span class="line">执行b = a，解释器创建了变量b，并把b指向a指向的字符串&apos;ABC&apos;：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923792058613440/0)</span><br><span class="line"></span><br><span class="line">执行a = &apos;XYZ&apos;，解释器创建了字符串&apos;XYZ&apos;，并把a的指向改为&apos;XYZ&apos;，但b并没有更改：</span><br><span class="line"></span><br><span class="line">![](https://www.liaoxuefeng.com/files/attachments/923792191637760/0)</span><br><span class="line"></span><br><span class="line">所以，最后打印变量b的结果自然是&apos;ABC&apos;了。</span><br><span class="line"></span><br><span class="line">### 常量</span><br><span class="line">所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：</span><br><span class="line"></span><br><span class="line">`PI = 3.14159265359`</span><br><span class="line">但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。</span><br><span class="line"></span><br><span class="line">最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是/：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 / 3<br>3.3333333333333335</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>9 / 3<br>3.0</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还有一种除法是//，称为地板除，两个整数的除法仍然是整数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 // 3<br>3</p></blockquote></blockquote></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你没有看错，整数的地板除//永远是整数，即使除不尽。要做精确的除法，使用/就可以。</span><br><span class="line"></span><br><span class="line">因为//除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>10 % 3<br>1</p><pre><code>无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</code></pre></blockquote></blockquote></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。</p><p>对变量赋值x = y是把变量x指向真正的对象，该对象是变量y所指向的。随后对变量y的赋值不影响变量x的指向。</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在-2147483648-2147483647。<br>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 数据类型和变量&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
</feed>
