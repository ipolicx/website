<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IP</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.policx.com/"/>
  <updated>2019-07-16T11:56:33.845Z</updated>
  <id>https://www.policx.com/</id>
  
  <author>
    <name>policx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter的环境配置for Mac</title>
    <link href="https://www.policx.com/2019/07/16/flutter/"/>
    <id>https://www.policx.com/2019/07/16/flutter/</id>
    <published>2019-07-16T10:14:18.000Z</published>
    <updated>2019-07-16T11:56:33.845Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 </p><a id="more"></a><h2 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装Flutter</h2><p>首先我们可以在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fdocs%2Fget-started%2Finstall" target="_blank" rel="noopener">Flutter官网</a>上面看到一些配置环境的步骤。这里就直接开干了，走起。 </p><h3 id="1、配置HomeBrew"><a href="#1、配置HomeBrew" class="headerlink" title="1、配置HomeBrew"></a>1、配置HomeBrew</h3><p>我们在去配置Flutter的环境之前，需要先检查一下HomeBrew是不是最新的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br></pre></td></tr></table></figure><p>如果没有brew的话，可以去<a href="https://link.juejin.im?target=https%3A%2F%2Fbrew.sh%2F" target="_blank" rel="noopener">HomeBrew官网</a>自行下载。这里就不赘述了，这里如果重新下载的话，看到下面的打印信息就说明下载完毕了。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3aad595f24923.jpg" alt></p><h3 id="2、下载SDK"><a href="#2、下载SDK" class="headerlink" title="2、下载SDK"></a>2、下载SDK</h3><p>接下来就是去官网下载SDK了。注意，这里下载SDK有两种方法：</p><ul><li>一是直接<code>git clone -b beta https://github.com/flutter/flutter.git</code>下载</li><li>二是自己在官网下载下来，如下图<br><img src="https://i.loli.net/2019/07/16/5d2db40e0aecc50465.jpg" alt></li></ul><p>这里我两种方法都试过了一遍，第一种方法实在是太慢了，在经历了耗费一个半小时下载到94%，最后提示失败了的过程之后，我决定还是用第二种方法，整个过程只用了3分钟的样子，相当满意。下载完之后，是一个名字叫<code>flutter_macos_v1.5.4-hotfix.2-stable.zip</code>的压缩包。 然后我们解压这个zip包，把解压出来的<strong>flutter</strong>文件放到根目录下即可。 </p><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p>因为Flutter的SDK中包含了很多的命令行工具。我们就需要配置环境变量，所以我直接就安装到了根目录下了。</p><p><strong>配置镜像</strong></p><p>因为Flutter在运行的时候，就需要去官网下载一些需要的资源，但是因为天国特色的wall的原因，我们就需要镜像服务器，这个在<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.dev%2Fcommunity%2Fchina" target="_blank" rel="noopener">官网</a>上面有写的很明白，而且这是一个临时的镜像，后面还要以官网的镜像地址为准。 </p><p><img src="https://i.loli.net/2019/07/16/5d2db3f2c1f4f64480.jpg" alt></p><p>我们跳转到根目录 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>就能找到这个<code>.bash_profile</code>隐藏文件，我们用vim打开这个文件 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后需要输入就把A键按一下进入编辑模式，把下面三个环境变量配置进去 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line">export PATH=/Users/xueliheng/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>注意下，第三个环境变量这里<code>/Users/xueliheng/</code>是我的根目录，然后<code>/flutter/</code>是我们刚刚解压的的zip包里面的<code>flutter</code>文件夹。上面两个环境变量是两个镜像地址，上文中也有说过。 接着<code>shift+：</code>然后输入<code>wq</code>保存并退出vim。输入如下命令： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>最后我们就可以验证一下flutter环境有没有配置成功了。输入： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure><p>看到如下如的打印信息就是配置成功了<br><img src="https://i.loli.net/2019/07/16/5d2db44407fa682753.jpg" alt></p><h3 id="4、配置Android-Studio"><a href="#4、配置Android-Studio" class="headerlink" title="4、配置Android Studio"></a>4、配置Android Studio</h3><p>如果没有下载<strong>Android Studio</strong>的话，就去<a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.android.google.cn%2Fstudio" target="_blank" rel="noopener">官网</a>去下载一下。 我们用<code>flutter doctor</code>命令去检查一下flutter的环境配置，我们可以看到如下打印 </p><p><img src="https://i.loli.net/2019/07/16/5d2db4676ec3a36838.jpg" alt></p><p>这里的每个<code>✗</code>都是我们要去解决的问题。不过他有告诉你应该怎么做。比如第一个提示： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices</span><br><span class="line">    ✗ Unable to locate Android SDK.</span><br></pre></td></tr></table></figure><p>这就是让你去下载Android Studio。我们在下载完成之后，打开AS让他去下载一些应该下载的东西。 如果这里有提示你 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[✗] Android toolchain - develop for Android devices (Android SDK version 24.0.2)</span><br><span class="line">    ✗ Flutter requires Android SDK 28 and the Android BuildTools 28.0.3</span><br></pre></td></tr></table></figure><p>这就是在提示让你去升级一下SDK，然后命令如下 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;/Users/xueliheng/Library/Android/sdk/tools/bin/sdkmanager&quot; &quot;platforms;android-28&quot; &quot;build-tools;28.0.3&quot;</span><br></pre></td></tr></table></figure><p>注意一下，这个地方的升级是需要”科学上网“的，如果有的小伙伴没有这个条件的话，我这边百度云上面给大家准备了一个<a href="https://link.juejin.im?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F10yp8PuRXxk7YvcNR_dTy8Q" target="_blank" rel="noopener">链接</a>，提取码: e48c，大家可以下载下来。下载下来之后解压到<code>/Users/Library/Android/</code>这个文件夹。把原先的SDK直接覆盖就行了，就已经是最新的SDK了。 </p><p>接下来我们配置一下安卓的环境变量，还是在根目录下找到<code>.bash_profile</code>文件，并在其中添加四个环境变量 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=~/Library/Android/sdk</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/emulator</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br></pre></td></tr></table></figure><p>分别是： </p><ul><li>安卓sdk的路径</li><li>安卓的模拟器路径</li><li>安卓tools路径</li><li>安卓平台工具</li></ul><p>接下来我们再用<code>flutter doctor</code>检查的时候，显示的信息如下图<br><img src="https://i.loli.net/2019/07/16/5d2db4964a70b73490.jpg" alt></p><p>意思就是让我们去下载iOS的相关环境，我们先暂时放放，下面还有一个关于<strong>Android Studio</strong>的没有解决完</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">✗ Dart plugin not installed; this adds Dart specific functionality.</span><br></pre></td></tr></table></figure><p>这个就是缺少Flutter插件的意思，那么我们就去AS里面去配置一下好了。打开AS的<code>Preferences</code>，点击<code>Plugins</code>，在搜索栏中输入<code>flutter</code>，找到相应的插件，然后<code>Install</code>。当跳出安装Dart插件的提示界面时，记得点击Yes进行安装。安装完毕之后<code>restart IDE</code>重启AS。 重启之后就能看到多了一个这个东西<br><img src="https://i.loli.net/2019/07/16/5d2db4b731cbd14001.jpg" alt></p><p>我们再用<code>flutter doctor</code>检测一下<br><img src="https://i.loli.net/2019/07/16/5d2db4cdc6dd137908.jpg" alt></p><p>现在终于ok了。我们看到<code>[✓]Android Studio</code>说明，安卓的环境基本上配置成功，接下来我们就配置一下安卓的模拟器就好了。 </p><h3 id="5、安卓模拟器配置"><a href="#5、安卓模拟器配置" class="headerlink" title="5、安卓模拟器配置"></a>5、安卓模拟器配置</h3><p>在AS中找到模拟器配置如下图并选择<br><img src="https://i.loli.net/2019/07/16/5d2db4dacfde455330.jpg" alt></p><p>接着就创建设备，选择设备<br><img src="https://i.loli.net/2019/07/16/5d2db4e68a2ed68879.jpg" alt></p><p>选择系统<br><img src="https://i.loli.net/2019/07/16/5d2db4f6cdc5889902.jpg" alt></p><p>最后点击下载就完成了。 </p><h3 id="6、配置iOS环境"><a href="#6、配置iOS环境" class="headerlink" title="6、配置iOS环境"></a>6、配置iOS环境</h3><p>我们配置完了安卓的环境，再来<code>flutter doctor</code>检测一下。<br><img src="https://i.loli.net/2019/07/16/5d2db50ad75eb82331.jpg" alt></p><p>情况是这样的。目前1.5.4版本的Flutter需要匹配新版本的Xcode10.2.1。按照他提示的来试试，提示我Xcode版本太低了，需要升级Xcode<br><img src="https://i.loli.net/2019/07/16/5d2db5275c8f825074.jpg" alt></p><p>更新到最新的之后，继续走下面的步骤依旧会报错。那么我们可以试试下面的这个办法： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew link pkg-config</span><br><span class="line">$ brew install --HEAD usbmuxd</span><br><span class="line">$ brew unlink usbmuxd</span><br><span class="line">$ brew link usbmuxd</span><br><span class="line">$ brew install --HEAD libimobiledevice</span><br><span class="line">$ brew install ideviceinstaller</span><br></pre></td></tr></table></figure><p>这些执行完之后执行一下<code>flutter doctor</code><br><img src="https://i.loli.net/2019/07/16/5d2db5515858b19228.jpg" alt></p><p>最后还真是没错，全部配置完成了！那么我们就把iOS的也配置完毕了。</p><h3 id="7、VSCode的使用"><a href="#7、VSCode的使用" class="headerlink" title="7、VSCode的使用"></a>7、VSCode的使用</h3><p>VSCode上面使用的话，就简单多了，这里我就简答的赘述一下。 只需要将<code>Dart</code>和<code>Flutter</code>插件都下载下来<br><img src="https://i.loli.net/2019/07/16/5d2db5643b08597602.jpg" alt></p><p>然后<code>command+shift+p</code>输入<code>flutter</code>，选择<code>Flutter：New Project</code><br><img src="https://i.loli.net/2019/07/16/5d2db576e145096766.jpg" alt></p><p>输入要创建的项目的名称和存放项目的地址。如果提示需要指明flutter的SDK的路径，那就选择根目录那个经过解压得来的flutter的文件夹就好了。 接下来是这样一个界面<br><img src="https://i.loli.net/2019/07/16/5d2db588f1b5152482.jpg" alt></p><p>接下来我们选择<code>View-&gt;Start Debugging</code>来运行项目。<br><img src="https://i.loli.net/2019/07/16/5d2db59bb3b3338193.jpg" alt></p><p>当然这个过程需要你把Xcode的模拟器打开。运行完之后就能看到这个界面，也就是你的第一个Flutter工程啦！<br><img src="https://i.loli.net/2019/07/16/5d2db5ad5eaf434960.jpg" alt></p><h3 id="8、Hot-reload的使用"><a href="#8、Hot-reload的使用" class="headerlink" title="8、Hot reload的使用"></a>8、Hot reload的使用</h3><p>我们打开<code>lib/main.dart</code>文件，然后在其中找到 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have pushed the button this many times:</span><br></pre></td></tr></table></figure><p>并把这个改为 </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have clicked the button this many times:</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/16/5d2db5cc5b4f279074.jpg" alt><br>那么我们就能看到界面上多了一个小闪电<br><img src="https://i.loli.net/2019/07/16/5d2db5f044c0553935.jpg" alt></p><p>我们现在如果<code>command+s</code>保存一下更改的话，就能很快的在模拟器上面看到相应的更改，不需要再重新去编译一边。这一点简直是太棒了！解决了iOS开发者一个大痛点啊！！！ </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，flutter的环境搭建工作基本上就进行完毕了，整个过程大概耗时接近2个小时，这期间包括采坑、查资料、下载、科学上网…等等很蛋疼的事情。当然网速基本上是最大的障碍，浪费了很多的时间。所以也是需要一定的耐心来完成的。 后面的文章也会持续的更新，最近有点懈怠，OpenGL系列的文章有点拖更的节奏，这个后面会补起来。Flutter我也才刚刚接手，也是慢慢的来采坑，也会以此来记录自己的学习经历，也希望能多多跟大家交流。 再次我附上自己的邮箱<code>coderspr1nghall@gmail.com</code>欢迎讨论交流。 </p><p><a href="https://juejin.im/post/5d0508d56fb9a07ec373eb9e" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2dbb03b8ef977558.jpg" alt></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近Flutter已经疯狂的刷屏了各个技术博客、技术网站，完全有一统天下的气势。所以最近也决定开始尝尝鲜，从零开始一步步的来探索Flutter的世界。就从环境搭建开始，记录一下自己探索Flutter的过程。 &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://www.policx.com/2019/07/15/spider/"/>
    <id>https://www.policx.com/2019/07/15/spider/</id>
    <published>2019-07-15T02:06:04.000Z</published>
    <updated>2019-07-16T05:23:13.802Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。</p><a id="more"></a><p>其实爬虫这个概念很简单，基本可以分成以下几个步骤：</p><ul><li><p>发起网络请求</p></li><li><p>获取网页</p></li><li><p>解析网页获取数据</p></li></ul><p>发起网络请求这个步骤常用的类库有标准库urllib以及Python上常用的requests库。解析网页常用的类库有的BeautifulSoup。另外requests的作者还开发了另一个很好用的库requests-html，提供了发起请求和解析网页的二合一功能，开发小型爬虫非常方便。另外还有一些专业的爬虫类库，其中比较出名的就是scrapy。本文将会简单介绍一下这些类库，之后还会专门写一篇文章介绍scrapy的用法。</p><h2 id="标准库urllib"><a href="#标准库urllib" class="headerlink" title="标准库urllib"></a><strong>标准库urllib</strong></h2><p>首先先来看标准库urllib。标准库的优点是Python自带的，不需要安装任何第三方库，缺点就是urllib属于偏底层的库，使用起来比较麻烦。下面是urllib发起请求的一个简单例子，大家看看就好。可以看到为了发起一个简单的请求，我们需要创建opener、request、ProxyHandler等好几个对象，比较麻烦。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> urllib.request <span class="hljs-keyword">as</span> request</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="hljs-string">'https'</span>: <span class="hljs-string">'https://127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="hljs-string">'http'</span>: <span class="hljs-string">'http://127.0.0.1:1080'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'--------------使用urllib--------------'</span>)</span><br><span class="line">url = <span class="hljs-string">'http://www.google.com'</span></span><br><span class="line">opener = request.build_opener(request.ProxyHandler(proxies))</span><br><span class="line">request.install_opener(opener)</span><br><span class="line">req = request.Request(url, headers=headers)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a><strong>requests</strong></h2><p>requests是Kenneth Reitz大神的著名作品之一，优点就是极度简单和好用。首先来安装requests。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>下面是一个简单的例子，和上面urllib示例代码实现的功能相同，但是代码量少多了，也更易读。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="hljs-string">'--------------使用requests--------------'</span>)</span><br><span class="line">response = requests.get(<span class="hljs-string">'https://www.google.com'</span>, headers=headers, proxies=proxies)</span><br><span class="line">response.encoding = <span class="hljs-string">'utf8'</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>requests还可以方便的发送表单数据，模拟用户登录。返回的Response对象还包含了状态码、header、raw、cookies等很多有用的信息。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="hljs-string">'name'</span>: <span class="hljs-string">'yitian'</span>,</span><br><span class="line">    <span class="hljs-string">'age'</span>: <span class="hljs-number">22</span>,</span><br><span class="line">    <span class="hljs-string">'friends'</span>: [<span class="hljs-string">'zhang3'</span>, <span class="hljs-string">'li4'</span>]</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="hljs-string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">pprint(response.__dict__)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>关于requests我就不多做介绍了，因为它有中文文档，虽然比官方落后几个小版本号，不过无伤大雅，大家可以放心参阅。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://cn.python-requests.org/zh_CN/latest/</span><br></pre></td></tr></table></figure><h2 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a><strong>beautifulsoup</strong></h2><p>利用前面介绍的requests类库，我们可以轻易地获取HTML代码，但是为了从HTML中找到所需的数据，我们还需要HTML/XML解析库，BeautifulSoup就是这么一个常用的库。首先先来安装它：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>这次就用我简书主页作为例子，爬取一下我简书的文章列表。首先先用requests获取到网页内容。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"><span class="hljs-keyword">import</span> bs4</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><p>然后就是BeautifulSoup的代码了。在使用BeautifulSoup的时候首先需要创建一个HTML树，然后从树中查找节点。BeautifulSoup主要有两种查找节点的办法，第一种是使用find和find_all方法，第二种方法是使用select方法用css选择器。拿到节点之后，用contents去获取它的子节点，如果子节点是文本，就会拿到文本值，注意这个属性返回的是列表，所以要加[0]。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html = bs4.BeautifulSoup(response.text, features=<span class="hljs-string">'lxml'</span>)</span><br><span class="line">note_list = html.find_all(<span class="hljs-string">'ul'</span>, class_=<span class="hljs-string">'note-list'</span>, limit=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.select(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.contents[<span class="hljs-number">0</span>]</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>BeautifulSoup也有中文文档，同样也是稍微落后两个小版本，影响不大。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</span><br></pre></td></tr></table></figure><h2 id="requests-html"><a href="#requests-html" class="headerlink" title="requests-html"></a><strong>requests-html</strong></h2><p>这个类库是requests的兄弟，同样也是Kenneth Reitz大神的作品。它将请求网页和解析网页结合到了一起。本来如果你用requests的话只能请求网页，为了解析网页还得使用BeautifulSoup这样的解析库。现在只需要requests-html一个库就可以办到。<br>首先先来安装。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests-html</span><br></pre></td></tr></table></figure><p>然后我们来看看用requests-html如何重写上面这个例子。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line">note_list = r.html.find(<span class="hljs-string">'ul.note-list'</span>, first=<span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> note_list.find(<span class="hljs-string">'li&gt;div.content&gt;a.title'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html除了可以使用css选择器来搜索以外，还可以使用xpath来查找。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>requests-html还有一个很有用的特性就是浏览器渲染。有些网页是异步加载的，直接用爬虫去爬只能得到一个空页面，因为数据是靠浏览器运行JS脚本异步加载的，这时候就需要浏览器渲染了。而浏览器渲染用requests-html做非常简单，只要多调用一个render函数即可。render函数有两个参数，分别指定页面下滑次数和暂停时间。render函数第一次运行的时候，requests-html会下载一个chromium浏览器，然后用它渲染页面。<br>简书的个人文章页面也是一个异步加载的例子，默认只会显示最近几篇文章，通过浏览器渲染模拟页面下滑，我们可以得到所有文章列表。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(url, headers=headers)</span><br><span class="line"><span class="hljs-comment"># render函数指示requests-html用chromium浏览器渲染页面</span></span><br><span class="line">r.html.render(scrolldown=<span class="hljs-number">50</span>, sleep=<span class="hljs-number">0.2</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> r.html.xpath(<span class="hljs-string">'//ul[@class="note-list"]/li/div[@class="content"]/a[@class="title"]'</span>):</span><br><span class="line">    title = a.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.jianshu.com<span class="hljs-subst">&#123;a.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》,<span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>类似的，今日头条的个人页面也是异步加载的，所以也得调用render函数。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> requests_html <span class="hljs-keyword">import</span> HTMLSession</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'user-agent'</span>:</span><br><span class="line">        <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br><span class="line">&#125;</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(<span class="hljs-string">'https://www.toutiao.com/c/user/6662330738/#mid=1620400303194116'</span>, headers=headers)</span><br><span class="line">r.html.render()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r.html.find(<span class="hljs-string">'div.rbox-inner a'</span>):</span><br><span class="line">    title = i.text</span><br><span class="line">    link = <span class="hljs-string">f'https://www.toutiao.com<span class="hljs-subst">&#123;i.attrs[<span class="hljs-string">"href"</span>]&#125;</span>'</span></span><br><span class="line">    print(<span class="hljs-string">f'《<span class="hljs-subst">&#123;title&#125;</span>》 <span class="hljs-subst">&#123;link&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>最后是requests-html的官网地址以及中文文档。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://html.python-requests.org/</span><br><span class="line">https://cncert.github.io/requests-html-doc-cn/</span><br></pre></td></tr></table></figure><h2 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a><strong>scrapy</strong></h2><p>以上介绍的几个框架都是各自有各自的作用，把它们结合起来可以达到编写爬虫的目的，但是要说专业的爬虫框架，还是得谈谈scrapy。作为一个著名的爬虫框架，scrapy将爬虫模型框架化和模块化，利用scrapy，我们可以迅速生成功能强大的爬虫。<br>不过scrapy概念众多，要仔细说还得专门开篇文章，这里就只简单演示一下。首先安装scrapy，如果是Windows系统，还需要安装pypiwin32。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy  </span><br><span class="line">pip install pypiwin32</span><br></pre></td></tr></table></figure><p>然后创建scrapy项目并添加一个新爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject myproject</span><br><span class="line">cd myproject</span><br><span class="line">scrapy genspider my jianshu.com</span><br></pre></td></tr></table></figure><p>打开配置文件settings.py，设置用户代理，否则会遇到403错误。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span></span><br></pre></td></tr></table></figure><p>然后修改一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JianshuSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="hljs-string">'jianshu'</span></span><br><span class="line">    allowed_domains = [<span class="hljs-string">'jianshu.com'</span>]</span><br><span class="line">    start_urls = [<span class="hljs-string">'https://www.jianshu.com/u/7753478e1554'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">'div.content'</span>):</span><br><span class="line">            <span class="hljs-keyword">yield</span> &#123;</span><br><span class="line">                <span class="hljs-string">'title'</span>: article.css(<span class="hljs-string">'a.title::text'</span>).get(),</span><br><span class="line">                <span class="hljs-string">'link'</span>: <span class="hljs-string">'https://www.jianshu.com'</span> + article.xpath(<span class="hljs-string">'a[@class="title"]/@href'</span>).get()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>最后运行一下爬虫。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl my</span><br></pre></td></tr></table></figure><br><p><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1563247765&ver=1731&signature=gm2iTUKE3itOZzvlz9SUtKCYNv*PqEYt2C7ReV7kd47e2ZAWPvG5GRXZUJsiRIde34Uh5FznBslw4hHhXmHQXyV3yz0tTdgds1RMCdai6Oyy98w2-iTBRWeJlpm3cWa8&new=1" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/16/5d2d4c5ba835e96705.jpg" alt="Python"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在Python语言大火，在网络爬虫、人工智能、大数据等领域都有很好的应用。今天我向大家介绍一下Python爬虫的一些知识和常用类库的用法，希望能对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DDoS（分布式拒绝服务）攻击是无解的吗？</title>
    <link href="https://www.policx.com/2019/07/14/ddos/"/>
    <id>https://www.policx.com/2019/07/14/ddos/</id>
    <published>2019-07-14T07:26:43.000Z</published>
    <updated>2019-07-14T08:41:14.777Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>“</p><p>DDOS？ </p><p>一言难尽啊！ </p><p>”</p><a id="more"></a><p>先说结论，DDoS是近年来网络攻击中的一棵“常青树”，的确很难缠，但说它是无解的，那也有点太看得起它了。虽然DDoS在对很多大平台的攻击中出尽了风头，但在现在互联网的解决方案中，并不缺乏应对DDoS的解决方案。 </p><p>说起DDoS攻击，我脑海里能够想到的全都是中国民间俗语，什么“双拳难敌四手，好汉架不住人多”，什么“千斤拨四两”，什么“乱拳打死老师傅”等等等等。 </p><p>之前有朋友跑来问我DDoS是个什么东西，为什么这么多互联网巨头都被搞得没有脾气，我记得我当时我是这么举的例子： </p><p>我们这一代人小的时候，自助餐开始在中国内地风行，那会儿这个行业里为了打击竞争对手，对手最惯常使用的阴招是雇佣很多五大三粗的人，给他们钱去对方的店里一通猛吃，杯盘狼藉之下，用不了几天这家自助餐就能给吃黄了。 </p><p>而DDoS攻击比这种还阴损，如果你开了一家餐馆，你的对手如果想搞你，最好的办法就是找一堆地痞流氓到你的店里坐的满满一屋子，你如果上前问，他们就一直跟你扯淡找麻烦，导致真正想吃饭的顾客一看这个情形，掉头就走了。 </p><p>用不了多久，你的餐馆就会开不下去，而你的竞争对手就会趁机蚕食掉你的市场份额，而放在网络语境里，这就是DDoS攻击的最基本原理。 </p><p>而这件事之所以难缠在于，一两个无赖根本成不了气候，想要耍流氓必须要有很多个无赖集结在一起。<strong>所以和现实世界中的无赖一样，DDoS真正的杀手锏在于利用能够发动的汹涌的流量，可以瞬间冲垮被攻击网站的服务器。</strong></p><p>如果我们回溯一下历史的话，会发现黑客组织之所以会有组织有预谋的发起DDoS攻击，基本上都是基于以下几个原因： </p><ul><li><p>有些行业如果网站被恶意攻击，会造成很难估量的损失，这个时候黑客发动DDoS攻击的初衷一般是出于敲诈勒索，为了保证企业的正常运转，他们通常愿意向黑客付高额的赎金； </p></li><li><p>行业内血海一片，DDoS是恶意竞争的屠刀。这个现象从逻辑上，其实雇佣无赖去占领对手餐馆的原理是一毛一样的，而且DDOS攻击早已产业化，现在中国的DDOS黑市，出钱请黑客打1G的流量到一个网吧或网站，市场价只要不到50块钱，但对于一个创业公司或者干脆就是一个小网吧来说，这已经算是可以灭顶的无妄之灾了。 </p></li><li><p>DDoS攻击往往成为掩盖真实网络攻击的烟雾弹，在遭受DDoS攻击的企业中，部分企业还伴随数据丢失的现象，黑客利用DDoS攻击掩盖其窃取用户隐私的真实目的，这种攻击行为在社交网站、金融领域等用户隐私高价值的行业尤为高发。 </p></li></ul><p>比如说，去年年初的时候，荷兰第一大银行荷兰商业银行于2018年1月28日晚间遭到DDoS攻击；第二大银行荷兰合作银行的网银服务29日早晨遭到攻击；第三大银行荷兰银行在那一周内共遭到7次网络攻击，仅周末就有3次。 </p><p>不过这一次发生在荷兰的针对银行系统的攻击并没有造成用户隐私的泄露，原因在于这仅仅是一次来自俄罗斯一个网络间谍组织Cozy Bear对荷兰情报组织AIVD侵犯其计算机的“单纯”的报复行为。<strong>但并不是所有黑客组织发起的DDoS攻击都如此单纯。</strong></p><p>2018年年底时万豪酒店发布了一则公告，称其旗下喜达屋酒店的5亿人次的信息被泄露，共计3.27亿人，泄露信息包括姓名、邮寄地址、电话号码、电子邮件昂面地址、护照号码、出生日期、性别等等入住信息，更糟糕的是万豪无法确定，侵入酒店系统的第三方黑客，在窃取的信息中是否包含客人的银行卡号和密码。（此案例和DDOS攻击无关，建议采用其他案例，比如2011年4月20日至26日，索尼遭受DDoS攻击，目的是为了掩盖盗取索尼PS的用户数据。） </p><p>而游戏领域，则是DDoS攻击的另一个重灾区，不光是刚才前文中提到的暴雪，包括索尼、金山、网易在内的众多知名游戏公司都曾数次遭受攻击，可以说DDoS攻击是游戏企业的噩梦。 </p><p>许多刚创业的游戏公司，可能刚上线就被打死，而一些处在融资阶段的游戏公司，由于遭遇攻击而被迫停服，则很大程度上会调低投资人的预期，甚至导致融资失败。 </p><p>而这些因素，都是竞对打压或者敲诈勒索的绝对软肋。 </p><p>从以上的几个案例我们不难看出，和现实中的耍流氓和敲诈勒索相比，通过网络手段进行攻击的风险和成本更低，坏蛋的嘴脸也更穷凶极恶一点，无论是政府机构还是企业平台，无论你是巨头还是小蚂蚁，只要你身上有羊毛可以薅，你都时刻面临着被洗劫的风险 </p><p>不过刚在开头我也讲了，虽然DDoS很难缠很让人头痛，但本质上图并不是无解的。 </p><p>回到我最开始讲的那个例子。 </p><p>你是一个餐馆老板，过去三十年一直是个老老实实的厨子，突然面对五十个臭流氓到你店里耍无赖的时候，你最好的应对方法，应该是什么？ </p><p>自己组建一支人马，和这些臭流氓正面刚？这恐怕不行，因为你不是臭流氓，你没有相应的作战经验。 </p><p>报警请人民警察来帮忙处理？这恐怕也不行，人家在你店里没有打砸抢，只是“温和的”非暴力不合作，警察来了也只能当民事调解，并且人家马仔众多，明天再换一拨新面孔来，玩的你一点脾气都没有。 </p><p>这就是面对DDoS时，无论是巨头还是小蚂蚁，他们的实实在在的困境。 </p><p>但正所谓“道高一尺魔高一丈”，你在云上和我耍流氓，那我就在云上回击。 </p><p><strong>“云”的事儿，不如还交还给云来处理。</strong>我认为就目前DDoS的在攻击量级上的疯狂进击的前提下，云计算服务厂商或许是狙击它们的最有效手段。 </p><p>2018年年初，峰值1.35TB/秒的流量冲击了开发者平台 GitHub。这是第一次TB量级的DDoS攻击。GitHub 受到攻击后，服务器断断续续，无法访问。攻击发生 10 分钟后，GitHub 向CDN 服务商 Akamai 请求协助，访问 GitHub 的流量已经由后者接管并在15分钟之内完成了防御。 </p><p>Akamai的相关负责人在接受采访时说，我们是基于迄今为止最大规模 DDoS 攻击五倍的峰值而做的相应准备，所以 1.3T 对我们来说是小意思。 </p><p>在关于流量峰值这一点上，我认为饱受双11、双12、618等全民购物狂欢的电商巨头们更有发言权，就拿京东举例子好了。 </p><p>京东云在之前发布的高防版的DDoS服务中，展示出了非常明确的信心是，在多年的电商狂欢流量对抗中，京东云已经在实战中建立了一套完备的防御机制，无论是在流量峰值的建模上，还是在DDoS的防御算法上，它的部署都远远不是纸上谈兵，而是拳拳到肉的经受住了实战的洗礼。要知道，全世界每年有超过5成的DDoS攻击都来自中国，而我们的国家也是全世界超过美国的第一大“肉鸡”市场，由电商大数据加持演化而来的京东云，它在云安全的理解上可以说是非常深刻了。 </p><p>所以说，如果说一定要有一个结论，我想说“上帝的归上帝，而云上的归云上”，像京东云这样的基于电商大数据考验的云计算平台，或许才是对抗DDoS的最终答案。 </p><p>From: <a href="https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/n2azdlye7mNHzlfL8nvnLA</a></p><p><strong>内容整理自：知乎@例不虚发探花郎</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“&lt;/p&gt;
&lt;p&gt;DDOS？ &lt;/p&gt;
&lt;p&gt;一言难尽啊！ &lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.policx.com/2019/07/14/node/"/>
    <id>https://www.policx.com/2019/07/14/node/</id>
    <published>2019-07-13T16:06:04.000Z</published>
    <updated>2019-07-15T09:40:32.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/15/5d2c47df96f5d45317.jpg" alt="Node.js"></p><p>能方便地搭建响应速度快、易于扩展的网络应用，Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>中文：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org</a>、<a href="https://nodejs.cn/" target="_blank" rel="noopener">https://nodejs.cn</a></p><p>简单说Node.js就是运行在服务器端的JavaScript，是现在流行的语言中能同时运行在前端与后台的程序语言，你可以把JavaScript想像成Java与C#。相关技术：</p><p>数据库：MongoDB，非关系型数据库，NoSQL（Not only SQL）</p><p>MVC框架：AngularJS</p><p>Web服务器：Express</p><p>模板引擎：jade、ejs、htmljs、swig、hogan.js</p><h1 id="二、搭建Node-js开发环境"><a href="#二、搭建Node-js开发环境" class="headerlink" title="二、搭建Node.js开发环境"></a>二、搭建Node.js开发环境</h1><h2 id="2-1、安装Node-js"><a href="#2-1、安装Node-js" class="headerlink" title="2.1、安装Node.js"></a>2.1、安装Node.js</h2><p>去官网下下载最新版本的Node.js一步一步按提示安装即可，如果安装失败就手动安装，将Node.js的安装位置配置到环境变量的path中。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装完成后启动命令行，测试：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h1 id="三、第一个Node-js程序"><a href="#三、第一个Node-js程序" class="headerlink" title="三、第一个Node.js程序"></a>三、第一个Node.js程序</h1><p>在上面的示例中，我们是通过IDE完成编译与运行的，其实手动运行也可以，比如编写一段代码如下：</p><blockquote><p>server.js</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//依赖一个http模块，相当于java中的import，与C#中的using</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">//创建一个服务器对象</span><br><span class="line">server = http.createServer(function (req, res) &#123;</span><br><span class="line">//设置请求成功时响应头部的MIME为纯文本</span><br><span class="line">res.writeHeader(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">//向客户端输出字符</span><br><span class="line">res.end(&quot;Hello World\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//让服务器监听本地8000端口开始运行</span><br><span class="line">server.listen(8000,&apos;127.0.0.1&apos;);</span><br><span class="line">console.log(&quot;server is runing at 127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>在node环境下解释运行：<br><img src="https://i.loli.net/2019/07/14/5d2af984d2fae77488.jpg" alt></p><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2af89c2b5b226144.jpg" alt></p><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>创建服务器：服务器可以监听客户端的请求，类似于TomCat、IIS、Apache 、Nginx 等 HTTP 服务器。<br>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。<br>接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</p><h1 id="四、NPM（Node-js包管理器）"><a href="#四、NPM（Node-js包管理器）" class="headerlink" title="四、NPM（Node.js包管理器）"></a>四、NPM（Node.js包管理器）</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：  </p><ul><li>a)、允许用户从NPM服务器下载别人编写的第三方包到本地使用。  </li><li>b)、允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。  </li><li>c)、允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>官网：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><h2 id="4-1、查看npm版本"><a href="#4-1、查看npm版本" class="headerlink" title="4.1、查看npm版本"></a>4.1、查看npm版本</h2><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p><h2 id="4-2、升级npm"><a href="#4-2、升级npm" class="headerlink" title="4.2、升级npm"></a>4.2、升级npm</h2><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="4-3、安装模块"><a href="#4-3、安装模块" class="headerlink" title="4.3、安装模块"></a>4.3、安装模块</h2><blockquote><p>npm install <module name> -参数</module></p></blockquote><p>如果带参数-g表示全局安装，否则只是安装到某个目录下。</p><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install express -g</span><br></pre></td></tr></table></figure><h2 id="4-4、卸载模块"><a href="#4-4、卸载模块" class="headerlink" title="4.4、卸载模块"></a>4.4、卸载模块</h2><p>我们可以使用以下命令来卸载 Node.js 模块。  </p><blockquote><p>sudo npm uninstall <module name></module></p></blockquote><p>如先使用安装指令安装bootstrap:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><p>再使用卸载指令删除模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall bootstrap</span><br></pre></td></tr></table></figure><p>可以到 /node_modules/ 目录下查看包是否还存在</p><h2 id="4-5、模块列表"><a href="#4-5、模块列表" class="headerlink" title="4.5、模块列表"></a>4.5、模块列表</h2><p>使用模块列表命令可以方便的看到当前项目中依赖的包：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h2 id="4-6、更新模块"><a href="#4-6、更新模块" class="headerlink" title="4.6、更新模块"></a>4.6、更新模块</h2><p>我们可以使用以下命令更新模块：<br><code>npm update</code>模块名称<br><code>npm up -g</code> 模块名称</p><h2 id="4-7、搜索模块"><a href="#4-7、搜索模块" class="headerlink" title="4.7、搜索模块"></a>4.7、搜索模块</h2><p><code>npm search</code>模块名称</p><h2 id="4-8、NPM-常用命令"><a href="#4-8、NPM-常用命令" class="headerlink" title="4.8、NPM 常用命令"></a>4.8、NPM 常用命令</h2><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。<br>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。<br>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。<br>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。<br>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。<br>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。<br>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></package></package></p><h2 id="4-9、更换NPM-镜像"><a href="#4-9、更换NPM-镜像" class="headerlink" title="4.9、更换NPM 镜像"></a>4.9、更换NPM 镜像</h2><p>因为npm的服务器在国外，在网络状态不好的情况下引入一个模块会因为网络延迟而失败，可以更换成国内速度更快的镜像服务器，这里以使用淘宝 NPM 镜像（<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>）为例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/15/5d2c481d14f7270384.jpg" alt></p><p>这样就可以使用 cnpm 命令来安装模块了：  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＄ cnpm install [name]</span><br></pre></td></tr></table></figure><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><p>如是安装失败，可以试试：</p><figure class="highlight zsh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">alias</span> cnpm=<span class="hljs-string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">--cache=<span class="hljs-variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">--userconfig=<span class="hljs-variable">$HOME</span>/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="hljs-string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="hljs-string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="hljs-string">  --userconfig=$HOME/.cnpmrc"'</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。使用Node.js作为AngularJS开发Web服务器的最佳方式是使用Express模块。</p><p>Express官网： <a href="https://expressjs.com/" target="_blank" rel="noopener">https://expressjs.com/</a></p><p>Express4.x API：<a href="https://expressjs.com/zh-cn/4x/api.html" target="_blank" rel="noopener">https://expressjs.com/zh-cn/4x/api.html</a></p><p><img src="https://i.loli.net/2019/07/15/5d2c484698cd427801.jpg" alt></p><h2 id="5-2、Express框架核心特性"><a href="#5-2、Express框架核心特性" class="headerlink" title="5.2、Express框架核心特性"></a><strong>5.2、Express框架核心特性</strong></h2><p>可以设置中间件来响应 HTTP 请求。</p><p>定义了路由表用于执行不同的 HTTP 请求动作。</p><p>可以通过向模板传递参数来动态渲染 HTML 页面。</p><p>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。</p><p>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p><h2 id="5-3、安装-Express"><a href="#5-3、安装-Express" class="headerlink" title="5.3、安装 Express"></a><strong>5.3、安装 Express</strong></h2><p>安装 Express 并将其保存到依赖列表中：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>以上命令全局安装express。也可安装时指定安装中间件。</p><p><em>body-parser</em> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</p><p><em>cookie-parser</em> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p><p><em>multer</em> - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">＄ npm install body-parser --save  </span><br><span class="line">＄ npm install cookie-parser --save  </span><br><span class="line">＄ npm install multer --save</span><br></pre></td></tr></table></figure><p>默认这些模块都已经添加。</p><h2 id="5-4、第一个Express框架实例"><a href="#5-4、第一个Express框架实例" class="headerlink" title="5.4、第一个Express框架实例"></a>5.4、第一个Express框架实例</h2><p>接下来我们使用 Express 框架来输出 “Hello World”。<br>以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。</p><p>创建一个目录，如Project，进入命令行：</p><p>使用npm install express 导入express模块。</p><p>在目录下创建hello.js文件，如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//引入express模块</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">//创建一个app对象，类似一个web 应用（网站）</span><br><span class="line">var app = express();</span><br><span class="line">//接受指定路径的请求，指定回调函数</span><br><span class="line">app.get(&apos;/&apos;, function (req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//创建一个web服务器，可以认为就是web服务器对象</span><br><span class="line">//监听8081端口，当监听成功时回调</span><br><span class="line">var server = app.listen(8081, function () &#123;</span><br><span class="line">   var host = server.address().address;  //地址</span><br><span class="line">   var port = server.address().port;  //端口</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-5、开发Express项目"><a href="#5-5、开发Express项目" class="headerlink" title="5.5、开发Express项目"></a>5.5、开发Express项目</h2><p><img src="https://i.loli.net/2019/07/14/5d2b00e97910997783.jpg" alt></p><p>创建好的项目如下：<br><img src="https://i.loli.net/2019/07/14/5d2b02dad205355700.jpg" alt></p><p>app.js是网站：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><p>bin\www是web服务器：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">/**</span><br><span class="line"> * 依赖模块，导入</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;nodejsexpress:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 从上下文环境中获得监听端口，如果空则3000</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建Web服务器</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开始监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);  //指定发生错误时的事件</span><br><span class="line">server.on(&apos;listening&apos;, onListening);  //当监听成功时的回调</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 规范化端口</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *错误事件监听</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  //错误处理</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);  //结束程序</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当用户访问服务器成功时的回调</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/index.js路由，有点类似控制器或Servlet：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 获得首页 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>views/index.ejs首页视图：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在www上右键选择“运行方式”-&gt;Run ‘/bin/www’ 运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b034bcca6187136.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b044c2b12347829.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b041724d6091090.jpg" alt></p><h3 id="5-5-1、request对象"><a href="#5-5-1、request对象" class="headerlink" title="5.5.1、request对象"></a>5.5.1、request对象</h3><p>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ul><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ul><h3 id="5-5-2、response对象"><a href="#5-5-2、response对象" class="headerlink" title="5.5.2、response对象"></a>5.5.2、response对象</h3><p>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res.app：同req.app一样</span><br><span class="line">res.append()：追加指定HTTP头</span><br><span class="line">res.set()在res.append()后将重置之前设置的头</span><br><span class="line">res.cookie(name，value [，option])：设置Cookie</span><br><span class="line">opition: domain / expires / httpOnly / maxAge / path / secure / signed</span><br><span class="line">res.clearCookie()：清除Cookie</span><br><span class="line">res.download()：传送指定路径的文件</span><br><span class="line">res.get()：返回指定的HTTP头</span><br><span class="line">res.json()：传送JSON响应</span><br><span class="line">res.jsonp()：传送JSONP响应</span><br><span class="line">res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</span><br><span class="line">res.redirect()：设置响应的Location HTTP头，并且设置状态码302</span><br><span class="line">res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</span><br><span class="line">res.send()：传送HTTP响应</span><br><span class="line">res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</span><br><span class="line">res.set()：设置HTTP头，传入object可以一次设置多个头</span><br><span class="line">res.status()：设置HTTP状态码</span><br><span class="line">res.type()：设置Content-Type的MIME类型</span><br></pre></td></tr></table></figure><h3 id="5-5-3、express获取参数有三种方法"><a href="#5-5-3、express获取参数有三种方法" class="headerlink" title="5.5.3、express获取参数有三种方法"></a>5.5.3、express获取参数有三种方法</h3><p>req.query 适合 <a href="https://localhost:3000/form?num=8888" target="_blank" rel="noopener">https://localhost:3000/form?num=8888</a><br>req.body 适合<a href="https://localhost:3000/form，Post请求中的参数" target="_blank" rel="noopener">https://localhost:3000/form，Post请求中的参数</a><br>req.params 适合获取form后的num：<a href="https://localhost:3000/form/num" target="_blank" rel="noopener">https://localhost:3000/form/num</a>  </p><p>（一）、GET</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = req.query.num;</span><br><span class="line">res.send(&quot;你获取的get数据为:&quot; + num);</span><br></pre></td></tr></table></figure><p>（二）、POST</p><p>解析post数据需要用到body-parser</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">//引入body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">//需要use的</span><br><span class="line">app.use(bodyParser.json()); // for parsing application/json</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">extended: true</span><br><span class="line">&#125;)); // for parsing application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.post(&apos;/form&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.body.num;</span><br><span class="line">res.send(&quot;你获取的post数据为:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>public/test.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"tinyphp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（三）、获取路径参数</p><p>app.js  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">app.get(&apos;/form/:num&apos;, function(req, res) &#123;</span><br><span class="line">var num = req.params.num;</span><br><span class="line">res.send(&quot;你获取到form/后的参数:&quot; + num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//设置监听端口</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h2 id="5-6-ejs基础"><a href="#5-6-ejs基础" class="headerlink" title="5.6 ejs基础"></a>5.6 ejs基础</h2><p>ejs是一个Express Web应用的模板引擎，在NodeJS开发中可以选择的模板引擎可能是所有Web应用开发中范围最广的，如jade、ejs、htmljs、swig、hogan.js，但ejs是最容易上手的，与jsp,asp,php的原始模板引擎风格很像。</p><p>官网：<a href="https://www.embeddedjs.com/" target="_blank" rel="noopener">https://www.embeddedjs.com/</a></p><p>添加一个<code>product.js</code>路由：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">  var products=[];</span><br><span class="line">  products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">  products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">  //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">  res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>在views目录下添加<code>product.ejs</code>视图，这里是一个简单的MVC：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">title</span> %&gt;</span> - 产品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"80%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%pdts.forEach(function(pdt,index)&#123;%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=index+1%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.name%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">%=pdt.price%</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%&#125;);%</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">%=pdts[i].name%</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改app，注册定义好的模块product：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> index = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/index'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/users'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> pdts = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./routes/product'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//指定视图引擎为ejs</span></span><br><span class="line">app.set(<span class="hljs-string">'views'</span>, path.join(__dirname, <span class="hljs-string">'views'</span>));</span><br><span class="line">app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="hljs-comment">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class="line">app.use(logger(<span class="hljs-string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="hljs-string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/'</span>, index);</span><br><span class="line">app.use(<span class="hljs-string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="hljs-string">'/pdt'</span>, pdts);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b092ca2eb115835.jpg" alt></p><blockquote><p>原因：没有安装ejs模块<br>解决办法：进入到项目目录，安装ejs</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save ejs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://i.loli.net/2019/07/14/5d2b09efe80ba53992.jpg" alt></p></blockquote><p>重新运行：<br><img src="https://i.loli.net/2019/07/14/5d2b0a951a09231745.jpg" alt></p><h2 id="5-7、lodash"><a href="#5-7、lodash" class="headerlink" title="5.7、lodash"></a>5.7、lodash</h2><p>这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库。可以非常方便的操作json。</p><p>官网：<a href="https://lodashjs.com/" target="_blank" rel="noopener">https://lodashjs.com/</a></p><p>安装：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash</span><br></pre></td></tr></table></figure><p>安装时先用cd切换到当前项目下。</p><p>如果浏览器使用可以直接引入：</p><script src="lodash.js"></script><p>添加lodash依赖：<br><img src="https://i.loli.net/2019/07/14/5d2b0c4c7c14a17367.jpg" alt></p><p>依赖成功后会在package.json中添加引用：<br><img src="https://i.loli.net/2019/07/14/5d2b0c9e03f1844597.jpg" alt></p><p>后台Node.js使用，可以引入模块：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//导入lodash模块</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var products=[];</span><br><span class="line">products.push(&#123;name:&quot;ZTE U880&quot;,price:899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;HuWei 荣耀8&quot;,price:1899.8&#125;);</span><br><span class="line">products.push(&#123;name:&quot;iPhone 7 Plus 128G&quot;,price:5899.8&#125;);</span><br><span class="line"></span><br><span class="line">//1、取出第一个元素</span><br><span class="line">var obj1=_.first(products);</span><br><span class="line">console.log(obj1.name);  //ZTE U880</span><br><span class="line"></span><br><span class="line">//2、取出最后一个元素</span><br><span class="line">var obj2=_.last(products);</span><br><span class="line">console.log(obj2.name);  //iPhone 7 Plus 128G</span><br><span class="line"></span><br><span class="line">//3、指定查找条件返回符合条件的索引</span><br><span class="line">var obj3=_.findIndex(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj3);  //2</span><br><span class="line"></span><br><span class="line">//4、指定查找条件返回查找到的对象</span><br><span class="line">var obj4=_.find(products,function(obj)&#123;</span><br><span class="line">    return obj.price&gt;=1000&amp;&amp;obj.name.indexOf(&quot;7&quot;)&gt;0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj4);  //&#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;</span><br><span class="line"></span><br><span class="line">//5、排序</span><br><span class="line">var obj5=_.orderBy(products,[&quot;price&quot;,&quot;name&quot;],[&quot;desc&quot;,&quot;asc&quot;]);</span><br><span class="line">console.log(obj5);</span><br><span class="line"></span><br><span class="line">//[ &#123; name: &apos;iPhone 7 Plus 128G&apos;, price: 5899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;HuWei 荣耀8&apos;, price: 1899.8 &#125;,</span><br><span class="line">//&#123; name: &apos;ZTE U880&apos;, price: 899.8 &#125; ]</span><br><span class="line"></span><br><span class="line">//6、查找价格为1899.8的产品的key</span><br><span class="line">var obj6=_.findKey(products,&#123;price:1899.8&#125;);</span><br><span class="line">console.log(obj6);   //1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/14/5d2b0f023a83710965.jpg" alt></p><p>API的使用非常简单，但需要注意版本，可以现查现用，API地址：<a href="https://lodash.com/docs/4.17.2%20" target="_blank" rel="noopener">https://lodash.com/docs/4.17.2 </a></p><h2 id="5-8、参数"><a href="#5-8、参数" class="headerlink" title="5.8、参数"></a>5.8、参数</h2><h3 id="5-8-1、URL中的参数占位"><a href="#5-8-1、URL中的参数占位" class="headerlink" title="5.8.1、URL中的参数占位"></a>5.8.1、URL中的参数占位</h3><p>Checks route params (req.params), ex: /user/:id</p><p>127.0.0.1:3000/index，这种情况下，我们为了得到index，我们可以通过使用req.params得到，通过这种方法我们就可以很好的处理Node中的路由处理问题，同时利用这点可以非常方便的实现MVC模式；</p><p><code>http://127.0.0.1:3000/pdt/9527/phone</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得产品根据Id</span><br><span class="line">router.get(&apos;/:id/:category&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(request.params.id+&quot;,&quot;+request.params.category);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b10e8e678f43145.jpg" alt></p><h3 id="5-8-2、URL中的QueryString"><a href="#5-8-2、URL中的QueryString" class="headerlink" title="5.8.2、URL中的QueryString"></a>5.8.2、URL中的QueryString</h3><p>Checks query string params (req.query), ex: ?id=12</p><p>127.0.0.1:3000/index?id=12，这种情况下，这种方式是获取客户端get方式传递过来的值，通过使用req.query.id就可以获得，类似于PHP的get方法；</p><p><code>http://127.0.0.1:3000/pdt/9527?name=jobs</code></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;,function(request,res,next)&#123;</span><br><span class="line">    res.send(&quot;name:&quot;+request.query.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://i.loli.net/2019/07/14/5d2b12be0371490358.jpg" alt></p><h3 id="5-8-3、HTTP正文中的参数"><a href="#5-8-3、HTTP正文中的参数" class="headerlink" title="5.8.3、HTTP正文中的参数"></a>5.8.3、HTTP正文中的参数</h3><p>在post请求中获得表单中的数据。</p><p>Checks urlencoded body params (req.body), ex: id=</p><p>127.0.0.1：300/index，然后post了一个id=2的值，这种方式是获取客户端post过来的数据，可以通过req.body.id获取，类似于PHP的post方法；</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222150412682-243382356.png" alt></p><p>页面：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &lt;%= title %&gt;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;%= title %&gt; - 产品列表&lt;/h1&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot; width=&quot;80%&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%pdts.forEach(function(pdt,index)&#123;%&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=index+1%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.name%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;%=pdt.price%&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;%&#125;);%&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;% for(var i=0; i&lt;pdts.length; i++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=pdts[i].name%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            &lt;%if(typeof msg!=&quot;undefined&quot;)&#123;%&gt;</span><br><span class="line">                &lt;%=msg%&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">        &lt;form action=&quot;pdt/add&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                名称：&lt;input name=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                价格：&lt;input name=&quot;price&quot; /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/add&apos;,function(request,res,next)&#123;</span><br><span class="line">    var entity=&#123;name:request.body.name,price:request.body.price&#125;;</span><br><span class="line">    products.push(entity);</span><br><span class="line">      //将product视图与指定的对象渲染后输出到客户端</span><br><span class="line">      res.render(&apos;product&apos;, &#123; title: &apos;天狗商城&apos;, pdts:products,msg:&quot;添加成功&quot;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151340745-1374859267.png" alt></p><h2 id="5-9、JSON"><a href="#5-9、JSON" class="headerlink" title="5.9、JSON"></a>5.9、JSON</h2><p>如果需要Node.js向外提供返回JSON的接口，Express也是非常方便的，可以使用原来在浏览器中使用到的JSON对象，这是一个浏览器内置对象在服务可以直接使用：</p><p>将对象序列化成字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对象</span><br><span class="line">var rose=&#123;&quot;name&quot;:&quot;Rose&quot;,&quot;weight&quot;:&quot;65&quot;&#125;;</span><br><span class="line">            //序列化成字符串</span><br><span class="line">            var str=JSON.stringify(rose);</span><br><span class="line">            alert(str);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222151858839-27300214.png" alt></p><p>反序列化，将字符转换成对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成JavaScript对象</span><br><span class="line">var markStr=&apos;&#123;&quot;name&quot;:&quot;mark&quot;,&quot;weight&quot;:&quot;188&quot;&#125;&apos;;</span><br><span class="line">            var mark=JSON.parse(markStr);</span><br><span class="line">            alert(mark.name+&quot;，&quot;+mark.weight);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161222152634417-1260078212.png" alt></p><p>Express已经封装了一个json方法，直接调用该方法就可以序列化对象：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 产品 */</span><br><span class="line">router.get(&apos;/rest&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.json(products);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="六、RESTful（表述性状态转移）"><a href="#六、RESTful（表述性状态转移）" class="headerlink" title="六、RESTful（表述性状态转移）"></a>六、RESTful（表述性状态转移）</h1><p>REST是英文Representational State Transfer的缩写，中文称之为“表述性状态转移” 基于HTTP协议，是另一种服务架构，传递是JSON、POX（Plain Old XML）而不是SOAP格式的数据，充分利用HTTP谓词（Verb），侧重数据的传输，业务逻辑交给客户端自行处理</p><p>REST是一种分布式服务架构的风格约束，像Java、.Net（WCF、WebAPI）都有对该约束的实现，使URL变得更加有意义，更加简洁明了，如：</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>get请求 表示获得所有产品的第1个</p><p><a href="https://www.zhangguo.com/products/product" target="_blank" rel="noopener">https://www.zhangguo.com/products/product</a><br>post请求 表示添加一个产品</p><p><a href="https://www.zhangguo.com/products/1/price" target="_blank" rel="noopener">https://www.zhangguo.com/products/1/price</a><br>get请求 表示获得第1个产品的价格</p><p><a href="https://www.zhangguo.com/products/1" target="_blank" rel="noopener">https://www.zhangguo.com/products/1</a><br>delete请求 删除编号为1的产品</p><p>REST设计需要遵循的原则<br>网络上的所有事物都被抽象为资源（resource）；<br>每个资源对应一个唯一的资源标识符（resource identifier）；<br>通过通用的连接器接口（generic connector interface）对资源进行操作；<br>对资源的各种操作不会改变资源标识符；<br>所有的操作都是无状态的（stateless）</p><p>谓词<br><strong>GET</strong><br>表示查询操作，相当于Retrieve、Select操作<br><strong>POST</strong><br>表示插入操作，相当于Create，Insert操作<br><strong>PUT</strong><br>表示修改操作，相当于Update操作<br><strong>DELETE</strong><br>表示删除操作，相当于Delete操作</p><p>其它还有：<br><img src="https://images2015.cnblogs.com/blog/63651/201612/63651-20161223101344557-1727952968.png" alt></p><p>NodeJS+Express可以很容易的实现REST</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>application/json</li><li>res.setHeader(‘Content-Type’, ‘application/json;charset=utf-8’);</li></ul><p>示例代码cars.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">var _= require(&apos;lodash&apos;);</span><br><span class="line"></span><br><span class="line">var cars=[];</span><br><span class="line">cars.push(&#123;id:201701,name:&quot;BMW&quot;,price:190,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201702,name:&quot;BYD&quot;,price:25,speed:&quot;160km/h&quot;,color:&quot;红色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201703,name:&quot;Benz&quot;,price:300,speed:&quot;215km/h&quot;,color:&quot;蓝色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201704,name:&quot;Honda&quot;,price:190,speed:&quot;170km/h&quot;,color:&quot;黑色&quot;&#125;);</span><br><span class="line">cars.push(&#123;id:201705,name:&quot;QQ&quot;,price:130,speed:&quot;210km/h&quot;,color:&quot;白色&quot;&#125;);</span><br><span class="line"></span><br><span class="line">/* Get */</span><br><span class="line">/*获得所有汽车*/</span><br><span class="line">/*url /cars/*/</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.json(cars);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Get*/</span><br><span class="line">/*获得汽车通过id*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">     //从路径中映射参数，转换成数字</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var car=_.find(cars,&#123;id:id&#125;);</span><br><span class="line">      res.json(car);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Post*/</span><br><span class="line">/*添加汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.post(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      car.id=_.last(cars).id+1;  //将编号修改为最后一辆车的编号+1</span><br><span class="line">      cars.push(car);  //将汽车对象添加到集合中</span><br><span class="line">      res.json(car);  //将添加成功的车以json的形式返回</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Put*/</span><br><span class="line">/*修改汽车*/</span><br><span class="line">/*url：/cars/car  */</span><br><span class="line">router.put(&apos;/car&apos;, function(req, res, next) &#123;</span><br><span class="line">      var car=req.body;  //从请求正文中获得json对象</span><br><span class="line">      console.log(req.body);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:parseInt(car.id)&#125;);  //根据id获得车在集合中的下标</span><br><span class="line"></span><br><span class="line">      cars[index]=car;  //替换原对象</span><br><span class="line">      //res.json(car);  //将修改后的车以json的形式返回</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;更新成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*Delete*/</span><br><span class="line">/*删除汽车*/</span><br><span class="line">/*url：/cars/:id  */</span><br><span class="line">router.delete(&apos;/id/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">      //获得url中的编号参数</span><br><span class="line">      var id=parseInt(req.params.id);</span><br><span class="line">      var index=_.findIndex(cars,&#123;id:id&#125;);  //根据id获得车在集合中的下标</span><br><span class="line">      cars.splice(index,1);   //在cars数组中删除下标从index开始的1条数据</span><br><span class="line">      res.send(&#123;status:&quot;success&quot;, message:&quot;删除成功!&quot;&#125;);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>示例代码app.js：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var favicon = require(&apos;serve-favicon&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var index = require(&apos;./routes/index&apos;);</span><br><span class="line">var users = require(&apos;./routes/users&apos;);</span><br><span class="line">var pdts = require(&apos;./routes/product&apos;);</span><br><span class="line">var task = require(&apos;./routes/task&apos;);</span><br><span class="line">var cars = require(&apos;./routes/cars&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//指定视图引擎为ejs</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">// uncomment after placing your favicon in /public</span><br><span class="line">//app.use(favicon(path.join(__dirname, &apos;public&apos;, &apos;favicon.ico&apos;)));</span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, index);</span><br><span class="line">app.use(&apos;/users&apos;, users);</span><br><span class="line">app.use(&apos;/pdt&apos;, pdts);</span><br><span class="line">app.use(&quot;/task&quot;,task);</span><br><span class="line">app.use(&quot;/cars&quot;,cars);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得所有汽车  </li><li>url /cars/</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b27eb42dea22132.jpg" alt></p><blockquote><p><strong>Get</strong></p></blockquote><ul><li>获得汽车通过id</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b28e456cdf58111.jpg" alt></p><blockquote><p><strong>Post</strong></p></blockquote><ul><li>添加汽车  </li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b30e46f28836556.jpg" alt></p><p>参数中的json格式一定要使用标准格式，注意引号，注意Content-Type，默认的Content-Type类型是：application/x-www-form-urlencoded</p><blockquote><p><strong>Put</strong></p></blockquote><ul><li>修改汽车</li><li>url：/cars/car</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3434410e778260.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b344cd080581595.jpg" alt></p><blockquote><p><strong>Delete</strong>  </p></blockquote><ul><li>删除汽车</li><li>url：/cars/:id</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b3526d5bff57574.jpg" alt></p><p><img src="https://i.loli.net/2019/07/14/5d2b35474e9c447189.jpg" alt></p><p><strong>node.js跨域</strong></p><p>修改app.js文件拦截所有的请求，修改头部</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">app.all(&apos;*&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);</span><br><span class="line">    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">    res.header(&quot;X-Powered-By&quot;, &apos; 3.2.1&apos;);</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);</span><br><span class="line">    if(req.method == &quot;OPTIONS&quot;) &#123;</span><br><span class="line">        res.send(&quot;200&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://images2017.cnblogs.com/blog/63651/201801/63651-20180108142729785-1121920664.png" alt></p><h1 id="九、视频"><a href="#九、视频" class="headerlink" title="九、视频"></a>九、<a href="https://www.bilibili.com/video/av17977069" target="_blank" rel="noopener">视频</a></h1><p>From: <a href="https://www.cnblogs.com/best/p/6204116.html" target="_blank" rel="noopener">https://www.cnblogs.com/best/p/6204116.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;Node.js 是一个基于Google Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>front-matter</title>
    <link href="https://www.policx.com/2019/07/11/Front-matter/"/>
    <id>https://www.policx.com/2019/07/11/Front-matter/</id>
    <published>2019-07-11T15:14:18.000Z</published>
    <updated>2019-07-14T08:55:47.989Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。</p><a id="more"></a><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td></td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true/false</td></tr><tr><td>comment</td><td><strong>Icarus 主题开启文章的评论功能</strong></td><td>true/false</td></tr><tr><td>thumbnail</td><td>封面图 <strong>Icarus 主题有效</strong></td><td>url</td></tr><tr><td>feature</td><td>封面图 <strong>Gridea 主题有效</strong></td><td>url</td></tr><tr><td>password</td><td>加密</td><td></td></tr><tr><td>hideInList</td><td>列表中隐藏</td><td>true/false</td></tr><tr><td>published</td><td>发表</td><td>true/false</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>toc</td><td>开启目录</td><td>true/false</td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>未来五年，iOS 开发如何前行？</title>
    <link href="https://www.policx.com/2019/07/11/CSDNnews/"/>
    <id>https://www.policx.com/2019/07/11/CSDNnews/</id>
    <published>2019-07-11T11:44:45.000Z</published>
    <updated>2019-07-15T06:15:13.802Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。</p><a id="more"></a>  <ul><li>作者 | David O.</li><li>译者 | 罗昭成</li><li>责编 | 沭七</li><li>出品 | CSDN（ID：CSDNnews）</li></ul><p><strong>以下为译文：</strong></p><p>近十年，10~15 年前不存在的技术，让这个世界变得黯然失色。有趣的是，这些概念正在构建未来的生活方式。如果你认为你在现在已经上线的 App 中看到了这些变化，并且也在着手开发自己的 App，在未来五年，你依然会对 iOS 程序开发的发展方式感到异常震惊。</p><p>以下四点，你可以重点关注：</p><hr><p><strong>人工智能</strong></p><p><img src="https://p0.ifengimg.com/pmop/2018/0509/F5D88FCB8A186B6F15BE016CA7BE684C5390FDF1_size601_w500_h200.gif" alt></p><p>人工智能（AI）是一个独特的范式转换器（Paradigm Shifter）[1]。iOS 应用程序开发领域中，睿智的开发者无时无刻都在创建基于 AI 的应用程序。例如星巴克，发布了一个名叫 My Starbucks Barista 的 iOS 应用，它会根据你当天的需要，为你订购咖啡和零食。在金融领域，也有很多 iOS 的人工智能应用程序，根据你的指示，自动进行交易。</p><p>在不久的将来，在 iOS 平台，你将会看到越来越多的 AI 应用程序，它们将以全新的方式，逐渐替换传统方式为我们提供服务。这些 AI 应用程序将代替你做选择。这个领域，有无限可能。</p><hr><p><strong>增强现实</strong><br><img src="https://cdn-images-1.medium.com/max/1600/1*4bG0pGhsveSMDf2tBUnl4A.jpeg" alt><br>增强现实（AR）与 AI 一样神奇。几年前， Pokémon GO 将虚拟怪兽带到我们的世界，让全世界的人对 AR 趋之若鹜。这个游戏，在 2016 年收入约 9.5 亿美元，到 2017 年，就接近了 9 亿美元。</p><p>在未来几年，AR 将在游戏和其它应用中产生更加惊人的影响。这些变化，你将在未来几年的 iOS 应用程序中看到。</p><hr><p><strong>物联网（IoT）</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*erSuPcaEhaODURW47r4ABw.png" alt></p><p>随着时间的推移，物联网（IoT）正在逐渐壮大。现如今，你可以看到，灯、门铃、智能门锁、家庭安防系统、音箱、电视、电视盒子、手表、平板、冰箱都连接到互联网上，你可以随时随地控制它们。虽然 iOS 应用程序不能让你看到冰箱中还剩多少食物，还不能改善物联网的体验，但是 IoT 设备获取到越多的数据，越能帮助你作出正确的选择。</p><p>IoT 正在优化酒店、汽车、零售等多种行业，这几年的变化，甚是有趣。此外，当人工智能与 IoT 相结合，IoT 将有可能彻底改变全球人的生活方式。</p><hr><p><strong>基于云的应用程序</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*7HRm1x6dIktyA0-U" alt></p><p>很多 iOS 应用程序开发专家预测，基于云的 iOS 应用程序将是下一个行业重点。在未来几年内，将有超过一半的企业与组织拥有至少一个基于云的原生应用程序[2]。</p><p>上面的预测里，有一个奇怪的事情，这个市场，80% 的份额将由 Google、微软、亚马逊占据，而苹果则只剩下 20% 左右。这意味着，如果你的 iOS 应用程序要在这 1780 亿美元的市场中占据一席之地，你需要好好磨练你的 iOS 开发技能。</p><p>此外，苹果可能会在未来几年，像其它领域一样，通过创新来抢回市场。苹果今天的成绩，我们相信它有那个能力。</p><hr><p><strong>结论</strong>  </p><p>总之，上面提到的领域，并非只有这些领域。在 iOS 开发中，可穿戴设备，跨平台应用、移动支付和区块链技术等领域，都能开发出令人惊叹程序。</p><p>这篇文章并不是预测未来，而是告诉你一些潜在的领域，在前期发展的时候抓住机会。</p><p>谨以抛砖引玉，期待更多探讨。</p><ul><li>相关资料：</li></ul><p>[1] <a href="https://wiki.mbalib.com/wiki/范式转换" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/范式转换</a></p><p>[2] <a href="https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/" target="_blank" rel="noopener">https://go.forrester.com/blogs/predictions-2018-cloud-computing-accelerates-enterprise-transformation-everywhere/</a></p><blockquote><p>原文链接：<a href="https://hackernoon.com/four-exciting-areas-ios-app-development-will-evolve-over-the-next-five-years-23dc5c11f562" target="_blank" rel="noopener">hackernoon</a></p><p>本文为 CSDN 翻译，如需转载，请注明来源出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【CSDN 编者按】技术圈里一直倡导一句话，那便是“拥抱变化”，因为技术始终在飞速地更新迭代，过去掌握的技能可能突然之间就过时了。在近几年，移动开发逐渐趋于稳定，而人工智能、区块链等技术开始甚嚣尘上，客户端开发者们不由得开始迷茫，曾经如此吃香，未来又该怎么走？也许本文会有一点思路上的帮助。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BT 种子和磁力链接是如何工作的？</title>
    <link href="https://www.policx.com/2019/07/05/BitTorrent/"/>
    <id>https://www.policx.com/2019/07/05/BitTorrent/</id>
    <published>2019-07-05T13:06:16.000Z</published>
    <updated>2019-07-08T15:20:42.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/article_images/55502.jpeg" alt="BT 种子和磁力链接是如何工作的？"><br>链接：<em><a href="https://sspai.com/post/55502" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=57748098&cid=100797037&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中国合伙人</title>
    <link href="https://www.policx.com/2019/07/04/partner/"/>
    <id>https://www.policx.com/2019/07/04/partner/</id>
    <published>2019-07-04T14:59:09.000Z</published>
    <updated>2019-07-12T09:50:03.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入要阅读的密码。">    <label for="pass">请输入要阅读的密码。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      内容已加密，输入密码进行阅读。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你的硬盘是如何存储数据的？</title>
    <link href="https://www.policx.com/2019/06/18/harddisk/"/>
    <id>https://www.policx.com/2019/06/18/harddisk/</id>
    <published>2019-06-18T15:04:41.000Z</published>
    <updated>2019-07-08T15:20:35.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><a id="more"></a><p><img src="https://cdn.sspai.com/2019/06/18/3f4fc6ae82d2e5416b030131fb59fa13.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="你的硬盘是如何存储数据的？"><br>链接：<em><a href="https://sspai.com/post/55277" target="_blank" rel="noopener">回形针PaperClip</a></em></p><iframe src="//player.bilibili.com/player.html?aid=55918101&cid=97751737&page=1" height="300" width="520" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WWDC 2019</title>
    <link href="https://www.policx.com/2019/06/05/2019/"/>
    <id>https://www.policx.com/2019/06/05/2019/</id>
    <published>2019-06-05T03:06:39.000Z</published>
    <updated>2019-07-12T09:40:14.384Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。</p><a id="more"></a><p>你的时间有限，不要浪费于重复别人的生活。不要让别人的观点淹没了你内心的声音。</p><p><img src="/post-images/wwdc2019.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life.…Don’t let the noise of others’ opinions drown out your own inner voice。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+Netlify部署个人博客</title>
    <link href="https://www.policx.com/2019/05/01/netlify/"/>
    <id>https://www.policx.com/2019/05/01/netlify/</id>
    <published>2019-05-01T13:08:57.000Z</published>
    <updated>2019-07-13T15:48:09.150Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a> 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！</p><a id="more"></a><h1 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>更多基础知识可参考<a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a>，本篇文章的重点是介绍部署的技巧。如果已掌握hexo的基础知识，可直接<a href="#bushu">跳到部署章节</a>进行浏览。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装hexo之前需要安装一下环境：</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>安装完node后由于npm是自带的，可能版本有些落后，需要先将自身升级一下。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm</span><br></pre></td></tr></table></figure><p>由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如遇到npm下载组件失败时，可使用cnpm进行下载，只需将npm替换为cnpm，下方代码将继续使用npm，请根据自身网络环境选择适合的使用。<br>以上环境如果没有问题，下面就开始安装hexo了</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后在命令行中测试输入</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h1 id="创建个人站点"><a href="#创建个人站点" class="headerlink" title="创建个人站点"></a>创建个人站点</h1><p>安装hexo完成后，接下来我们就该使用hexo来创建自己的个人站点了。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  <span class="hljs-comment">#使用hexo命令在指定的&lt;folder&gt;文件夹下初始化创建一个博客项目</span></span><br><span class="line"><span class="hljs-built_in">cd</span> &lt;folder&gt;         <span class="hljs-comment">#进入创建好的项目目录</span></span><br><span class="line">npm install         <span class="hljs-comment">#使用npm安装所需依赖。</span></span><br></pre></td></tr></table></figure><p>新建完成后详细的目录含义以及配置教程，请参阅<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>文档的介绍本篇文章暂不赘述。<br>上面代码执行完毕之后，我们就已经创建好了一个自己的个人博客了，下面我们只需要使用hexo的命令工具生成博客并用自带的服务器模块启动，预览下我们的博客。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="hljs-comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g     <span class="hljs-comment">#生成静态文件</span></span><br><span class="line">hexo s     <span class="hljs-comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>执行完 <code>hexo s</code> 后命令行窗口将提示您如下信息</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="hljs-string">'s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="hljs-string">WARN  ===============================================================</span></span><br><span class="line"><span class="hljs-string">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>其中服务器预览地址就是 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>至此，我们的个人博客创建好了，下面我们就来进入部署环节。<br><img src="https://githubpage-1255710107.cos.ap-shanghai.myqcloud.com/static/images/KNN/hexo.png" alt></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>进入这里才是我们的重点环节，因为对于hexo来说入门级的教程遍布满网，随便搜一下到处都是，但是涉及到一些关键的环节，或者是高级点的教程用法，就很少，官网文档也介绍的含糊其辞，以至于有些地方我们都搞错了用法，甚至根本就不晓得怎么去用。<br>那么这里针对部署，我进行重点介绍，并且以我本身的博客实战部署经验为案例，来讲解hexo的高级部署方式，打造可跨平台，多人写作编辑文章，可CDN加速，可HTTPS，可百度收录，可自定义域名，无需备案，无需一分钱费用的部署方案。<br>接下来我分步骤的跟大家来介绍我的部署方案。</p><h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>经过第一个章节，我们知道，当我们使用 <code>hexo g</code> 和 <code>hexo s</code> 命令生成并开启服务后，我们本地访问的测试域名实际是指向了我们当前目录下的 public 目录，也就是说 <code>hexo g</code> 命令生成的静态文件就是 public 目录下的文件，部署的过程就是将这个 public 目录下的文件放到我们的服务器上这样就完成了部署。</p><h2 id="为什么选择netlify服务部署"><a href="#为什么选择netlify服务部署" class="headerlink" title="为什么选择netlify服务部署"></a>为什么选择netlify服务部署</h2><p>Netlify 有如下的功能: </p><ul><li>能够托管服务，免费 CDN</li><li>能够绑定自定义域名</li><li>能够启用免费的TLS证书，启用HTTPS</li><li>支持自动构建</li><li>提供 Webhooks 和 API</li></ul><h2 id="使用-Netlify"><a href="#使用-Netlify" class="headerlink" title="使用 Netlify"></a>使用 Netlify</h2><p>首先使用你的 GitHub 账号登陆 Netlify，登陆后进入空间管理中心，，点击<code>New site from git</code>按钮开始部署你的博客： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-52-50.png" alt="2019-01-18_14-52-50"></p><p>然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket（这里以 GitHub 为例）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-50-39.png" alt="2019-01-18_14-50-39"></p><p>点击GitHub之后会弹出一个让你授权的窗口，给 Netlify 授权后，就会自动读取你 GitHub 的仓库： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-55-21.png" alt="2019-01-18_14-55-21"></p><p>选择仓库后，Netlify 会自动识别到 hexo，并填入相关信息，这时候只要无脑点击 <code>Deploy site</code>就可以： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_14-56-17.png" alt="2019-01-18_14-56-17"></p><p>稍等一段时间就可以看到你的博客已经部署成功，并且给你分配了一个二级域名（先记下这个二级域名）： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_15-10-43.png" alt="2019-01-18_15-10-43"></p><p>如果你要绑定自己买的域名，就直接点击第二步<code>Set up custom domain</code>。添加自定义域名，先添加不带www的域名作为主域名，它会自动添加一个<code>www.domain.cc</code>重定向到<code>domain.cc</code>： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-07-52.png" alt="2019-01-18_16-07-52"></p><p>设置完，Netlify 会提示你去域名DNS解析处，修改域名的CNAME记录： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-12-31.png" alt="2019-01-18_16-12-31"></p><p>去你的 DNS 解析提供商里面，将 CNAME 记录值更改为 Netlify 给你的二级域名： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-15-39.png" alt="2019-01-18_16-15-39"></p><p>修改完，就可以看到 Netlify 状态更新： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_16-16-51.png" alt="2019-01-18_16-16-51"></p><p>Netlify默认会启用 HTTPS，而且不能关闭，如果你没有证书，它会帮你去Let’s Encrypt申请免费的证书，当然你也可以自己申请证书，以阿里免费的 ssl 证书为例，下载证书证书时选服务器类型为Apache的证书，Netlify 配置填写如下： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-08-31.png" alt="2019-01-18_20-08-31"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>上面流程走完，其实已经可以自动化部署，只要 push 了代码，就会自动更新，你可以在下面地方查看部署的信息： </p><p><img src="https://tc9011.com/assets/images/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/2019-01-18_20-24-23.png" alt="2019-01-18_20-24-23"></p><p>如果你不想用 Netlify 的服务，也可以用 [Circle][14] 的服务，它和 GitHub 关联，提供 CI 服务。你需要做的事在根目录下新建一个<code>.circle</code>文件夹，里面新建一个<code>config.yml</code>文件（注意把相关信息替换成自己的）： </p><pre><code># Javascript Node CircleCI 2.0 configuration file## Check https://circleci.com/docs/2.0/language-javascript/ for more details#version: 2jobs:  build:    docker:      # specify the version you desire here      - image: circleci/node:7.10      # Specify service dependencies here if necessary      # CircleCI maintains a library of pre-built images      # documented at https://circleci.com/docs/2.0/circleci-images/      # - image: circleci/mongo:3.4.4    working_directory: ~/repo    steps:      - checkout      # Download and cache dependencies      - restore_cache:          keys:          - v1-dependencies-{{ checksum "package.json" }}          # fallback to using the latest cache if no exact match is found          - v1-dependencies-      - add_ssh_keys:          fingerprints:            - &quot;你的 ssh key的fingerprints&quot;      - run: git config --global user.email &quot;user@domain.com&quot;      - run: git config --global user.name &quot;user&quot;      - run: npm install      - run: sudo npm install hexo-cli -g      - save_cache:          paths:            - node_modules          key: v1-dependencies-{{ checksum "package.json" }}      # run tests!      - run: hexo clean      - run: hexo g      - run: hexo d</code></pre><p>这时候，你只要提交代码到这个仓库，circle 就会帮你自动部署了。 </p><hr><ul><li><a href="https://tc9011.com/2019/01/18/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8netlify%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%8A%A8%E5%8C%96/" target="_blank" rel="noopener">手把手教你使用Netlify部署博客及部署自动化</a></li><li><a href="https://www.yuhuizhen.com/2018/08/25/hexo-learn.html" target="_blank" rel="noopener">hexo高级部署教程,利用github+netlify部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.netlify.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netlify&lt;/a&gt; 是一个提供静态资源网络托管的综合平台，提供CI服务，能够将托管 GitHub，GitLab 等网站上的 Jekyll，Hexo，Hugo 等代码自动编译并生成静态网站。使用github分支和netlify服务的方式部署hexo，搭建一套可跨平台、可多人写作,随时随地发布编辑文字,可被百度收录,可自定域名,免费HTTPS的博客系统！！&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-icarus</title>
    <link href="https://www.policx.com/2019/05/01/hexo-theme-icarus/"/>
    <id>https://www.policx.com/2019/05/01/hexo-theme-icarus/</id>
    <published>2019-05-01T12:37:10.000Z</published>
    <updated>2019-07-09T14:25:12.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--<div align="center"><img src="https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg"></div>--><!--# hexo-theme-icarus <Badge text="@Susreal"/> <Badge text="Finish"/> <Badge text="2.3.0"/>------**目录：**[[toc]]--------><p><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">Hexo-theme-icarus</a> 是一个优秀的 Hexo 主题，开发者 <a href="https://github.com/ppoffice" target="_blank" rel="noopener">Ruipeng Zhang</a> 同时还维护了 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">hexo-theme-hueman</a> 和 <a href="https://github.com/ppoffice/hexo-theme-minos" target="_blank" rel="noopener">hexo-theme-minos</a> 两个项目。</p><a id="more"></a><p>icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://easyhexo.com/assets/img/1.7fabd81a.png" alt="Icarus"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行中cd至博客根目录，加载主题：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先，要在博客根目录下的 <code>_config.yml</code> 文件中做两件事情：</p><ol><li>设置语言: <code>language: zh-CN</code></li><li>设置主题为 icarus: <code>theme: icarus</code></li></ol><p>icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。</p><h3 id="icarus-的文件结构"><a href="#icarus-的文件结构" class="headerlink" title="icarus 的文件结构"></a>icarus 的文件结构</h3><p>先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─includes</span><br><span class="line">├─languages</span><br><span class="line">├─layout</span><br><span class="line">│  ├─comment</span><br><span class="line">│  ├─common</span><br><span class="line">│  ├─donate</span><br><span class="line">│  ├─plugin</span><br><span class="line">│  ├─search</span><br><span class="line">│  ├─share</span><br><span class="line">│  └─widget</span><br><span class="line">├─sripts</span><br><span class="line">└─source</span><br><span class="line">    ├─css</span><br><span class="line">    ├─images</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure><p>仔细观察渲染文件 <code>layout</code> 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 <code>languages</code> 目录下的 <code>zh-CN.yml</code> 文件。</p><h3 id="config-yml-文件配置"><a href="#config-yml-文件配置" class="headerlink" title="_config.yml 文件配置"></a><code>_config.yml</code> 文件配置</h3><p>首次在博客根目录执行 <code>hexo clean</code> 或者 <code>hexo g</code> 都会触发 icarus 自动生成一个 <code>_config.yml</code> 文件，我们逐一说明。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>logo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 <code>source/images/</code> 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案：</p><figure class="highlight js hljs"><figcaption><span>/layout/common/navbar.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'logo.text'</span>) &amp;&amp; get_config(<span class="hljs-string">'logo.text'</span>)) &#123; %&gt;</span><br><span class="line">    &lt;%= get_config(<span class="hljs-string">'logo.text'</span>) %&gt;</span><br><span class="line">&lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;img src=<span class="hljs-string">"&lt;%- url_for(get_config('logo')) %&gt;"</span> alt=<span class="hljs-string">"&lt;%= get_config('title') %&gt;"</span> height=<span class="hljs-string">"28"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也就是说，只要给 logo 添加 <code>text</code> 属性，就会优先展示预设文字作为 logo：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">logo:</span></span><br><span class="line"><span class="hljs-attr">  text:</span> <span class="hljs-string">your</span> <span class="hljs-string">name</span></span><br></pre></td></tr></table></figure><p>这对于不会画 logo 的同学来说无疑是个大好消息了：</p><p><img src="https://easyhexo.com/assets/img/2.bdd49d13.png" alt="logo"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>icarus 预置了 <code>Changyan</code> <code>Disqus</code> <code>Facebook</code> <code>Gitment</code> <code>Gitalk</code> <code>Isso</code> <code>LiveRe</code> 和 <code>Valine</code> 八大主流评论插件。</p><p>这里以我使用的 <code>Valine</code> 为例。首先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">comment:</span></span><br><span class="line"><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></span><br><span class="line"><span class="hljs-attr">    app_id:</span>         <span class="hljs-comment"># (required) LeanCloud application id</span></span><br><span class="line"><span class="hljs-attr">    app_key:</span>        <span class="hljs-comment"># (required) LeanCloud application key</span></span><br><span class="line"><span class="hljs-attr">    notify:</span>         <span class="hljs-comment"># (optional) receive email notification</span></span><br><span class="line"><span class="hljs-attr">    verify:</span>         <span class="hljs-comment"># (optional) show verification code</span></span><br><span class="line"><span class="hljs-attr">    placeholder:</span>    <span class="hljs-comment"># (optional) comment box placeholder text</span></span><br></pre></td></tr></table></figure><p>其余的三项选填，这样就完成了 <code>Valine</code> 的基本配置了。此外，<code>Valine</code> 同步 <a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a> 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！</p><p>效果如下：</p><p><img src="https://easyhexo.com/assets/img/3.59bd3843.png" alt="Valine Comment"></p><p>如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置  <font color="red"><del><code>comments</code></del> </font> <code>comment</code> 为 <code>false</code> 即可：</p><ul><li>注意：是 <font color="red">comment</font> 没有 <code>s</code></li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">---</span></span><br><span class="line"><span class="hljs-attr">title:</span> <span class="hljs-string">article</span> <span class="hljs-string">title</span></span><br><span class="line"><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-meta">---</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 <code>支付宝</code> <code>微信</code> <code>PayPal</code> 和 <code>Patreon</code> 四种方式：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">donate:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">alipay</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/alipay.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">wechat</span></span><br><span class="line"><span class="hljs-attr">        qrcode:</span> <span class="hljs-string">/images/wechat.JPG</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: paypal</span></span><br><span class="line">        <span class="hljs-comment"># Paypal business ID or email address</span></span><br><span class="line">        <span class="hljs-comment"># business: ''</span></span><br><span class="line">        <span class="hljs-comment"># Currency code</span></span><br><span class="line">        <span class="hljs-comment"># currency_code: USD</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># type: patreon</span></span><br><span class="line">        <span class="hljs-comment"># URL to the Patreon page</span></span><br><span class="line">        <span class="hljs-comment"># url: ''</span></span><br></pre></td></tr></table></figure><p><code>支付宝</code> 和 <code>微信</code> 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的：</p><p><a href="https://susreal.github.io/images/alipay.JPG" target="_blank" rel="noopener"><img src="https://easyhexo.com/assets/img/4.1e986323.png" alt="投喂现场"></a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，可以自由摆放在任何位置：</p><p><img src="https://easyhexo.com/assets/img/5.c1884f10.png" alt="卡片化部件"></p><p>包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 <code>_config.yml</code> 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">widgets:</span></span><br><span class="line"><span class="hljs-bullet">    -</span></span><br><span class="line">        <span class="hljs-comment"># Widget name</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">tagcloud</span></span><br><span class="line">        <span class="hljs-comment"># Where should the widget be placed, left or right</span></span><br><span class="line"><span class="hljs-attr">        position:</span> <span class="hljs-string">left</span></span><br></pre></td></tr></table></figure><h3 id="其他设置（置顶-阅读量统计）"><a href="#其他设置（置顶-阅读量统计）" class="headerlink" title="其他设置（置顶/阅读量统计）"></a>其他设置（置顶/阅读量统计）</h3><p>还有一些其他的设置就不在这里赘述了，具体可以参考 <a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/" target="_blank" rel="noopener">官方文档</a> 进行了解。</p><p>除此之外，我根据实际需求，在 icarus 主题内添加了 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%B8%80%E3%80%81%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">置顶文章</a> 和 <a href="https://susreal.com/article/2019/hexo-theme-icarus-2/#%E4%BA%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">阅读量统计</a> 的两个小功能，大家如果有兴趣，可以前往我的博客和我交流喔:-O</p><br><ul><li>原文链接—&gt; <a href="https://easyhexo.com/2-Theme-use-and-config/2-12-hexo-theme-icarus/#%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">easyhexo.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://easyhexo.com/assets/img/icaruslogo.5efd3090.svg&quot;&gt;&lt;/div&gt;--&gt;
&lt;!--
# hexo-theme-icarus &lt;Badge text=&quot;@Susreal&quot;/&gt; &lt;Badge text=&quot;Finish&quot;/&gt; &lt;Badge text=&quot;2.3.0&quot;/&gt;

------

**目录：**

[[toc]]

------
--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-theme-icarus&lt;/a&gt; 是一个优秀的 Hexo 主题，开发者 &lt;a href=&quot;https://github.com/ppoffice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruipeng Zhang&lt;/a&gt; 同时还维护了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-hueman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-minos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-theme-minos&lt;/a&gt; 两个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Hexo" scheme="https://www.policx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>git如何删除已经提交的文件夹</title>
    <link href="https://www.policx.com/2018/09/17/git-del/"/>
    <id>https://www.policx.com/2018/09/17/git-del/</id>
    <published>2018-09-17T08:02:32.000Z</published>
    <updated>2019-07-13T08:10:24.253Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹</p><a id="more"></a><p>在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决</p><p>首先进入你的master文件夹下, Git Bash Here ,打开命令窗口</p><p><code>$ git --help                                      # 帮助命令</code></p><p><code>$ git pull origin master                    # 将远程仓库里面的项目拉下来</code></p><p><code>$ ls                                                # 查看有哪些文件夹</code></p><p><code>$ git rm -r --cached .idea              # 删除.idea文件夹</code></p><p><code>$ git commit -m &#39;删除.idea&#39;        # 提交,添加操作说明</code></p><p><code>$ git push -u origin master               # 将本次更改更新到github项目上去</code></p><hr><p>作者： <a href="https://blog.csdn.net/weiyoushi4001/article/details/82495364" target="_blank" rel="noopener">皮皮今</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传项目到github时,忘记忽略了某个文件夹.idea,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的.idea文件夹&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://www.policx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python利用openpyxl来操作Excel</title>
    <link href="https://www.policx.com/2018/06/19/python-excel/"/>
    <id>https://www.policx.com/2018/06/19/python-excel/</id>
    <published>2018-06-19T08:39:16.000Z</published>
    <updated>2019-07-07T04:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。</p><a id="more"></a><p>如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line">from openpyxl.styles import colors, Font, Fill, NamedStyle</span><br><span class="line">from openpyxl.styles import PatternFill, Border, Side, Alignment</span><br><span class="line"> </span><br><span class="line"># 加载文件</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>workbook： 工作簿，一个excel文件包含多个sheet。</li><li>worksheet：工作表，一个workbook有多个，表名识别，如“sheet1”,“sheet2”等。</li><li>cell： 单元格，存储数据对象<br>文章所用表格为：<br><img src="https://policx.github.io/post-images/1560761501804.jpeg" alt></li></ul><h3 id="操作sheet"><a href="#操作sheet" class="headerlink" title="操作sheet"></a>操作sheet</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 读取sheetname</span><br><span class="line">print(&apos;输出文件所有工作表名：\n&apos;, wb.sheetnames)</span><br><span class="line">ws = wb[&apos;5a&apos;]</span><br><span class="line"> </span><br><span class="line"># 或者不知道名字时</span><br><span class="line">sheet_names = wb.sheetnames   # 返回一个列表</span><br><span class="line">ws2 = wb[sheet_names[0]]    # index为0为第一张表</span><br><span class="line">print(ws is ws2)    # 两者是一样的</span><br></pre></td></tr></table></figure><p>输出文件所有工作表名：<br>[‘5a’]<br>True</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheetname</span><br><span class="line"> </span><br><span class="line">ws.title = &apos;5a_&apos;</span><br><span class="line">print(&apos;修改sheetname：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>修改sheetname：<br>[‘5a_’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建新的sheet</span><br><span class="line"># 创建的新表必须要赋值给一个对象，不然只有名字但是没有实际的新表</span><br><span class="line"> </span><br><span class="line">ws4 = wb.create_sheet(index=0, title=&apos;newsheet&apos;)</span><br><span class="line"># 什么参数都不写的话，默认插入到最后一个位置且名字为sheet,sheet1...按照顺序排列</span><br><span class="line"> </span><br><span class="line">ws5 = wb.create_sheet()</span><br><span class="line">print(&apos;创建新的sheet:\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>创建新的sheet:<br>[‘newsheet’, ‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除sheet</span><br><span class="line">wb.remove(ws4)  # 这里只能写worksheet对象，不能写sheetname</span><br><span class="line">print(&apos;删除sheet：\n&apos;, wb.sheetnames)</span><br></pre></td></tr></table></figure><p>删除sheet：<br>[‘5a_’, ‘Sheet’]</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改sheet选项卡背景色，默认为白色，设置为RRGGBB模式</span><br><span class="line">ws.sheet_properties.tabColor = &quot;FFA500&quot;</span><br><span class="line"> </span><br><span class="line"># 读取有效区域</span><br><span class="line"> </span><br><span class="line">print(&apos;最大列数为：&apos;, ws.max_column)</span><br><span class="line">print(&apos;最大行数为：&apos;, ws.max_row)</span><br></pre></td></tr></table></figure><p>最大列数为： 5<br>最大行数为： 17</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 插入行和列</span><br><span class="line">ws.insert_rows(1)  # 在第一行插入一行</span><br><span class="line">ws.insert_cols(2, 4)  # 从第二列开始插入四列</span><br><span class="line"> </span><br><span class="line"># 删除行和列</span><br><span class="line">ws.delete_cols(6, 3)  # 从第六列（F列）开始，删除3列即（F:H）</span><br><span class="line">ws.delete_rows(3)   # 删除第三行</span><br></pre></td></tr></table></figure><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 读取</span><br><span class="line">c = ws[&apos;A1&apos;]</span><br><span class="line">c1 = ws.cell(row=1, column=2)</span><br><span class="line">print(c, c1)</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;  &lt;Cell ‘5a_’.B1&gt;<br>dth_title Province  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">ws[&apos;A1&apos;] = &apos;景区名称&apos;</span><br><span class="line">ws.cell(1, 2).value = &apos;省份&apos;</span><br><span class="line">print(c.value, c1.value)</span><br></pre></td></tr></table></figure><p>景区名称 省份</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 读取多个单元格</span><br><span class="line"> </span><br><span class="line">cell_range = ws[&apos;A1&apos;:&apos;D5&apos;]</span><br><span class="line">colC = ws[&apos;C&apos;]</span><br><span class="line">col_range = ws[&apos;C:D&apos;]</span><br><span class="line">row10 = ws[10]</span><br><span class="line">row_range = ws[5:10]</span><br><span class="line"># 其返回的结果都是一个包含单元格的元组</span><br><span class="line">print(type(cell_range))</span><br><span class="line">for i in row10:</span><br><span class="line">    print(i)    # row10只有有效单元格</span><br></pre></td></tr></table></figure><p>&lt;class ‘tuple’&gt;<br>&lt;Cell ‘5a_’.A10&gt;<br>&lt;Cell ‘5a_’.B10&gt;<br>&lt;Cell ‘5a_’.C10&gt;<br>&lt;Cell ‘5a_’.D10&gt;<br>&lt;Cell ‘5a_’.E10&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按照行列操作</span><br><span class="line">for row in ws.iter_rows(min_row=1, max_row=3,</span><br><span class="line">                        min_col=1, max_col=2):</span><br><span class="line">    for cell in row:</span><br><span class="line">        print(cell)</span><br><span class="line"># 也可以用worksheet.iter_col(),用法都一样</span><br></pre></td></tr></table></figure><p>&lt;Cell ‘5a_’.A1&gt;<br>&lt;Cell ‘5a_’.B1&gt;<br>&lt;Cell ‘5a_’.A2&gt;<br>&lt;Cell ‘5a_’.B2&gt;<br>&lt;Cell ‘5a_’.A3&gt;<br>&lt;Cell ‘5a_’.B3&gt; </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 合并单元格</span><br><span class="line">ws.merge_cells(&apos;F1:G1&apos;)</span><br><span class="line">ws[&apos;F1&apos;] = &apos;合并两个单元格&apos;</span><br><span class="line"># 或者</span><br><span class="line">ws.merge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line">ws.cell(2, 6).value = &apos;合并三个单元格&apos;</span><br><span class="line"> </span><br><span class="line"># 取消合并单元格</span><br><span class="line">ws.unmerge_cells(&apos;F1:G1&apos;)</span><br><span class="line"># 或者</span><br><span class="line">ws.unmerge_cells(start_row=2, start_column=6, end_row=3, end_column=8)</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br><span class="line"># 保存之前的操作,保存文件时，文件必须是关闭的！！！</span><br></pre></td></tr></table></figure><p>注意！！！，openpyxl对Excel的修改并不像是xlwings包一样是实时的，他的修改是暂时保存在内存中的，所以当 后面的修改例如我接下来要在第一行插入新的一行做标题，那么当我对新的A1单元格操作的时候，还在内存中的原A1(现在是A2)的单元格 原有的修改就会被覆盖。所以要先保存，或者从一开始就计划好更改操作避免这样的事情发生。</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="单个单元格样式"><a href="#单个单元格样式" class="headerlink" title="单个单元格样式"></a>单个单元格样式</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)    # 读取修改后的文件</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"># 我们来设置一个表头</span><br><span class="line">ws.insert_rows(1)    # 在第一行插入新的一行</span><br><span class="line">ws.merge_cells(&apos;A1:E1&apos;)  # 合并单元格</span><br><span class="line">a1 = ws[&apos;A1&apos;]</span><br><span class="line">ws[&apos;A1&apos;] = &apos;5A级风景区名单&apos;</span><br><span class="line"> </span><br><span class="line"># 设置字体</span><br><span class="line">ft = Font(name=&apos;微软雅黑&apos;, color=&apos;000000&apos;, size=15, b=True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name:字体名称</span><br><span class="line">color:颜色通常是RGB或aRGB十六进制值</span><br><span class="line">b(bold):加粗（bool）</span><br><span class="line">i(italic):倾斜(bool)</span><br><span class="line">shadow：阴影（bool）</span><br><span class="line">underline：下划线（‘doubleAccounting’, ‘single’, ‘double’, ‘singleAccounting’）</span><br><span class="line">charset:字符集(int)</span><br><span class="line">strike:删除线(bool)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.font = ft</span><br><span class="line"> </span><br><span class="line"># 设置文本对齐</span><br><span class="line"> </span><br><span class="line">ali = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">horizontal:水平对齐(&apos;centerContinuous&apos;, &apos;general&apos;, &apos;distributed&apos;,</span><br><span class="line">                    &apos;left&apos;, &apos;fill&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;right&apos;)</span><br><span class="line">vertical:垂直对齐（&apos;distributed&apos;, &apos;top&apos;, &apos;center&apos;, &apos;justify&apos;, &apos;bottom&apos;）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a1.alignment = ali</span><br><span class="line"> </span><br><span class="line"># 设置图案填充</span><br><span class="line"> </span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;FFA500&apos;)</span><br><span class="line"># 颜色一般使用十六进制RGB</span><br><span class="line"># &apos;solid&apos;是图案填充类型，详细可查阅文档</span><br><span class="line"> </span><br><span class="line">a1.fill = fill</span><br></pre></td></tr></table></figure><p><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html" target="_blank" rel="noopener">openpyxl.styles.fills模块参数文档</a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 设置边框</span><br><span class="line">bian = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)    # 设置边框样式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">style:边框线的风格&#123;&apos;dotted&apos;,&apos;slantDashDot&apos;,&apos;dashDot&apos;,&apos;hair&apos;,&apos;mediumDashDot&apos;,</span><br><span class="line">        &apos;dashed&apos;,&apos;mediumDashed&apos;,&apos;thick&apos;,&apos;dashDotDot&apos;,&apos;medium&apos;,</span><br><span class="line">        &apos;double&apos;,&apos;thin&apos;,&apos;mediumDashDotDot&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">border = Border(top=bian, bottom=bian, left=bian, right=bian)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">top（上）,bottom（下）,left（左）,right（右）:必须是 Side类型</span><br><span class="line">diagonal: 斜线 side类型 </span><br><span class="line">diagonalDownd: 右斜线 bool</span><br><span class="line">diagonalDown: 左斜线 bool</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line"># a1.border = border</span><br><span class="line">for item in ws[&apos;A1:E1&apos;][0]:   # 去元组中的每一个cell更改样式</span><br><span class="line">    item.border = border</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)  # 保存更改</span><br></pre></td></tr></table></figure><p>再次注意！！！：</p><p>不能使用 a1.border = border，否则只会如下图情况，B1：E1单元格没有线。我个人认为是因为线框涉及到相邻单元格边框的改动所以需要单独对每个单元格修改才行。<br>不能使用ws[‘A1:E1’].border = border,由前面的内容可知，openpyxl的多个单元格其实是一个元组，而元组是没有style的方法的,所以必须一个一个改！！其实官方有其他办法，后面讲。</p><h3 id="按列或行设置样式"><a href="#按列或行设置样式" class="headerlink" title="按列或行设置样式"></a>按列或行设置样式</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 现在我们对整个表进行设置</span><br><span class="line"> </span><br><span class="line"># 读取</span><br><span class="line">wb = load_workbook(&apos;./5a.xlsx&apos;)</span><br><span class="line">ws = wb[&apos;5a_&apos;]</span><br><span class="line"> </span><br><span class="line"># 读取数据表格范围</span><br><span class="line">rows = ws.max_row</span><br><span class="line">cols = ws.max_column</span><br><span class="line"> </span><br><span class="line"># 字体</span><br><span class="line">font1 = Font(name=&apos;微软雅黑&apos;, size=11, b=True)</span><br><span class="line">font2 = Font(name=&apos;微软雅黑&apos;, size=11)</span><br><span class="line"> </span><br><span class="line"># 边框</span><br><span class="line">line_t = Side(style=&apos;thin&apos;, color=&apos;000000&apos;)  # 细边框</span><br><span class="line">line_m = Side(style=&apos;medium&apos;, color=&apos;000000&apos;)  # 粗边框</span><br><span class="line">border1 = Border(top=line_m, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"># 与标题相邻的边设置与标题一样</span><br><span class="line">border2 = Border(top=line_t, bottom=line_t, left=line_t, right=line_t)</span><br><span class="line"> </span><br><span class="line"># 填充</span><br><span class="line">fill = PatternFill(&apos;solid&apos;, fgColor=&apos;CFCFCF&apos;)</span><br><span class="line"> </span><br><span class="line"># 对齐</span><br><span class="line">alignment = Alignment(horizontal=&apos;center&apos;, vertical=&apos;center&apos;)</span><br><span class="line"> </span><br><span class="line"># 将样式打包命名</span><br><span class="line">sty1 = NamedStyle(name=&apos;sty1&apos;, font=font1, fill=fill,</span><br><span class="line">                  border=border1, alignment=alignment)</span><br><span class="line">sty2 = NamedStyle(name=&apos;sty2&apos;, font=font2, border=border2, alignment=alignment)</span><br><span class="line"> </span><br><span class="line">for r in range(2, rows+1):</span><br><span class="line">    for c in range(1, cols):</span><br><span class="line">        if r == 2:</span><br><span class="line">            ws.cell(r, c).style = sty1</span><br><span class="line">        else:</span><br><span class="line">            ws.cell(r, c).style = sty2</span><br><span class="line"> </span><br><span class="line">wb.save(&apos;./5a.xlsx&apos;)</span><br></pre></td></tr></table></figure><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p><img src="https://policx.github.io/post-images/1560761595658.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化的工作是为了从繁琐重复的劳动中挣脱出来，把精力用在数据分析上。自动化方面python是在好不过了，不过既然要提交报表， 就不免要美观什么的。pandas虽然很强大，但是无法对Excel完全操作，现学vba有点来不及。于是就找到这个openpyxl包，用python来修改Excel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel的包(openpyxl、xlsxwriter)</title>
    <link href="https://www.policx.com/2018/06/17/python-writer/"/>
    <id>https://www.policx.com/2018/06/17/python-writer/</id>
    <published>2018-06-17T10:28:27.000Z</published>
    <updated>2019-07-07T04:36:07.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在支持python操作excel的包有下列这些<br><img src="https://policx.github.io/post-images/1560767425488.png" alt></p><p>官网上最推荐的是openpyxl，其他包支持较老的excel版本。<br><img src="https://policx.github.io/post-images/1560767456846.png" alt><br><img src="https://policx.github.io/post-images/1560767522161.png" alt></p><a id="more"></a><p>xlsxwriter无法对打开的excel进行写操作，excel必须处于关闭状态才能写成功。 </p><h4 id="xlswriter-基本代码："><a href="#xlswriter-基本代码：" class="headerlink" title="xlswriter 基本代码："></a>xlswriter 基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import xlsxwriter</span><br><span class="line"></span><br><span class="line">workbook = xlsxwriter.Workbook(&apos;hello.xlsx&apos;)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line"></span><br><span class="line">worksheet.write(&apos;A1&apos;, &apos;Hello world&apos;)</span><br><span class="line"></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="openpyxl基本代码："><a href="#openpyxl基本代码：" class="headerlink" title="openpyxl基本代码："></a>openpyxl基本代码：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">#设置单元格值</span><br><span class="line">ws[&apos;A1&apos;] = 42</span><br><span class="line">#加入一行数据</span><br><span class="line">ws.append([1, 2, 3])</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line">#python 类型数据会被自动转换</span><br><span class="line">ws[&apos;A2&apos;] = datetime.datetime.now()</span><br><span class="line">#保存修改</span><br><span class="line">wb.save(&quot;sample.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>来源:<a href="https://www.jb51.net/article/141817.htm" target="_blank" rel="noopener">脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在支持python操作excel的包有下列这些&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767425488.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;官网上最推荐的是openpyxl，其他包支持较老的excel版本。&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767456846.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://policx.github.io/post-images/1560767522161.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2018</title>
    <link href="https://www.policx.com/2018/06/05/2018/"/>
    <id>https://www.policx.com/2018/06/05/2018/</id>
    <published>2018-06-04T16:59:59.000Z</published>
    <updated>2019-07-12T10:08:35.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。</p><a id="more"></a><p>是否能成为墓地里最富有的人，对我而言无足轻重。重要的是，当我晚上睡觉时，我可以说：我们今天完成了一些美妙的事。</p><p><img src="/post-images/wwdc2018.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Being the richest man in the cemetery doesn’t matter to me … Going to bed at night saying we’ve done something wonderful… that’s what matters to me。&lt;/p&gt;
    
    </summary>
    
      <category term="news" scheme="https://www.policx.com/categories/news/"/>
    
    
      <category term="" scheme="https://www.policx.com/tags/%EF%A3%BF/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MongoDB 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymongo/"/>
    <id>https://www.policx.com/2018/05/02/pymongo/</id>
    <published>2018-05-02T07:27:47.000Z</published>
    <updated>2019-07-07T04:35:29.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保已经安装好了MongoDB并启动了其服务，并且安装好了Python的PyMongo库。</p><h2 id="2-连接MongoDB"><a href="#2-连接MongoDB" class="headerlink" title="2. 连接MongoDB"></a>2. 连接MongoDB</h2><p>连接MongoDB时，我们需要使用PyMongo库里面的MongoClient。一般来说，传入MongoDB的IP及端口即可，其中第一个参数为地址host，第二个参数为端口port（如果不给它传递参数，默认是27017）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;, port=27017)</span><br></pre></td></tr></table></figure><p>这样就可以创建MongoDB的连接对象了。</p><p>另外，MongoClient的第一个参数host还可以直接传入MongoDB的连接字符串，它以mongodb开头，例如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = MongoClient(&apos;mongodb://localhost:27017/&apos;)</span><br></pre></td></tr></table></figure><p>这也可以达到同样的连接效果。</p><h2 id="3-指定数据库"><a href="#3-指定数据库" class="headerlink" title="3. 指定数据库"></a>3. 指定数据库</h2><p>MongoDB中可以建立多个数据库，接下来我们需要指定操作哪个数据库。这里我们以test数据库为例来说明，下一步需要在程序中指定要使用的数据库：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.test</span><br></pre></td></tr></table></figure><p>这里调用client的test属性即可返回test数据库。当然，我们也可以这样指定：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[&apos;test&apos;]</span><br></pre></td></tr></table></figure><p>这两种方式是等价的。</p><h2 id="4-指定集合"><a href="#4-指定集合" class="headerlink" title="4. 指定集合"></a>4. 指定集合</h2><p>MongoDB的每个数据库又包含许多集合（collection），它们类似于关系型数据库中的表。</p><p>下一步需要指定要操作的集合，这里指定一个集合名称为students。与指定数据库类似，指定集合也有两种方式：<br><code>collection = db.students</code></p><p><code>collection = db[&#39;students&#39;]</code><br>这样我们便声明了一个Collection对象。</p><h2 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h2><p>接下来，便可以插入数据了。对于students这个集合，新建一条学生数据，这条数据以字典形式表示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定了学生的学号、姓名、年龄和性别。接下来，直接调用collection的insert()方法即可插入数据，代码如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert(student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显式指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。insert()方法会在执行后返回_id值。</p><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5932a68615c2606814c91f3d</span><br></pre></td></tr></table></figure><p>当然，我们也可以同时插入多条数据，只需要以列表形式传递即可，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert([student1, student2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回结果是对应的_id的集合：</p><p><code>[ObjectId(&#39;5932a80115c2606a59e8a048&#39;), ObjectId(&#39;5932a80115c2606a59e8a049&#39;)]</code><br>实际上，在PyMongo 3.x版本中，官方已经不推荐使用insert()方法了。当然，继续使用也没有什么问题。官方推荐使用insert_one()和insert_many()方法来分别插入单条记录和多条记录，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(student)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at 0x10d68b558&gt;</span><br><span class="line">5932ab0f15c2606f0c1cf6c5</span><br></pre></td></tr></table></figure><p>与insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</p><p>对于insert_many()方法，我们可以将数据以列表形式传递，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170101&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Jordan&apos;,</span><br><span class="line">    &apos;age&apos;: 20,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    &apos;id&apos;: &apos;20170202&apos;,</span><br><span class="line">    &apos;name&apos;: &apos;Mike&apos;,</span><br><span class="line">    &apos;age&apos;: 21,</span><br><span class="line">    &apos;gender&apos;: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.insert_many([student1, student2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at 0x101dea558&gt;</span><br><span class="line">[ObjectId(&apos;5932abf415c2607083d3b2ac&apos;), ObjectId(&apos;5932abf415c2607083d3b2ad&apos;)]</span><br></pre></td></tr></table></figure><p>该方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表。</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>插入数据后，我们可以利用find_one()或find()方法进行查询，其中find_one()查询得到的是单个结果，find()则返回一个生成器对象。示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;&apos;name&apos;: &apos;Mike&apos;&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>这里我们查询name为Mike的数据，它的返回结果是字典类型，运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;5932a80115c2606a59e8a049&apos;), &apos;id&apos;: &apos;20170202&apos;, &apos;name&apos;: &apos;Mike&apos;, &apos;age&apos;: 21, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，它多了_id属性，这就是MongoDB在插入过程中自动添加的。</p><p>此外，我们也可以根据ObjectId来查询，此时需要使用bson库里面的objectid：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bson.objectid import ObjectId</span><br><span class="line"></span><br><span class="line">result = collection.find_one(&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>其查询结果依然是字典类型，具体如下：</p><p><code>{&#39;_id&#39;: ObjectId(&#39;593278c115c2602667ec6bae&#39;), &#39;id&#39;: &#39;20170101&#39;, &#39;name&#39;: &#39;Jordan&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</code><br>当然，如果查询结果不存在，则会返回None。</p><p>对于多条数据的查询，我们可以使用find()方法。例如，这里查找年龄为20的数据，示例如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find(&#123;&apos;age&apos;: 20&#125;)</span><br><span class="line">print(results)</span><br><span class="line">for result in results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x1032d5128&gt;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c115c2602667ec6bae&apos;), &apos;id&apos;: &apos;20170101&apos;, &apos;name&apos;: &apos;Jordan&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278c815c2602678bb2b8d&apos;), &apos;id&apos;: &apos;20170102&apos;, &apos;name&apos;: &apos;Kevin&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;593278d815c260269d7645a8&apos;), &apos;id&apos;: &apos;20170103&apos;, &apos;name&apos;: &apos;Harden&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure><p>返回结果是Cursor类型，它相当于一个生成器，我们需要遍历取到所有的结果，其中每个结果都是字典类型。</p><p>如果要查询年龄大于20的数据，则写法如下：</p><p><code>results = collection.find({&#39;age&#39;: {&#39;$gt&#39;: 20}})</code><br>这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20。</p><p>这里将比较符号归纳为下表。<br><a href="https://cloud.tencent.com/developer/article/1151814" target="_blank" rel="noopener">腾讯云自媒体分享计划</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。在这一节中，我们就来看看Python 3下MongoDB的存储操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://www.policx.com/2018/05/02/mongodb/"/>
    <id>https://www.policx.com/2018/05/02/mongodb/</id>
    <published>2018-05-02T06:11:11.000Z</published>
    <updated>2019-07-13T08:11:55.980Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。</p><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库。</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。通常情况下，在一个集合中的所有文件都是类似或相关目的。</p></blockquote><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。<br>下面给出的示例显示了一个博客网站，仅仅是一个逗号分隔的键值对的文档结构。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorial&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,20,2,15),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My second comments&apos;,</span><br><span class="line">         dateCreated: new Date(2011,1,25,7,45),</span><br><span class="line">         like: 5</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>MongoDB use DATABASE_NAME 用于创建数据库。该命令如果数据库不存在，将创建一个新的数据库， 否则将返回现有的数据库。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>use DATABASE语句的基本语法如下：<br><code>use DATABASE_NAME</code></p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">如果想创建一个数据库名称为 &lt;mydb&gt;, 那么 use DATABASE 语句应该如下：</span><br><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line"></span><br><span class="line">要检查当前选择的数据库使用命令 db</span><br><span class="line">&gt;db</span><br><span class="line">mydb</span><br><span class="line"></span><br><span class="line">如果想查询数据库列表，那么使用命令 show dbs.</span><br><span class="line">&gt;show dbs</span><br><span class="line">local     0.78125GB</span><br><span class="line">test      0.23012GB</span><br><span class="line"></span><br><span class="line">所创建的数据库（mydb）不存在于列表中。要显示的数据库，需要至少插入一个文档进去。</span><br><span class="line">&gt;db.movie.insert(&#123;&quot;name&quot;:&quot;yiibai tutorials&quot;&#125;)</span><br><span class="line">&gt;show dbs</span><br><span class="line">local      0.78125GB</span><br><span class="line">mydb       0.23012GB</span><br><span class="line">test       0.23012GB</span><br></pre></td></tr></table></figure><p>MongoDB的默认数据库是test。 如果没有创建任何数据库，那么集合将被保存在测试数据库。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>MongoDB db.dropDatabase() 命令用于删除现有的数据库。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>dropDatabase()指令的基本语法如下：<br><code>db.dropDatabase()</code></p><p>这将删除选定的数据库。如果没有选择任何数据库，那么它会删除默认的“test”数据库</p><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>如果想删除新的数据库 <mydb>, 那么 dropDatabase() 命令将如下所示：</mydb></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.dropDatabase()</span><br><span class="line">&gt;&#123; &quot;dropped&quot; : &quot;mydb&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>MongoDB 的 db.createCollection(name, options) 用于创建集合。 在命令中, name 是要创建集合的名称。 Options 是一个文档，用于指定集合的配置</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>String</td><td>要创建的集合的名称</td></tr><tr><td>Options</td><td>Document</td><td>（可选）指定有关内存大小和索引选项</td></tr></tbody></table><p>选项参数是可选的，所以需要指定集合的唯一名字。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>createCollection()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt;db.createCollection(&quot;mycollection&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以通过使用 show collections 命令来检查创建的集合</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;show collections</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><h3 id="选项列表"><a href="#选项列表" class="headerlink" title="选项列表"></a>选项列表</h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。</td></tr><tr><td>autoIndexID</td><td>Boolean</td><td>（可选）如果为true，自动创建索引_id字段。默认的值是 false.</td></tr><tr><td>size</td><td>number</td><td>（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。</td></tr><tr><td>max</td><td>number</td><td>（可选）指定上限集合允许的最大文件数。</td></tr></tbody></table><p>尽管插入文档，MongoDB首先检查字段集合的上限大小，那么它会检查最大字段。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法 :"></a>语法 :</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexID : true, size : 6142800, max : 10000 &#125; )</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.yiibai.insert(&#123;&quot;name&quot; : &quot;yiibai&quot;&#125;)</span><br><span class="line">&gt;show collections</span><br><span class="line">mycol</span><br><span class="line">mycollection</span><br><span class="line">system.indexes</span><br><span class="line">yiibai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>MongoDB 的 db.collection.drop() 用于从数据库中删除集合。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>drop() 命令的基本语法如下<br><code>db.COLLECTION_NAME.drop()</code></p><h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>下面给出的例子将删除给定名称的集合：mycollection</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mydb</span><br><span class="line">switched to db mydb</span><br><span class="line">&gt;db.mycollection.drop()</span><br><span class="line">true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p>将数据插入到MongoDB集合，需要使用MongoDB 的 insert() 方法。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>insert()命令的基本语法如下：<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.insert(&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c),</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里 mycol 是我们的集合名称，它是在之前的教程中创建。如果集合不存在于数据库中，那么MongoDB创建此集合，然后插入文档进去。</p><p>在如果我们不指定_id参数插入的文档，那么 MongoDB 将为文档分配一个唯一的ObjectId。</p><p>_id 是12个字节十六进制数在一个集合的每个文档是唯一的。 12个字节被划分如下：<br>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</p><p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.post.insert([</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;NoSQL Database&apos;, </span><br><span class="line">   description: &apos;NoSQL database doesn&apos;t have tables&apos;,</span><br><span class="line">   by: &apos;yiibai tutorials&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 20, </span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><p>要从集合查询MongoDB数据，需要使用MongoDB的 find()方法。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find()</code><br>find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p><code>&gt;db.mycol.find().pretty()</code></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>除了find()方法还有findOne()方法，仅返回一个文档。</p><h3 id="RDBMS-Where子句等效于MongoDB"><a href="#RDBMS-Where子句等效于MongoDB" class="headerlink" title="RDBMS Where子句等效于MongoDB"></a>RDBMS Where子句等效于MongoDB</h3><p>查询文档在一些条件的基础上，可以使用下面的操作</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>Equality</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td>db.mycol.find({“by”:”yiibai tutorials”}).pretty()</td><td>where by = ‘yiibai tutorials’</td></tr><tr><td>Less Than</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>Less Than Equals</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>Greater Than</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>Greater Than Equals</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>Not Equals</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td>db.mycol.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="AND-在-MongoDB"><a href="#AND-在-MongoDB" class="headerlink" title="AND 在 MongoDB"></a>AND 在 MongoDB</h4><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>在 find()方法，如果您传递多个键通过”,”将它们分开，那么MongoDB对待它就如AND条件一样。基本语法如下所示：<br><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有教程含“yiibai tutorials”和其标题是“MongoDB Overview”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;yiibai tutorials&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>对于上面给出的例子相当于where子句：’ where by=’yiibai tutorials’ AND title=’MongoDB Overview’ ‘。可以传递任何数目的键-值对在find子句。</p><h4 id="OR-在-MongoDB"><a href="#OR-在-MongoDB" class="headerlink" title="OR 在 MongoDB"></a>OR 在 MongoDB</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><p>要查询基于OR条件的文件，需要使用$or关键字。OR的基本语法如下所示：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子将显示所有撰写含有 ‘yiibai tutorials’ 或是标题为 ‘MongoDB Overview’ 的教程</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-AND-和-OR-在一起"><a href="#使用-AND-和-OR-在一起" class="headerlink" title="使用 AND 和 OR 在一起"></a>使用 AND 和 OR 在一起</h4><h5 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h5><p>下面给出的例子显示有喜欢数大于100 的文档，其标题要么是 ‘MongoDB Overview’ 或 ‘yiibai tutorials’. 等效于SQL的where子句：’where likes&gt;10 AND (by = ‘yiibai tutorials’ OR title = ‘MongoDB Overview’)’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;yiibai tutorials&quot;&#125;, &#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;] &#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</span><br><span class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </span><br><span class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</span><br><span class="line">   &quot;by&quot;: &quot;yiibai tutorials&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;https://www.yiibai.com&quot;,</span><br><span class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</span><br><span class="line">   &quot;likes&quot;: &quot;100&quot;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>MongoDB的update()和save()方法用于更新文档到一个集合。 update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。</p><h4 id="MongoDB-Update-方法"><a href="#MongoDB-Update-方法" class="headerlink" title="MongoDB Update() 方法"></a>MongoDB Update() 方法</h4><h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><p>update()方法的基本语法如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</span><br></pre></td></tr></table></figure><h5 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h5><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将设置其标题“MongoDB Overview”的文件为新标题为“New MongoDB Tutorial”</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Tutorial Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 ‘multi’ 设置为 true。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="MongoDB-Save-方法"><a href="#MongoDB-Save-方法" class="headerlink" title="MongoDB Save() 方法"></a>MongoDB Save() 方法</h4><p>save() 方法取代，通过新文档到 save()方法</p><h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><p>mongodb 的 save()方法如下所示的基本语法：<br><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p><h5 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h5><p>下面的例子将替换该文件_id ‘5983548781331adf45ec7’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.save(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Yiibai Yiibai New Topic&quot;, &quot;by&quot;:&quot;Yiibai Yiibai&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>MongoDB 的 remove()方法用于从集合中删除文档。remove()方法接受两个参数。一个是标准缺失，第二是justOne标志<br>deletion criteria : 根据文件（可选）删除条件将被删除。<br>justOne : （可选）如果设置为true或1，然后取出只有一个文档。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>remove()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p><h6 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h6><p>考虑mycol集合有如下数据。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将删除所有的文件，其标题为 ‘MongoDB Overview’</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Toturials Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="只删除一个"><a href="#只删除一个" class="headerlink" title="只删除一个"></a>只删除一个</h5><p>如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。<br><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p><h5 id="删除所有文件"><a href="#删除所有文件" class="headerlink" title="删除所有文件"></a>删除所有文件</h5><p>如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.remove()</span><br><span class="line">&gt;db.mycol.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="MongoDB投影"><a href="#MongoDB投影" class="headerlink" title="MongoDB投影"></a>MongoDB投影</h4><p>mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。</p><p>MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。</p><p>语法</p><p>find()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find({},{KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示文档的标题，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意在执行find()方法时_id字段始终显示，如果不想要显示这个字段，那么需要将其设置为0</p><h5 id="限制文档"><a href="#限制文档" class="headerlink" title="限制文档"></a>限制文档</h5><p>MongoDB Limit() 方法</p><p>要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p>limit()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER)</code></p><p>例子</p><p>考虑集合 myycol 有下列数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将只显示2个文档，在查询文档时。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>如果不指定 limit()方法的参数数量，然后它会显示集合中的所有文档。</p><p>MongoDB Skip() 方法</p><p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。</p><p>语法</p><p>skip() 方法的基础语法如下所示：<br><code>&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p><p>例子：</p><p>下面的例子将仅显示第二个文档。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，skip() 方法的默认值是 0</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p>要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。</p><p>语法</p><p>sort()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.find().sort({KEY:1})</code></p><p>例子</p><p>考虑集合 myycol 有如下数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面的例子将显示的文件排序按标题降序排序。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;title&quot;:-1&#125;)</span><br><span class="line">&#123;&quot;title&quot;:&quot;Yiibai Yiibai Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</span><br><span class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>请注意，如果不指定排序类型，那么 sort() 方法将以升序排列文档。</p><h4 id="MongoDB索引"><a href="#MongoDB索引" class="headerlink" title="MongoDB索引"></a>MongoDB索引</h4><p>索引支持查询高效率执行。如果没有索引，MongoDB必须扫描集合中的每一个文档，然后选择那些符合查询语句的文档。若需要 mongod 来处理大量数据，扫描是非常低效的。</p><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。</p><p>要创建索引，需要使用MongoDB的ensureIndex()方法。</p><p>语法</p><p>ensureIndex()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code></p><p>这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.</p><p>例子</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">在 ensureIndex()方法，可以通过多个字段，来创建多个字段索引。</span><br><span class="line">&gt;db.mycol.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ensureIndex() 方法还接受选项列表（这是可选），其列表如下：<br><img src="/post-images/1561132706992.png" alt></p><h4 id="MongoDB-聚合"><a href="#MongoDB-聚合" class="headerlink" title="MongoDB 聚合"></a>MongoDB 聚合</h4><p>聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。 在SQL中的count(*)，使用group by 与mongodb的聚合是等效的。 对于MongoDB的聚合，使用的是aggregate()方法。</p><p>语法</p><p>aggregate()方法的基本语法如下<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p><p>例子：</p><p>在集合中有以下数据：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;, </span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai &apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;, </span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;Yiibai Yiibai&apos;,</span><br><span class="line">   url: &apos;https://www.yiibai.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;, </span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;https://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在从上面的集合，如果想知道每一个用户编写的教程是多少，那么使用aggregate()方法，如下图所示的列表：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Yiibai Yiibai&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>用于上述用途将等效于sql查询： select by_user, count(*) from mycol group by by_user</code></pre><p>另外，在上述例子中，我们已经使用字段by_user进行分组并计算总和，也就是by_user 出现各个次数。一个列表中可用的聚集表达式。<br>    <img src="/post-images/1561132965786.png" alt></p><h4 id="MongoDB-复制"><a href="#MongoDB-复制" class="headerlink" title="MongoDB 复制"></a>MongoDB 复制</h4><p>复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。</p><h6 id="为什么要复制？"><a href="#为什么要复制？" class="headerlink" title="为什么要复制？"></a>为什么要复制？</h6><blockquote><pre><code>为了让数据安全数据的高（24*7）可用性灾难恢复无停机维护（如备份，索引重建，压缩）读取缩放（额外的副本来读取）副本集是透明的应用</code></pre></blockquote><h5 id="MongoDB复制的工作原理"><a href="#MongoDB复制的工作原理" class="headerlink" title="MongoDB复制的工作原理"></a>MongoDB复制的工作原理</h5><p>MongoDB通过使用副本集的复制来实现。副本集是一组承载同一个数据集的mongod实例。在副本的一个节点是接收所有的写操作主节点。所有的实例，次级，应用操作从主以便它们具有相同的数据集。副本集只能有一个主节点。</p><blockquote><pre><code>副本集是一组两个或更多个节点（通常至少3节点是必需的）。在副本集一个节点是主节点和其余的节点都是次要的。所有的数据复制是从主到次节点。在自动故障转移或维护时，选建立了主要和一个新的主节点被选择。故障节点的恢复后，再次加入副本集，并可以作为一个辅助节点。</code></pre></blockquote><p>mongodb复制的典型图如下图，其中客户端应用程序总是与主节点和主节点交互，然后将数据复制到辅助节点。<br><img src="/post-images/1561133216694.png" alt><br>副本集特征</p><ul><li>N个节点的集群</li><li>任何节点可为原发/主节点</li><li>所有的写操作进入到主节点</li><li>自动故障转移</li><li>自动恢复</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展。MongoDB是工作在集合和文档上一种概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.policx.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python3 与 MySQL 之间的交互</title>
    <link href="https://www.policx.com/2018/05/02/pymysql/"/>
    <id>https://www.policx.com/2018/05/02/pymysql/</id>
    <published>2018-05-02T03:14:27.000Z</published>
    <updated>2019-07-13T08:15:01.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是-PyMySQL？"><a href="#什么是-PyMySQL？" class="headerlink" title="什么是 PyMySQL？"></a>什么是 PyMySQL？</h2><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。</p><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><a id="more"></a> <h2 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h2><p>在文件中引入模块</p><p><code>import pymysql</code></p><h3 id="1-Connection对象"><a href="#1-Connection对象" class="headerlink" title="1.Connection对象"></a>1.Connection对象</h3><p>•  用于建立与数据库的连接<br>•  创建对象：调用connect()方法<br>conn=connect(参数列表)<br>•  参数host：连接的mysql主机，如果本机是’localhost’<br>•  参数port：连接的mysql主机的端口，默认是3306<br>•  参数db：数据库的名称<br>•  参数user：连接的用户名<br>•  参数password：连接的密码<br>•  参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</p><h3 id="2-对象的方法"><a href="#2-对象的方法" class="headerlink" title="2.对象的方法"></a>2.对象的方法</h3><p>•  close()关闭连接<br>•  commit()事务，所以需要提交才会生效<br>•  rollback()事务，放弃之前的操作<br>•  cursor()返回Cursor对象，用于执行sql语句并获得结果</p><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><p>•  执行sql语句<br>•  创建对象：调用Connection对象的cursor()方法<br>cursor1=conn.cursor()</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>•  close()关闭<br>•  execute(operation [, parameters ])执行语句，返回受影响的行数<br>•  fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组<br>•  next()执行查询语句时，获取当前行的下一行<br>•  fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回<br>•  scroll(value[,mode])将行指针移动到某个位置<br>•  mode表示移动的方式<br>•  mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动。相对的<br>•  mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0，绝对的。</p><h4 id="举个例子便于理解"><a href="#举个例子便于理解" class="headerlink" title="举个例子便于理解"></a>举个例子便于理解</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 导入python操作mysql的模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> pymysql</span><br><span class="line"><span class="hljs-comment"># 获取连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="hljs-string">'127.0.0.1'</span>, user=<span class="hljs-string">'root'</span>, password=<span class="hljs-string">'123456'</span>, database=<span class="hljs-string">'python01'</span>, port=<span class="hljs-number">3306</span>, charset=<span class="hljs-string">'utf8'</span>)</span><br><span class="line"><span class="hljs-comment"># 获取执行工具</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="hljs-comment"># sql语句,增删改</span></span><br><span class="line"><span class="hljs-comment">#sql = 'select birthday from t_user'</span></span><br><span class="line">sql = <span class="hljs-string">'select id,name,pwd,birthday from t_user'</span></span><br><span class="line"><span class="hljs-comment"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span></span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(<span class="hljs-string">'查询的结果有%s条数据'</span>%count)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取第一行</span></span><br><span class="line">dateOne = cur.fetchone()</span><br><span class="line">print(dateOne)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向上移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#向下移动一行</span></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'absolute'</span>)   绝对的，这里指的是第一行</span><br><span class="line">cur.scroll(<span class="hljs-number">1</span>,mode=<span class="hljs-string">'relative'</span>)   相对的</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获取所有行的数据</span></span><br><span class="line">dataAll = cur.fetchall()</span><br><span class="line">print(dataAll)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">     print(temp)</span><br><span class="line">     print(dataAll[<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>])      <span class="hljs-comment">#dataAll[-1]得到的是一个用户所有的信息，dataAll[-1][2]获取最后一个人的密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> cur:</span><br><span class="line">     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-string">'id:%s,name:%s,pwd:%s,birthday:%s'</span></span><br><span class="line"><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> dataAll:</span><br><span class="line">    print(s%(temp[<span class="hljs-number">0</span>],temp[<span class="hljs-number">1</span>],temp[<span class="hljs-number">2</span>],temp[<span class="hljs-number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-对象的属性"><a href="#3-对象的属性" class="headerlink" title="3.对象的属性"></a>3.对象的属性</h3><p>•  rowcount只读属性，表示最近一次execute()执行后受影响的行数<br>•  connection获得当前连接对象</p><h3 id="2-增删改查-CRUD"><a href="#2-增删改查-CRUD" class="headerlink" title="2.增删改查(CRUD)"></a>2.增删改查(CRUD)</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p>•  创建testInsert.py文件，向学生表中插入一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;insert into students(sname) values(&apos;张良&apos;)&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p>•  创建testUpdate.py文件，修改学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;update students set sname=&apos;刘邦&apos; where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception,e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>•  创建testDelete.py文件，删除学生表的一条数据</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8 import pymysql</span><br><span class="line">try:</span><br><span class="line">  conn=pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">  cs1=conn.cursor()</span><br><span class="line">  count=cs1.execute(&quot;delete from students where id=6&quot;)</span><br><span class="line">  print(count)</span><br><span class="line">  conn.commit()</span><br><span class="line">  cs1.close()</span><br><span class="line">  conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">  print(e)</span><br></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><p>•  创建testSelectOne.py文件，查询一条学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Pymysql try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>•  创建testSelectMany.py文件，查询全部学生信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf8 import Pymysql</span><br><span class="line">try:</span><br><span class="line">conn=Pymysql.connect(host=&apos;localhost&apos;,port=3306,db=&apos;test1&apos;,user=&apos;root&apos;,passwd=&apos;mysql&apos;,charset=&apos;utf8&apos;)</span><br><span class="line">cur=conn.cursor()</span><br><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print result</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line">except Exception as e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="实例一：参数"><a href="#实例一：参数" class="headerlink" title="实例一：参数"></a>实例一：参数</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改，sql注入</span><br><span class="line">sql = &apos;insert into t_user(name,pwd,birthday) values(%s,%s,%s)&apos;</span><br><span class="line"># 参数列表</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = input(&apos;输入生日:&apos;)     # 2017年10月01日--&gt;日期struct_time(---&gt;2017-10-01)</span><br><span class="line">birthday = time.strptime(birthday,&apos;%Y年%m月%d日&apos;)      #这里我们就用到了时间与字符串的相互转换(详情见MySQL高级)</span><br><span class="line"></span><br><span class="line">params = [name,pwd,birthday]</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql,params)</span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">print(&apos;受影响的行数:%s&apos;%count)</span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例二：抛出异常"><a href="#实例二：抛出异常" class="headerlink" title="实例二：抛出异常"></a>实例二：抛出异常</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    conn = None</span><br><span class="line">    cur = None</span><br><span class="line">    # 获取连接对象</span><br><span class="line">    conn = pymysql.connect(host=&apos;127.0.0.1&apos;,</span><br><span class="line">                           user=&apos;root&apos;,</span><br><span class="line">                           password=&apos;123456&apos;,</span><br><span class="line">                           database=&apos;python01&apos;,</span><br><span class="line">                           port=3306,</span><br><span class="line">                           charset=&apos;utf8&apos;)</span><br><span class="line">    # 模拟异常</span><br><span class="line">    # a = 1 / 0</span><br><span class="line">    # 获取执行工具</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    # sql语句,增删改</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd,birthday) values(&quot;小伊&quot;,&quot;123456&quot;,str_to_date(&quot;2017年10月20日&quot;,&quot;%Y年%m月%d日&quot;))&apos;</span><br><span class="line">    # 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">    count = cur.execute(sql)</span><br><span class="line">    # 提交</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(&apos;受影响的行数:%s&apos; % count)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    # 打印异常信息，测试时候使用，项目上线，去掉</span><br><span class="line">    print(str(ex))</span><br><span class="line">    # 将异常继续抛出</span><br><span class="line">    # raise</span><br><span class="line">finally:</span><br><span class="line">    if cur != None:</span><br><span class="line">        cur.close()</span><br><span class="line">    if conn != None:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="实例三："><a href="#实例三：" class="headerlink" title="实例三："></a>实例三：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 导入python操作mysql的模块</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 获取连接对象</span><br><span class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, database=&apos;python01&apos;, port=3306, charset=&apos;utf8&apos;)</span><br><span class="line"># 获取执行工具</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"># sql语句,增删改</span><br><span class="line">#sql = &apos;select birthday from t_user&apos;</span><br><span class="line">sql = &apos;select id,name,pwd,birthday from t_user&apos;</span><br><span class="line"># 执行,返回值。如果是增删改，返回受影响的行数，如果是查询，返回查询的行数</span><br><span class="line">count = cur.execute(sql)</span><br><span class="line">print(&apos;查询的结果有%s条数据&apos;%count)</span><br><span class="line"></span><br><span class="line">#获取第一行</span><br><span class="line"># dateOne = cur.fetchone()</span><br><span class="line"># print(dateOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for temp in cur:</span><br><span class="line">#     print(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;id:%s,name:%s,pwd:%s,birthday:%s&apos;</span><br><span class="line">for temp in dataAll:</span><br><span class="line">    print(s%(temp[0],temp[1],temp[2],temp[3]))</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h3><p>这个库的名字：mySqlHelper</p><p> python操作mysql进行增删改查的封装</p><pre><code>1、增删改，代码类似2、查询代码分析1、获取连接对象2、sql语句不同，参数不同3、获取执行对象    增删改    查询        1、fetchone        2、fetchall4、处理结果5、关闭</code></pre><h4 id="面向对象-建立类，封装属性和函数"><a href="#面向对象-建立类，封装属性和函数" class="headerlink" title="面向对象  建立类，封装属性和函数"></a>面向对象  建立类，封装属性和函数</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">class MysqlHelper:</span><br><span class="line">    &apos;&apos;&apos;python操作mysql的增删改查的封装&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, host, user, password, database, port=3306, charset=&apos;utf8&apos;):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        初始化参数</span><br><span class="line">        :param host:        主机</span><br><span class="line">        :param user:        用户名</span><br><span class="line">        :param password:    密码</span><br><span class="line">        :param database:    数据库</span><br><span class="line">        :param port:        端口号，默认是3306</span><br><span class="line">        :param charset:     编码，默认是utf8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def connect(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        获取连接对象和执行对象</span><br><span class="line">        :return:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.conn = pymysql.connect(host=self.host,</span><br><span class="line">                                    user=self.user,</span><br><span class="line">                                    password=self.password,</span><br><span class="line">                                    database=self.database,</span><br><span class="line">                                    port=self.port,</span><br><span class="line">                                    charset=self.charset)</span><br><span class="line"></span><br><span class="line">        self.cur = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    def fetchone(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数元组，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataOne = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataOne = self.cur.fetchone()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataOne</span><br><span class="line"></span><br><span class="line">    def fetchall(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">         根据sql和参数获取一行数据</span><br><span class="line">       :param sql:          sql语句</span><br><span class="line">       :param params:       sql语句对象的参数列表，默认值为None</span><br><span class="line">       :return:             查询的一行数据</span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">        dataall = None</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            if count != 0:</span><br><span class="line">                dataall = self.cur.fetchall()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return dataall</span><br><span class="line"></span><br><span class="line">    def __item(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行增删改</span><br><span class="line">        :param sql:           sql语句</span><br><span class="line">        :param params:        sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:              受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        count = 0</span><br><span class="line">        try:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as ex:</span><br><span class="line">            print(ex)</span><br><span class="line">        finally:</span><br><span class="line">            self.close()</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def update(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行修改</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def insert(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行新增</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def delete(self, sql, params=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        执行删除</span><br><span class="line">        :param sql:     sql语句</span><br><span class="line">        :param params:  sql语句对象的参数列表，默认值为None</span><br><span class="line">        :return:        受影响的行数</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        return self.__item(sql, params)</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        关闭执行工具和连接对象</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if self.cur != None:</span><br><span class="line">            self.cur.close()</span><br><span class="line">        if self.conn != None:</span><br><span class="line">            self.conn.close()</span><br></pre></td></tr></table></figure><h4 id="1-测试查询多条数据"><a href="#1-测试查询多条数据" class="headerlink" title="1.测试查询多条数据"></a>1.测试查询多条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where name = %s and id &gt; %s&apos;</span><br><span class="line"># params</span><br><span class="line">params = [&apos;小茗&apos;,1]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchall(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    for temp in data:</span><br><span class="line">        print(temp)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br><span class="line"></span><br><span class="line">helper.close()</span><br></pre></td></tr></table></figure><h4 id="2-测试查询一条数据"><a href="#2-测试查询一条数据" class="headerlink" title="2.测试查询一条数据"></a>2.测试查询一条数据</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;select * from t_user where id = %s&apos;</span><br><span class="line">#sql = &apos;select * from t_user where id = 1&apos;</span><br><span class="line"># params</span><br><span class="line">params = [2]</span><br><span class="line"># 执行</span><br><span class="line">data = helper.fetchone(sql, params)</span><br><span class="line">#data = helper.fetchone(sql)</span><br><span class="line"># 判断</span><br><span class="line">if data:</span><br><span class="line">    print(data)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;没有数据.&apos;)</span><br></pre></td></tr></table></figure><h4 id="3-测试增删改"><a href="#3-测试增删改" class="headerlink" title="3.测试增删改"></a>3.测试增删改</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import mysqlHelper</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 初始化对象</span><br><span class="line">helper = mysqlHelper.MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line"># 连接</span><br><span class="line">helper.connect()</span><br><span class="line"># sql</span><br><span class="line">sql = &apos;update t_user set name =%s,pwd=%s,birthday=%s where id=%s&apos;</span><br><span class="line"># params</span><br><span class="line">id = input(&apos;输入编号:&apos;)</span><br><span class="line">name = input(&apos;输入姓名:&apos;)</span><br><span class="line">pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">birthday = time.strptime(input(&apos;输入生日:&apos;), &apos;%Y年%m月%d日&apos;)</span><br><span class="line">params = [name, pwd, birthday,id]</span><br><span class="line"># 执行</span><br><span class="line">count = helper.update(sql, params)</span><br><span class="line"># 判断</span><br><span class="line">if count:</span><br><span class="line">    print(&apos;操作成功.&apos;)</span><br><span class="line">else:  # None,False,0</span><br><span class="line">    print(&apos;操作失败.&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-登录和注册"><a href="#4-登录和注册" class="headerlink" title="4.登录和注册"></a>4.登录和注册</h4><p>登录和注册的时候需要对密码进行加密</p><p>注意：</p><p>•  需要对密码进行加密<br>•  如果使用md5加密，则密码包含32个字符<br>•  如果使用sha1加密，则密码包含40个字符，这里使用这种方式</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table userinfos(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    uname varchar(20),</span><br><span class="line">    upwd char(40),</span><br><span class="line">    isdelete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">ret = doPwd(&apos;123&apos;)</span><br><span class="line">print(ret)</span><br><span class="line">结果：40bd001563085fc35165329ea1ff5c5ecbdbbeef</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">-- 插入如下数据，用户名为123,密码为123,这是sha1加密后的值</span><br><span class="line"></span><br><span class="line">insert into userinfos </span><br><span class="line">values(1,&apos;123&apos;,&apos;40bd001563085fc35165329ea1ff5c5ecbdbbeef&apos;,0);</span><br></pre></td></tr></table></figure><h4 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from mysqlHelper import MysqlHelper</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    &apos;&apos;&apos;登录&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    #加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;select * from t_user where name=%s and pwd=%s&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    data = helper.fetchone(sql, params)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;登录成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;登录失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doPwd(pwd):</span><br><span class="line">    &apos;&apos;&apos;sha1编码&apos;&apos;&apos;</span><br><span class="line">    mysha1 = hashlib.sha1()</span><br><span class="line">    mysha1.update(pwd.encode(&apos;utf-8&apos;))</span><br><span class="line">    pwd = mysha1.hexdigest()</span><br><span class="line">    return pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register():</span><br><span class="line">    &apos;&apos;&apos;注册&apos;&apos;&apos;</span><br><span class="line">    name = input(&apos;输入用户名:&apos;)</span><br><span class="line">    pwd = input(&apos;输入密码:&apos;)</span><br><span class="line">    # 加密</span><br><span class="line">    pwd = doPwd(pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    helper = MysqlHelper(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;123456&apos;, &apos;python01&apos;)</span><br><span class="line">    helper.connect()</span><br><span class="line">    sql = &apos;insert into t_user(name,pwd) values(%s,%s)&apos;</span><br><span class="line">    params = [name, pwd]</span><br><span class="line">    count = helper.insert(sql, params)</span><br><span class="line">    if count:</span><br><span class="line">        print(&apos;操作成功.&apos;)</span><br><span class="line">    else:  # None,False,0</span><br><span class="line">        print(&apos;操作失败.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #register()</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PyMySQL？&quot;&gt;&lt;a href=&quot;#什么是-PyMySQL？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PyMySQL？&quot;&gt;&lt;/a&gt;什么是 PyMySQL？&lt;/h2&gt;&lt;p&gt;PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。&lt;/p&gt;
&lt;p&gt;PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.policx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django笔记</title>
    <link href="https://www.policx.com/2018/04/18/django-bi-ji/"/>
    <id>https://www.policx.com/2018/04/18/django-bi-ji/</id>
    <published>2018-04-17T17:00:16.000Z</published>
    <updated>2019-07-12T10:07:09.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p><a id="more"></a><h2 id="一-版本选择"><a href="#一-版本选择" class="headerlink" title="一. 版本选择"></a>一. 版本选择</h2><p>Django 2.0.x 支持 Python 3.4, 3.5 和 3.6 （注意，不再支持 Python 2）   </p><h2 id="二-安装-Django"><a href="#二-安装-Django" class="headerlink" title="二. 安装 Django"></a><strong>二. 安装 Django</strong></h2><p><strong>2.1. 用 pip 来安装</strong></p><p><strong>2.1.1 需要先安装pip</strong></p><p>(1). Linux, Mac OSX, Windows 下都可用 get-pip.py 来安装<br>pip：<a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/installing.html</a>  </p><p>或者直接下载：<a href="https://bootstrap.pypa.io/get-pip.py" title="get-pip.py" target="_blank" rel="noopener">get-pip.py</a> 然后运行在终端运行 <strong>python get-pip.py 就可以安装 pip。</strong></p><p>Note: 也可以下载 pip 源码包，运行 <strong>python setup.py install</strong> 进行安装 </p><p><strong>2.1.2 利用 pip 安装 Django</strong></p><p><code>（sudo) pip install Django    或者(sudo) pip install Django==1.8.16 或者 pip install Django==1.11.8</code>    </p><p>如果想升级 pip 可以用： </p><pre><code>(sudo) pip install --upgrade pip</code></pre><p><strong>2.2. 下载源码安装</strong>  </p><p><a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">https://www.djangoproject.com/download/</a></p><p>如果是源码包, 比如 django-1.11.8.tar.gz </p><p><strong>2.2.1 Linux 或 Mac 下</strong></p><pre><code>tar -xvf django-1.11.8.tar.gzcd django-1.11.8(sudo) python setup.py install</code></pre><h2 id="三-检查是否安装成功"><a href="#三-检查是否安装成功" class="headerlink" title="三. 检查是否安装成功"></a><strong>三. 检查是否安装成功</strong></h2><p>终端上输入 python ,点击 Enter，进行 python 环境</p><pre><code>&gt;&gt;&gt; import django&gt;&gt;&gt; django.VERSION(1, 11, 8, &apos;final&apos;, 0)&gt;&gt;&gt; &gt;&gt;&gt; django.get_version()&apos;1.11.8&apos;</code></pre><p>如果运行后看到版本号，就证明安装成功了！ </p><h2 id="四-搭建多个互不干扰的开发环境（可选）"><a href="#四-搭建多个互不干扰的开发环境（可选）" class="headerlink" title="四. 搭建多个互不干扰的开发环境（可选）"></a><strong>四. 搭建多个互不干扰的开发环境（可选）</strong></h2><p>我们有的时候会发现，一个电脑上有多个项目，一个依赖 Django 1.8，另一个比较旧的项目又要用 Django 1.5，这时候怎么办呢？ </p><p>我们需要一个依赖包管理的工具来处理不同的环境。 </p><h3 id="4-1-虚拟环境依赖安装"><a href="#4-1-虚拟环境依赖安装" class="headerlink" title="4.1 虚拟环境依赖安装"></a>4.1 虚拟环境依赖安装</h3><p>开发会用 virtualenv 来管理多个开发环境 </p><p><strong>Linux/MacOS 下</strong></p><p>virtualenvwrapper 使得virtualenv变得更好用，所以我们一起安装了 </p><pre><code># 安装:(sudo) pip install virtualenv virtualenvwrapper</code></pre><p>修改~/.bash_profile或其它环境变量相关文件(如 .bashrc 或用 ZSH 之后的 .zshrc)，添加以下语句  </p><pre><code>export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/workspacesource /usr/local/bin/virtualenvwrapper.sh</code></pre><p>修改后使之立即生效(也可以重启终端使之生效)： </p><pre><code>source ~/.bash_profile</code></pre><h3 id="4-2-虚拟环境使用方法："><a href="#4-2-虚拟环境使用方法：" class="headerlink" title="4.2 虚拟环境使用方法："></a><strong>4.2 虚拟环境使用方法：</strong></h3><p><strong>mkvirtualenv zqxt：创建运行环境zqxt</strong></p><p><strong>workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境</strong></p><p><strong>deactivate</strong>: 退出终端环境</p><p><strong>其它的：</strong></p><p><strong>rmvirtualenv</strong> ENV：删除运行环境ENV </p><p><strong>mkproject</strong> mic：创建mic项目和运行环境mic </p><p><strong>mktmpenv</strong>：创建临时运行环境 </p><p><strong>lsvirtualenv</strong>: 列出可用的运行环境 </p><p><strong>lssitepackages</strong>: 列出当前环境安装了的包 </p><p>创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="https://www.policx.com/categories/programing/"/>
    
    
      <category term="Django" scheme="https://www.policx.com/tags/Django/"/>
    
  </entry>
  
</feed>
